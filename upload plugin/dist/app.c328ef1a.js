// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"node_modules/tslib/tslib.es6.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.__extends = __extends;
exports.__rest = __rest;
exports.__decorate = __decorate;
exports.__param = __param;
exports.__metadata = __metadata;
exports.__awaiter = __awaiter;
exports.__generator = __generator;
exports.__exportStar = __exportStar;
exports.__values = __values;
exports.__read = __read;
exports.__spread = __spread;
exports.__spreadArrays = __spreadArrays;
exports.__spreadArray = __spreadArray;
exports.__await = __await;
exports.__asyncGenerator = __asyncGenerator;
exports.__asyncDelegator = __asyncDelegator;
exports.__asyncValues = __asyncValues;
exports.__makeTemplateObject = __makeTemplateObject;
exports.__importStar = __importStar;
exports.__importDefault = __importDefault;
exports.__classPrivateFieldGet = __classPrivateFieldGet;
exports.__classPrivateFieldSet = __classPrivateFieldSet;
exports.__createBinding = exports.__assign = void 0;

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

/* global Reflect, Promise */
var extendStatics = function (d, b) {
  extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
  };

  return extendStatics(d, b);
};

function __extends(d, b) {
  if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);

  function __() {
    this.constructor = d;
  }

  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function () {
  exports.__assign = __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

exports.__assign = __assign;

function __rest(s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}

function __decorate(decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
}

function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

function __generator(thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
}

var __createBinding = Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function () {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
};

exports.__createBinding = __createBinding;

function __exportStar(m, o) {
  for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}

function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator,
      m = s && o[s],
      i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function () {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
      r,
      ar = [],
      e;

  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }

  return ar;
}
/** @deprecated */


function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));

  return ar;
}
/** @deprecated */


function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;

  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];

  return r;
}

function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}

function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []),
      i,
      q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i;

  function verb(n) {
    if (g[n]) i[n] = function (v) {
      return new Promise(function (a, b) {
        q.push([n, v, a, b]) > 1 || resume(n, v);
      });
    };
  }

  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }

  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }

  function fulfill(value) {
    resume("next", value);
  }

  function reject(value) {
    resume("throw", value);
  }

  function settle(f, v) {
    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
}

function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function () {
    return this;
  }, i;

  function verb(n, f) {
    i[n] = o[n] ? function (v) {
      return (p = !p) ? {
        value: __await(o[n](v)),
        done: n === "return"
      } : f ? f(v) : v;
    } : f;
  }
}

function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator],
      i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i);

  function verb(n) {
    i[n] = o[n] && function (v) {
      return new Promise(function (resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }

  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function (v) {
      resolve({
        value: v,
        done: d
      });
    }, reject);
  }
}

function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", {
      value: raw
    });
  } else {
    cooked.raw = raw;
  }

  return cooked;
}

;

var __setModuleDefault = Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
};

function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);

  __setModuleDefault(result, mod);

  return result;
}

function __importDefault(mod) {
  return mod && mod.__esModule ? mod : {
    default: mod
  };
}

function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
},{}],"node_modules/@firebase/util/dist/index.esm.js":[function(require,module,exports) {
var global = arguments[3];
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.areCookiesEnabled = areCookiesEnabled;
exports.async = async;
exports.calculateBackoffMillis = calculateBackoffMillis;
exports.contains = contains;
exports.createMockUserToken = createMockUserToken;
exports.createSubscribe = createSubscribe;
exports.deepCopy = deepCopy;
exports.deepEqual = deepEqual;
exports.deepExtend = deepExtend;
exports.errorPrefix = errorPrefix;
exports.extractQuerystring = extractQuerystring;
exports.getGlobal = getGlobal;
exports.getModularInstance = getModularInstance;
exports.getUA = getUA;
exports.isBrowser = isBrowser;
exports.isBrowserExtension = isBrowserExtension;
exports.isElectron = isElectron;
exports.isEmpty = isEmpty;
exports.isIE = isIE;
exports.isIndexedDBAvailable = isIndexedDBAvailable;
exports.isMobileCordova = isMobileCordova;
exports.isNode = isNode;
exports.isNodeSdk = isNodeSdk;
exports.isReactNative = isReactNative;
exports.isSafari = isSafari;
exports.isUWP = isUWP;
exports.jsonEval = jsonEval;
exports.map = map;
exports.ordinal = ordinal;
exports.querystring = querystring;
exports.querystringDecode = querystringDecode;
exports.safeGet = safeGet;
exports.stringify = stringify;
exports.validateCallback = validateCallback;
exports.validateContextObject = validateContextObject;
exports.validateIndexedDBOpenable = validateIndexedDBOpenable;
exports.validateNamespace = validateNamespace;
exports.validateArgCount = exports.stringToByteArray = exports.stringLength = exports.issuedAtTime = exports.isValidTimestamp = exports.isValidFormat = exports.isAdmin = exports.decode = exports.base64urlEncodeWithoutPadding = exports.base64Encode = exports.base64Decode = exports.base64 = exports.assertionError = exports.assert = exports.Sha1 = exports.RANDOM_FACTOR = exports.MAX_VALUE_MILLIS = exports.FirebaseError = exports.ErrorFactory = exports.Deferred = exports.CONSTANTS = void 0;

var _tslib = require("tslib");

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.
 */
var CONSTANTS = {
  /**
   * @define {boolean} Whether this is the client Node.js SDK.
   */
  NODE_CLIENT: false,

  /**
   * @define {boolean} Whether this is the Admin Node.js SDK.
   */
  NODE_ADMIN: false,

  /**
   * Firebase SDK Version
   */
  SDK_VERSION: '${JSCORE_VERSION}'
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Throws an error if the provided assertion is falsy
 */

exports.CONSTANTS = CONSTANTS;

var assert = function (assertion, message) {
  if (!assertion) {
    throw assertionError(message);
  }
};
/**
 * Returns an Error object suitable for throwing.
 */


exports.assert = assert;

var assertionError = function (message) {
  return new Error('Firebase Database (' + CONSTANTS.SDK_VERSION + ') INTERNAL ASSERT FAILED: ' + message);
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


exports.assertionError = assertionError;

var stringToByteArray$1 = function (str) {
  // TODO(user): Use native implementations if/when available
  var out = [];
  var p = 0;

  for (var i = 0; i < str.length; i++) {
    var c = str.charCodeAt(i);

    if (c < 128) {
      out[p++] = c;
    } else if (c < 2048) {
      out[p++] = c >> 6 | 192;
      out[p++] = c & 63 | 128;
    } else if ((c & 0xfc00) === 0xd800 && i + 1 < str.length && (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {
      // Surrogate Pair
      c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);
      out[p++] = c >> 18 | 240;
      out[p++] = c >> 12 & 63 | 128;
      out[p++] = c >> 6 & 63 | 128;
      out[p++] = c & 63 | 128;
    } else {
      out[p++] = c >> 12 | 224;
      out[p++] = c >> 6 & 63 | 128;
      out[p++] = c & 63 | 128;
    }
  }

  return out;
};
/**
 * Turns an array of numbers into the string given by the concatenation of the
 * characters to which the numbers correspond.
 * @param bytes Array of numbers representing characters.
 * @return Stringification of the array.
 */


var byteArrayToString = function (bytes) {
  // TODO(user): Use native implementations if/when available
  var out = [];
  var pos = 0,
      c = 0;

  while (pos < bytes.length) {
    var c1 = bytes[pos++];

    if (c1 < 128) {
      out[c++] = String.fromCharCode(c1);
    } else if (c1 > 191 && c1 < 224) {
      var c2 = bytes[pos++];
      out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
    } else if (c1 > 239 && c1 < 365) {
      // Surrogate Pair
      var c2 = bytes[pos++];
      var c3 = bytes[pos++];
      var c4 = bytes[pos++];
      var u = ((c1 & 7) << 18 | (c2 & 63) << 12 | (c3 & 63) << 6 | c4 & 63) - 0x10000;
      out[c++] = String.fromCharCode(0xd800 + (u >> 10));
      out[c++] = String.fromCharCode(0xdc00 + (u & 1023));
    } else {
      var c2 = bytes[pos++];
      var c3 = bytes[pos++];
      out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
    }
  }

  return out.join('');
}; // We define it as an object literal instead of a class because a class compiled down to es5 can't
// be treeshaked. https://github.com/rollup/rollup/issues/1691
// Static lookup maps, lazily populated by init_()


var base64 = {
  /**
   * Maps bytes to characters.
   */
  byteToCharMap_: null,

  /**
   * Maps characters to bytes.
   */
  charToByteMap_: null,

  /**
   * Maps bytes to websafe characters.
   * @private
   */
  byteToCharMapWebSafe_: null,

  /**
   * Maps websafe characters to bytes.
   * @private
   */
  charToByteMapWebSafe_: null,

  /**
   * Our default alphabet, shared between
   * ENCODED_VALS and ENCODED_VALS_WEBSAFE
   */
  ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',

  /**
   * Our default alphabet. Value 64 (=) is special; it means "nothing."
   */
  get ENCODED_VALS() {
    return this.ENCODED_VALS_BASE + '+/=';
  },

  /**
   * Our websafe alphabet.
   */
  get ENCODED_VALS_WEBSAFE() {
    return this.ENCODED_VALS_BASE + '-_.';
  },

  /**
   * Whether this browser supports the atob and btoa functions. This extension
   * started at Mozilla but is now implemented by many browsers. We use the
   * ASSUME_* variables to avoid pulling in the full useragent detection library
   * but still allowing the standard per-browser compilations.
   *
   */
  HAS_NATIVE_SUPPORT: typeof atob === 'function',

  /**
   * Base64-encode an array of bytes.
   *
   * @param input An array of bytes (numbers with
   *     value in [0, 255]) to encode.
   * @param webSafe Boolean indicating we should use the
   *     alternative alphabet.
   * @return The base64 encoded string.
   */
  encodeByteArray: function (input, webSafe) {
    if (!Array.isArray(input)) {
      throw Error('encodeByteArray takes an array as a parameter');
    }

    this.init_();
    var byteToCharMap = webSafe ? this.byteToCharMapWebSafe_ : this.byteToCharMap_;
    var output = [];

    for (var i = 0; i < input.length; i += 3) {
      var byte1 = input[i];
      var haveByte2 = i + 1 < input.length;
      var byte2 = haveByte2 ? input[i + 1] : 0;
      var haveByte3 = i + 2 < input.length;
      var byte3 = haveByte3 ? input[i + 2] : 0;
      var outByte1 = byte1 >> 2;
      var outByte2 = (byte1 & 0x03) << 4 | byte2 >> 4;
      var outByte3 = (byte2 & 0x0f) << 2 | byte3 >> 6;
      var outByte4 = byte3 & 0x3f;

      if (!haveByte3) {
        outByte4 = 64;

        if (!haveByte2) {
          outByte3 = 64;
        }
      }

      output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
    }

    return output.join('');
  },

  /**
   * Base64-encode a string.
   *
   * @param input A string to encode.
   * @param webSafe If true, we should use the
   *     alternative alphabet.
   * @return The base64 encoded string.
   */
  encodeString: function (input, webSafe) {
    // Shortcut for Mozilla browsers that implement
    // a native base64 encoder in the form of "btoa/atob"
    if (this.HAS_NATIVE_SUPPORT && !webSafe) {
      return btoa(input);
    }

    return this.encodeByteArray(stringToByteArray$1(input), webSafe);
  },

  /**
   * Base64-decode a string.
   *
   * @param input to decode.
   * @param webSafe True if we should use the
   *     alternative alphabet.
   * @return string representing the decoded value.
   */
  decodeString: function (input, webSafe) {
    // Shortcut for Mozilla browsers that implement
    // a native base64 encoder in the form of "btoa/atob"
    if (this.HAS_NATIVE_SUPPORT && !webSafe) {
      return atob(input);
    }

    return byteArrayToString(this.decodeStringToByteArray(input, webSafe));
  },

  /**
   * Base64-decode a string.
   *
   * In base-64 decoding, groups of four characters are converted into three
   * bytes.  If the encoder did not apply padding, the input length may not
   * be a multiple of 4.
   *
   * In this case, the last group will have fewer than 4 characters, and
   * padding will be inferred.  If the group has one or two characters, it decodes
   * to one byte.  If the group has three characters, it decodes to two bytes.
   *
   * @param input Input to decode.
   * @param webSafe True if we should use the web-safe alphabet.
   * @return bytes representing the decoded value.
   */
  decodeStringToByteArray: function (input, webSafe) {
    this.init_();
    var charToByteMap = webSafe ? this.charToByteMapWebSafe_ : this.charToByteMap_;
    var output = [];

    for (var i = 0; i < input.length;) {
      var byte1 = charToByteMap[input.charAt(i++)];
      var haveByte2 = i < input.length;
      var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
      ++i;
      var haveByte3 = i < input.length;
      var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
      ++i;
      var haveByte4 = i < input.length;
      var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
      ++i;

      if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
        throw Error();
      }

      var outByte1 = byte1 << 2 | byte2 >> 4;
      output.push(outByte1);

      if (byte3 !== 64) {
        var outByte2 = byte2 << 4 & 0xf0 | byte3 >> 2;
        output.push(outByte2);

        if (byte4 !== 64) {
          var outByte3 = byte3 << 6 & 0xc0 | byte4;
          output.push(outByte3);
        }
      }
    }

    return output;
  },

  /**
   * Lazy static initialization function. Called before
   * accessing any of the static map variables.
   * @private
   */
  init_: function () {
    if (!this.byteToCharMap_) {
      this.byteToCharMap_ = {};
      this.charToByteMap_ = {};
      this.byteToCharMapWebSafe_ = {};
      this.charToByteMapWebSafe_ = {}; // We want quick mappings back and forth, so we precompute two maps.

      for (var i = 0; i < this.ENCODED_VALS.length; i++) {
        this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
        this.charToByteMap_[this.byteToCharMap_[i]] = i;
        this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
        this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i; // Be forgiving when decoding and correctly decode both encodings.

        if (i >= this.ENCODED_VALS_BASE.length) {
          this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
          this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
        }
      }
    }
  }
};
/**
 * URL-safe base64 encoding
 */

exports.base64 = base64;

var base64Encode = function (str) {
  var utf8Bytes = stringToByteArray$1(str);
  return base64.encodeByteArray(utf8Bytes, true);
};
/**
 * URL-safe base64 encoding (without "." padding in the end).
 * e.g. Used in JSON Web Token (JWT) parts.
 */


exports.base64Encode = base64Encode;

var base64urlEncodeWithoutPadding = function (str) {
  // Use base64url encoding and remove padding in the end (dot characters).
  return base64Encode(str).replace(/\./g, '');
};
/**
 * URL-safe base64 decoding
 *
 * NOTE: DO NOT use the global atob() function - it does NOT support the
 * base64Url variant encoding.
 *
 * @param str To be decoded
 * @return Decoded result, if possible
 */


exports.base64urlEncodeWithoutPadding = base64urlEncodeWithoutPadding;

var base64Decode = function (str) {
  try {
    return base64.decodeString(str, true);
  } catch (e) {
    console.error('base64Decode failed: ', e);
  }

  return null;
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Do a deep-copy of basic JavaScript Objects or Arrays.
 */


exports.base64Decode = base64Decode;

function deepCopy(value) {
  return deepExtend(undefined, value);
}
/**
 * Copy properties from source to target (recursively allows extension
 * of Objects and Arrays).  Scalar values in the target are over-written.
 * If target is undefined, an object of the appropriate type will be created
 * (and returned).
 *
 * We recursively copy all child properties of plain Objects in the source- so
 * that namespace- like dictionaries are merged.
 *
 * Note that the target can be a function, in which case the properties in
 * the source Object are copied onto it as static properties of the Function.
 *
 * Note: we don't merge __proto__ to prevent prototype pollution
 */


function deepExtend(target, source) {
  if (!(source instanceof Object)) {
    return source;
  }

  switch (source.constructor) {
    case Date:
      // Treat Dates like scalars; if the target date object had any child
      // properties - they will be lost!
      var dateValue = source;
      return new Date(dateValue.getTime());

    case Object:
      if (target === undefined) {
        target = {};
      }

      break;

    case Array:
      // Always copy the array source and overwrite the target.
      target = [];
      break;

    default:
      // Not a plain Object - treat it as a scalar.
      return source;
  }

  for (var prop in source) {
    // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202
    if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {
      continue;
    }

    target[prop] = deepExtend(target[prop], source[prop]);
  }

  return target;
}

function isValidKey(key) {
  return key !== '__proto__';
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var Deferred = function () {
  function Deferred() {
    var _this = this;

    this.reject = function () {};

    this.resolve = function () {};

    this.promise = new Promise(function (resolve, reject) {
      _this.resolve = resolve;
      _this.reject = reject;
    });
  }
  /**
   * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around
   * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
   * and returns a node-style callback which will resolve or reject the Deferred's promise.
   */


  Deferred.prototype.wrapCallback = function (callback) {
    var _this = this;

    return function (error, value) {
      if (error) {
        _this.reject(error);
      } else {
        _this.resolve(value);
      }

      if (typeof callback === 'function') {
        // Attaching noop handler just in case developer wasn't expecting
        // promises
        _this.promise.catch(function () {}); // Some of our callbacks don't expect a value and our own tests
        // assert that the parameter length is 1


        if (callback.length === 1) {
          callback(error);
        } else {
          callback(error, value);
        }
      }
    };
  };

  return Deferred;
}();
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


exports.Deferred = Deferred;

function createMockUserToken(token, projectId) {
  if (token.uid) {
    throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');
  } // Unsecured JWTs use "none" as the algorithm.


  var header = {
    alg: 'none',
    type: 'JWT'
  };
  var project = projectId || 'demo-project';
  var iat = token.iat || 0;
  var sub = token.sub || token.user_id;

  if (!sub) {
    throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");
  }

  var payload = (0, _tslib.__assign)({
    // Set all required fields to decent defaults
    iss: "https://securetoken.google.com/" + project,
    aud: project,
    iat: iat,
    exp: iat + 3600,
    auth_time: iat,
    sub: sub,
    user_id: sub,
    firebase: {
      sign_in_provider: 'custom',
      identities: {}
    }
  }, token); // Unsecured JWTs use the empty string as a signature.

  var signature = '';
  return [base64urlEncodeWithoutPadding(JSON.stringify(header)), base64urlEncodeWithoutPadding(JSON.stringify(payload)), signature].join('.');
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns navigator.userAgent string or '' if it's not defined.
 * @return user agent string
 */


function getUA() {
  if (typeof navigator !== 'undefined' && typeof navigator['userAgent'] === 'string') {
    return navigator['userAgent'];
  } else {
    return '';
  }
}
/**
 * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.
 *
 * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap
 * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally
 * wait for a callback.
 */


function isMobileCordova() {
  return typeof window !== 'undefined' && // @ts-ignore Setting up an broadly applicable index signature for Window
  // just to deal with this case would probably be a bad idea.
  !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) && /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA());
}
/**
 * Detect Node.js.
 *
 * @return true if Node.js environment is detected.
 */
// Node detection logic from: https://github.com/iliakan/detect-node/


function isNode() {
  try {
    return Object.prototype.toString.call(global.process) === '[object process]';
  } catch (e) {
    return false;
  }
}
/**
 * Detect Browser Environment
 */


function isBrowser() {
  return typeof self === 'object' && self.self === self;
}

function isBrowserExtension() {
  var runtime = typeof chrome === 'object' ? chrome.runtime : typeof browser === 'object' ? browser.runtime : undefined;
  return typeof runtime === 'object' && runtime.id !== undefined;
}
/**
 * Detect React Native.
 *
 * @return true if ReactNative environment is detected.
 */


function isReactNative() {
  return typeof navigator === 'object' && navigator['product'] === 'ReactNative';
}
/** Detects Electron apps. */


function isElectron() {
  return getUA().indexOf('Electron/') >= 0;
}
/** Detects Internet Explorer. */


function isIE() {
  var ua = getUA();
  return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;
}
/** Detects Universal Windows Platform apps. */


function isUWP() {
  return getUA().indexOf('MSAppHost/') >= 0;
}
/**
 * Detect whether the current SDK build is the Node version.
 *
 * @return true if it's the Node SDK build.
 */


function isNodeSdk() {
  return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;
}
/** Returns true if we are running in Safari. */


function isSafari() {
  return !isNode() && navigator.userAgent.includes('Safari') && !navigator.userAgent.includes('Chrome');
}
/**
 * This method checks if indexedDB is supported by current browser/service worker context
 * @return true if indexedDB is supported by current browser/service worker context
 */


function isIndexedDBAvailable() {
  return 'indexedDB' in self && indexedDB != null;
}
/**
 * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject
 * if errors occur during the database open operation.
 *
 * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox
 * private browsing)
 */


function validateIndexedDBOpenable() {
  return new Promise(function (resolve, reject) {
    try {
      var preExist_1 = true;
      var DB_CHECK_NAME_1 = 'validate-browser-context-for-indexeddb-analytics-module';
      var request_1 = self.indexedDB.open(DB_CHECK_NAME_1);

      request_1.onsuccess = function () {
        request_1.result.close(); // delete database only when it doesn't pre-exist

        if (!preExist_1) {
          self.indexedDB.deleteDatabase(DB_CHECK_NAME_1);
        }

        resolve(true);
      };

      request_1.onupgradeneeded = function () {
        preExist_1 = false;
      };

      request_1.onerror = function () {
        var _a;

        reject(((_a = request_1.error) === null || _a === void 0 ? void 0 : _a.message) || '');
      };
    } catch (error) {
      reject(error);
    }
  });
}
/**
 *
 * This method checks whether cookie is enabled within current browser
 * @return true if cookie is enabled within current browser
 */


function areCookiesEnabled() {
  if (!navigator || !navigator.cookieEnabled) {
    return false;
  }

  return true;
}
/**
 * Polyfill for `globalThis` object.
 * @returns the `globalThis` object for the given environment.
 */


function getGlobal() {
  if (typeof self !== 'undefined') {
    return self;
  }

  if (typeof window !== 'undefined') {
    return window;
  }

  if (typeof global !== 'undefined') {
    return global;
  }

  throw new Error('Unable to locate global object.');
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var ERROR_NAME = 'FirebaseError'; // Based on code from:
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types

var FirebaseError = function (_super) {
  (0, _tslib.__extends)(FirebaseError, _super);

  function FirebaseError(code, message, customData) {
    var _this = _super.call(this, message) || this;

    _this.code = code;
    _this.customData = customData;
    _this.name = ERROR_NAME; // Fix For ES5
    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work

    Object.setPrototypeOf(_this, FirebaseError.prototype); // Maintains proper stack trace for where our error was thrown.
    // Only available on V8.

    if (Error.captureStackTrace) {
      Error.captureStackTrace(_this, ErrorFactory.prototype.create);
    }

    return _this;
  }

  return FirebaseError;
}(Error);

exports.FirebaseError = FirebaseError;

var ErrorFactory = function () {
  function ErrorFactory(service, serviceName, errors) {
    this.service = service;
    this.serviceName = serviceName;
    this.errors = errors;
  }

  ErrorFactory.prototype.create = function (code) {
    var data = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      data[_i - 1] = arguments[_i];
    }

    var customData = data[0] || {};
    var fullCode = this.service + "/" + code;
    var template = this.errors[code];
    var message = template ? replaceTemplate(template, customData) : 'Error'; // Service Name: Error message (service/code).

    var fullMessage = this.serviceName + ": " + message + " (" + fullCode + ").";
    var error = new FirebaseError(fullCode, fullMessage, customData);
    return error;
  };

  return ErrorFactory;
}();

exports.ErrorFactory = ErrorFactory;

function replaceTemplate(template, data) {
  return template.replace(PATTERN, function (_, key) {
    var value = data[key];
    return value != null ? String(value) : "<" + key + "?>";
  });
}

var PATTERN = /\{\$([^}]+)}/g;
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Evaluates a JSON string into a javascript object.
 *
 * @param {string} str A string containing JSON.
 * @return {*} The javascript object representing the specified JSON.
 */

function jsonEval(str) {
  return JSON.parse(str);
}
/**
 * Returns JSON representing a javascript object.
 * @param {*} data Javascript object to be stringified.
 * @return {string} The JSON contents of the object.
 */


function stringify(data) {
  return JSON.stringify(data);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Decodes a Firebase auth. token into constituent parts.
 *
 * Notes:
 * - May return with invalid / incomplete claims if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */


var decode = function (token) {
  var header = {},
      claims = {},
      data = {},
      signature = '';

  try {
    var parts = token.split('.');
    header = jsonEval(base64Decode(parts[0]) || '');
    claims = jsonEval(base64Decode(parts[1]) || '');
    signature = parts[2];
    data = claims['d'] || {};
    delete claims['d'];
  } catch (e) {}

  return {
    header: header,
    claims: claims,
    data: data,
    signature: signature
  };
};
/**
 * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the
 * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */


exports.decode = decode;

var isValidTimestamp = function (token) {
  var claims = decode(token).claims;
  var now = Math.floor(new Date().getTime() / 1000);
  var validSince = 0,
      validUntil = 0;

  if (typeof claims === 'object') {
    if (claims.hasOwnProperty('nbf')) {
      validSince = claims['nbf'];
    } else if (claims.hasOwnProperty('iat')) {
      validSince = claims['iat'];
    }

    if (claims.hasOwnProperty('exp')) {
      validUntil = claims['exp'];
    } else {
      // token will expire after 24h by default
      validUntil = validSince + 86400;
    }
  }

  return !!now && !!validSince && !!validUntil && now >= validSince && now <= validUntil;
};
/**
 * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.
 *
 * Notes:
 * - May return null if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */


exports.isValidTimestamp = isValidTimestamp;

var issuedAtTime = function (token) {
  var claims = decode(token).claims;

  if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {
    return claims['iat'];
  }

  return null;
};
/**
 * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */


exports.issuedAtTime = issuedAtTime;

var isValidFormat = function (token) {
  var decoded = decode(token),
      claims = decoded.claims;
  return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');
};
/**
 * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */


exports.isValidFormat = isValidFormat;

var isAdmin = function (token) {
  var claims = decode(token).claims;
  return typeof claims === 'object' && claims['admin'] === true;
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


exports.isAdmin = isAdmin;

function contains(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}

function safeGet(obj, key) {
  if (Object.prototype.hasOwnProperty.call(obj, key)) {
    return obj[key];
  } else {
    return undefined;
  }
}

function isEmpty(obj) {
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      return false;
    }
  }

  return true;
}

function map(obj, fn, contextObj) {
  var res = {};

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      res[key] = fn.call(contextObj, obj[key], key, obj);
    }
  }

  return res;
}
/**
 * Deep equal two objects. Support Arrays and Objects.
 */


function deepEqual(a, b) {
  if (a === b) {
    return true;
  }

  var aKeys = Object.keys(a);
  var bKeys = Object.keys(b);

  for (var _i = 0, aKeys_1 = aKeys; _i < aKeys_1.length; _i++) {
    var k = aKeys_1[_i];

    if (!bKeys.includes(k)) {
      return false;
    }

    var aProp = a[k];
    var bProp = b[k];

    if (isObject(aProp) && isObject(bProp)) {
      if (!deepEqual(aProp, bProp)) {
        return false;
      }
    } else if (aProp !== bProp) {
      return false;
    }
  }

  for (var _a = 0, bKeys_1 = bKeys; _a < bKeys_1.length; _a++) {
    var k = bKeys_1[_a];

    if (!aKeys.includes(k)) {
      return false;
    }
  }

  return true;
}

function isObject(thing) {
  return thing !== null && typeof thing === 'object';
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a
 * params object (e.g. {arg: 'val', arg2: 'val2'})
 * Note: You must prepend it with ? when adding it to a URL.
 */


function querystring(querystringParams) {
  var params = [];

  var _loop_1 = function (key, value) {
    if (Array.isArray(value)) {
      value.forEach(function (arrayVal) {
        params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));
      });
    } else {
      params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
    }
  };

  for (var _i = 0, _a = Object.entries(querystringParams); _i < _a.length; _i++) {
    var _b = _a[_i],
        key = _b[0],
        value = _b[1];

    _loop_1(key, value);
  }

  return params.length ? '&' + params.join('&') : '';
}
/**
 * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object
 * (e.g. {arg: 'val', arg2: 'val2'})
 */


function querystringDecode(querystring) {
  var obj = {};
  var tokens = querystring.replace(/^\?/, '').split('&');
  tokens.forEach(function (token) {
    if (token) {
      var _a = token.split('='),
          key = _a[0],
          value = _a[1];

      obj[decodeURIComponent(key)] = decodeURIComponent(value);
    }
  });
  return obj;
}
/**
 * Extract the query string part of a URL, including the leading question mark (if present).
 */


function extractQuerystring(url) {
  var queryStart = url.indexOf('?');

  if (!queryStart) {
    return '';
  }

  var fragmentStart = url.indexOf('#', queryStart);
  return url.substring(queryStart, fragmentStart > 0 ? fragmentStart : undefined);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @fileoverview SHA-1 cryptographic hash.
 * Variable names follow the notation in FIPS PUB 180-3:
 * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.
 *
 * Usage:
 *   var sha1 = new sha1();
 *   sha1.update(bytes);
 *   var hash = sha1.digest();
 *
 * Performance:
 *   Chrome 23:   ~400 Mbit/s
 *   Firefox 16:  ~250 Mbit/s
 *
 */

/**
 * SHA-1 cryptographic hash constructor.
 *
 * The properties declared here are discussed in the above algorithm document.
 * @constructor
 * @final
 * @struct
 */


var Sha1 = function () {
  function Sha1() {
    /**
     * Holds the previous values of accumulated variables a-e in the compress_
     * function.
     * @private
     */
    this.chain_ = [];
    /**
     * A buffer holding the partially computed hash result.
     * @private
     */

    this.buf_ = [];
    /**
     * An array of 80 bytes, each a part of the message to be hashed.  Referred to
     * as the message schedule in the docs.
     * @private
     */

    this.W_ = [];
    /**
     * Contains data needed to pad messages less than 64 bytes.
     * @private
     */

    this.pad_ = [];
    /**
     * @private {number}
     */

    this.inbuf_ = 0;
    /**
     * @private {number}
     */

    this.total_ = 0;
    this.blockSize = 512 / 8;
    this.pad_[0] = 128;

    for (var i = 1; i < this.blockSize; ++i) {
      this.pad_[i] = 0;
    }

    this.reset();
  }

  Sha1.prototype.reset = function () {
    this.chain_[0] = 0x67452301;
    this.chain_[1] = 0xefcdab89;
    this.chain_[2] = 0x98badcfe;
    this.chain_[3] = 0x10325476;
    this.chain_[4] = 0xc3d2e1f0;
    this.inbuf_ = 0;
    this.total_ = 0;
  };
  /**
   * Internal compress helper function.
   * @param buf Block to compress.
   * @param offset Offset of the block in the buffer.
   * @private
   */


  Sha1.prototype.compress_ = function (buf, offset) {
    if (!offset) {
      offset = 0;
    }

    var W = this.W_; // get 16 big endian words

    if (typeof buf === 'string') {
      for (var i = 0; i < 16; i++) {
        // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS
        // have a bug that turns the post-increment ++ operator into pre-increment
        // during JIT compilation.  We have code that depends heavily on SHA-1 for
        // correctness and which is affected by this bug, so I've removed all uses
        // of post-increment ++ in which the result value is used.  We can revert
        // this change once the Safari bug
        // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and
        // most clients have been updated.
        W[i] = buf.charCodeAt(offset) << 24 | buf.charCodeAt(offset + 1) << 16 | buf.charCodeAt(offset + 2) << 8 | buf.charCodeAt(offset + 3);
        offset += 4;
      }
    } else {
      for (var i = 0; i < 16; i++) {
        W[i] = buf[offset] << 24 | buf[offset + 1] << 16 | buf[offset + 2] << 8 | buf[offset + 3];
        offset += 4;
      }
    } // expand to 80 words


    for (var i = 16; i < 80; i++) {
      var t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
      W[i] = (t << 1 | t >>> 31) & 0xffffffff;
    }

    var a = this.chain_[0];
    var b = this.chain_[1];
    var c = this.chain_[2];
    var d = this.chain_[3];
    var e = this.chain_[4];
    var f, k; // TODO(user): Try to unroll this loop to speed up the computation.

    for (var i = 0; i < 80; i++) {
      if (i < 40) {
        if (i < 20) {
          f = d ^ b & (c ^ d);
          k = 0x5a827999;
        } else {
          f = b ^ c ^ d;
          k = 0x6ed9eba1;
        }
      } else {
        if (i < 60) {
          f = b & c | d & (b | c);
          k = 0x8f1bbcdc;
        } else {
          f = b ^ c ^ d;
          k = 0xca62c1d6;
        }
      }

      var t = (a << 5 | a >>> 27) + f + e + k + W[i] & 0xffffffff;
      e = d;
      d = c;
      c = (b << 30 | b >>> 2) & 0xffffffff;
      b = a;
      a = t;
    }

    this.chain_[0] = this.chain_[0] + a & 0xffffffff;
    this.chain_[1] = this.chain_[1] + b & 0xffffffff;
    this.chain_[2] = this.chain_[2] + c & 0xffffffff;
    this.chain_[3] = this.chain_[3] + d & 0xffffffff;
    this.chain_[4] = this.chain_[4] + e & 0xffffffff;
  };

  Sha1.prototype.update = function (bytes, length) {
    // TODO(johnlenz): tighten the function signature and remove this check
    if (bytes == null) {
      return;
    }

    if (length === undefined) {
      length = bytes.length;
    }

    var lengthMinusBlock = length - this.blockSize;
    var n = 0; // Using local instead of member variables gives ~5% speedup on Firefox 16.

    var buf = this.buf_;
    var inbuf = this.inbuf_; // The outer while loop should execute at most twice.

    while (n < length) {
      // When we have no data in the block to top up, we can directly process the
      // input buffer (assuming it contains sufficient data). This gives ~25%
      // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that
      // the data is provided in large chunks (or in multiples of 64 bytes).
      if (inbuf === 0) {
        while (n <= lengthMinusBlock) {
          this.compress_(bytes, n);
          n += this.blockSize;
        }
      }

      if (typeof bytes === 'string') {
        while (n < length) {
          buf[inbuf] = bytes.charCodeAt(n);
          ++inbuf;
          ++n;

          if (inbuf === this.blockSize) {
            this.compress_(buf);
            inbuf = 0; // Jump to the outer loop so we use the full-block optimization.

            break;
          }
        }
      } else {
        while (n < length) {
          buf[inbuf] = bytes[n];
          ++inbuf;
          ++n;

          if (inbuf === this.blockSize) {
            this.compress_(buf);
            inbuf = 0; // Jump to the outer loop so we use the full-block optimization.

            break;
          }
        }
      }
    }

    this.inbuf_ = inbuf;
    this.total_ += length;
  };
  /** @override */


  Sha1.prototype.digest = function () {
    var digest = [];
    var totalBits = this.total_ * 8; // Add pad 0x80 0x00*.

    if (this.inbuf_ < 56) {
      this.update(this.pad_, 56 - this.inbuf_);
    } else {
      this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));
    } // Add # bits.


    for (var i = this.blockSize - 1; i >= 56; i--) {
      this.buf_[i] = totalBits & 255;
      totalBits /= 256; // Don't use bit-shifting here!
    }

    this.compress_(this.buf_);
    var n = 0;

    for (var i = 0; i < 5; i++) {
      for (var j = 24; j >= 0; j -= 8) {
        digest[n] = this.chain_[i] >> j & 255;
        ++n;
      }
    }

    return digest;
  };

  return Sha1;
}();
/**
 * Helper to make a Subscribe function (just like Promise helps make a
 * Thenable).
 *
 * @param executor Function which can make calls to a single Observer
 *     as a proxy.
 * @param onNoObservers Callback when count of Observers goes to zero.
 */


exports.Sha1 = Sha1;

function createSubscribe(executor, onNoObservers) {
  var proxy = new ObserverProxy(executor, onNoObservers);
  return proxy.subscribe.bind(proxy);
}
/**
 * Implement fan-out for any number of Observers attached via a subscribe
 * function.
 */


var ObserverProxy = function () {
  /**
   * @param executor Function which can make calls to a single Observer
   *     as a proxy.
   * @param onNoObservers Callback when count of Observers goes to zero.
   */
  function ObserverProxy(executor, onNoObservers) {
    var _this = this;

    this.observers = [];
    this.unsubscribes = [];
    this.observerCount = 0; // Micro-task scheduling by calling task.then().

    this.task = Promise.resolve();
    this.finalized = false;
    this.onNoObservers = onNoObservers; // Call the executor asynchronously so subscribers that are called
    // synchronously after the creation of the subscribe function
    // can still receive the very first value generated in the executor.

    this.task.then(function () {
      executor(_this);
    }).catch(function (e) {
      _this.error(e);
    });
  }

  ObserverProxy.prototype.next = function (value) {
    this.forEachObserver(function (observer) {
      observer.next(value);
    });
  };

  ObserverProxy.prototype.error = function (error) {
    this.forEachObserver(function (observer) {
      observer.error(error);
    });
    this.close(error);
  };

  ObserverProxy.prototype.complete = function () {
    this.forEachObserver(function (observer) {
      observer.complete();
    });
    this.close();
  };
  /**
   * Subscribe function that can be used to add an Observer to the fan-out list.
   *
   * - We require that no event is sent to a subscriber sychronously to their
   *   call to subscribe().
   */


  ObserverProxy.prototype.subscribe = function (nextOrObserver, error, complete) {
    var _this = this;

    var observer;

    if (nextOrObserver === undefined && error === undefined && complete === undefined) {
      throw new Error('Missing Observer.');
    } // Assemble an Observer object when passed as callback functions.


    if (implementsAnyMethods(nextOrObserver, ['next', 'error', 'complete'])) {
      observer = nextOrObserver;
    } else {
      observer = {
        next: nextOrObserver,
        error: error,
        complete: complete
      };
    }

    if (observer.next === undefined) {
      observer.next = noop;
    }

    if (observer.error === undefined) {
      observer.error = noop;
    }

    if (observer.complete === undefined) {
      observer.complete = noop;
    }

    var unsub = this.unsubscribeOne.bind(this, this.observers.length); // Attempt to subscribe to a terminated Observable - we
    // just respond to the Observer with the final error or complete
    // event.

    if (this.finalized) {
      // eslint-disable-next-line @typescript-eslint/no-floating-promises
      this.task.then(function () {
        try {
          if (_this.finalError) {
            observer.error(_this.finalError);
          } else {
            observer.complete();
          }
        } catch (e) {// nothing
        }

        return;
      });
    }

    this.observers.push(observer);
    return unsub;
  }; // Unsubscribe is synchronous - we guarantee that no events are sent to
  // any unsubscribed Observer.


  ObserverProxy.prototype.unsubscribeOne = function (i) {
    if (this.observers === undefined || this.observers[i] === undefined) {
      return;
    }

    delete this.observers[i];
    this.observerCount -= 1;

    if (this.observerCount === 0 && this.onNoObservers !== undefined) {
      this.onNoObservers(this);
    }
  };

  ObserverProxy.prototype.forEachObserver = function (fn) {
    if (this.finalized) {
      // Already closed by previous event....just eat the additional values.
      return;
    } // Since sendOne calls asynchronously - there is no chance that
    // this.observers will become undefined.


    for (var i = 0; i < this.observers.length; i++) {
      this.sendOne(i, fn);
    }
  }; // Call the Observer via one of it's callback function. We are careful to
  // confirm that the observe has not been unsubscribed since this asynchronous
  // function had been queued.


  ObserverProxy.prototype.sendOne = function (i, fn) {
    var _this = this; // Execute the callback asynchronously
    // eslint-disable-next-line @typescript-eslint/no-floating-promises


    this.task.then(function () {
      if (_this.observers !== undefined && _this.observers[i] !== undefined) {
        try {
          fn(_this.observers[i]);
        } catch (e) {
          // Ignore exceptions raised in Observers or missing methods of an
          // Observer.
          // Log error to console. b/31404806
          if (typeof console !== 'undefined' && console.error) {
            console.error(e);
          }
        }
      }
    });
  };

  ObserverProxy.prototype.close = function (err) {
    var _this = this;

    if (this.finalized) {
      return;
    }

    this.finalized = true;

    if (err !== undefined) {
      this.finalError = err;
    } // Proxy is no longer needed - garbage collect references
    // eslint-disable-next-line @typescript-eslint/no-floating-promises


    this.task.then(function () {
      _this.observers = undefined;
      _this.onNoObservers = undefined;
    });
  };

  return ObserverProxy;
}();
/** Turn synchronous function into one called asynchronously. */
// eslint-disable-next-line @typescript-eslint/ban-types


function async(fn, onError) {
  return function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    Promise.resolve(true).then(function () {
      fn.apply(void 0, args);
    }).catch(function (error) {
      if (onError) {
        onError(error);
      }
    });
  };
}
/**
 * Return true if the object passed in implements any of the named methods.
 */


function implementsAnyMethods(obj, methods) {
  if (typeof obj !== 'object' || obj === null) {
    return false;
  }

  for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {
    var method = methods_1[_i];

    if (method in obj && typeof obj[method] === 'function') {
      return true;
    }
  }

  return false;
}

function noop() {// do nothing
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Check to make sure the appropriate number of arguments are provided for a public function.
 * Throws an error if it fails.
 *
 * @param fnName The function name
 * @param minCount The minimum number of arguments to allow for the function call
 * @param maxCount The maximum number of argument to allow for the function call
 * @param argCount The actual number of arguments provided.
 */


var validateArgCount = function (fnName, minCount, maxCount, argCount) {
  var argError;

  if (argCount < minCount) {
    argError = 'at least ' + minCount;
  } else if (argCount > maxCount) {
    argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;
  }

  if (argError) {
    var error = fnName + ' failed: Was called with ' + argCount + (argCount === 1 ? ' argument.' : ' arguments.') + ' Expects ' + argError + '.';
    throw new Error(error);
  }
};
/**
 * Generates a string to prefix an error message about failed argument validation
 *
 * @param fnName The function name
 * @param argName The name of the argument
 * @return The prefix to add to the error thrown for validation.
 */


exports.validateArgCount = validateArgCount;

function errorPrefix(fnName, argName) {
  return fnName + " failed: " + argName + " argument ";
}
/**
 * @param fnName
 * @param argumentNumber
 * @param namespace
 * @param optional
 */


function validateNamespace(fnName, namespace, optional) {
  if (optional && !namespace) {
    return;
  }

  if (typeof namespace !== 'string') {
    //TODO: I should do more validation here. We only allow certain chars in namespaces.
    throw new Error(errorPrefix(fnName, 'namespace') + 'must be a valid firebase namespace.');
  }
}

function validateCallback(fnName, argumentName, // eslint-disable-next-line @typescript-eslint/ban-types
callback, optional) {
  if (optional && !callback) {
    return;
  }

  if (typeof callback !== 'function') {
    throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid function.');
  }
}

function validateContextObject(fnName, argumentName, context, optional) {
  if (optional && !context) {
    return;
  }

  if (typeof context !== 'object' || context === null) {
    throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid context object.');
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they
// automatically replaced '\r\n' with '\n', and they didn't handle surrogate pairs,
// so it's been modified.
// Note that not all Unicode characters appear as single characters in JavaScript strings.
// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters
// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first
// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate
// pair).
// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3

/**
 * @param {string} str
 * @return {Array}
 */


var stringToByteArray = function (str) {
  var out = [];
  var p = 0;

  for (var i = 0; i < str.length; i++) {
    var c = str.charCodeAt(i); // Is this the lead surrogate in a surrogate pair?

    if (c >= 0xd800 && c <= 0xdbff) {
      var high = c - 0xd800; // the high 10 bits.

      i++;
      assert(i < str.length, 'Surrogate pair missing trail surrogate.');
      var low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.

      c = 0x10000 + (high << 10) + low;
    }

    if (c < 128) {
      out[p++] = c;
    } else if (c < 2048) {
      out[p++] = c >> 6 | 192;
      out[p++] = c & 63 | 128;
    } else if (c < 65536) {
      out[p++] = c >> 12 | 224;
      out[p++] = c >> 6 & 63 | 128;
      out[p++] = c & 63 | 128;
    } else {
      out[p++] = c >> 18 | 240;
      out[p++] = c >> 12 & 63 | 128;
      out[p++] = c >> 6 & 63 | 128;
      out[p++] = c & 63 | 128;
    }
  }

  return out;
};
/**
 * Calculate length without actually converting; useful for doing cheaper validation.
 * @param {string} str
 * @return {number}
 */


exports.stringToByteArray = stringToByteArray;

var stringLength = function (str) {
  var p = 0;

  for (var i = 0; i < str.length; i++) {
    var c = str.charCodeAt(i);

    if (c < 128) {
      p++;
    } else if (c < 2048) {
      p += 2;
    } else if (c >= 0xd800 && c <= 0xdbff) {
      // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.
      p += 4;
      i++; // skip trail surrogate.
    } else {
      p += 3;
    }
  }

  return p;
};
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The amount of milliseconds to exponentially increase.
 */


exports.stringLength = stringLength;
var DEFAULT_INTERVAL_MILLIS = 1000;
/**
 * The factor to backoff by.
 * Should be a number greater than 1.
 */

var DEFAULT_BACKOFF_FACTOR = 2;
/**
 * The maximum milliseconds to increase to.
 *
 * <p>Visible for testing
 */

var MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000; // Four hours, like iOS and Android.

/**
 * The percentage of backoff time to randomize by.
 * See
 * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic
 * for context.
 *
 * <p>Visible for testing
 */

exports.MAX_VALUE_MILLIS = MAX_VALUE_MILLIS;
var RANDOM_FACTOR = 0.5;
/**
 * Based on the backoff method from
 * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.
 * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.
 */

exports.RANDOM_FACTOR = RANDOM_FACTOR;

function calculateBackoffMillis(backoffCount, intervalMillis, backoffFactor) {
  if (intervalMillis === void 0) {
    intervalMillis = DEFAULT_INTERVAL_MILLIS;
  }

  if (backoffFactor === void 0) {
    backoffFactor = DEFAULT_BACKOFF_FACTOR;
  } // Calculates an exponentially increasing value.
  // Deviation: calculates value from count and a constant interval, so we only need to save value
  // and count to restore state.


  var currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount); // A random "fuzz" to avoid waves of retries.
  // Deviation: randomFactor is required.

  var randomWait = Math.round( // A fraction of the backoff value to add/subtract.
  // Deviation: changes multiplication order to improve readability.
  RANDOM_FACTOR * currBaseValue * (Math.random() - 0.5) * 2); // Limits backoff to max to avoid effectively permanent backoff.

  return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Provide English ordinal letters after a number
 */


function ordinal(i) {
  if (!Number.isFinite(i)) {
    return "" + i;
  }

  return i + indicator(i);
}

function indicator(i) {
  i = Math.abs(i);
  var cent = i % 100;

  if (cent >= 10 && cent <= 20) {
    return 'th';
  }

  var dec = i % 10;

  if (dec === 1) {
    return 'st';
  }

  if (dec === 2) {
    return 'nd';
  }

  if (dec === 3) {
    return 'rd';
  }

  return 'th';
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function getModularInstance(service) {
  if (service && service._delegate) {
    return service._delegate;
  } else {
    return service;
  }
}
},{"tslib":"node_modules/tslib/tslib.es6.js"}],"node_modules/@firebase/component/dist/index.esm.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Provider = exports.ComponentContainer = exports.Component = void 0;

var _tslib = require("tslib");

var _util = require("@firebase/util");

/**
 * Component for service name T, e.g. `auth`, `auth-internal`
 */
var Component = function () {
  /**
   *
   * @param name The public service name, e.g. app, auth, firestore, database
   * @param instanceFactory Service factory responsible for creating the public interface
   * @param type whether the service provided by the component is public or private
   */
  function Component(name, instanceFactory, type) {
    this.name = name;
    this.instanceFactory = instanceFactory;
    this.type = type;
    this.multipleInstances = false;
    /**
     * Properties to be added to the service namespace
     */

    this.serviceProps = {};
    this.instantiationMode = "LAZY"
    /* LAZY */
    ;
    this.onInstanceCreated = null;
  }

  Component.prototype.setInstantiationMode = function (mode) {
    this.instantiationMode = mode;
    return this;
  };

  Component.prototype.setMultipleInstances = function (multipleInstances) {
    this.multipleInstances = multipleInstances;
    return this;
  };

  Component.prototype.setServiceProps = function (props) {
    this.serviceProps = props;
    return this;
  };

  Component.prototype.setInstanceCreatedCallback = function (callback) {
    this.onInstanceCreated = callback;
    return this;
  };

  return Component;
}();
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


exports.Component = Component;
var DEFAULT_ENTRY_NAME = '[DEFAULT]';
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Provider for instance for service name T, e.g. 'auth', 'auth-internal'
 * NameServiceMapping[T] is an alias for the type of the instance
 */

var Provider = function () {
  function Provider(name, container) {
    this.name = name;
    this.container = container;
    this.component = null;
    this.instances = new Map();
    this.instancesDeferred = new Map();
    this.instancesOptions = new Map();
    this.onInitCallbacks = new Map();
  }
  /**
   * @param identifier A provider can provide mulitple instances of a service
   * if this.component.multipleInstances is true.
   */


  Provider.prototype.get = function (identifier) {
    // if multipleInstances is not supported, use the default name
    var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);

    if (!this.instancesDeferred.has(normalizedIdentifier)) {
      var deferred = new _util.Deferred();
      this.instancesDeferred.set(normalizedIdentifier, deferred);

      if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {
        // initialize the service if it can be auto-initialized
        try {
          var instance = this.getOrInitializeService({
            instanceIdentifier: normalizedIdentifier
          });

          if (instance) {
            deferred.resolve(instance);
          }
        } catch (e) {// when the instance factory throws an exception during get(), it should not cause
          // a fatal error. We just return the unresolved promise in this case.
        }
      }
    }

    return this.instancesDeferred.get(normalizedIdentifier).promise;
  };

  Provider.prototype.getImmediate = function (options) {
    var _a; // if multipleInstances is not supported, use the default name


    var normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);
    var optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;

    if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {
      try {
        return this.getOrInitializeService({
          instanceIdentifier: normalizedIdentifier
        });
      } catch (e) {
        if (optional) {
          return null;
        } else {
          throw e;
        }
      }
    } else {
      // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw
      if (optional) {
        return null;
      } else {
        throw Error("Service " + this.name + " is not available");
      }
    }
  };

  Provider.prototype.getComponent = function () {
    return this.component;
  };

  Provider.prototype.setComponent = function (component) {
    var e_1, _a;

    if (component.name !== this.name) {
      throw Error("Mismatching Component " + component.name + " for Provider " + this.name + ".");
    }

    if (this.component) {
      throw Error("Component for " + this.name + " has already been provided");
    }

    this.component = component; // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)

    if (!this.shouldAutoInitialize()) {
      return;
    } // if the service is eager, initialize the default instance


    if (isComponentEager(component)) {
      try {
        this.getOrInitializeService({
          instanceIdentifier: DEFAULT_ENTRY_NAME
        });
      } catch (e) {// when the instance factory for an eager Component throws an exception during the eager
        // initialization, it should not cause a fatal error.
        // TODO: Investigate if we need to make it configurable, because some component may want to cause
        // a fatal error in this case?
      }
    }

    try {
      // Create service instances for the pending promises and resolve them
      // NOTE: if this.multipleInstances is false, only the default instance will be created
      // and all promises with resolve with it regardless of the identifier.
      for (var _b = (0, _tslib.__values)(this.instancesDeferred.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
        var _d = (0, _tslib.__read)(_c.value, 2),
            instanceIdentifier = _d[0],
            instanceDeferred = _d[1];

        var normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);

        try {
          // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.
          var instance = this.getOrInitializeService({
            instanceIdentifier: normalizedIdentifier
          });
          instanceDeferred.resolve(instance);
        } catch (e) {// when the instance factory throws an exception, it should not cause
          // a fatal error. We just leave the promise unresolved.
        }
      }
    } catch (e_1_1) {
      e_1 = {
        error: e_1_1
      };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
      } finally {
        if (e_1) throw e_1.error;
      }
    }
  };

  Provider.prototype.clearInstance = function (identifier) {
    if (identifier === void 0) {
      identifier = DEFAULT_ENTRY_NAME;
    }

    this.instancesDeferred.delete(identifier);
    this.instancesOptions.delete(identifier);
    this.instances.delete(identifier);
  }; // app.delete() will call this method on every provider to delete the services
  // TODO: should we mark the provider as deleted?


  Provider.prototype.delete = function () {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var services;
      return (0, _tslib.__generator)(this, function (_a) {
        switch (_a.label) {
          case 0:
            services = Array.from(this.instances.values());
            return [4
            /*yield*/
            , Promise.all((0, _tslib.__spreadArray)((0, _tslib.__spreadArray)([], (0, _tslib.__read)(services.filter(function (service) {
              return 'INTERNAL' in service;
            }) // legacy services
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            .map(function (service) {
              return service.INTERNAL.delete();
            }))), (0, _tslib.__read)(services.filter(function (service) {
              return '_delete' in service;
            }) // modularized services
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            .map(function (service) {
              return service._delete();
            }))))];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };

  Provider.prototype.isComponentSet = function () {
    return this.component != null;
  };

  Provider.prototype.isInitialized = function (identifier) {
    if (identifier === void 0) {
      identifier = DEFAULT_ENTRY_NAME;
    }

    return this.instances.has(identifier);
  };

  Provider.prototype.getOptions = function (identifier) {
    if (identifier === void 0) {
      identifier = DEFAULT_ENTRY_NAME;
    }

    return this.instancesOptions.get(identifier) || {};
  };

  Provider.prototype.initialize = function (opts) {
    var e_2, _a;

    if (opts === void 0) {
      opts = {};
    }

    var _b = opts.options,
        options = _b === void 0 ? {} : _b;
    var normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);

    if (this.isInitialized(normalizedIdentifier)) {
      throw Error(this.name + "(" + normalizedIdentifier + ") has already been initialized");
    }

    if (!this.isComponentSet()) {
      throw Error("Component " + this.name + " has not been registered yet");
    }

    var instance = this.getOrInitializeService({
      instanceIdentifier: normalizedIdentifier,
      options: options
    });

    try {
      // resolve any pending promise waiting for the service instance
      for (var _c = (0, _tslib.__values)(this.instancesDeferred.entries()), _d = _c.next(); !_d.done; _d = _c.next()) {
        var _e = (0, _tslib.__read)(_d.value, 2),
            instanceIdentifier = _e[0],
            instanceDeferred = _e[1];

        var normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);

        if (normalizedIdentifier === normalizedDeferredIdentifier) {
          instanceDeferred.resolve(instance);
        }
      }
    } catch (e_2_1) {
      e_2 = {
        error: e_2_1
      };
    } finally {
      try {
        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
      } finally {
        if (e_2) throw e_2.error;
      }
    }

    return instance;
  };
  /**
   *
   * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().
   * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.
   *
   * @param identifier An optional instance identifier
   * @returns a function to unregister the callback
   */


  Provider.prototype.onInit = function (callback, identifier) {
    var _a;

    var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
    var existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();
    existingCallbacks.add(callback);
    this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);
    var existingInstance = this.instances.get(normalizedIdentifier);

    if (existingInstance) {
      callback(existingInstance, normalizedIdentifier);
    }

    return function () {
      existingCallbacks.delete(callback);
    };
  };
  /**
   * Invoke onInit callbacks synchronously
   * @param instance the service instance`
   */


  Provider.prototype.invokeOnInitCallbacks = function (instance, identifier) {
    var e_3, _a;

    var callbacks = this.onInitCallbacks.get(identifier);

    if (!callbacks) {
      return;
    }

    try {
      for (var callbacks_1 = (0, _tslib.__values)(callbacks), callbacks_1_1 = callbacks_1.next(); !callbacks_1_1.done; callbacks_1_1 = callbacks_1.next()) {
        var callback = callbacks_1_1.value;

        try {
          callback(instance, identifier);
        } catch (_b) {// ignore errors in the onInit callback
        }
      }
    } catch (e_3_1) {
      e_3 = {
        error: e_3_1
      };
    } finally {
      try {
        if (callbacks_1_1 && !callbacks_1_1.done && (_a = callbacks_1.return)) _a.call(callbacks_1);
      } finally {
        if (e_3) throw e_3.error;
      }
    }
  };

  Provider.prototype.getOrInitializeService = function (_a) {
    var instanceIdentifier = _a.instanceIdentifier,
        _b = _a.options,
        options = _b === void 0 ? {} : _b;
    var instance = this.instances.get(instanceIdentifier);

    if (!instance && this.component) {
      instance = this.component.instanceFactory(this.container, {
        instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),
        options: options
      });
      this.instances.set(instanceIdentifier, instance);
      this.instancesOptions.set(instanceIdentifier, options);
      /**
       * Invoke onInit listeners.
       * Note this.component.onInstanceCreated is different, which is used by the component creator,
       * while onInit listeners are registered by consumers of the provider.
       */

      this.invokeOnInitCallbacks(instance, instanceIdentifier);
      /**
       * Order is important
       * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which
       * makes `isInitialized()` return true.
       */

      if (this.component.onInstanceCreated) {
        try {
          this.component.onInstanceCreated(this.container, instanceIdentifier, instance);
        } catch (_c) {// ignore errors in the onInstanceCreatedCallback
        }
      }
    }

    return instance || null;
  };

  Provider.prototype.normalizeInstanceIdentifier = function (identifier) {
    if (identifier === void 0) {
      identifier = DEFAULT_ENTRY_NAME;
    }

    if (this.component) {
      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;
    } else {
      return identifier; // assume multiple instances are supported before the component is provided.
    }
  };

  Provider.prototype.shouldAutoInitialize = function () {
    return !!this.component && this.component.instantiationMode !== "EXPLICIT"
    /* EXPLICIT */
    ;
  };

  return Provider;
}(); // undefined should be passed to the service factory for the default instance


exports.Provider = Provider;

function normalizeIdentifierForFactory(identifier) {
  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;
}

function isComponentEager(component) {
  return component.instantiationMode === "EAGER"
  /* EAGER */
  ;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`
 */


var ComponentContainer = function () {
  function ComponentContainer(name) {
    this.name = name;
    this.providers = new Map();
  }
  /**
   *
   * @param component Component being added
   * @param overwrite When a component with the same name has already been registered,
   * if overwrite is true: overwrite the existing component with the new component and create a new
   * provider with the new component. It can be useful in tests where you want to use different mocks
   * for different tests.
   * if overwrite is false: throw an exception
   */


  ComponentContainer.prototype.addComponent = function (component) {
    var provider = this.getProvider(component.name);

    if (provider.isComponentSet()) {
      throw new Error("Component " + component.name + " has already been registered with " + this.name);
    }

    provider.setComponent(component);
  };

  ComponentContainer.prototype.addOrOverwriteComponent = function (component) {
    var provider = this.getProvider(component.name);

    if (provider.isComponentSet()) {
      // delete the existing provider from the container, so we can register the new component
      this.providers.delete(component.name);
    }

    this.addComponent(component);
  };
  /**
   * getProvider provides a type safe interface where it can only be called with a field name
   * present in NameServiceMapping interface.
   *
   * Firebase SDKs providing services should extend NameServiceMapping interface to register
   * themselves.
   */


  ComponentContainer.prototype.getProvider = function (name) {
    if (this.providers.has(name)) {
      return this.providers.get(name);
    } // create a Provider for a service that hasn't registered with Firebase


    var provider = new Provider(name, this);
    this.providers.set(name, provider);
    return provider;
  };

  ComponentContainer.prototype.getProviders = function () {
    return Array.from(this.providers.values());
  };

  return ComponentContainer;
}();

exports.ComponentContainer = ComponentContainer;
},{"tslib":"node_modules/tslib/tslib.es6.js","@firebase/util":"node_modules/@firebase/util/dist/index.esm.js"}],"node_modules/@firebase/logger/dist/index.esm.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setLogLevel = setLogLevel;
exports.setUserLogHandler = setUserLogHandler;
exports.Logger = exports.LogLevel = void 0;

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;

  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];

  return r;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var _a;
/**
 * A container for all of the Logger instances
 */


var instances = [];
/**
 * The JS SDK supports 5 log levels and also allows a user the ability to
 * silence the logs altogether.
 *
 * The order is a follows:
 * DEBUG < VERBOSE < INFO < WARN < ERROR
 *
 * All of the log types above the current log level will be captured (i.e. if
 * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
 * `VERBOSE` logs will not)
 */

var LogLevel;
exports.LogLevel = LogLevel;

(function (LogLevel) {
  LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
  LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
  LogLevel[LogLevel["INFO"] = 2] = "INFO";
  LogLevel[LogLevel["WARN"] = 3] = "WARN";
  LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
  LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
})(LogLevel || (exports.LogLevel = LogLevel = {}));

var levelStringToEnum = {
  'debug': LogLevel.DEBUG,
  'verbose': LogLevel.VERBOSE,
  'info': LogLevel.INFO,
  'warn': LogLevel.WARN,
  'error': LogLevel.ERROR,
  'silent': LogLevel.SILENT
};
/**
 * The default log level
 */

var defaultLogLevel = LogLevel.INFO;
/**
 * By default, `console.debug` is not displayed in the developer console (in
 * chrome). To avoid forcing users to have to opt-in to these logs twice
 * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
 * logs to the `console.log` function.
 */

var ConsoleMethod = (_a = {}, _a[LogLevel.DEBUG] = 'log', _a[LogLevel.VERBOSE] = 'log', _a[LogLevel.INFO] = 'info', _a[LogLevel.WARN] = 'warn', _a[LogLevel.ERROR] = 'error', _a);
/**
 * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
 * messages on to their corresponding console counterparts (if the log method
 * is supported by the current log level)
 */

var defaultLogHandler = function (instance, logType) {
  var args = [];

  for (var _i = 2; _i < arguments.length; _i++) {
    args[_i - 2] = arguments[_i];
  }

  if (logType < instance.logLevel) {
    return;
  }

  var now = new Date().toISOString();
  var method = ConsoleMethod[logType];

  if (method) {
    console[method].apply(console, __spreadArrays(["[" + now + "]  " + instance.name + ":"], args));
  } else {
    throw new Error("Attempted to log a message with an invalid logType (value: " + logType + ")");
  }
};

var Logger = function () {
  /**
   * Gives you an instance of a Logger to capture messages according to
   * Firebase's logging scheme.
   *
   * @param name The name that the logs will be associated with
   */
  function Logger(name) {
    this.name = name;
    /**
     * The log level of the given Logger instance.
     */

    this._logLevel = defaultLogLevel;
    /**
     * The main (internal) log handler for the Logger instance.
     * Can be set to a new function in internal package code but not by user.
     */

    this._logHandler = defaultLogHandler;
    /**
     * The optional, additional, user-defined log handler for the Logger instance.
     */

    this._userLogHandler = null;
    /**
     * Capture the current instance for later use
     */

    instances.push(this);
  }

  Object.defineProperty(Logger.prototype, "logLevel", {
    get: function () {
      return this._logLevel;
    },
    set: function (val) {
      if (!(val in LogLevel)) {
        throw new TypeError("Invalid value \"" + val + "\" assigned to `logLevel`");
      }

      this._logLevel = val;
    },
    enumerable: false,
    configurable: true
  }); // Workaround for setter/getter having to be the same type.

  Logger.prototype.setLogLevel = function (val) {
    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;
  };

  Object.defineProperty(Logger.prototype, "logHandler", {
    get: function () {
      return this._logHandler;
    },
    set: function (val) {
      if (typeof val !== 'function') {
        throw new TypeError('Value assigned to `logHandler` must be a function');
      }

      this._logHandler = val;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Logger.prototype, "userLogHandler", {
    get: function () {
      return this._userLogHandler;
    },
    set: function (val) {
      this._userLogHandler = val;
    },
    enumerable: false,
    configurable: true
  });
  /**
   * The functions below are all based on the `console` interface
   */

  Logger.prototype.debug = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.DEBUG], args));

    this._logHandler.apply(this, __spreadArrays([this, LogLevel.DEBUG], args));
  };

  Logger.prototype.log = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.VERBOSE], args));

    this._logHandler.apply(this, __spreadArrays([this, LogLevel.VERBOSE], args));
  };

  Logger.prototype.info = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.INFO], args));

    this._logHandler.apply(this, __spreadArrays([this, LogLevel.INFO], args));
  };

  Logger.prototype.warn = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.WARN], args));

    this._logHandler.apply(this, __spreadArrays([this, LogLevel.WARN], args));
  };

  Logger.prototype.error = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.ERROR], args));

    this._logHandler.apply(this, __spreadArrays([this, LogLevel.ERROR], args));
  };

  return Logger;
}();

exports.Logger = Logger;

function setLogLevel(level) {
  instances.forEach(function (inst) {
    inst.setLogLevel(level);
  });
}

function setUserLogHandler(logCallback, options) {
  var _loop_1 = function (instance) {
    var customLogLevel = null;

    if (options && options.level) {
      customLogLevel = levelStringToEnum[options.level];
    }

    if (logCallback === null) {
      instance.userLogHandler = null;
    } else {
      instance.userLogHandler = function (instance, level) {
        var args = [];

        for (var _i = 2; _i < arguments.length; _i++) {
          args[_i - 2] = arguments[_i];
        }

        var message = args.map(function (arg) {
          if (arg == null) {
            return null;
          } else if (typeof arg === 'string') {
            return arg;
          } else if (typeof arg === 'number' || typeof arg === 'boolean') {
            return arg.toString();
          } else if (arg instanceof Error) {
            return arg.message;
          } else {
            try {
              return JSON.stringify(arg);
            } catch (ignored) {
              return null;
            }
          }
        }).filter(function (arg) {
          return arg;
        }).join(' ');

        if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {
          logCallback({
            level: LogLevel[level].toLowerCase(),
            message: message,
            args: args,
            type: instance.name
          });
        }
      };
    }
  };

  for (var _i = 0, instances_1 = instances; _i < instances_1.length; _i++) {
    var instance = instances_1[_i];

    _loop_1(instance);
  }
}
},{}],"node_modules/@firebase/app/dist/index.esm2017.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._addComponent = _addComponent;
exports._addOrOverwriteComponent = _addOrOverwriteComponent;
exports._clearComponents = _clearComponents;
exports._getProvider = _getProvider;
exports._registerComponent = _registerComponent;
exports._removeServiceInstance = _removeServiceInstance;
exports.deleteApp = deleteApp;
exports.getApp = getApp;
exports.getApps = getApps;
exports.initializeApp = initializeApp;
exports.onLog = onLog;
exports.registerVersion = registerVersion;
exports.setLogLevel = setLogLevel;
Object.defineProperty(exports, "FirebaseError", {
  enumerable: true,
  get: function () {
    return _util.FirebaseError;
  }
});
exports._components = exports._apps = exports._DEFAULT_ENTRY_NAME = exports.SDK_VERSION = void 0;

var _component = require("@firebase/component");

var _logger = require("@firebase/logger");

var _util = require("@firebase/util");

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class PlatformLoggerServiceImpl {
  constructor(container) {
    this.container = container;
  } // In initial implementation, this will be called by installations on
  // auth token refresh, and installations will send this string.


  getPlatformInfoString() {
    const providers = this.container.getProviders(); // Loop through providers and get library/version pairs from any that are
    // version components.

    return providers.map(provider => {
      if (isVersionServiceProvider(provider)) {
        const service = provider.getImmediate();
        return `${service.library}/${service.version}`;
      } else {
        return null;
      }
    }).filter(logString => logString).join(' ');
  }

}
/**
 *
 * @param provider check if this provider provides a VersionService
 *
 * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider
 * provides VersionService. The provider is not necessarily a 'app-version'
 * provider.
 */


function isVersionServiceProvider(provider) {
  const component = provider.getComponent();
  return (component === null || component === void 0 ? void 0 : component.type) === "VERSION"
  /* VERSION */
  ;
}

const name$o = "@firebase/app";
const version$1 = "0.7.0";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const logger = new _logger.Logger('@firebase/app');
const name$n = "@firebase/app-compat";
const name$m = "@firebase/analytics-compat";
const name$l = "@firebase/analytics";
const name$k = "@firebase/app-check-compat";
const name$j = "@firebase/app-check";
const name$i = "@firebase/auth";
const name$h = "@firebase/auth-compat";
const name$g = "@firebase/database";
const name$f = "@firebase/database-compat";
const name$e = "@firebase/functions";
const name$d = "@firebase/functions-compat";
const name$c = "@firebase/installations";
const name$b = "@firebase/installations-compat";
const name$a = "@firebase/messaging";
const name$9 = "@firebase/messaging-compat";
const name$8 = "@firebase/performance";
const name$7 = "@firebase/performance-compat";
const name$6 = "@firebase/remote-config";
const name$5 = "@firebase/remote-config-compat";
const name$4 = "@firebase/storage";
const name$3 = "@firebase/storage-compat";
const name$2 = "@firebase/firestore";
const name$1 = "@firebase/firestore-compat";
const name = "firebase";
const version = "9.0.0";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The default app name
 *
 * @internal
 */

const DEFAULT_ENTRY_NAME = '[DEFAULT]';
exports._DEFAULT_ENTRY_NAME = DEFAULT_ENTRY_NAME;
const PLATFORM_LOG_STRING = {
  [name$o]: 'fire-core',
  [name$n]: 'fire-core-compat',
  [name$l]: 'fire-analytics',
  [name$m]: 'fire-analytics-compat',
  [name$j]: 'fire-app-check',
  [name$k]: 'fire-app-check-compat',
  [name$i]: 'fire-auth',
  [name$h]: 'fire-auth-compat',
  [name$g]: 'fire-rtdb',
  [name$f]: 'fire-rtdb-compat',
  [name$e]: 'fire-fn',
  [name$d]: 'fire-fn-compat',
  [name$c]: 'fire-iid',
  [name$b]: 'fire-iid-compat',
  [name$a]: 'fire-fcm',
  [name$9]: 'fire-fcm-compat',
  [name$8]: 'fire-perf',
  [name$7]: 'fire-perf-compat',
  [name$6]: 'fire-rc',
  [name$5]: 'fire-rc-compat',
  [name$4]: 'fire-gcs',
  [name$3]: 'fire-gcs-compat',
  [name$2]: 'fire-fst',
  [name$1]: 'fire-fst-compat',
  'fire-js': 'fire-js',
  [name]: 'fire-js-all'
};
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @internal
 */

const _apps = new Map();
/**
 * Registered components.
 *
 * @internal
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any


exports._apps = _apps;

const _components = new Map();
/**
 * @param component - the component being added to this app's container
 *
 * @internal
 */


exports._components = _components;

function _addComponent(app, component) {
  try {
    app.container.addComponent(component);
  } catch (e) {
    logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);
  }
}
/**
 *
 * @internal
 */


function _addOrOverwriteComponent(app, component) {
  app.container.addOrOverwriteComponent(component);
}
/**
 *
 * @param component - the component to register
 * @returns whether or not the component is registered successfully
 *
 * @internal
 */


function _registerComponent(component) {
  const componentName = component.name;

  if (_components.has(componentName)) {
    logger.debug(`There were multiple attempts to register component ${componentName}.`);
    return false;
  }

  _components.set(componentName, component); // add the component to existing app instances


  for (const app of _apps.values()) {
    _addComponent(app, component);
  }

  return true;
}
/**
 *
 * @param app - FirebaseApp instance
 * @param name - service name
 *
 * @returns the provider for the service with the matching name
 *
 * @internal
 */


function _getProvider(app, name) {
  return app.container.getProvider(name);
}
/**
 *
 * @param app - FirebaseApp instance
 * @param name - service name
 * @param instanceIdentifier - service instance identifier in case the service supports multiple instances
 *
 * @internal
 */


function _removeServiceInstance(app, name, instanceIdentifier = DEFAULT_ENTRY_NAME) {
  _getProvider(app, name).clearInstance(instanceIdentifier);
}
/**
 * Test only
 *
 * @internal
 */


function _clearComponents() {
  _components.clear();
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const ERRORS = {
  ["no-app"
  /* NO_APP */
  ]: "No Firebase App '{$appName}' has been created - " + 'call Firebase App.initializeApp()',
  ["bad-app-name"
  /* BAD_APP_NAME */
  ]: "Illegal App name: '{$appName}",
  ["duplicate-app"
  /* DUPLICATE_APP */
  ]: "Firebase App named '{$appName}' already exists with different options or config",
  ["app-deleted"
  /* APP_DELETED */
  ]: "Firebase App named '{$appName}' already deleted",
  ["invalid-app-argument"
  /* INVALID_APP_ARGUMENT */
  ]: 'firebase.{$appName}() takes either no argument or a ' + 'Firebase App instance.',
  ["invalid-log-argument"
  /* INVALID_LOG_ARGUMENT */
  ]: 'First argument to `onLog` must be null or a function.'
};
const ERROR_FACTORY = new _util.ErrorFactory('app', 'Firebase', ERRORS);
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

class FirebaseAppImpl {
  constructor(options, config, container) {
    this._isDeleted = false;
    this._options = Object.assign({}, options);
    this._config = Object.assign({}, config);
    this._name = config.name;
    this._automaticDataCollectionEnabled = config.automaticDataCollectionEnabled;
    this._container = container;
    this.container.addComponent(new _component.Component('app', () => this, "PUBLIC"
    /* PUBLIC */
    ));
  }

  get automaticDataCollectionEnabled() {
    this.checkDestroyed();
    return this._automaticDataCollectionEnabled;
  }

  set automaticDataCollectionEnabled(val) {
    this.checkDestroyed();
    this._automaticDataCollectionEnabled = val;
  }

  get name() {
    this.checkDestroyed();
    return this._name;
  }

  get options() {
    this.checkDestroyed();
    return this._options;
  }

  get config() {
    this.checkDestroyed();
    return this._config;
  }

  get container() {
    return this._container;
  }

  get isDeleted() {
    return this._isDeleted;
  }

  set isDeleted(val) {
    this._isDeleted = val;
  }
  /**
   * This function will throw an Error if the App has already been deleted -
   * use before performing API actions on the App.
   */


  checkDestroyed() {
    if (this.isDeleted) {
      throw ERROR_FACTORY.create("app-deleted"
      /* APP_DELETED */
      , {
        appName: this._name
      });
    }
  }

}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The current SDK version.
 *
 * @public
 */


const SDK_VERSION = version;
exports.SDK_VERSION = SDK_VERSION;

function initializeApp(options, rawConfig = {}) {
  if (typeof rawConfig !== 'object') {
    const name = rawConfig;
    rawConfig = {
      name
    };
  }

  const config = Object.assign({
    name: DEFAULT_ENTRY_NAME,
    automaticDataCollectionEnabled: false
  }, rawConfig);
  const name = config.name;

  if (typeof name !== 'string' || !name) {
    throw ERROR_FACTORY.create("bad-app-name"
    /* BAD_APP_NAME */
    , {
      appName: String(name)
    });
  }

  const existingApp = _apps.get(name);

  if (existingApp) {
    // return the existing app if options and config deep equal the ones in the existing app.
    if ((0, _util.deepEqual)(options, existingApp.options) && (0, _util.deepEqual)(config, existingApp.config)) {
      return existingApp;
    } else {
      throw ERROR_FACTORY.create("duplicate-app"
      /* DUPLICATE_APP */
      , {
        appName: name
      });
    }
  }

  const container = new _component.ComponentContainer(name);

  for (const component of _components.values()) {
    container.addComponent(component);
  }

  const newApp = new FirebaseAppImpl(options, config, container);

  _apps.set(name, newApp);

  return newApp;
}
/**
 * Retrieves a {@link @firebase/app#FirebaseApp} instance.
 *
 * When called with no arguments, the default app is returned. When an app name
 * is provided, the app corresponding to that name is returned.
 *
 * An exception is thrown if the app being retrieved has not yet been
 * initialized.
 *
 * @example
 * ```javascript
 * // Return the default app
 * const app = getApp();
 * ```
 *
 * @example
 * ```javascript
 * // Return a named app
 * const otherApp = getApp("otherApp");
 * ```
 *
 * @param name - Optional name of the app to return. If no name is
 *   provided, the default is `"[DEFAULT]"`.
 *
 * @returns The app corresponding to the provided app name.
 *   If no app name is provided, the default app is returned.
 *
 * @public
 */


function getApp(name = DEFAULT_ENTRY_NAME) {
  const app = _apps.get(name);

  if (!app) {
    throw ERROR_FACTORY.create("no-app"
    /* NO_APP */
    , {
      appName: name
    });
  }

  return app;
}
/**
 * A (read-only) array of all initialized apps.
 * @public
 */


function getApps() {
  return Array.from(_apps.values());
}
/**
 * Renders this app unusable and frees the resources of all associated
 * services.
 *
 * @example
 * ```javascript
 * deleteApp(app)
 *   .then(function() {
 *     console.log("App deleted successfully");
 *   })
 *   .catch(function(error) {
 *     console.log("Error deleting app:", error);
 *   });
 * ```
 *
 * @public
 */


async function deleteApp(app) {
  const name = app.name;

  if (_apps.has(name)) {
    _apps.delete(name);

    await Promise.all(app.container.getProviders().map(provider => provider.delete()));
    app.isDeleted = true;
  }
}
/**
 * Registers a library's name and version for platform logging purposes.
 * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)
 * @param version - Current version of that library.
 * @param variant - Bundle variant, e.g., node, rn, etc.
 *
 * @public
 */


function registerVersion(libraryKeyOrName, version, variant) {
  var _a; // TODO: We can use this check to whitelist strings when/if we set up
  // a good whitelist system.


  let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;

  if (variant) {
    library += `-${variant}`;
  }

  const libraryMismatch = library.match(/\s|\//);
  const versionMismatch = version.match(/\s|\//);

  if (libraryMismatch || versionMismatch) {
    const warning = [`Unable to register library "${library}" with version "${version}":`];

    if (libraryMismatch) {
      warning.push(`library name "${library}" contains illegal characters (whitespace or "/")`);
    }

    if (libraryMismatch && versionMismatch) {
      warning.push('and');
    }

    if (versionMismatch) {
      warning.push(`version name "${version}" contains illegal characters (whitespace or "/")`);
    }

    logger.warn(warning.join(' '));
    return;
  }

  _registerComponent(new _component.Component(`${library}-version`, () => ({
    library,
    version
  }), "VERSION"
  /* VERSION */
  ));
}
/**
 * Sets log handler for all Firebase SDKs.
 * @param logCallback - An optional custom log handler that executes user code whenever
 * the Firebase SDK makes a logging call.
 *
 * @public
 */


function onLog(logCallback, options) {
  if (logCallback !== null && typeof logCallback !== 'function') {
    throw ERROR_FACTORY.create("invalid-log-argument"
    /* INVALID_LOG_ARGUMENT */
    );
  }

  (0, _logger.setUserLogHandler)(logCallback, options);
}
/**
 * Sets log level for all Firebase SDKs.
 *
 * All of the log types above the current log level are captured (i.e. if
 * you set the log level to `info`, errors are logged, but `debug` and
 * `verbose` logs are not).
 *
 * @public
 */


function setLogLevel(logLevel) {
  (0, _logger.setLogLevel)(logLevel);
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function registerCoreComponents(variant) {
  _registerComponent(new _component.Component('platform-logger', container => new PlatformLoggerServiceImpl(container), "PRIVATE"
  /* PRIVATE */
  )); // Register `app` package.


  registerVersion(name$o, version$1, variant); // Register platform SDK identifier (no version).

  registerVersion('fire-js', '');
}
/**
 * Firebase App
 *
 * @remarks This package coordinates the communication between the different Firebase components
 * @packageDocumentation
 */


registerCoreComponents();
},{"@firebase/component":"node_modules/@firebase/component/dist/index.esm.js","@firebase/logger":"node_modules/@firebase/logger/dist/index.esm.js","@firebase/util":"node_modules/@firebase/util/dist/index.esm.js"}],"node_modules/@firebase/app-compat/dist/index.esm2017.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _util = require("@firebase/util");

var _component = require("@firebase/component");

var modularAPIs = _interopRequireWildcard(require("@firebase/app"));

var _logger = require("@firebase/logger");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Global context object for a collection of services using
 * a shared authentication state.
 *
 * marked as internal because it references internal types exported from @firebase/app
 * @internal
 */
class FirebaseAppImpl {
  constructor(_delegate, firebase) {
    this._delegate = _delegate;
    this.firebase = firebase; // add itself to container

    (0, modularAPIs._addComponent)(_delegate, new _component.Component('app-compat', () => this, "PUBLIC"
    /* PUBLIC */
    ));
    this.container = _delegate.container;
  }

  get automaticDataCollectionEnabled() {
    return this._delegate.automaticDataCollectionEnabled;
  }

  set automaticDataCollectionEnabled(val) {
    this._delegate.automaticDataCollectionEnabled = val;
  }

  get name() {
    return this._delegate.name;
  }

  get options() {
    return this._delegate.options;
  }

  delete() {
    return new Promise(resolve => {
      this._delegate.checkDestroyed();

      resolve();
    }).then(() => {
      this.firebase.INTERNAL.removeApp(this.name);
      return (0, modularAPIs.deleteApp)(this._delegate);
    });
  }
  /**
   * Return a service instance associated with this app (creating it
   * on demand), identified by the passed instanceIdentifier.
   *
   * NOTE: Currently storage and functions are the only ones that are leveraging this
   * functionality. They invoke it by calling:
   *
   * ```javascript
   * firebase.app().storage('STORAGE BUCKET ID')
   * ```
   *
   * The service name is passed to this already
   * @internal
   */


  _getService(name, instanceIdentifier = modularAPIs._DEFAULT_ENTRY_NAME) {
    var _a;

    this._delegate.checkDestroyed(); // Initialize instance if InstatiationMode is `EXPLICIT`.


    const provider = this._delegate.container.getProvider(name);

    if (!provider.isInitialized() && ((_a = provider.getComponent()) === null || _a === void 0 ? void 0 : _a.instantiationMode) === "EXPLICIT"
    /* EXPLICIT */
    ) {
      provider.initialize();
    } // getImmediate will always succeed because _getService is only called for registered components.


    return provider.getImmediate({
      identifier: instanceIdentifier
    });
  }
  /**
   * Remove a service instance from the cache, so we will create a new instance for this service
   * when people try to get it again.
   *
   * NOTE: currently only firestore uses this functionality to support firestore shutdown.
   *
   * @param name The service name
   * @param instanceIdentifier instance identifier in case multiple instances are allowed
   * @internal
   */


  _removeServiceInstance(name, instanceIdentifier = modularAPIs._DEFAULT_ENTRY_NAME) {
    this._delegate.container // eslint-disable-next-line @typescript-eslint/no-explicit-any
    .getProvider(name).clearInstance(instanceIdentifier);
  }
  /**
   * @param component the component being added to this app's container
   * @internal
   */


  _addComponent(component) {
    (0, modularAPIs._addComponent)(this._delegate, component);
  }

  _addOrOverwriteComponent(component) {
    (0, modularAPIs._addOrOverwriteComponent)(this._delegate, component);
  }

  toJSON() {
    return {
      name: this.name,
      automaticDataCollectionEnabled: this.automaticDataCollectionEnabled,
      options: this.options
    };
  }

} // TODO: investigate why the following needs to be commented out
// Prevent dead-code elimination of these methods w/o invalid property
// copying.
// (FirebaseAppImpl.prototype.name && FirebaseAppImpl.prototype.options) ||
//   FirebaseAppImpl.prototype.delete ||
//   console.log('dc');

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const ERRORS = {
  ["no-app"
  /* NO_APP */
  ]: "No Firebase App '{$appName}' has been created - " + 'call Firebase App.initializeApp()',
  ["invalid-app-argument"
  /* INVALID_APP_ARGUMENT */
  ]: 'firebase.{$appName}() takes either no argument or a ' + 'Firebase App instance.'
};
const ERROR_FACTORY = new _util.ErrorFactory('app-compat', 'Firebase', ERRORS);
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Because auth can't share code with other components, we attach the utility functions
 * in an internal namespace to share code.
 * This function return a firebase namespace object without
 * any utility functions, so it can be shared between the regular firebaseNamespace and
 * the lite version.
 */

function createFirebaseNamespaceCore(firebaseAppImpl) {
  const apps = {}; // // eslint-disable-next-line @typescript-eslint/no-explicit-any
  // const components = new Map<string, Component<any>>();
  // A namespace is a plain JavaScript Object.

  const namespace = {
    // Hack to prevent Babel from modifying the object returned
    // as the firebase namespace.
    // @ts-ignore
    __esModule: true,
    initializeApp: initializeAppCompat,
    // @ts-ignore
    app,
    registerVersion: modularAPIs.registerVersion,
    setLogLevel: modularAPIs.setLogLevel,
    onLog: modularAPIs.onLog,
    // @ts-ignore
    apps: null,
    SDK_VERSION: modularAPIs.SDK_VERSION,
    INTERNAL: {
      registerComponent: registerComponentCompat,
      removeApp,
      useAsService,
      modularAPIs
    }
  }; // Inject a circular default export to allow Babel users who were previously
  // using:
  //
  //   import firebase from 'firebase';
  //   which becomes: var firebase = require('firebase').default;
  //
  // instead of
  //
  //   import * as firebase from 'firebase';
  //   which becomes: var firebase = require('firebase');
  // eslint-disable-next-line @typescript-eslint/no-explicit-any

  namespace['default'] = namespace; // firebase.apps is a read-only getter.

  Object.defineProperty(namespace, 'apps', {
    get: getApps
  });
  /**
   * Called by App.delete() - but before any services associated with the App
   * are deleted.
   */

  function removeApp(name) {
    delete apps[name];
  }
  /**
   * Get the App object for a given name (or DEFAULT).
   */


  function app(name) {
    name = name || modularAPIs._DEFAULT_ENTRY_NAME;

    if (!(0, _util.contains)(apps, name)) {
      throw ERROR_FACTORY.create("no-app"
      /* NO_APP */
      , {
        appName: name
      });
    }

    return apps[name];
  } // @ts-ignore


  app['App'] = firebaseAppImpl;
  /**
   * Create a new App instance (name must be unique).
   *
   * This function is idempotent. It can be called more than once and return the same instance using the same options and config.
   */

  function initializeAppCompat(options, rawConfig = {}) {
    const app = modularAPIs.initializeApp(options, rawConfig);

    if ((0, _util.contains)(apps, app.name)) {
      return apps[app.name];
    }

    const appCompat = new firebaseAppImpl(app, namespace);
    apps[app.name] = appCompat;
    return appCompat;
  }
  /*
   * Return an array of all the non-deleted FirebaseApps.
   */


  function getApps() {
    // Make a copy so caller cannot mutate the apps list.
    return Object.keys(apps).map(name => apps[name]);
  }

  function registerComponentCompat(component) {
    const componentName = component.name;
    const componentNameWithoutCompat = componentName.replace('-compat', '');

    if (modularAPIs._registerComponent(component) && component.type === "PUBLIC"
    /* PUBLIC */
    ) {
      // create service namespace for public components
      // The Service namespace is an accessor function ...
      const serviceNamespace = (appArg = app()) => {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        if (typeof appArg[componentNameWithoutCompat] !== 'function') {
          // Invalid argument.
          // This happens in the following case: firebase.storage('gs:/')
          throw ERROR_FACTORY.create("invalid-app-argument"
          /* INVALID_APP_ARGUMENT */
          , {
            appName: componentName
          });
        } // Forward service instance lookup to the FirebaseApp.
        // eslint-disable-next-line @typescript-eslint/no-explicit-any


        return appArg[componentNameWithoutCompat]();
      }; // ... and a container for service-level properties.


      if (component.serviceProps !== undefined) {
        (0, _util.deepExtend)(serviceNamespace, component.serviceProps);
      } // eslint-disable-next-line @typescript-eslint/no-explicit-any


      namespace[componentNameWithoutCompat] = serviceNamespace; // Patch the FirebaseAppImpl prototype
      // eslint-disable-next-line @typescript-eslint/no-explicit-any

      firebaseAppImpl.prototype[componentNameWithoutCompat] = // TODO: The eslint disable can be removed and the 'ignoreRestArgs'
      // option added to the no-explicit-any rule when ESlint releases it.
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      function (...args) {
        const serviceFxn = this._getService.bind(this, componentName);

        return serviceFxn.apply(this, component.multipleInstances ? args : []);
      };
    }

    return component.type === "PUBLIC"
    /* PUBLIC */
    ? // eslint-disable-next-line @typescript-eslint/no-explicit-any
    namespace[componentNameWithoutCompat] : null;
  } // Map the requested service to a registered service name
  // (used to map auth to serverAuth service when needed).


  function useAsService(app, name) {
    if (name === 'serverAuth') {
      return null;
    }

    const useService = name;
    return useService;
  }

  return namespace;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Return a firebase namespace object.
 *
 * In production, this will be called exactly once and the result
 * assigned to the 'firebase' global.  It may be called multiple times
 * in unit tests.
 */


function createFirebaseNamespace() {
  const namespace = createFirebaseNamespaceCore(FirebaseAppImpl);
  namespace.INTERNAL = Object.assign(Object.assign({}, namespace.INTERNAL), {
    createFirebaseNamespace,
    extendNamespace,
    createSubscribe: _util.createSubscribe,
    ErrorFactory: _util.ErrorFactory,
    deepExtend: _util.deepExtend
  });
  /**
   * Patch the top-level firebase namespace with additional properties.
   *
   * firebase.INTERNAL.extendNamespace()
   */

  function extendNamespace(props) {
    (0, _util.deepExtend)(namespace, props);
  }

  return namespace;
}

const firebase$1 = createFirebaseNamespace();
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const logger = new _logger.Logger('@firebase/app-compat');
const name = "@firebase/app-compat";
const version = "0.1.1";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function registerCoreComponents(variant) {
  // Register `app` package.
  (0, modularAPIs.registerVersion)(name, version, variant);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Firebase Lite detection
// eslint-disable-next-line @typescript-eslint/no-explicit-any


if ((0, _util.isBrowser)() && self.firebase !== undefined) {
  logger.warn(`
    Warning: Firebase is already defined in the global scope. Please make sure
    Firebase library is only loaded once.
  `); // eslint-disable-next-line

  const sdkVersion = self.firebase.SDK_VERSION;

  if (sdkVersion && sdkVersion.indexOf('LITE') >= 0) {
    logger.warn(`
    Warning: You are trying to load Firebase while using Firebase Performance standalone script.
    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.
    `);
  }
}

const firebase = firebase$1;
registerCoreComponents();
var _default = firebase;
exports.default = _default;
},{"@firebase/util":"node_modules/@firebase/util/dist/index.esm.js","@firebase/component":"node_modules/@firebase/component/dist/index.esm.js","@firebase/app":"node_modules/@firebase/app/dist/index.esm2017.js","@firebase/logger":"node_modules/@firebase/logger/dist/index.esm.js"}],"node_modules/idb/build/idb.js":[function(require,module,exports) {
var define;
var global = arguments[3];
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory(global.idb = {}));
}(this, function (exports) { 'use strict';

  function toArray(arr) {
    return Array.prototype.slice.call(arr);
  }

  function promisifyRequest(request) {
    return new Promise(function(resolve, reject) {
      request.onsuccess = function() {
        resolve(request.result);
      };

      request.onerror = function() {
        reject(request.error);
      };
    });
  }

  function promisifyRequestCall(obj, method, args) {
    var request;
    var p = new Promise(function(resolve, reject) {
      request = obj[method].apply(obj, args);
      promisifyRequest(request).then(resolve, reject);
    });

    p.request = request;
    return p;
  }

  function promisifyCursorRequestCall(obj, method, args) {
    var p = promisifyRequestCall(obj, method, args);
    return p.then(function(value) {
      if (!value) return;
      return new Cursor(value, p.request);
    });
  }

  function proxyProperties(ProxyClass, targetProp, properties) {
    properties.forEach(function(prop) {
      Object.defineProperty(ProxyClass.prototype, prop, {
        get: function() {
          return this[targetProp][prop];
        },
        set: function(val) {
          this[targetProp][prop] = val;
        }
      });
    });
  }

  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {
    properties.forEach(function(prop) {
      if (!(prop in Constructor.prototype)) return;
      ProxyClass.prototype[prop] = function() {
        return promisifyRequestCall(this[targetProp], prop, arguments);
      };
    });
  }

  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {
    properties.forEach(function(prop) {
      if (!(prop in Constructor.prototype)) return;
      ProxyClass.prototype[prop] = function() {
        return this[targetProp][prop].apply(this[targetProp], arguments);
      };
    });
  }

  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {
    properties.forEach(function(prop) {
      if (!(prop in Constructor.prototype)) return;
      ProxyClass.prototype[prop] = function() {
        return promisifyCursorRequestCall(this[targetProp], prop, arguments);
      };
    });
  }

  function Index(index) {
    this._index = index;
  }

  proxyProperties(Index, '_index', [
    'name',
    'keyPath',
    'multiEntry',
    'unique'
  ]);

  proxyRequestMethods(Index, '_index', IDBIndex, [
    'get',
    'getKey',
    'getAll',
    'getAllKeys',
    'count'
  ]);

  proxyCursorRequestMethods(Index, '_index', IDBIndex, [
    'openCursor',
    'openKeyCursor'
  ]);

  function Cursor(cursor, request) {
    this._cursor = cursor;
    this._request = request;
  }

  proxyProperties(Cursor, '_cursor', [
    'direction',
    'key',
    'primaryKey',
    'value'
  ]);

  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [
    'update',
    'delete'
  ]);

  // proxy 'next' methods
  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {
    if (!(methodName in IDBCursor.prototype)) return;
    Cursor.prototype[methodName] = function() {
      var cursor = this;
      var args = arguments;
      return Promise.resolve().then(function() {
        cursor._cursor[methodName].apply(cursor._cursor, args);
        return promisifyRequest(cursor._request).then(function(value) {
          if (!value) return;
          return new Cursor(value, cursor._request);
        });
      });
    };
  });

  function ObjectStore(store) {
    this._store = store;
  }

  ObjectStore.prototype.createIndex = function() {
    return new Index(this._store.createIndex.apply(this._store, arguments));
  };

  ObjectStore.prototype.index = function() {
    return new Index(this._store.index.apply(this._store, arguments));
  };

  proxyProperties(ObjectStore, '_store', [
    'name',
    'keyPath',
    'indexNames',
    'autoIncrement'
  ]);

  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [
    'put',
    'add',
    'delete',
    'clear',
    'get',
    'getAll',
    'getKey',
    'getAllKeys',
    'count'
  ]);

  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [
    'openCursor',
    'openKeyCursor'
  ]);

  proxyMethods(ObjectStore, '_store', IDBObjectStore, [
    'deleteIndex'
  ]);

  function Transaction(idbTransaction) {
    this._tx = idbTransaction;
    this.complete = new Promise(function(resolve, reject) {
      idbTransaction.oncomplete = function() {
        resolve();
      };
      idbTransaction.onerror = function() {
        reject(idbTransaction.error);
      };
      idbTransaction.onabort = function() {
        reject(idbTransaction.error);
      };
    });
  }

  Transaction.prototype.objectStore = function() {
    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));
  };

  proxyProperties(Transaction, '_tx', [
    'objectStoreNames',
    'mode'
  ]);

  proxyMethods(Transaction, '_tx', IDBTransaction, [
    'abort'
  ]);

  function UpgradeDB(db, oldVersion, transaction) {
    this._db = db;
    this.oldVersion = oldVersion;
    this.transaction = new Transaction(transaction);
  }

  UpgradeDB.prototype.createObjectStore = function() {
    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));
  };

  proxyProperties(UpgradeDB, '_db', [
    'name',
    'version',
    'objectStoreNames'
  ]);

  proxyMethods(UpgradeDB, '_db', IDBDatabase, [
    'deleteObjectStore',
    'close'
  ]);

  function DB(db) {
    this._db = db;
  }

  DB.prototype.transaction = function() {
    return new Transaction(this._db.transaction.apply(this._db, arguments));
  };

  proxyProperties(DB, '_db', [
    'name',
    'version',
    'objectStoreNames'
  ]);

  proxyMethods(DB, '_db', IDBDatabase, [
    'close'
  ]);

  // Add cursor iterators
  // TODO: remove this once browsers do the right thing with promises
  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {
    [ObjectStore, Index].forEach(function(Constructor) {
      // Don't create iterateKeyCursor if openKeyCursor doesn't exist.
      if (!(funcName in Constructor.prototype)) return;

      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {
        var args = toArray(arguments);
        var callback = args[args.length - 1];
        var nativeObject = this._store || this._index;
        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));
        request.onsuccess = function() {
          callback(request.result);
        };
      };
    });
  });

  // polyfill getAll
  [Index, ObjectStore].forEach(function(Constructor) {
    if (Constructor.prototype.getAll) return;
    Constructor.prototype.getAll = function(query, count) {
      var instance = this;
      var items = [];

      return new Promise(function(resolve) {
        instance.iterateCursor(query, function(cursor) {
          if (!cursor) {
            resolve(items);
            return;
          }
          items.push(cursor.value);

          if (count !== undefined && items.length == count) {
            resolve(items);
            return;
          }
          cursor.continue();
        });
      });
    };
  });

  function openDb(name, version, upgradeCallback) {
    var p = promisifyRequestCall(indexedDB, 'open', [name, version]);
    var request = p.request;

    if (request) {
      request.onupgradeneeded = function(event) {
        if (upgradeCallback) {
          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));
        }
      };
    }

    return p.then(function(db) {
      return new DB(db);
    });
  }

  function deleteDb(name) {
    return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);
  }

  exports.openDb = openDb;
  exports.deleteDb = deleteDb;

  Object.defineProperty(exports, '__esModule', { value: true });

}));

},{}],"node_modules/@firebase/installations/dist/index.esm2017.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deleteInstallations = deleteInstallations;
exports.getId = getId;
exports.getInstallations = getInstallations;
exports.getToken = getToken;
exports.onIdChange = onIdChange;

var _app = require("@firebase/app");

var _component = require("@firebase/component");

var _util = require("@firebase/util");

var _idb = require("idb");

const name = "@firebase/installations";
const version = "0.5.0";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const PENDING_TIMEOUT_MS = 10000;
const PACKAGE_VERSION = `w:${version}`;
const INTERNAL_AUTH_VERSION = 'FIS_v2';
const INSTALLATIONS_API_URL = 'https://firebaseinstallations.googleapis.com/v1';
const TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour

const SERVICE = 'installations';
const SERVICE_NAME = 'Installations';
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const ERROR_DESCRIPTION_MAP = {
  ["missing-app-config-values"
  /* MISSING_APP_CONFIG_VALUES */
  ]: 'Missing App configuration value: "{$valueName}"',
  ["not-registered"
  /* NOT_REGISTERED */
  ]: 'Firebase Installation is not registered.',
  ["installation-not-found"
  /* INSTALLATION_NOT_FOUND */
  ]: 'Firebase Installation not found.',
  ["request-failed"
  /* REQUEST_FAILED */
  ]: '{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"',
  ["app-offline"
  /* APP_OFFLINE */
  ]: 'Could not process request. Application offline.',
  ["delete-pending-registration"
  /* DELETE_PENDING_REGISTRATION */
  ]: "Can't delete installation while there is a pending registration request."
};
const ERROR_FACTORY = new _util.ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);
/** Returns true if error is a FirebaseError that is based on an error from the server. */

function isServerError(error) {
  return error instanceof _util.FirebaseError && error.code.includes("request-failed"
  /* REQUEST_FAILED */
  );
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function getInstallationsEndpoint({
  projectId
}) {
  return `${INSTALLATIONS_API_URL}/projects/${projectId}/installations`;
}

function extractAuthTokenInfoFromResponse(response) {
  return {
    token: response.token,
    requestStatus: 2
    /* COMPLETED */
    ,
    expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),
    creationTime: Date.now()
  };
}

async function getErrorFromResponse(requestName, response) {
  const responseJson = await response.json();
  const errorData = responseJson.error;
  return ERROR_FACTORY.create("request-failed"
  /* REQUEST_FAILED */
  , {
    requestName,
    serverCode: errorData.code,
    serverMessage: errorData.message,
    serverStatus: errorData.status
  });
}

function getHeaders({
  apiKey
}) {
  return new Headers({
    'Content-Type': 'application/json',
    Accept: 'application/json',
    'x-goog-api-key': apiKey
  });
}

function getHeadersWithAuth(appConfig, {
  refreshToken
}) {
  const headers = getHeaders(appConfig);
  headers.append('Authorization', getAuthorizationHeader(refreshToken));
  return headers;
}
/**
 * Calls the passed in fetch wrapper and returns the response.
 * If the returned response has a status of 5xx, re-runs the function once and
 * returns the response.
 */


async function retryIfServerError(fn) {
  const result = await fn();

  if (result.status >= 500 && result.status < 600) {
    // Internal Server Error. Retry request.
    return fn();
  }

  return result;
}

function getExpiresInFromResponseExpiresIn(responseExpiresIn) {
  // This works because the server will never respond with fractions of a second.
  return Number(responseExpiresIn.replace('s', '000'));
}

function getAuthorizationHeader(refreshToken) {
  return `${INTERNAL_AUTH_VERSION} ${refreshToken}`;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


async function createInstallationRequest(appConfig, {
  fid
}) {
  const endpoint = getInstallationsEndpoint(appConfig);
  const headers = getHeaders(appConfig);
  const body = {
    fid,
    authVersion: INTERNAL_AUTH_VERSION,
    appId: appConfig.appId,
    sdkVersion: PACKAGE_VERSION
  };
  const request = {
    method: 'POST',
    headers,
    body: JSON.stringify(body)
  };
  const response = await retryIfServerError(() => fetch(endpoint, request));

  if (response.ok) {
    const responseValue = await response.json();
    const registeredInstallationEntry = {
      fid: responseValue.fid || fid,
      registrationStatus: 2
      /* COMPLETED */
      ,
      refreshToken: responseValue.refreshToken,
      authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)
    };
    return registeredInstallationEntry;
  } else {
    throw await getErrorFromResponse('Create Installation', response);
  }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Returns a promise that resolves after given time passes. */


function sleep(ms) {
  return new Promise(resolve => {
    setTimeout(resolve, ms);
  });
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function bufferToBase64UrlSafe(array) {
  const b64 = btoa(String.fromCharCode(...array));
  return b64.replace(/\+/g, '-').replace(/\//g, '_');
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const VALID_FID_PATTERN = /^[cdef][\w-]{21}$/;
const INVALID_FID = '';
/**
 * Generates a new FID using random values from Web Crypto API.
 * Returns an empty string if FID generation fails for any reason.
 */

function generateFid() {
  try {
    // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5
    // bytes. our implementation generates a 17 byte array instead.
    const fidByteArray = new Uint8Array(17);
    const crypto = self.crypto || self.msCrypto;
    crypto.getRandomValues(fidByteArray); // Replace the first 4 random bits with the constant FID header of 0b0111.

    fidByteArray[0] = 0b01110000 + fidByteArray[0] % 0b00010000;
    const fid = encode(fidByteArray);
    return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;
  } catch (_a) {
    // FID generation errored
    return INVALID_FID;
  }
}
/** Converts a FID Uint8Array to a base64 string representation. */


function encode(fidByteArray) {
  const b64String = bufferToBase64UrlSafe(fidByteArray); // Remove the 23rd character that was added because of the extra 4 bits at the
  // end of our 17 byte array, and the '=' padding.

  return b64String.substr(0, 22);
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Returns a string key that can be used to identify the app. */


function getKey(appConfig) {
  return `${appConfig.appName}!${appConfig.appId}`;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const fidChangeCallbacks = new Map();
/**
 * Calls the onIdChange callbacks with the new FID value, and broadcasts the
 * change to other tabs.
 */

function fidChanged(appConfig, fid) {
  const key = getKey(appConfig);
  callFidChangeCallbacks(key, fid);
  broadcastFidChange(key, fid);
}

function addCallback(appConfig, callback) {
  // Open the broadcast channel if it's not already open,
  // to be able to listen to change events from other tabs.
  getBroadcastChannel();
  const key = getKey(appConfig);
  let callbackSet = fidChangeCallbacks.get(key);

  if (!callbackSet) {
    callbackSet = new Set();
    fidChangeCallbacks.set(key, callbackSet);
  }

  callbackSet.add(callback);
}

function removeCallback(appConfig, callback) {
  const key = getKey(appConfig);
  const callbackSet = fidChangeCallbacks.get(key);

  if (!callbackSet) {
    return;
  }

  callbackSet.delete(callback);

  if (callbackSet.size === 0) {
    fidChangeCallbacks.delete(key);
  } // Close broadcast channel if there are no more callbacks.


  closeBroadcastChannel();
}

function callFidChangeCallbacks(key, fid) {
  const callbacks = fidChangeCallbacks.get(key);

  if (!callbacks) {
    return;
  }

  for (const callback of callbacks) {
    callback(fid);
  }
}

function broadcastFidChange(key, fid) {
  const channel = getBroadcastChannel();

  if (channel) {
    channel.postMessage({
      key,
      fid
    });
  }

  closeBroadcastChannel();
}

let broadcastChannel = null;
/** Opens and returns a BroadcastChannel if it is supported by the browser. */

function getBroadcastChannel() {
  if (!broadcastChannel && 'BroadcastChannel' in self) {
    broadcastChannel = new BroadcastChannel('[Firebase] FID Change');

    broadcastChannel.onmessage = e => {
      callFidChangeCallbacks(e.data.key, e.data.fid);
    };
  }

  return broadcastChannel;
}

function closeBroadcastChannel() {
  if (fidChangeCallbacks.size === 0 && broadcastChannel) {
    broadcastChannel.close();
    broadcastChannel = null;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const DATABASE_NAME = 'firebase-installations-database';
const DATABASE_VERSION = 1;
const OBJECT_STORE_NAME = 'firebase-installations-store';
let dbPromise = null;

function getDbPromise() {
  if (!dbPromise) {
    dbPromise = (0, _idb.openDb)(DATABASE_NAME, DATABASE_VERSION, upgradeDB => {
      // We don't use 'break' in this switch statement, the fall-through
      // behavior is what we want, because if there are multiple versions between
      // the old version and the current version, we want ALL the migrations
      // that correspond to those versions to run, not only the last one.
      // eslint-disable-next-line default-case
      switch (upgradeDB.oldVersion) {
        case 0:
          upgradeDB.createObjectStore(OBJECT_STORE_NAME);
      }
    });
  }

  return dbPromise;
}
/** Assigns or overwrites the record for the given key with the given value. */


async function set(appConfig, value) {
  const key = getKey(appConfig);
  const db = await getDbPromise();
  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
  const objectStore = tx.objectStore(OBJECT_STORE_NAME);
  const oldValue = await objectStore.get(key);
  await objectStore.put(value, key);
  await tx.complete;

  if (!oldValue || oldValue.fid !== value.fid) {
    fidChanged(appConfig, value.fid);
  }

  return value;
}
/** Removes record(s) from the objectStore that match the given key. */


async function remove(appConfig) {
  const key = getKey(appConfig);
  const db = await getDbPromise();
  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
  await tx.objectStore(OBJECT_STORE_NAME).delete(key);
  await tx.complete;
}
/**
 * Atomically updates a record with the result of updateFn, which gets
 * called with the current value. If newValue is undefined, the record is
 * deleted instead.
 * @return Updated value
 */


async function update(appConfig, updateFn) {
  const key = getKey(appConfig);
  const db = await getDbPromise();
  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
  const store = tx.objectStore(OBJECT_STORE_NAME);
  const oldValue = await store.get(key);
  const newValue = updateFn(oldValue);

  if (newValue === undefined) {
    await store.delete(key);
  } else {
    await store.put(newValue, key);
  }

  await tx.complete;

  if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {
    fidChanged(appConfig, newValue.fid);
  }

  return newValue;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Updates and returns the InstallationEntry from the database.
 * Also triggers a registration request if it is necessary and possible.
 */


async function getInstallationEntry(appConfig) {
  let registrationPromise;
  const installationEntry = await update(appConfig, oldEntry => {
    const installationEntry = updateOrCreateInstallationEntry(oldEntry);
    const entryWithPromise = triggerRegistrationIfNecessary(appConfig, installationEntry);
    registrationPromise = entryWithPromise.registrationPromise;
    return entryWithPromise.installationEntry;
  });

  if (installationEntry.fid === INVALID_FID) {
    // FID generation failed. Waiting for the FID from the server.
    return {
      installationEntry: await registrationPromise
    };
  }

  return {
    installationEntry,
    registrationPromise
  };
}
/**
 * Creates a new Installation Entry if one does not exist.
 * Also clears timed out pending requests.
 */


function updateOrCreateInstallationEntry(oldEntry) {
  const entry = oldEntry || {
    fid: generateFid(),
    registrationStatus: 0
    /* NOT_STARTED */

  };
  return clearTimedOutRequest(entry);
}
/**
 * If the Firebase Installation is not registered yet, this will trigger the
 * registration and return an InProgressInstallationEntry.
 *
 * If registrationPromise does not exist, the installationEntry is guaranteed
 * to be registered.
 */


function triggerRegistrationIfNecessary(appConfig, installationEntry) {
  if (installationEntry.registrationStatus === 0
  /* NOT_STARTED */
  ) {
    if (!navigator.onLine) {
      // Registration required but app is offline.
      const registrationPromiseWithError = Promise.reject(ERROR_FACTORY.create("app-offline"
      /* APP_OFFLINE */
      ));
      return {
        installationEntry,
        registrationPromise: registrationPromiseWithError
      };
    } // Try registering. Change status to IN_PROGRESS.


    const inProgressEntry = {
      fid: installationEntry.fid,
      registrationStatus: 1
      /* IN_PROGRESS */
      ,
      registrationTime: Date.now()
    };
    const registrationPromise = registerInstallation(appConfig, inProgressEntry);
    return {
      installationEntry: inProgressEntry,
      registrationPromise
    };
  } else if (installationEntry.registrationStatus === 1
  /* IN_PROGRESS */
  ) {
    return {
      installationEntry,
      registrationPromise: waitUntilFidRegistration(appConfig)
    };
  } else {
    return {
      installationEntry
    };
  }
}
/** This will be executed only once for each new Firebase Installation. */


async function registerInstallation(appConfig, installationEntry) {
  try {
    const registeredInstallationEntry = await createInstallationRequest(appConfig, installationEntry);
    return set(appConfig, registeredInstallationEntry);
  } catch (e) {
    if (isServerError(e) && e.customData.serverCode === 409) {
      // Server returned a "FID can not be used" error.
      // Generate a new ID next time.
      await remove(appConfig);
    } else {
      // Registration failed. Set FID as not registered.
      await set(appConfig, {
        fid: installationEntry.fid,
        registrationStatus: 0
        /* NOT_STARTED */

      });
    }

    throw e;
  }
}
/** Call if FID registration is pending in another request. */


async function waitUntilFidRegistration(appConfig) {
  // Unfortunately, there is no way of reliably observing when a value in
  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),
  // so we need to poll.
  let entry = await updateInstallationRequest(appConfig);

  while (entry.registrationStatus === 1
  /* IN_PROGRESS */
  ) {
    // createInstallation request still in progress.
    await sleep(100);
    entry = await updateInstallationRequest(appConfig);
  }

  if (entry.registrationStatus === 0
  /* NOT_STARTED */
  ) {
    // The request timed out or failed in a different call. Try again.
    const {
      installationEntry,
      registrationPromise
    } = await getInstallationEntry(appConfig);

    if (registrationPromise) {
      return registrationPromise;
    } else {
      // if there is no registrationPromise, entry is registered.
      return installationEntry;
    }
  }

  return entry;
}
/**
 * Called only if there is a CreateInstallation request in progress.
 *
 * Updates the InstallationEntry in the DB based on the status of the
 * CreateInstallation request.
 *
 * Returns the updated InstallationEntry.
 */


function updateInstallationRequest(appConfig) {
  return update(appConfig, oldEntry => {
    if (!oldEntry) {
      throw ERROR_FACTORY.create("installation-not-found"
      /* INSTALLATION_NOT_FOUND */
      );
    }

    return clearTimedOutRequest(oldEntry);
  });
}

function clearTimedOutRequest(entry) {
  if (hasInstallationRequestTimedOut(entry)) {
    return {
      fid: entry.fid,
      registrationStatus: 0
      /* NOT_STARTED */

    };
  }

  return entry;
}

function hasInstallationRequestTimedOut(installationEntry) {
  return installationEntry.registrationStatus === 1
  /* IN_PROGRESS */
  && installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now();
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


async function generateAuthTokenRequest({
  appConfig,
  platformLoggerProvider
}, installationEntry) {
  const endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);
  const headers = getHeadersWithAuth(appConfig, installationEntry); // If platform logger exists, add the platform info string to the header.

  const platformLogger = platformLoggerProvider.getImmediate({
    optional: true
  });

  if (platformLogger) {
    headers.append('x-firebase-client', platformLogger.getPlatformInfoString());
  }

  const body = {
    installation: {
      sdkVersion: PACKAGE_VERSION
    }
  };
  const request = {
    method: 'POST',
    headers,
    body: JSON.stringify(body)
  };
  const response = await retryIfServerError(() => fetch(endpoint, request));

  if (response.ok) {
    const responseValue = await response.json();
    const completedAuthToken = extractAuthTokenInfoFromResponse(responseValue);
    return completedAuthToken;
  } else {
    throw await getErrorFromResponse('Generate Auth Token', response);
  }
}

function getGenerateAuthTokenEndpoint(appConfig, {
  fid
}) {
  return `${getInstallationsEndpoint(appConfig)}/${fid}/authTokens:generate`;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns a valid authentication token for the installation. Generates a new
 * token if one doesn't exist, is expired or about to expire.
 *
 * Should only be called if the Firebase Installation is registered.
 */


async function refreshAuthToken(installations, forceRefresh = false) {
  let tokenPromise;
  const entry = await update(installations.appConfig, oldEntry => {
    if (!isEntryRegistered(oldEntry)) {
      throw ERROR_FACTORY.create("not-registered"
      /* NOT_REGISTERED */
      );
    }

    const oldAuthToken = oldEntry.authToken;

    if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {
      // There is a valid token in the DB.
      return oldEntry;
    } else if (oldAuthToken.requestStatus === 1
    /* IN_PROGRESS */
    ) {
      // There already is a token request in progress.
      tokenPromise = waitUntilAuthTokenRequest(installations, forceRefresh);
      return oldEntry;
    } else {
      // No token or token expired.
      if (!navigator.onLine) {
        throw ERROR_FACTORY.create("app-offline"
        /* APP_OFFLINE */
        );
      }

      const inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);
      tokenPromise = fetchAuthTokenFromServer(installations, inProgressEntry);
      return inProgressEntry;
    }
  });
  const authToken = tokenPromise ? await tokenPromise : entry.authToken;
  return authToken;
}
/**
 * Call only if FID is registered and Auth Token request is in progress.
 *
 * Waits until the current pending request finishes. If the request times out,
 * tries once in this thread as well.
 */


async function waitUntilAuthTokenRequest(installations, forceRefresh) {
  // Unfortunately, there is no way of reliably observing when a value in
  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),
  // so we need to poll.
  let entry = await updateAuthTokenRequest(installations.appConfig);

  while (entry.authToken.requestStatus === 1
  /* IN_PROGRESS */
  ) {
    // generateAuthToken still in progress.
    await sleep(100);
    entry = await updateAuthTokenRequest(installations.appConfig);
  }

  const authToken = entry.authToken;

  if (authToken.requestStatus === 0
  /* NOT_STARTED */
  ) {
    // The request timed out or failed in a different call. Try again.
    return refreshAuthToken(installations, forceRefresh);
  } else {
    return authToken;
  }
}
/**
 * Called only if there is a GenerateAuthToken request in progress.
 *
 * Updates the InstallationEntry in the DB based on the status of the
 * GenerateAuthToken request.
 *
 * Returns the updated InstallationEntry.
 */


function updateAuthTokenRequest(appConfig) {
  return update(appConfig, oldEntry => {
    if (!isEntryRegistered(oldEntry)) {
      throw ERROR_FACTORY.create("not-registered"
      /* NOT_REGISTERED */
      );
    }

    const oldAuthToken = oldEntry.authToken;

    if (hasAuthTokenRequestTimedOut(oldAuthToken)) {
      return Object.assign(Object.assign({}, oldEntry), {
        authToken: {
          requestStatus: 0
          /* NOT_STARTED */

        }
      });
    }

    return oldEntry;
  });
}

async function fetchAuthTokenFromServer(installations, installationEntry) {
  try {
    const authToken = await generateAuthTokenRequest(installations, installationEntry);
    const updatedInstallationEntry = Object.assign(Object.assign({}, installationEntry), {
      authToken
    });
    await set(installations.appConfig, updatedInstallationEntry);
    return authToken;
  } catch (e) {
    if (isServerError(e) && (e.customData.serverCode === 401 || e.customData.serverCode === 404)) {
      // Server returned a "FID not found" or a "Invalid authentication" error.
      // Generate a new ID next time.
      await remove(installations.appConfig);
    } else {
      const updatedInstallationEntry = Object.assign(Object.assign({}, installationEntry), {
        authToken: {
          requestStatus: 0
          /* NOT_STARTED */

        }
      });
      await set(installations.appConfig, updatedInstallationEntry);
    }

    throw e;
  }
}

function isEntryRegistered(installationEntry) {
  return installationEntry !== undefined && installationEntry.registrationStatus === 2
  /* COMPLETED */
  ;
}

function isAuthTokenValid(authToken) {
  return authToken.requestStatus === 2
  /* COMPLETED */
  && !isAuthTokenExpired(authToken);
}

function isAuthTokenExpired(authToken) {
  const now = Date.now();
  return now < authToken.creationTime || authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER;
}
/** Returns an updated InstallationEntry with an InProgressAuthToken. */


function makeAuthTokenRequestInProgressEntry(oldEntry) {
  const inProgressAuthToken = {
    requestStatus: 1
    /* IN_PROGRESS */
    ,
    requestTime: Date.now()
  };
  return Object.assign(Object.assign({}, oldEntry), {
    authToken: inProgressAuthToken
  });
}

function hasAuthTokenRequestTimedOut(authToken) {
  return authToken.requestStatus === 1
  /* IN_PROGRESS */
  && authToken.requestTime + PENDING_TIMEOUT_MS < Date.now();
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Creates a Firebase Installation if there isn't one for the app and
 * returns the Installation ID.
 * @param installations - The `Installations` instance.
 *
 * @public
 */


async function getId(installations) {
  const installationsImpl = installations;
  const {
    installationEntry,
    registrationPromise
  } = await getInstallationEntry(installationsImpl.appConfig);

  if (registrationPromise) {
    registrationPromise.catch(console.error);
  } else {
    // If the installation is already registered, update the authentication
    // token if needed.
    refreshAuthToken(installationsImpl).catch(console.error);
  }

  return installationEntry.fid;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns a Firebase Installations auth token, identifying the current
 * Firebase Installation.
 * @param installations - The `Installations` instance.
 * @param forceRefresh - Force refresh regardless of token expiration.
 *
 * @public
 */


async function getToken(installations, forceRefresh = false) {
  const installationsImpl = installations;
  await completeInstallationRegistration(installationsImpl.appConfig); // At this point we either have a Registered Installation in the DB, or we've
  // already thrown an error.

  const authToken = await refreshAuthToken(installationsImpl, forceRefresh);
  return authToken.token;
}

async function completeInstallationRegistration(appConfig) {
  const {
    registrationPromise
  } = await getInstallationEntry(appConfig);

  if (registrationPromise) {
    // A createInstallation request is in progress. Wait until it finishes.
    await registrationPromise;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


async function deleteInstallationRequest(appConfig, installationEntry) {
  const endpoint = getDeleteEndpoint(appConfig, installationEntry);
  const headers = getHeadersWithAuth(appConfig, installationEntry);
  const request = {
    method: 'DELETE',
    headers
  };
  const response = await retryIfServerError(() => fetch(endpoint, request));

  if (!response.ok) {
    throw await getErrorFromResponse('Delete Installation', response);
  }
}

function getDeleteEndpoint(appConfig, {
  fid
}) {
  return `${getInstallationsEndpoint(appConfig)}/${fid}`;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Deletes the Firebase Installation and all associated data.
 * @param installations - The `Installations` instance.
 *
 * @public
 */


async function deleteInstallations(installations) {
  const {
    appConfig
  } = installations;
  const entry = await update(appConfig, oldEntry => {
    if (oldEntry && oldEntry.registrationStatus === 0
    /* NOT_STARTED */
    ) {
      // Delete the unregistered entry without sending a deleteInstallation request.
      return undefined;
    }

    return oldEntry;
  });

  if (entry) {
    if (entry.registrationStatus === 1
    /* IN_PROGRESS */
    ) {
      // Can't delete while trying to register.
      throw ERROR_FACTORY.create("delete-pending-registration"
      /* DELETE_PENDING_REGISTRATION */
      );
    } else if (entry.registrationStatus === 2
    /* COMPLETED */
    ) {
      if (!navigator.onLine) {
        throw ERROR_FACTORY.create("app-offline"
        /* APP_OFFLINE */
        );
      } else {
        await deleteInstallationRequest(appConfig, entry);
        await remove(appConfig);
      }
    }
  }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Sets a new callback that will get called when Installation ID changes.
 * Returns an unsubscribe function that will remove the callback when called.
 * @param installations - The `Installations` instance.
 * @param callback - The callback function that is invoked when FID changes.
 * @returns A function that can be called to unsubscribe.
 *
 * @public
 */


function onIdChange(installations, callback) {
  const {
    appConfig
  } = installations;
  addCallback(appConfig, callback);
  return () => {
    removeCallback(appConfig, callback);
  };
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns an instance of {@link Installations} associated with the given
 * {@link @firebase/app#FirebaseApp} instance.
 * @param app - The {@link @firebase/app#FirebaseApp} instance.
 *
 * @public
 */


function getInstallations(app = (0, _app.getApp)()) {
  const installationsImpl = (0, _app._getProvider)(app, 'installations').getImmediate();
  return installationsImpl;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function extractAppConfig(app) {
  if (!app || !app.options) {
    throw getMissingValueError('App Configuration');
  }

  if (!app.name) {
    throw getMissingValueError('App Name');
  } // Required app config keys


  const configKeys = ['projectId', 'apiKey', 'appId'];

  for (const keyName of configKeys) {
    if (!app.options[keyName]) {
      throw getMissingValueError(keyName);
    }
  }

  return {
    appName: app.name,
    projectId: app.options.projectId,
    apiKey: app.options.apiKey,
    appId: app.options.appId
  };
}

function getMissingValueError(valueName) {
  return ERROR_FACTORY.create("missing-app-config-values"
  /* MISSING_APP_CONFIG_VALUES */
  , {
    valueName
  });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const INSTALLATIONS_NAME = 'installations';
const INSTALLATIONS_NAME_INTERNAL = 'installations-internal';

const publicFactory = container => {
  const app = container.getProvider('app').getImmediate(); // Throws if app isn't configured properly.

  const appConfig = extractAppConfig(app);
  const platformLoggerProvider = (0, _app._getProvider)(app, 'platform-logger');
  const installationsImpl = {
    app,
    appConfig,
    platformLoggerProvider,
    _delete: () => Promise.resolve()
  };
  return installationsImpl;
};

const internalFactory = container => {
  const app = container.getProvider('app').getImmediate(); // Internal FIS instance relies on public FIS instance.

  const installations = (0, _app._getProvider)(app, INSTALLATIONS_NAME).getImmediate();
  const installationsInternal = {
    getId: () => getId(installations),
    getToken: forceRefresh => getToken(installations, forceRefresh)
  };
  return installationsInternal;
};

function registerInstallations() {
  (0, _app._registerComponent)(new _component.Component(INSTALLATIONS_NAME, publicFactory, "PUBLIC"
  /* PUBLIC */
  ));
  (0, _app._registerComponent)(new _component.Component(INSTALLATIONS_NAME_INTERNAL, internalFactory, "PRIVATE"
  /* PRIVATE */
  ));
}
/**
 * Firebase Installations
 *
 * @packageDocumentation
 */


registerInstallations();
(0, _app.registerVersion)(name, version);
},{"@firebase/app":"node_modules/@firebase/app/dist/index.esm2017.js","@firebase/component":"node_modules/@firebase/component/dist/index.esm.js","@firebase/util":"node_modules/@firebase/util/dist/index.esm.js","idb":"node_modules/idb/build/idb.js"}],"node_modules/@firebase/analytics/dist/index.esm2017.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAnalytics = getAnalytics;
exports.initializeAnalytics = initializeAnalytics;
exports.isSupported = isSupported;
exports.logEvent = logEvent;
exports.setAnalyticsCollectionEnabled = setAnalyticsCollectionEnabled;
exports.setCurrentScreen = setCurrentScreen;
exports.setUserId = setUserId;
exports.setUserProperties = setUserProperties;
exports.settings = settings;

var _app = require("@firebase/app");

var _logger = require("@firebase/logger");

var _util = require("@firebase/util");

var _component = require("@firebase/component");

require("@firebase/installations");

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Type constant for Firebase Analytics.
 */
const ANALYTICS_TYPE = 'analytics'; // Key to attach FID to in gtag params.

const GA_FID_KEY = 'firebase_id';
const ORIGIN_KEY = 'origin';
const FETCH_TIMEOUT_MILLIS = 60 * 1000;
const DYNAMIC_CONFIG_URL = 'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';
const GTAG_URL = 'https://www.googletagmanager.com/gtag/js';
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const logger = new _logger.Logger('@firebase/analytics');
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Makeshift polyfill for Promise.allSettled(). Resolves when all promises
 * have either resolved or rejected.
 *
 * @param promises Array of promises to wait for.
 */

function promiseAllSettled(promises) {
  return Promise.all(promises.map(promise => promise.catch(e => e)));
}
/**
 * Inserts gtag script tag into the page to asynchronously download gtag.
 * @param dataLayerName Name of datalayer (most often the default, "_dataLayer").
 */


function insertScriptTag(dataLayerName, measurementId) {
  const script = document.createElement('script'); // We are not providing an analyticsId in the URL because it would trigger a `page_view`
  // without fid. We will initialize ga-id using gtag (config) command together with fid.

  script.src = `${GTAG_URL}?l=${dataLayerName}&id=${measurementId}`;
  script.async = true;
  document.head.appendChild(script);
}
/**
 * Get reference to, or create, global datalayer.
 * @param dataLayerName Name of datalayer (most often the default, "_dataLayer").
 */


function getOrCreateDataLayer(dataLayerName) {
  // Check for existing dataLayer and create if needed.
  let dataLayer = [];

  if (Array.isArray(window[dataLayerName])) {
    dataLayer = window[dataLayerName];
  } else {
    window[dataLayerName] = dataLayer;
  }

  return dataLayer;
}
/**
 * Wrapped gtag logic when gtag is called with 'config' command.
 *
 * @param gtagCore Basic gtag function that just appends to dataLayer.
 * @param initializationPromisesMap Map of appIds to their initialization promises.
 * @param dynamicConfigPromisesList Array of dynamic config fetch promises.
 * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.
 * @param measurementId GA Measurement ID to set config for.
 * @param gtagParams Gtag config params to set.
 */


async function gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, measurementId, gtagParams) {
  // If config is already fetched, we know the appId and can use it to look up what FID promise we
  /// are waiting for, and wait only on that one.
  const correspondingAppId = measurementIdToAppId[measurementId];

  try {
    if (correspondingAppId) {
      await initializationPromisesMap[correspondingAppId];
    } else {
      // If config is not fetched yet, wait for all configs (we don't know which one we need) and
      // find the appId (if any) corresponding to this measurementId. If there is one, wait on
      // that appId's initialization promise. If there is none, promise resolves and gtag
      // call goes through.
      const dynamicConfigResults = await promiseAllSettled(dynamicConfigPromisesList);
      const foundConfig = dynamicConfigResults.find(config => config.measurementId === measurementId);

      if (foundConfig) {
        await initializationPromisesMap[foundConfig.appId];
      }
    }
  } catch (e) {
    logger.error(e);
  }

  gtagCore("config"
  /* CONFIG */
  , measurementId, gtagParams);
}
/**
 * Wrapped gtag logic when gtag is called with 'event' command.
 *
 * @param gtagCore Basic gtag function that just appends to dataLayer.
 * @param initializationPromisesMap Map of appIds to their initialization promises.
 * @param dynamicConfigPromisesList Array of dynamic config fetch promises.
 * @param measurementId GA Measurement ID to log event to.
 * @param gtagParams Params to log with this event.
 */


async function gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementId, gtagParams) {
  try {
    let initializationPromisesToWaitFor = []; // If there's a 'send_to' param, check if any ID specified matches
    // an initializeIds() promise we are waiting for.

    if (gtagParams && gtagParams['send_to']) {
      let gaSendToList = gtagParams['send_to']; // Make it an array if is isn't, so it can be dealt with the same way.

      if (!Array.isArray(gaSendToList)) {
        gaSendToList = [gaSendToList];
      } // Checking 'send_to' fields requires having all measurement ID results back from
      // the dynamic config fetch.


      const dynamicConfigResults = await promiseAllSettled(dynamicConfigPromisesList);

      for (const sendToId of gaSendToList) {
        // Any fetched dynamic measurement ID that matches this 'send_to' ID
        const foundConfig = dynamicConfigResults.find(config => config.measurementId === sendToId);
        const initializationPromise = foundConfig && initializationPromisesMap[foundConfig.appId];

        if (initializationPromise) {
          initializationPromisesToWaitFor.push(initializationPromise);
        } else {
          // Found an item in 'send_to' that is not associated
          // directly with an FID, possibly a group.  Empty this array,
          // exit the loop early, and let it get populated below.
          initializationPromisesToWaitFor = [];
          break;
        }
      }
    } // This will be unpopulated if there was no 'send_to' field , or
    // if not all entries in the 'send_to' field could be mapped to
    // a FID. In these cases, wait on all pending initialization promises.


    if (initializationPromisesToWaitFor.length === 0) {
      initializationPromisesToWaitFor = Object.values(initializationPromisesMap);
    } // Run core gtag function with args after all relevant initialization
    // promises have been resolved.


    await Promise.all(initializationPromisesToWaitFor); // Workaround for http://b/141370449 - third argument cannot be undefined.

    gtagCore("event"
    /* EVENT */
    , measurementId, gtagParams || {});
  } catch (e) {
    logger.error(e);
  }
}
/**
 * Wraps a standard gtag function with extra code to wait for completion of
 * relevant initialization promises before sending requests.
 *
 * @param gtagCore Basic gtag function that just appends to dataLayer.
 * @param initializationPromisesMap Map of appIds to their initialization promises.
 * @param dynamicConfigPromisesList Array of dynamic config fetch promises.
 * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.
 */


function wrapGtag(gtagCore,
/**
 * Allows wrapped gtag calls to wait on whichever intialization promises are required,
 * depending on the contents of the gtag params' `send_to` field, if any.
 */
initializationPromisesMap,
/**
 * Wrapped gtag calls sometimes require all dynamic config fetches to have returned
 * before determining what initialization promises (which include FIDs) to wait for.
 */
dynamicConfigPromisesList,
/**
 * Wrapped gtag config calls can narrow down which initialization promise (with FID)
 * to wait for if the measurementId is already fetched, by getting the corresponding appId,
 * which is the key for the initialization promises map.
 */
measurementIdToAppId) {
  /**
   * Wrapper around gtag that ensures FID is sent with gtag calls.
   * @param command Gtag command type.
   * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.
   * @param gtagParams Params if event is EVENT/CONFIG.
   */
  async function gtagWrapper(command, idOrNameOrParams, gtagParams) {
    try {
      // If event, check that relevant initialization promises have completed.
      if (command === "event"
      /* EVENT */
      ) {
        // If EVENT, second arg must be measurementId.
        await gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, idOrNameOrParams, gtagParams);
      } else if (command === "config"
      /* CONFIG */
      ) {
        // If CONFIG, second arg must be measurementId.
        await gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, idOrNameOrParams, gtagParams);
      } else {
        // If SET, second arg must be params.
        gtagCore("set"
        /* SET */
        , idOrNameOrParams);
      }
    } catch (e) {
      logger.error(e);
    }
  }

  return gtagWrapper;
}
/**
 * Creates global gtag function or wraps existing one if found.
 * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and
 * 'event' calls that belong to the GAID associated with this Firebase instance.
 *
 * @param initializationPromisesMap Map of appIds to their initialization promises.
 * @param dynamicConfigPromisesList Array of dynamic config fetch promises.
 * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.
 * @param dataLayerName Name of global GA datalayer array.
 * @param gtagFunctionName Name of global gtag function ("gtag" if not user-specified).
 */


function wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagFunctionName) {
  // Create a basic core gtag function
  let gtagCore = function (..._args) {
    // Must push IArguments object, not an array.
    window[dataLayerName].push(arguments);
  }; // Replace it with existing one if found


  if (window[gtagFunctionName] && typeof window[gtagFunctionName] === 'function') {
    // @ts-ignore
    gtagCore = window[gtagFunctionName];
  }

  window[gtagFunctionName] = wrapGtag(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId);
  return {
    gtagCore,
    wrappedGtag: window[gtagFunctionName]
  };
}
/**
 * Returns first script tag in DOM matching our gtag url pattern.
 */


function findGtagScriptOnPage() {
  const scriptTags = window.document.getElementsByTagName('script');

  for (const tag of Object.values(scriptTags)) {
    if (tag.src && tag.src.includes(GTAG_URL)) {
      return tag;
    }
  }

  return null;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const ERRORS = {
  ["already-exists"
  /* ALREADY_EXISTS */
  ]: 'A Firebase Analytics instance with the appId {$id} ' + ' already exists. ' + 'Only one Firebase Analytics instance can be created for each appId.',
  ["already-initialized"
  /* ALREADY_INITIALIZED */
  ]: 'initializeAnalytics() cannot be called again with different options than those ' + 'it was initially called with. It can be called again with the same options to ' + 'return the existing instance, or getAnalytics() can be used ' + 'to get a reference to the already-intialized instance.',
  ["already-initialized-settings"
  /* ALREADY_INITIALIZED_SETTINGS */
  ]: 'Firebase Analytics has already been initialized.' + 'settings() must be called before initializing any Analytics instance' + 'or it will have no effect.',
  ["interop-component-reg-failed"
  /* INTEROP_COMPONENT_REG_FAILED */
  ]: 'Firebase Analytics Interop Component failed to instantiate: {$reason}',
  ["invalid-analytics-context"
  /* INVALID_ANALYTICS_CONTEXT */
  ]: 'Firebase Analytics is not supported in this environment. ' + 'Wrap initialization of analytics in analytics.isSupported() ' + 'to prevent initialization in unsupported environments. Details: {$errorInfo}',
  ["indexeddb-unavailable"
  /* INDEXEDDB_UNAVAILABLE */
  ]: 'IndexedDB unavailable or restricted in this environment. ' + 'Wrap initialization of analytics in analytics.isSupported() ' + 'to prevent initialization in unsupported environments. Details: {$errorInfo}',
  ["fetch-throttle"
  /* FETCH_THROTTLE */
  ]: 'The config fetch request timed out while in an exponential backoff state.' + ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',
  ["config-fetch-failed"
  /* CONFIG_FETCH_FAILED */
  ]: 'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}',
  ["no-api-key"
  /* NO_API_KEY */
  ]: 'The "apiKey" field is empty in the local Firebase config. Firebase Analytics requires this field to' + 'contain a valid API key.',
  ["no-app-id"
  /* NO_APP_ID */
  ]: 'The "appId" field is empty in the local Firebase config. Firebase Analytics requires this field to' + 'contain a valid app ID.'
};
const ERROR_FACTORY = new _util.ErrorFactory('analytics', 'Analytics', ERRORS);
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Backoff factor for 503 errors, which we want to be conservative about
 * to avoid overloading servers. Each retry interval will be
 * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one
 * will be ~30 seconds (with fuzzing).
 */

const LONG_RETRY_FACTOR = 30;
/**
 * Base wait interval to multiplied by backoffFactor^backoffCount.
 */

const BASE_INTERVAL_MILLIS = 1000;
/**
 * Stubbable retry data storage class.
 */

class RetryData {
  constructor(throttleMetadata = {}, intervalMillis = BASE_INTERVAL_MILLIS) {
    this.throttleMetadata = throttleMetadata;
    this.intervalMillis = intervalMillis;
  }

  getThrottleMetadata(appId) {
    return this.throttleMetadata[appId];
  }

  setThrottleMetadata(appId, metadata) {
    this.throttleMetadata[appId] = metadata;
  }

  deleteThrottleMetadata(appId) {
    delete this.throttleMetadata[appId];
  }

}

const defaultRetryData = new RetryData();
/**
 * Set GET request headers.
 * @param apiKey App API key.
 */

function getHeaders(apiKey) {
  return new Headers({
    Accept: 'application/json',
    'x-goog-api-key': apiKey
  });
}
/**
 * Fetches dynamic config from backend.
 * @param app Firebase app to fetch config for.
 */


async function fetchDynamicConfig(appFields) {
  var _a;

  const {
    appId,
    apiKey
  } = appFields;
  const request = {
    method: 'GET',
    headers: getHeaders(apiKey)
  };
  const appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);
  const response = await fetch(appUrl, request);

  if (response.status !== 200 && response.status !== 304) {
    let errorMessage = '';

    try {
      // Try to get any error message text from server response.
      const jsonResponse = await response.json();

      if ((_a = jsonResponse.error) === null || _a === void 0 ? void 0 : _a.message) {
        errorMessage = jsonResponse.error.message;
      }
    } catch (_ignored) {}

    throw ERROR_FACTORY.create("config-fetch-failed"
    /* CONFIG_FETCH_FAILED */
    , {
      httpStatus: response.status,
      responseMessage: errorMessage
    });
  }

  return response.json();
}
/**
 * Fetches dynamic config from backend, retrying if failed.
 * @param app Firebase app to fetch config for.
 */


async function fetchDynamicConfigWithRetry(app, // retryData and timeoutMillis are parameterized to allow passing a different value for testing.
retryData = defaultRetryData, timeoutMillis) {
  const {
    appId,
    apiKey,
    measurementId
  } = app.options;

  if (!appId) {
    throw ERROR_FACTORY.create("no-app-id"
    /* NO_APP_ID */
    );
  }

  if (!apiKey) {
    if (measurementId) {
      return {
        measurementId,
        appId
      };
    }

    throw ERROR_FACTORY.create("no-api-key"
    /* NO_API_KEY */
    );
  }

  const throttleMetadata = retryData.getThrottleMetadata(appId) || {
    backoffCount: 0,
    throttleEndTimeMillis: Date.now()
  };
  const signal = new AnalyticsAbortSignal();
  setTimeout(async () => {
    // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.
    signal.abort();
  }, timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS);
  return attemptFetchDynamicConfigWithRetry({
    appId,
    apiKey,
    measurementId
  }, throttleMetadata, signal, retryData);
}
/**
 * Runs one retry attempt.
 * @param appFields Necessary app config fields.
 * @param throttleMetadata Ongoing metadata to determine throttling times.
 * @param signal Abort signal.
 */


async function attemptFetchDynamicConfigWithRetry(appFields, {
  throttleEndTimeMillis,
  backoffCount
}, signal, retryData = defaultRetryData // for testing
) {
  const {
    appId,
    measurementId
  } = appFields; // Starts with a (potentially zero) timeout to support resumption from stored state.
  // Ensures the throttle end time is honored if the last attempt timed out.
  // Note the SDK will never make a request if the fetch timeout expires at this point.

  try {
    await setAbortableTimeout(signal, throttleEndTimeMillis);
  } catch (e) {
    if (measurementId) {
      logger.warn(`Timed out fetching this Firebase app's measurement ID from the server.` + ` Falling back to the measurement ID ${measurementId}` + ` provided in the "measurementId" field in the local Firebase config. [${e.message}]`);
      return {
        appId,
        measurementId
      };
    }

    throw e;
  }

  try {
    const response = await fetchDynamicConfig(appFields); // Note the SDK only clears throttle state if response is success or non-retriable.

    retryData.deleteThrottleMetadata(appId);
    return response;
  } catch (e) {
    if (!isRetriableError(e)) {
      retryData.deleteThrottleMetadata(appId);

      if (measurementId) {
        logger.warn(`Failed to fetch this Firebase app's measurement ID from the server.` + ` Falling back to the measurement ID ${measurementId}` + ` provided in the "measurementId" field in the local Firebase config. [${e.message}]`);
        return {
          appId,
          measurementId
        };
      } else {
        throw e;
      }
    }

    const backoffMillis = Number(e.customData.httpStatus) === 503 ? (0, _util.calculateBackoffMillis)(backoffCount, retryData.intervalMillis, LONG_RETRY_FACTOR) : (0, _util.calculateBackoffMillis)(backoffCount, retryData.intervalMillis); // Increments backoff state.

    const throttleMetadata = {
      throttleEndTimeMillis: Date.now() + backoffMillis,
      backoffCount: backoffCount + 1
    }; // Persists state.

    retryData.setThrottleMetadata(appId, throttleMetadata);
    logger.debug(`Calling attemptFetch again in ${backoffMillis} millis`);
    return attemptFetchDynamicConfigWithRetry(appFields, throttleMetadata, signal, retryData);
  }
}
/**
 * Supports waiting on a backoff by:
 *
 * <ul>
 *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>
 *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>
 *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled
 *       request appear the same.</li>
 * </ul>
 *
 * <p>Visible for testing.
 */


function setAbortableTimeout(signal, throttleEndTimeMillis) {
  return new Promise((resolve, reject) => {
    // Derives backoff from given end time, normalizing negative numbers to zero.
    const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);
    const timeout = setTimeout(resolve, backoffMillis); // Adds listener, rather than sets onabort, because signal is a shared object.

    signal.addEventListener(() => {
      clearTimeout(timeout); // If the request completes before this timeout, the rejection has no effect.

      reject(ERROR_FACTORY.create("fetch-throttle"
      /* FETCH_THROTTLE */
      , {
        throttleEndTimeMillis
      }));
    });
  });
}
/**
 * Returns true if the {@link Error} indicates a fetch request may succeed later.
 */


function isRetriableError(e) {
  if (!(e instanceof _util.FirebaseError) || !e.customData) {
    return false;
  } // Uses string index defined by ErrorData, which FirebaseError implements.


  const httpStatus = Number(e.customData['httpStatus']);
  return httpStatus === 429 || httpStatus === 500 || httpStatus === 503 || httpStatus === 504;
}
/**
 * Shims a minimal AbortSignal (copied from Remote Config).
 *
 * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects
 * of networking, such as retries. Firebase doesn't use AbortController enough to justify a
 * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be
 * swapped out if/when we do.
 */


class AnalyticsAbortSignal {
  constructor() {
    this.listeners = [];
  }

  addEventListener(listener) {
    this.listeners.push(listener);
  }

  abort() {
    this.listeners.forEach(listener => listener());
  }

}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


async function validateIndexedDB() {
  if (!(0, _util.isIndexedDBAvailable)()) {
    logger.warn(ERROR_FACTORY.create("indexeddb-unavailable"
    /* INDEXEDDB_UNAVAILABLE */
    , {
      errorInfo: 'IndexedDB is not available in this environment.'
    }).message);
    return false;
  } else {
    try {
      await (0, _util.validateIndexedDBOpenable)();
    } catch (e) {
      logger.warn(ERROR_FACTORY.create("indexeddb-unavailable"
      /* INDEXEDDB_UNAVAILABLE */
      , {
        errorInfo: e
      }).message);
      return false;
    }
  }

  return true;
}
/**
 * Initialize the analytics instance in gtag.js by calling config command with fid.
 *
 * NOTE: We combine analytics initialization and setting fid together because we want fid to be
 * part of the `page_view` event that's sent during the initialization
 * @param app Firebase app
 * @param gtagCore The gtag function that's not wrapped.
 * @param dynamicConfigPromisesList Array of all dynamic config promises.
 * @param measurementIdToAppId Maps measurementID to appID.
 * @param installations _FirebaseInstallationsInternal instance.
 *
 * @returns Measurement ID.
 */


async function _initializeAnalytics(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCore, dataLayerName, options) {
  var _a;

  const dynamicConfigPromise = fetchDynamicConfigWithRetry(app); // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.

  dynamicConfigPromise.then(config => {
    measurementIdToAppId[config.measurementId] = config.appId;

    if (app.options.measurementId && config.measurementId !== app.options.measurementId) {
      logger.warn(`The measurement ID in the local Firebase config (${app.options.measurementId})` + ` does not match the measurement ID fetched from the server (${config.measurementId}).` + ` To ensure analytics events are always sent to the correct Analytics property,` + ` update the` + ` measurement ID field in the local config or remove it from the local config.`);
    }
  }).catch(e => logger.error(e)); // Add to list to track state of all dynamic config promises.

  dynamicConfigPromisesList.push(dynamicConfigPromise);
  const fidPromise = validateIndexedDB().then(envIsValid => {
    if (envIsValid) {
      return installations.getId();
    } else {
      return undefined;
    }
  });
  const [dynamicConfig, fid] = await Promise.all([dynamicConfigPromise, fidPromise]); // Detect if user has already put the gtag <script> tag on this page.

  if (!findGtagScriptOnPage()) {
    insertScriptTag(dataLayerName, dynamicConfig.measurementId);
  } // This command initializes gtag.js and only needs to be called once for the entire web app,
  // but since it is idempotent, we can call it multiple times.
  // We keep it together with other initialization logic for better code structure.
  // eslint-disable-next-line @typescript-eslint/no-explicit-any


  gtagCore('js', new Date()); // User config added first. We don't want users to accidentally overwrite
  // base Firebase config properties.

  const configProperties = (_a = options === null || options === void 0 ? void 0 : options.config) !== null && _a !== void 0 ? _a : {}; // guard against developers accidentally setting properties with prefix `firebase_`

  configProperties[ORIGIN_KEY] = 'firebase';
  configProperties.update = true;

  if (fid != null) {
    configProperties[GA_FID_KEY] = fid;
  } // It should be the first config command called on this GA-ID
  // Initialize this GA-ID and set FID on it using the gtag config API.
  // Note: This will trigger a page_view event unless 'send_page_view' is set to false in
  // `configProperties`.


  gtagCore("config"
  /* CONFIG */
  , dynamicConfig.measurementId, configProperties);
  return dynamicConfig.measurementId;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Analytics Service class.
 */


class AnalyticsService {
  constructor(app) {
    this.app = app;
  }

  _delete() {
    delete initializationPromisesMap[this.app.options.appId];
    return Promise.resolve();
  }

}
/**
 * Maps appId to full initialization promise. Wrapped gtag calls must wait on
 * all or some of these, depending on the call's `send_to` param and the status
 * of the dynamic config fetches (see below).
 */


let initializationPromisesMap = {};
/**
 * List of dynamic config fetch promises. In certain cases, wrapped gtag calls
 * wait on all these to be complete in order to determine if it can selectively
 * wait for only certain initialization (FID) promises or if it must wait for all.
 */

let dynamicConfigPromisesList = [];
/**
 * Maps fetched measurementIds to appId. Populated when the app's dynamic config
 * fetch completes. If already populated, gtag config calls can use this to
 * selectively wait for only this app's initialization promise (FID) instead of all
 * initialization promises.
 */

const measurementIdToAppId = {};
/**
 * Name for window global data layer array used by GA: defaults to 'dataLayer'.
 */

let dataLayerName = 'dataLayer';
/**
 * Name for window global gtag function used by GA: defaults to 'gtag'.
 */

let gtagName = 'gtag';
/**
 * Reproduction of standard gtag function or reference to existing
 * gtag function on window object.
 */

let gtagCoreFunction;
/**
 * Wrapper around gtag function that ensures FID is sent with all
 * relevant event and config calls.
 */

let wrappedGtagFunction;
/**
 * Flag to ensure page initialization steps (creation or wrapping of
 * dataLayer and gtag script) are only run once per page load.
 */

let globalInitDone = false;
/**
 * Configures Firebase Analytics to use custom `gtag` or `dataLayer` names.
 * Intended to be used if `gtag.js` script has been installed on
 * this page independently of Firebase Analytics, and is using non-default
 * names for either the `gtag` function or for `dataLayer`.
 * Must be called before calling `getAnalytics()` or it won't
 * have any effect.
 *
 * @public
 *
 * @param options - Custom gtag and dataLayer names.
 */

function settings(options) {
  if (globalInitDone) {
    throw ERROR_FACTORY.create("already-initialized"
    /* ALREADY_INITIALIZED */
    );
  }

  if (options.dataLayerName) {
    dataLayerName = options.dataLayerName;
  }

  if (options.gtagName) {
    gtagName = options.gtagName;
  }
}
/**
 * Returns true if no environment mismatch is found.
 * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT
 * error that also lists details for each mismatch found.
 */


function warnOnBrowserContextMismatch() {
  const mismatchedEnvMessages = [];

  if ((0, _util.isBrowserExtension)()) {
    mismatchedEnvMessages.push('This is a browser extension environment.');
  }

  if (!(0, _util.areCookiesEnabled)()) {
    mismatchedEnvMessages.push('Cookies are not available.');
  }

  if (mismatchedEnvMessages.length > 0) {
    const details = mismatchedEnvMessages.map((message, index) => `(${index + 1}) ${message}`).join(' ');
    const err = ERROR_FACTORY.create("invalid-analytics-context"
    /* INVALID_ANALYTICS_CONTEXT */
    , {
      errorInfo: details
    });
    logger.warn(err.message);
  }
}
/**
 * Analytics instance factory.
 * @internal
 */


function factory(app, installations, options) {
  warnOnBrowserContextMismatch();
  const appId = app.options.appId;

  if (!appId) {
    throw ERROR_FACTORY.create("no-app-id"
    /* NO_APP_ID */
    );
  }

  if (!app.options.apiKey) {
    if (app.options.measurementId) {
      logger.warn(`The "apiKey" field is empty in the local Firebase config. This is needed to fetch the latest` + ` measurement ID for this Firebase app. Falling back to the measurement ID ${app.options.measurementId}` + ` provided in the "measurementId" field in the local Firebase config.`);
    } else {
      throw ERROR_FACTORY.create("no-api-key"
      /* NO_API_KEY */
      );
    }
  }

  if (initializationPromisesMap[appId] != null) {
    throw ERROR_FACTORY.create("already-exists"
    /* ALREADY_EXISTS */
    , {
      id: appId
    });
  }

  if (!globalInitDone) {
    // Steps here should only be done once per page: creation or wrapping
    // of dataLayer and global gtag function.
    getOrCreateDataLayer(dataLayerName);
    const {
      wrappedGtag,
      gtagCore
    } = wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagName);
    wrappedGtagFunction = wrappedGtag;
    gtagCoreFunction = gtagCore;
    globalInitDone = true;
  } // Async but non-blocking.
  // This map reflects the completion state of all promises for each appId.


  initializationPromisesMap[appId] = _initializeAnalytics(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCoreFunction, dataLayerName, options);
  const analyticsInstance = new AnalyticsService(app);
  return analyticsInstance;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Logs an analytics event through the Firebase SDK.
 *
 * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event
 * @param eventName Google Analytics event name, choose from standard list or use a custom string.
 * @param eventParams Analytics event parameters.
 */


async function logEvent$1(gtagFunction, initializationPromise, eventName, eventParams, options) {
  if (options && options.global) {
    gtagFunction("event"
    /* EVENT */
    , eventName, eventParams);
    return;
  } else {
    const measurementId = await initializationPromise;
    const params = Object.assign(Object.assign({}, eventParams), {
      'send_to': measurementId
    });
    gtagFunction("event"
    /* EVENT */
    , eventName, params);
  }
}
/**
 * Set screen_name parameter for this Google Analytics ID.
 *
 * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event
 * @param screenName Screen name string to set.
 */


async function setCurrentScreen$1(gtagFunction, initializationPromise, screenName, options) {
  if (options && options.global) {
    gtagFunction("set"
    /* SET */
    , {
      'screen_name': screenName
    });
    return Promise.resolve();
  } else {
    const measurementId = await initializationPromise;
    gtagFunction("config"
    /* CONFIG */
    , measurementId, {
      update: true,
      'screen_name': screenName
    });
  }
}
/**
 * Set user_id parameter for this Google Analytics ID.
 *
 * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event
 * @param id User ID string to set
 */


async function setUserId$1(gtagFunction, initializationPromise, id, options) {
  if (options && options.global) {
    gtagFunction("set"
    /* SET */
    , {
      'user_id': id
    });
    return Promise.resolve();
  } else {
    const measurementId = await initializationPromise;
    gtagFunction("config"
    /* CONFIG */
    , measurementId, {
      update: true,
      'user_id': id
    });
  }
}
/**
 * Set all other user properties other than user_id and screen_name.
 *
 * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event
 * @param properties Map of user properties to set
 */


async function setUserProperties$1(gtagFunction, initializationPromise, properties, options) {
  if (options && options.global) {
    const flatProperties = {};

    for (const key of Object.keys(properties)) {
      // use dot notation for merge behavior in gtag.js
      flatProperties[`user_properties.${key}`] = properties[key];
    }

    gtagFunction("set"
    /* SET */
    , flatProperties);
    return Promise.resolve();
  } else {
    const measurementId = await initializationPromise;
    gtagFunction("config"
    /* CONFIG */
    , measurementId, {
      update: true,
      'user_properties': properties
    });
  }
}
/**
 * Set whether collection is enabled for this ID.
 *
 * @param enabled If true, collection is enabled for this ID.
 */


async function setAnalyticsCollectionEnabled$1(initializationPromise, enabled) {
  const measurementId = await initializationPromise;
  window[`ga-disable-${measurementId}`] = !enabled;
}
/* eslint-disable @typescript-eslint/no-explicit-any */

/**
 * Returns an {@link Analytics} instance for the given app.
 *
 * @public
 *
 * @param app - The {@link @firebase/app#FirebaseApp} to use.
 */


function getAnalytics(app = (0, _app.getApp)()) {
  app = (0, _util.getModularInstance)(app); // Dependencies

  const analyticsProvider = (0, _app._getProvider)(app, ANALYTICS_TYPE);

  if (analyticsProvider.isInitialized()) {
    return analyticsProvider.getImmediate();
  }

  return initializeAnalytics(app);
}
/**
 * Returns an {@link Analytics} instance for the given app.
 *
 * @public
 *
 * @param app - The {@link @firebase/app#FirebaseApp} to use.
 */


function initializeAnalytics(app, options = {}) {
  // Dependencies
  const analyticsProvider = (0, _app._getProvider)(app, ANALYTICS_TYPE);

  if (analyticsProvider.isInitialized()) {
    const existingInstance = analyticsProvider.getImmediate();

    if ((0, _util.deepEqual)(options, analyticsProvider.getOptions())) {
      return existingInstance;
    } else {
      throw ERROR_FACTORY.create("already-initialized"
      /* ALREADY_INITIALIZED */
      );
    }
  }

  const analyticsInstance = analyticsProvider.initialize({
    options
  });
  return analyticsInstance;
}
/**
 * This is a public static method provided to users that wraps four different checks:
 *
 * 1. Check if it's not a browser extension environment.
 * 2. Check if cookies are enabled in current browser.
 * 3. Check if IndexedDB is supported by the browser environment.
 * 4. Check if the current browser context is valid for using `IndexedDB.open()`.
 *
 * @public
 *
 */


async function isSupported() {
  if ((0, _util.isBrowserExtension)()) {
    return false;
  }

  if (!(0, _util.areCookiesEnabled)()) {
    return false;
  }

  if (!(0, _util.isIndexedDBAvailable)()) {
    return false;
  }

  try {
    const isDBOpenable = await (0, _util.validateIndexedDBOpenable)();
    return isDBOpenable;
  } catch (error) {
    return false;
  }
}
/**
 * Use gtag `config` command to set `screen_name`.
 *
 * @public
 *
 * @param analyticsInstance - The {@link Analytics} instance.
 * @param screenName - Screen name to set.
 */


function setCurrentScreen(analyticsInstance, screenName, options) {
  analyticsInstance = (0, _util.getModularInstance)(analyticsInstance);
  setCurrentScreen$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], screenName, options).catch(e => logger.error(e));
}
/**
 * Use gtag `config` command to set `user_id`.
 *
 * @public
 *
 * @param analyticsInstance - The {@link Analytics} instance.
 * @param id - User ID to set.
 */


function setUserId(analyticsInstance, id, options) {
  analyticsInstance = (0, _util.getModularInstance)(analyticsInstance);
  setUserId$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], id, options).catch(e => logger.error(e));
}
/**
 * Use gtag `config` command to set all params specified.
 *
 * @public
 */


function setUserProperties(analyticsInstance, properties, options) {
  analyticsInstance = (0, _util.getModularInstance)(analyticsInstance);
  setUserProperties$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], properties, options).catch(e => logger.error(e));
}
/**
 * Sets whether Google Analytics collection is enabled for this app on this device.
 * Sets global `window['ga-disable-analyticsId'] = true;`
 *
 * @public
 *
 * @param analyticsInstance - The {@link Analytics} instance.
 * @param enabled - If true, enables collection, if false, disables it.
 */


function setAnalyticsCollectionEnabled(analyticsInstance, enabled) {
  analyticsInstance = (0, _util.getModularInstance)(analyticsInstance);
  setAnalyticsCollectionEnabled$1(initializationPromisesMap[analyticsInstance.app.options.appId], enabled).catch(e => logger.error(e));
}
/**
 * Sends a Google Analytics event with given `eventParams`. This method
 * automatically associates this logged event with this Firebase web
 * app instance on this device.
 * List of official event parameters can be found in the gtag.js
 * reference documentation:
 * {@link https://developers.google.com/gtagjs/reference/ga4-events
 * | the GA4 reference documentation}.
 *
 * @public
 */


function logEvent(analyticsInstance, eventName, eventParams, options) {
  analyticsInstance = (0, _util.getModularInstance)(analyticsInstance);
  logEvent$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], eventName, eventParams, options).catch(e => logger.error(e));
}

const name = "@firebase/analytics";
const version = "0.7.0";
/**
 * Firebase Analytics
 *
 * @packageDocumentation
 */

function registerAnalytics() {
  (0, _app._registerComponent)(new _component.Component(ANALYTICS_TYPE, (container, {
    options: analyticsOptions
  }) => {
    // getImmediate for FirebaseApp will always succeed
    const app = container.getProvider('app').getImmediate();
    const installations = container.getProvider('installations-internal').getImmediate();
    return factory(app, installations, analyticsOptions);
  }, "PUBLIC"
  /* PUBLIC */
  ));
  (0, _app._registerComponent)(new _component.Component('analytics-internal', internalFactory, "PRIVATE"
  /* PRIVATE */
  ));
  (0, _app.registerVersion)(name, version);

  function internalFactory(container) {
    try {
      const analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();
      return {
        logEvent: (eventName, eventParams, options) => logEvent(analytics, eventName, eventParams, options)
      };
    } catch (e) {
      throw ERROR_FACTORY.create("interop-component-reg-failed"
      /* INTEROP_COMPONENT_REG_FAILED */
      , {
        reason: e
      });
    }
  }
}

registerAnalytics();
},{"@firebase/app":"node_modules/@firebase/app/dist/index.esm2017.js","@firebase/logger":"node_modules/@firebase/logger/dist/index.esm.js","@firebase/util":"node_modules/@firebase/util/dist/index.esm.js","@firebase/component":"node_modules/@firebase/component/dist/index.esm.js","@firebase/installations":"node_modules/@firebase/installations/dist/index.esm2017.js"}],"node_modules/@firebase/analytics-compat/dist/index.esm2017.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.registerAnalytics = registerAnalytics;

var _appCompat = _interopRequireDefault(require("@firebase/app-compat"));

var _analytics = require("@firebase/analytics");

var _component = require("@firebase/component");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const name = "@firebase/analytics-compat";
const version = "0.1.1";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

class AnalyticsService {
  constructor(app, _delegate) {
    this.app = app;
    this._delegate = _delegate;
  }

  logEvent(eventName, eventParams, options) {
    (0, _analytics.logEvent)(this._delegate, eventName, eventParams, options);
  }

  setCurrentScreen(screenName, options) {
    (0, _analytics.setCurrentScreen)(this._delegate, screenName, options);
  }

  setUserId(id, options) {
    (0, _analytics.setUserId)(this._delegate, id, options);
  }

  setUserProperties(properties, options) {
    (0, _analytics.setUserProperties)(this._delegate, properties, options);
  }

  setAnalyticsCollectionEnabled(enabled) {
    (0, _analytics.setAnalyticsCollectionEnabled)(this._delegate, enabled);
  }

}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Officially recommended event names for gtag.js
 * Any other string is also allowed.
 */


var EventName;

(function (EventName) {
  EventName["ADD_SHIPPING_INFO"] = "add_shipping_info";
  EventName["ADD_PAYMENT_INFO"] = "add_payment_info";
  EventName["ADD_TO_CART"] = "add_to_cart";
  EventName["ADD_TO_WISHLIST"] = "add_to_wishlist";
  EventName["BEGIN_CHECKOUT"] = "begin_checkout";
  /**
   * @deprecated
   * This event name is deprecated and is unsupported in updated
   * Enhanced Ecommerce reports.
   */

  EventName["CHECKOUT_PROGRESS"] = "checkout_progress";
  EventName["EXCEPTION"] = "exception";
  EventName["GENERATE_LEAD"] = "generate_lead";
  EventName["LOGIN"] = "login";
  EventName["PAGE_VIEW"] = "page_view";
  EventName["PURCHASE"] = "purchase";
  EventName["REFUND"] = "refund";
  EventName["REMOVE_FROM_CART"] = "remove_from_cart";
  EventName["SCREEN_VIEW"] = "screen_view";
  EventName["SEARCH"] = "search";
  EventName["SELECT_CONTENT"] = "select_content";
  EventName["SELECT_ITEM"] = "select_item";
  EventName["SELECT_PROMOTION"] = "select_promotion";
  /** @deprecated */

  EventName["SET_CHECKOUT_OPTION"] = "set_checkout_option";
  EventName["SHARE"] = "share";
  EventName["SIGN_UP"] = "sign_up";
  EventName["TIMING_COMPLETE"] = "timing_complete";
  EventName["VIEW_CART"] = "view_cart";
  EventName["VIEW_ITEM"] = "view_item";
  EventName["VIEW_ITEM_LIST"] = "view_item_list";
  EventName["VIEW_PROMOTION"] = "view_promotion";
  EventName["VIEW_SEARCH_RESULTS"] = "view_search_results";
})(EventName || (EventName = {}));
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const factory = container => {
  // Dependencies
  const app = container.getProvider('app-compat').getImmediate();
  const analyticsServiceExp = container.getProvider('analytics').getImmediate();
  return new AnalyticsService(app, analyticsServiceExp);
};

function registerAnalytics() {
  const namespaceExports = {
    Analytics: AnalyticsService,
    settings: _analytics.settings,
    isSupported: _analytics.isSupported,
    // We removed this enum in exp so need to re-create it here for compat.
    EventName
  };

  _appCompat.default.INTERNAL.registerComponent(new _component.Component('analytics-compat', factory, "PUBLIC"
  /* PUBLIC */
  ).setServiceProps(namespaceExports).setMultipleInstances(true));
}

registerAnalytics();

_appCompat.default.registerVersion(name, version);
},{"@firebase/app-compat":"node_modules/@firebase/app-compat/dist/index.esm2017.js","@firebase/analytics":"node_modules/@firebase/analytics/dist/index.esm2017.js","@firebase/component":"node_modules/@firebase/component/dist/index.esm.js"}],"node_modules/@firebase/app-check/dist/index.esm2017.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getToken = getToken;
exports.initializeAppCheck = initializeAppCheck;
exports.onTokenChanged = onTokenChanged;
exports.setTokenAutoRefreshEnabled = setTokenAutoRefreshEnabled;
exports.ReCaptchaV3Provider = exports.CustomProvider = void 0;

var _app = require("@firebase/app");

var _component = require("@firebase/component");

var _util = require("@firebase/util");

var _logger = require("@firebase/logger");

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const APP_CHECK_STATES = new Map();
const DEFAULT_STATE = {
  activated: false,
  tokenObservers: []
};
const DEBUG_STATE = {
  enabled: false
};

function getState(app) {
  return APP_CHECK_STATES.get(app) || DEFAULT_STATE;
}

function setState(app, state) {
  APP_CHECK_STATES.set(app, state);
}

function getDebugState() {
  return DEBUG_STATE;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const BASE_ENDPOINT = 'https://content-firebaseappcheck.googleapis.com/v1beta';
const EXCHANGE_RECAPTCHA_TOKEN_METHOD = 'exchangeRecaptchaToken';
const EXCHANGE_DEBUG_TOKEN_METHOD = 'exchangeDebugToken';
const TOKEN_REFRESH_TIME = {
  /**
   * The offset time before token natural expiration to run the refresh.
   * This is currently 5 minutes.
   */
  OFFSET_DURATION: 5 * 60 * 1000,

  /**
   * This is the first retrial wait after an error. This is currently
   * 30 seconds.
   */
  RETRIAL_MIN_WAIT: 30 * 1000,

  /**
   * This is the maximum retrial wait, currently 16 minutes.
   */
  RETRIAL_MAX_WAIT: 16 * 60 * 1000
};
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Port from auth proactiverefresh.js
 *
 */
// TODO: move it to @firebase/util?
// TODO: allow to config whether refresh should happen in the background

class Refresher {
  constructor(operation, retryPolicy, getWaitDuration, lowerBound, upperBound) {
    this.operation = operation;
    this.retryPolicy = retryPolicy;
    this.getWaitDuration = getWaitDuration;
    this.lowerBound = lowerBound;
    this.upperBound = upperBound;
    this.pending = null;
    this.nextErrorWaitInterval = lowerBound;

    if (lowerBound > upperBound) {
      throw new Error('Proactive refresh lower bound greater than upper bound!');
    }
  }

  start() {
    this.nextErrorWaitInterval = this.lowerBound;
    this.process(true).catch(() => {
      /* we don't care about the result */
    });
  }

  stop() {
    if (this.pending) {
      this.pending.reject('cancelled');
      this.pending = null;
    }
  }

  isRunning() {
    return !!this.pending;
  }

  async process(hasSucceeded) {
    this.stop();

    try {
      this.pending = new _util.Deferred();
      await sleep(this.getNextRun(hasSucceeded)); // Why do we resolve a promise, then immediate wait for it?
      // We do it to make the promise chain cancellable.
      // We can call stop() which rejects the promise before the following line execute, which makes
      // the code jump to the catch block.
      // TODO: unit test this

      this.pending.resolve();
      await this.pending.promise;
      this.pending = new _util.Deferred();
      await this.operation();
      this.pending.resolve();
      await this.pending.promise;
      this.process(true).catch(() => {
        /* we don't care about the result */
      });
    } catch (error) {
      if (this.retryPolicy(error)) {
        this.process(false).catch(() => {
          /* we don't care about the result */
        });
      } else {
        this.stop();
      }
    }
  }

  getNextRun(hasSucceeded) {
    if (hasSucceeded) {
      // If last operation succeeded, reset next error wait interval and return
      // the default wait duration.
      this.nextErrorWaitInterval = this.lowerBound; // Return typical wait duration interval after a successful operation.

      return this.getWaitDuration();
    } else {
      // Get next error wait interval.
      const currentErrorWaitInterval = this.nextErrorWaitInterval; // Double interval for next consecutive error.

      this.nextErrorWaitInterval *= 2; // Make sure next wait interval does not exceed the maximum upper bound.

      if (this.nextErrorWaitInterval > this.upperBound) {
        this.nextErrorWaitInterval = this.upperBound;
      }

      return currentErrorWaitInterval;
    }
  }

}

function sleep(ms) {
  return new Promise(resolve => {
    setTimeout(resolve, ms);
  });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const ERRORS = {
  ["already-initialized"
  /* ALREADY_INITIALIZED */
  ]: 'You have already called initializeAppCheck() for FirebaseApp {$appName} with ' + 'different options. To avoid this error, call initializeAppCheck() with the ' + 'same options as when it was originally called. This will return the ' + 'already initialized instance.',
  ["use-before-activation"
  /* USE_BEFORE_ACTIVATION */
  ]: 'App Check is being used before initializeAppCheck() is called for FirebaseApp {$appName}. ' + 'Call initializeAppCheck() before instantiating other Firebase services.',
  ["fetch-network-error"
  /* FETCH_NETWORK_ERROR */
  ]: 'Fetch failed to connect to a network. Check Internet connection. ' + 'Original error: {$originalErrorMessage}.',
  ["fetch-parse-error"
  /* FETCH_PARSE_ERROR */
  ]: 'Fetch client could not parse response.' + ' Original error: {$originalErrorMessage}.',
  ["fetch-status-error"
  /* FETCH_STATUS_ERROR */
  ]: 'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',
  ["storage-open"
  /* STORAGE_OPEN */
  ]: 'Error thrown when opening storage. Original error: {$originalErrorMessage}.',
  ["storage-get"
  /* STORAGE_GET */
  ]: 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',
  ["storage-set"
  /* STORAGE_WRITE */
  ]: 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',
  ["recaptcha-error"
  /* RECAPTCHA_ERROR */
  ]: 'ReCAPTCHA error.'
};
const ERROR_FACTORY = new _util.ErrorFactory('appCheck', 'AppCheck', ERRORS);
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function getRecaptcha() {
  return self.grecaptcha;
}

function ensureActivated(app) {
  if (!getState(app).activated) {
    throw ERROR_FACTORY.create("use-before-activation"
    /* USE_BEFORE_ACTIVATION */
    , {
      appName: app.name
    });
  }
}
/**
 * Copied from https://stackoverflow.com/a/2117523
 */


function uuidv4() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {
    const r = Math.random() * 16 | 0,
          v = c === 'x' ? r : r & 0x3 | 0x8;
    return v.toString(16);
  });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


async function exchangeToken({
  url,
  body
}, platformLoggerProvider) {
  const headers = {
    'Content-Type': 'application/json'
  }; // If platform logger exists, add the platform info string to the header.

  const platformLogger = platformLoggerProvider.getImmediate({
    optional: true
  });

  if (platformLogger) {
    headers['X-Firebase-Client'] = platformLogger.getPlatformInfoString();
  }

  const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers
  };
  let response;

  try {
    response = await fetch(url, options);
  } catch (originalError) {
    throw ERROR_FACTORY.create("fetch-network-error"
    /* FETCH_NETWORK_ERROR */
    , {
      originalErrorMessage: originalError.message
    });
  }

  if (response.status !== 200) {
    throw ERROR_FACTORY.create("fetch-status-error"
    /* FETCH_STATUS_ERROR */
    , {
      httpStatus: response.status
    });
  }

  let responseBody;

  try {
    // JSON parsing throws SyntaxError if the response body isn't a JSON string.
    responseBody = await response.json();
  } catch (originalError) {
    throw ERROR_FACTORY.create("fetch-parse-error"
    /* FETCH_PARSE_ERROR */
    , {
      originalErrorMessage: originalError.message
    });
  } // Protobuf duration format.
  // https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/Duration


  const match = responseBody.ttl.match(/^([\d.]+)(s)$/);

  if (!match || !match[2] || isNaN(Number(match[1]))) {
    throw ERROR_FACTORY.create("fetch-parse-error"
    /* FETCH_PARSE_ERROR */
    , {
      originalErrorMessage: `ttl field (timeToLive) is not in standard Protobuf Duration ` + `format: ${responseBody.ttl}`
    });
  }

  const timeToLiveAsNumber = Number(match[1]) * 1000;
  const now = Date.now();
  return {
    token: responseBody.attestationToken,
    expireTimeMillis: now + timeToLiveAsNumber,
    issuedAtTimeMillis: now
  };
}

function getExchangeRecaptchaTokenRequest(app, reCAPTCHAToken) {
  const {
    projectId,
    appId,
    apiKey
  } = app.options;
  return {
    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_RECAPTCHA_TOKEN_METHOD}?key=${apiKey}`,
    body: {
      // eslint-disable-next-line
      recaptcha_token: reCAPTCHAToken
    }
  };
}

function getExchangeDebugTokenRequest(app, debugToken) {
  const {
    projectId,
    appId,
    apiKey
  } = app.options;
  return {
    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_DEBUG_TOKEN_METHOD}?key=${apiKey}`,
    body: {
      // eslint-disable-next-line
      debug_token: debugToken
    }
  };
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const DB_NAME = 'firebase-app-check-database';
const DB_VERSION = 1;
const STORE_NAME = 'firebase-app-check-store';
const DEBUG_TOKEN_KEY = 'debug-token';
let dbPromise = null;

function getDBPromise() {
  if (dbPromise) {
    return dbPromise;
  }

  dbPromise = new Promise((resolve, reject) => {
    try {
      const request = indexedDB.open(DB_NAME, DB_VERSION);

      request.onsuccess = event => {
        resolve(event.target.result);
      };

      request.onerror = event => {
        var _a;

        reject(ERROR_FACTORY.create("storage-open"
        /* STORAGE_OPEN */
        , {
          originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message
        }));
      };

      request.onupgradeneeded = event => {
        const db = event.target.result; // We don't use 'break' in this switch statement, the fall-through
        // behavior is what we want, because if there are multiple versions between
        // the old version and the current version, we want ALL the migrations
        // that correspond to those versions to run, not only the last one.
        // eslint-disable-next-line default-case

        switch (event.oldVersion) {
          case 0:
            db.createObjectStore(STORE_NAME, {
              keyPath: 'compositeKey'
            });
        }
      };
    } catch (e) {
      reject(ERROR_FACTORY.create("storage-open"
      /* STORAGE_OPEN */
      , {
        originalErrorMessage: e.message
      }));
    }
  });
  return dbPromise;
}

function readTokenFromIndexedDB(app) {
  return read(computeKey(app));
}

function writeTokenToIndexedDB(app, token) {
  return write(computeKey(app), token);
}

function writeDebugTokenToIndexedDB(token) {
  return write(DEBUG_TOKEN_KEY, token);
}

function readDebugTokenFromIndexedDB() {
  return read(DEBUG_TOKEN_KEY);
}

async function write(key, value) {
  const db = await getDBPromise();
  const transaction = db.transaction(STORE_NAME, 'readwrite');
  const store = transaction.objectStore(STORE_NAME);
  const request = store.put({
    compositeKey: key,
    value
  });
  return new Promise((resolve, reject) => {
    request.onsuccess = _event => {
      resolve();
    };

    transaction.onerror = event => {
      var _a;

      reject(ERROR_FACTORY.create("storage-set"
      /* STORAGE_WRITE */
      , {
        originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message
      }));
    };
  });
}

async function read(key) {
  const db = await getDBPromise();
  const transaction = db.transaction(STORE_NAME, 'readonly');
  const store = transaction.objectStore(STORE_NAME);
  const request = store.get(key);
  return new Promise((resolve, reject) => {
    request.onsuccess = event => {
      const result = event.target.result;

      if (result) {
        resolve(result.value);
      } else {
        resolve(undefined);
      }
    };

    transaction.onerror = event => {
      var _a;

      reject(ERROR_FACTORY.create("storage-get"
      /* STORAGE_GET */
      , {
        originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message
      }));
    };
  });
}

function computeKey(app) {
  return `${app.options.appId}-${app.name}`;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const logger = new _logger.Logger('@firebase/app-check');
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Always resolves. In case of an error reading from indexeddb, resolve with undefined
 */

async function readTokenFromStorage(app) {
  if ((0, _util.isIndexedDBAvailable)()) {
    let token = undefined;

    try {
      token = await readTokenFromIndexedDB(app);
    } catch (e) {
      // swallow the error and return undefined
      logger.warn(`Failed to read token from IndexedDB. Error: ${e}`);
    }

    return token;
  }

  return undefined;
}
/**
 * Always resolves. In case of an error writing to indexeddb, print a warning and resolve the promise
 */


function writeTokenToStorage(app, token) {
  if ((0, _util.isIndexedDBAvailable)()) {
    return writeTokenToIndexedDB(app, token).catch(e => {
      // swallow the error and resolve the promise
      logger.warn(`Failed to write token to IndexedDB. Error: ${e}`);
    });
  }

  return Promise.resolve();
}

async function readOrCreateDebugTokenFromStorage() {
  /**
   * Theoretically race condition can happen if we read, then write in 2 separate transactions.
   * But it won't happen here, because this function will be called exactly once.
   */
  let existingDebugToken = undefined;

  try {
    existingDebugToken = await readDebugTokenFromIndexedDB();
  } catch (_e) {// failed to read from indexeddb. We assume there is no existing debug token, and generate a new one.
  }

  if (!existingDebugToken) {
    // create a new debug token
    const newToken = uuidv4(); // We don't need to block on writing to indexeddb
    // In case persistence failed, a new debug token will be generated everytime the page is refreshed.
    // It renders the debug token useless because you have to manually register(whitelist) the new token in the firebase console again and again.
    // If you see this error trying to use debug token, it probably means you are using a browser that doesn't support indexeddb.
    // You should switch to a different browser that supports indexeddb

    writeDebugTokenToIndexedDB(newToken).catch(e => logger.warn(`Failed to persist debug token to IndexedDB. Error: ${e}`)); // Not using logger because I don't think we ever want this accidentally hidden?

    console.log(`App Check debug token: ${newToken}. You will need to add it to your app's App Check settings in the Firebase console for it to work`);
    return newToken;
  } else {
    return existingDebugToken;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function isDebugMode() {
  const debugState = getDebugState();
  return debugState.enabled;
}

async function getDebugToken() {
  const state = getDebugState();

  if (state.enabled && state.token) {
    return state.token.promise;
  } else {
    // should not happen!
    throw Error(`
            Can't get debug token in production mode.
        `);
  }
}

function initializeDebugMode() {
  const globals = (0, _util.getGlobal)();

  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== 'string' && globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== true) {
    return;
  }

  const debugState = getDebugState();
  debugState.enabled = true;
  const deferredToken = new _util.Deferred();
  debugState.token = deferredToken;

  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN === 'string') {
    deferredToken.resolve(globals.FIREBASE_APPCHECK_DEBUG_TOKEN);
  } else {
    deferredToken.resolve(readOrCreateDebugTokenFromStorage());
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Initial hardcoded value agreed upon across platforms for initial launch.
// Format left open for possible dynamic error values and other fields in the future.


const defaultTokenErrorData = {
  error: 'UNKNOWN_ERROR'
};
/**
 * Stringify and base64 encode token error data.
 *
 * @param tokenError Error data, currently hardcoded.
 */

function formatDummyToken(tokenErrorData) {
  return _util.base64.encodeString(JSON.stringify(tokenErrorData),
  /* webSafe= */
  false);
}
/**
 * This function always resolves.
 * The result will contain an error field if there is any error.
 * In case there is an error, the token field in the result will be populated with a dummy value
 */


async function getToken$2(appCheck, forceRefresh = false) {
  const app = appCheck.app;
  ensureActivated(app);
  const state = getState(app);
  /**
   * First check if there is a token in memory from a previous `getToken()` call.
   */

  let token = state.token;
  let error = undefined;
  /**
   * If there is no token in memory, try to load token from indexedDB.
   */

  if (!token) {
    // cachedTokenPromise contains the token found in IndexedDB or undefined if not found.
    const cachedToken = await state.cachedTokenPromise;

    if (cachedToken && isValid(cachedToken)) {
      token = cachedToken;
      setState(app, Object.assign(Object.assign({}, state), {
        token
      })); // notify all listeners with the cached token

      notifyTokenListeners(app, {
        token: token.token
      });
    }
  } // Return the cached token (from either memory or indexedDB) if it's valid


  if (!forceRefresh && token && isValid(token)) {
    return {
      token: token.token
    };
  }
  /**
   * DEBUG MODE
   * If debug mode is set, and there is no cached token, fetch a new App
   * Check token using the debug token, and return it directly.
   */


  if (isDebugMode()) {
    const tokenFromDebugExchange = await exchangeToken(getExchangeDebugTokenRequest(app, await getDebugToken()), appCheck.platformLoggerProvider); // Write debug token to indexedDB.

    await writeTokenToStorage(app, tokenFromDebugExchange); // Write debug token to state.

    setState(app, Object.assign(Object.assign({}, state), {
      token: tokenFromDebugExchange
    }));
    return {
      token: tokenFromDebugExchange.token
    };
  }
  /**
   * request a new token
   */


  try {
    // state.provider is populated in initializeAppCheck()
    // ensureActivated() at the top of this function checks that
    // initializeAppCheck() has been called.
    token = await state.provider.getToken();
  } catch (e) {
    // `getToken()` should never throw, but logging error text to console will aid debugging.
    logger.error(e);
    error = e;
  }

  let interopTokenResult;

  if (!token) {
    // if token is undefined, there must be an error.
    // we return a dummy token along with the error
    interopTokenResult = makeDummyTokenResult(error);
  } else {
    interopTokenResult = {
      token: token.token
    }; // write the new token to the memory state as well as the persistent storage.
    // Only do it if we got a valid new token

    setState(app, Object.assign(Object.assign({}, state), {
      token
    }));
    await writeTokenToStorage(app, token);
  }

  notifyTokenListeners(app, interopTokenResult);
  return interopTokenResult;
}

function addTokenListener(appCheck, type, listener, onError) {
  const {
    app
  } = appCheck;
  const state = getState(app);
  const tokenObserver = {
    next: listener,
    error: onError,
    type
  };
  const newState = Object.assign(Object.assign({}, state), {
    tokenObservers: [...state.tokenObservers, tokenObserver]
  });
  /**
   * Invoke the listener with the valid token, then start the token refresher
   */

  if (!newState.tokenRefresher) {
    const tokenRefresher = createTokenRefresher(appCheck);
    newState.tokenRefresher = tokenRefresher;
  } // Create the refresher but don't start it if `isTokenAutoRefreshEnabled`
  // is not true.


  if (!newState.tokenRefresher.isRunning() && state.isTokenAutoRefreshEnabled) {
    newState.tokenRefresher.start();
  } // Invoke the listener async immediately if there is a valid token
  // in memory.


  if (state.token && isValid(state.token)) {
    const validToken = state.token;
    Promise.resolve().then(() => listener({
      token: validToken.token
    })).catch(() => {
      /* we don't care about exceptions thrown in listeners */
    });
  } else if (state.token == null) {
    // Only check cache if there was no token. If the token was invalid,
    // skip this and rely on exchange endpoint.
    void state.cachedTokenPromise // Storage token promise. Always populated in `activate()`.
    .then(cachedToken => {
      if (cachedToken && isValid(cachedToken)) {
        listener({
          token: cachedToken.token
        });
      }
    }).catch(() => {
      /** Ignore errors in listeners. */
    });
  }

  setState(app, newState);
}

function removeTokenListener(app, listener) {
  const state = getState(app);
  const newObservers = state.tokenObservers.filter(tokenObserver => tokenObserver.next !== listener);

  if (newObservers.length === 0 && state.tokenRefresher && state.tokenRefresher.isRunning()) {
    state.tokenRefresher.stop();
  }

  setState(app, Object.assign(Object.assign({}, state), {
    tokenObservers: newObservers
  }));
}

function createTokenRefresher(appCheck) {
  const {
    app
  } = appCheck;
  return new Refresher( // Keep in mind when this fails for any reason other than the ones
  // for which we should retry, it will effectively stop the proactive refresh.
  async () => {
    const state = getState(app); // If there is no token, we will try to load it from storage and use it
    // If there is a token, we force refresh it because we know it's going to expire soon

    let result;

    if (!state.token) {
      result = await getToken$2(appCheck);
    } else {
      result = await getToken$2(appCheck, true);
    } // getToken() always resolves. In case the result has an error field defined, it means the operation failed, and we should retry.


    if (result.error) {
      throw result.error;
    }
  }, () => {
    // TODO: when should we retry?
    return true;
  }, () => {
    const state = getState(app);

    if (state.token) {
      // issuedAtTime + (50% * total TTL) + 5 minutes
      let nextRefreshTimeMillis = state.token.issuedAtTimeMillis + (state.token.expireTimeMillis - state.token.issuedAtTimeMillis) * 0.5 + 5 * 60 * 1000; // Do not allow refresh time to be past (expireTime - 5 minutes)

      const latestAllowableRefresh = state.token.expireTimeMillis - 5 * 60 * 1000;
      nextRefreshTimeMillis = Math.min(nextRefreshTimeMillis, latestAllowableRefresh);
      return Math.max(0, nextRefreshTimeMillis - Date.now());
    } else {
      return 0;
    }
  }, TOKEN_REFRESH_TIME.RETRIAL_MIN_WAIT, TOKEN_REFRESH_TIME.RETRIAL_MAX_WAIT);
}

function notifyTokenListeners(app, token) {
  const observers = getState(app).tokenObservers;

  for (const observer of observers) {
    try {
      if (observer.type === "EXTERNAL"
      /* EXTERNAL */
      && token.error != null) {
        // If this listener was added by a 3P call, send any token error to
        // the supplied error handler. A 3P observer always has an error
        // handler.
        observer.error(token.error);
      } else {
        // If the token has no error field, always return the token.
        // If this is a 2P listener, return the token, whether or not it
        // has an error field.
        observer.next(token);
      }
    } catch (e) {// Errors in the listener function itself are always ignored.
    }
  }
}

function isValid(token) {
  return token.expireTimeMillis - Date.now() > 0;
}

function makeDummyTokenResult(error) {
  return {
    token: formatDummyToken(defaultTokenErrorData),
    error
  };
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * AppCheck Service class.
 */


class AppCheckService {
  constructor(app, platformLoggerProvider) {
    this.app = app;
    this.platformLoggerProvider = platformLoggerProvider;
  }

  _delete() {
    const {
      tokenObservers
    } = getState(this.app);

    for (const tokenObserver of tokenObservers) {
      removeTokenListener(this.app, tokenObserver.next);
    }

    return Promise.resolve();
  }

}

function factory(app, platformLoggerProvider) {
  return new AppCheckService(app, platformLoggerProvider);
}

function internalFactory(appCheck) {
  return {
    getToken: forceRefresh => getToken$2(appCheck, forceRefresh),
    addTokenListener: listener => addTokenListener(appCheck, "INTERNAL"
    /* INTERNAL */
    , listener),
    removeTokenListener: listener => removeTokenListener(appCheck.app, listener)
  };
}

const name = "@firebase/app-check";
const version = "0.4.0";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const RECAPTCHA_URL = 'https://www.google.com/recaptcha/api.js';

function initialize(app, siteKey) {
  const state = getState(app);
  const initialized = new _util.Deferred();
  setState(app, Object.assign(Object.assign({}, state), {
    reCAPTCHAState: {
      initialized
    }
  }));
  const divId = `fire_app_check_${app.name}`;
  const invisibleDiv = document.createElement('div');
  invisibleDiv.id = divId;
  invisibleDiv.style.display = 'none';
  document.body.appendChild(invisibleDiv);
  const grecaptcha = getRecaptcha();

  if (!grecaptcha) {
    loadReCAPTCHAScript(() => {
      const grecaptcha = getRecaptcha();

      if (!grecaptcha) {
        // it shouldn't happen.
        throw new Error('no recaptcha');
      }

      grecaptcha.ready(() => {
        // Invisible widgets allow us to set a different siteKey for each widget, so we use them to support multiple apps
        renderInvisibleWidget(app, siteKey, grecaptcha, divId);
        initialized.resolve(grecaptcha);
      });
    });
  } else {
    grecaptcha.ready(() => {
      renderInvisibleWidget(app, siteKey, grecaptcha, divId);
      initialized.resolve(grecaptcha);
    });
  }

  return initialized.promise;
}

async function getToken$1(app) {
  ensureActivated(app); // ensureActivated() guarantees that reCAPTCHAState is set

  const reCAPTCHAState = getState(app).reCAPTCHAState;
  const recaptcha = await reCAPTCHAState.initialized.promise;
  return new Promise((resolve, _reject) => {
    // Updated after initialization is complete.
    const reCAPTCHAState = getState(app).reCAPTCHAState;
    recaptcha.ready(() => {
      resolve( // widgetId is guaranteed to be available if reCAPTCHAState.initialized.promise resolved.
      recaptcha.execute(reCAPTCHAState.widgetId, {
        action: 'fire_app_check'
      }));
    });
  });
}
/**
 *
 * @param app
 * @param container - Id of a HTML element.
 */


function renderInvisibleWidget(app, siteKey, grecaptcha, container) {
  const widgetId = grecaptcha.render(container, {
    sitekey: siteKey,
    size: 'invisible'
  });
  const state = getState(app);
  setState(app, Object.assign(Object.assign({}, state), {
    reCAPTCHAState: Object.assign(Object.assign({}, state.reCAPTCHAState), {
      // state.reCAPTCHAState is set in the initialize()
      widgetId
    })
  }));
}

function loadReCAPTCHAScript(onload) {
  const script = document.createElement('script');
  script.src = `${RECAPTCHA_URL}`;
  script.onload = onload;
  document.head.appendChild(script);
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * App Check provider that can obtain a reCAPTCHA V3 token and exchange it
 * for an App Check token.
 *
 * @public
 */


class ReCaptchaV3Provider {
  /**
   * Create a ReCaptchaV3Provider instance.
   * @param siteKey - ReCAPTCHA V3 siteKey.
   */
  constructor(_siteKey) {
    this._siteKey = _siteKey;
  }
  /**
   * Returns an App Check token.
   * @internal
   */


  async getToken() {
    if (!this._app || !this._platformLoggerProvider) {
      // This should only occur if user has not called initializeAppCheck().
      // We don't have an appName to provide if so.
      // This should already be caught in the top level `getToken()` function.
      throw ERROR_FACTORY.create("use-before-activation"
      /* USE_BEFORE_ACTIVATION */
      , {
        appName: ''
      });
    }

    const attestedClaimsToken = await getToken$1(this._app).catch(_e => {
      // reCaptcha.execute() throws null which is not very descriptive.
      throw ERROR_FACTORY.create("recaptcha-error"
      /* RECAPTCHA_ERROR */
      );
    });
    return exchangeToken(getExchangeRecaptchaTokenRequest(this._app, attestedClaimsToken), this._platformLoggerProvider);
  }
  /**
   * @internal
   */


  initialize(app) {
    this._app = app;
    this._platformLoggerProvider = (0, _app._getProvider)(app, 'platform-logger');
    initialize(app, this._siteKey).catch(() => {
      /* we don't care about the initialization result */
    });
  }
  /**
   * @internal
   */


  isEqual(otherProvider) {
    if (otherProvider instanceof ReCaptchaV3Provider) {
      return this._siteKey === otherProvider._siteKey;
    } else {
      return false;
    }
  }

}
/**
 * Custom provider class.
 * @public
 */


exports.ReCaptchaV3Provider = ReCaptchaV3Provider;

class CustomProvider {
  constructor(_customProviderOptions) {
    this._customProviderOptions = _customProviderOptions;
  }
  /**
   * @internal
   */


  async getToken() {
    if (!this._app) {
      // This should only occur if user has not called initializeAppCheck().
      // We don't have an appName to provide if so.
      // This should already be caught in the top level `getToken()` function.
      throw ERROR_FACTORY.create("use-before-activation"
      /* USE_BEFORE_ACTIVATION */
      , {
        appName: ''
      });
    } // custom provider


    const customToken = await this._customProviderOptions.getToken(); // Try to extract IAT from custom token, in case this token is not
    // being newly issued. JWT timestamps are in seconds since epoch.

    const issuedAtTimeSeconds = (0, _util.issuedAtTime)(customToken.token); // Very basic validation, use current timestamp as IAT if JWT
    // has no `iat` field or value is out of bounds.

    const issuedAtTimeMillis = issuedAtTimeSeconds !== null && issuedAtTimeSeconds < Date.now() && issuedAtTimeSeconds > 0 ? issuedAtTimeSeconds * 1000 : Date.now();
    return Object.assign(Object.assign({}, customToken), {
      issuedAtTimeMillis
    });
  }
  /**
   * @internal
   */


  initialize(app) {
    this._app = app;
  }
  /**
   * @internal
   */


  isEqual(otherProvider) {
    if (otherProvider instanceof CustomProvider) {
      return this._customProviderOptions.getToken.toString() === otherProvider._customProviderOptions.getToken.toString();
    } else {
      return false;
    }
  }

}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Activate App Check for the given app. Can be called only once per app.
 * @param app - the {@link @firebase/app#FirebaseApp} to activate App Check for
 * @param options - App Check initialization options
 * @public
 */


exports.CustomProvider = CustomProvider;

function initializeAppCheck(app = (0, _app.getApp)(), options) {
  app = (0, _util.getModularInstance)(app);
  const provider = (0, _app._getProvider)(app, 'app-check');

  if (provider.isInitialized()) {
    const existingInstance = provider.getImmediate();
    const initialOptions = provider.getOptions();

    if (initialOptions.isTokenAutoRefreshEnabled === options.isTokenAutoRefreshEnabled && initialOptions.provider.isEqual(options.provider)) {
      return existingInstance;
    } else {
      throw ERROR_FACTORY.create("already-initialized"
      /* ALREADY_INITIALIZED */
      , {
        appName: app.name
      });
    }
  }

  const appCheck = provider.initialize({
    options
  });

  _activate(app, options.provider, options.isTokenAutoRefreshEnabled);

  return appCheck;
}
/**
 * Activate App Check
 * @param app - Firebase app to activate App Check for.
 * @param provider - reCAPTCHA v3 provider or
 * custom token provider.
 * @param isTokenAutoRefreshEnabled - If true, the SDK automatically
 * refreshes App Check tokens as needed. If undefined, defaults to the
 * value of `app.automaticDataCollectionEnabled`, which defaults to
 * false and can be set in the app config.
 */


function _activate(app, provider, isTokenAutoRefreshEnabled) {
  const state = getState(app);
  const newState = Object.assign(Object.assign({}, state), {
    activated: true
  });
  newState.provider = provider; // Read cached token from storage if it exists and store it in memory.

  newState.cachedTokenPromise = readTokenFromStorage(app).then(cachedToken => {
    if (cachedToken && isValid(cachedToken)) {
      setState(app, Object.assign(Object.assign({}, getState(app)), {
        token: cachedToken
      }));
    }

    return cachedToken;
  }); // Use value of global `automaticDataCollectionEnabled` (which
  // itself defaults to false if not specified in config) if
  // `isTokenAutoRefreshEnabled` param was not provided by user.

  newState.isTokenAutoRefreshEnabled = isTokenAutoRefreshEnabled === undefined ? app.automaticDataCollectionEnabled : isTokenAutoRefreshEnabled;
  setState(app, newState);
  newState.provider.initialize(app);
}
/**
 * Set whether App Check will automatically refresh tokens as needed.
 *
 * @param appCheckInstance - The App Check service instance.
 * @param isTokenAutoRefreshEnabled - If true, the SDK automatically
 * refreshes App Check tokens as needed. This overrides any value set
 * during `initializeAppCheck()`.
 * @public
 */


function setTokenAutoRefreshEnabled(appCheckInstance, isTokenAutoRefreshEnabled) {
  const app = appCheckInstance.app;
  const state = getState(app); // This will exist if any product libraries have called
  // `addTokenListener()`

  if (state.tokenRefresher) {
    if (isTokenAutoRefreshEnabled === true) {
      state.tokenRefresher.start();
    } else {
      state.tokenRefresher.stop();
    }
  }

  setState(app, Object.assign(Object.assign({}, state), {
    isTokenAutoRefreshEnabled
  }));
}
/**
 * Get the current App Check token. Attaches to the most recent
 * in-flight request if one is present. Returns null if no token
 * is present and no token requests are in-flight.
 *
 * @param appCheckInstance - The App Check service instance.
 * @param forceRefresh - If true, will always try to fetch a fresh token.
 * If false, will use a cached token if found in storage.
 * @public
 */


async function getToken(appCheckInstance, forceRefresh) {
  const result = await getToken$2(appCheckInstance, forceRefresh);

  if (result.error) {
    throw result.error;
  }

  return {
    token: result.token
  };
}
/**
 * Wraps `addTokenListener`/`removeTokenListener` methods in an `Observer`
 * pattern for public use.
 */


function onTokenChanged(appCheckInstance, onNextOrObserver, onError,
/**
 * NOTE: Although an `onCompletion` callback can be provided, it will
 * never be called because the token stream is never-ending.
 * It is added only for API consistency with the observer pattern, which
 * we follow in JS APIs.
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
onCompletion) {
  let nextFn = () => {};

  let errorFn = () => {};

  if (onNextOrObserver.next != null) {
    nextFn = onNextOrObserver.next.bind(onNextOrObserver);
  } else {
    nextFn = onNextOrObserver;
  }

  if (onNextOrObserver.error != null) {
    errorFn = onNextOrObserver.error.bind(onNextOrObserver);
  } else if (onError) {
    errorFn = onError;
  }

  addTokenListener(appCheckInstance, "EXTERNAL"
  /* EXTERNAL */
  , nextFn, errorFn);
  return () => removeTokenListener(appCheckInstance.app, nextFn);
}
/**
 * Firebase App Check
 *
 * @packageDocumentation
 */


const APP_CHECK_NAME = 'app-check';
const APP_CHECK_NAME_INTERNAL = 'app-check-internal';

function registerAppCheck() {
  // The public interface
  (0, _app._registerComponent)(new _component.Component(APP_CHECK_NAME, container => {
    // getImmediate for FirebaseApp will always succeed
    const app = container.getProvider('app').getImmediate();
    const platformLoggerProvider = container.getProvider('platform-logger');
    return factory(app, platformLoggerProvider);
  }, "PUBLIC"
  /* PUBLIC */
  ).setInstantiationMode("EXPLICIT"
  /* EXPLICIT */
  )
  /**
   * Initialize app-check-internal after app-check is initialized to make AppCheck available to
   * other Firebase SDKs
   */
  .setInstanceCreatedCallback((container, _identifier, _appcheckService) => {
    container.getProvider(APP_CHECK_NAME_INTERNAL).initialize();
  })); // The internal interface used by other Firebase products

  (0, _app._registerComponent)(new _component.Component(APP_CHECK_NAME_INTERNAL, container => {
    const appCheck = container.getProvider('app-check').getImmediate();
    return internalFactory(appCheck);
  }, "PUBLIC"
  /* PUBLIC */
  ).setInstantiationMode("EXPLICIT"
  /* EXPLICIT */
  ));
  (0, _app.registerVersion)(name, version);
}

registerAppCheck();
initializeDebugMode();
},{"@firebase/app":"node_modules/@firebase/app/dist/index.esm2017.js","@firebase/component":"node_modules/@firebase/component/dist/index.esm.js","@firebase/util":"node_modules/@firebase/util/dist/index.esm.js","@firebase/logger":"node_modules/@firebase/logger/dist/index.esm.js"}],"node_modules/@firebase/app-check-compat/dist/index.esm2017.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.registerAppCheck = registerAppCheck;

var _appCompat = _interopRequireDefault(require("@firebase/app-compat"));

var _component = require("@firebase/component");

var _appCheck = require("@firebase/app-check");

var _util = require("@firebase/util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const name = "@firebase/app-check-compat";
const version = "0.1.1";
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const ERRORS = {
  ["use-before-activation"
  /* USE_BEFORE_ACTIVATION */
  ]: 'App Check is being used before activate() is called for FirebaseApp {$appName}. ' + 'Call activate() before instantiating other Firebase services.'
};
const ERROR_FACTORY = new _util.ErrorFactory('appCheck', 'AppCheck', ERRORS);
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

class AppCheckService {
  constructor(app) {
    this.app = app;
  }

  activate(siteKeyOrProvider, isTokenAutoRefreshEnabled) {
    let provider;

    if (typeof siteKeyOrProvider === 'string') {
      provider = new _appCheck.ReCaptchaV3Provider(siteKeyOrProvider);
    } else {
      provider = new _appCheck.CustomProvider({
        getToken: siteKeyOrProvider.getToken
      });
    }

    this._delegate = (0, _appCheck.initializeAppCheck)(this.app, {
      provider,
      isTokenAutoRefreshEnabled
    });
  }

  setTokenAutoRefreshEnabled(isTokenAutoRefreshEnabled) {
    if (!this._delegate) {
      throw ERROR_FACTORY.create("use-before-activation"
      /* USE_BEFORE_ACTIVATION */
      , {
        appName: this.app.name
      });
    }

    (0, _appCheck.setTokenAutoRefreshEnabled)(this._delegate, isTokenAutoRefreshEnabled);
  }

  getToken(forceRefresh) {
    if (!this._delegate) {
      throw ERROR_FACTORY.create("use-before-activation"
      /* USE_BEFORE_ACTIVATION */
      , {
        appName: this.app.name
      });
    }

    return (0, _appCheck.getToken)(this._delegate, forceRefresh);
  }

  onTokenChanged(onNextOrObserver, onError, onCompletion) {
    if (!this._delegate) {
      throw ERROR_FACTORY.create("use-before-activation"
      /* USE_BEFORE_ACTIVATION */
      , {
        appName: this.app.name
      });
    }

    return (0, _appCheck.onTokenChanged)(this._delegate,
    /**
     * Exp onTokenChanged() will handle both overloads but we need
     * to specify one to not confuse Typescript.
     */
    onNextOrObserver, onError, onCompletion);
  }

}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const factory = container => {
  // Dependencies
  const app = container.getProvider('app-compat').getImmediate();
  return new AppCheckService(app);
};

function registerAppCheck() {
  _appCompat.default.INTERNAL.registerComponent(new _component.Component('appCheck-compat', factory, "PUBLIC"
  /* PUBLIC */
  ));
}

registerAppCheck();

_appCompat.default.registerVersion(name, version);
},{"@firebase/app-compat":"node_modules/@firebase/app-compat/dist/index.esm2017.js","@firebase/component":"node_modules/@firebase/component/dist/index.esm.js","@firebase/app-check":"node_modules/@firebase/app-check/dist/index.esm2017.js","@firebase/util":"node_modules/@firebase/util/dist/index.esm.js"}],"node_modules/@firebase/auth/dist/esm2017/index-8fbd02b6.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.$ = sendPasswordResetEmail;
exports.D = initializeAuth;
exports.E = connectAuthEmulator;
exports.W = signInAnonymously;
exports.X = signInWithCredential;
exports.Y = linkWithCredential;
exports.Z = reauthenticateWithCredential;
exports._ = signInWithCustomToken;
exports.a0 = confirmPasswordReset;
exports.a1 = applyActionCode;
exports.a2 = checkActionCode;
exports.a3 = verifyPasswordResetCode;
exports.a4 = createUserWithEmailAndPassword;
exports.a5 = signInWithEmailAndPassword;
exports.a6 = sendSignInLinkToEmail;
exports.a7 = isSignInWithEmailLink;
exports.a8 = signInWithEmailLink;
exports.a9 = fetchSignInMethodsForEmail;
exports.aA = _getRedirectResult;
exports.aB = _clearRedirectOutcomes;
exports.aC = _castAuth;
exports.aF = _getClientVersion;
exports.aG = _generateEventId;
exports.aa = sendEmailVerification;
exports.ab = verifyBeforeUpdateEmail;
exports.ad = parseActionCodeURL;
exports.ae = updateProfile;
exports.af = updateEmail;
exports.ag = updatePassword;
exports.ah = getIdToken;
exports.ai = getIdTokenResult;
exports.aj = unlink;
exports.ak = getAdditionalUserInfo;
exports.al = reload;
exports.am = getMultiFactorResolver;
exports.an = multiFactor;
exports.ao = _isIOS7Or8;
exports.ap = debugAssert;
exports.aq = _isIOS;
exports.ar = _isAndroid;
exports.as = _fail;
exports.at = _getRedirectUrl;
exports.au = _getProjectConfig;
exports.av = _createError;
exports.aw = _assert;
exports.ax = _getInstance;
exports.ay = _persistenceKeyName;
exports.c = signInWithPopup;
exports.d = linkWithPopup;
exports.e = reauthenticateWithPopup;
exports.f = signInWithRedirect;
exports.g = linkWithRedirect;
exports.h = reauthenticateWithRedirect;
exports.j = getRedirectResult;
exports.l = linkWithPhoneNumber;
exports.n = getAuth;
exports.p = setPersistence;
exports.q = onIdTokenChanged;
exports.r = reauthenticateWithPhoneNumber;
exports.s = signInWithPhoneNumber;
exports.t = onAuthStateChanged;
exports.u = updatePhoneNumber;
exports.v = useDeviceLanguage;
exports.w = updateCurrentUser;
exports.x = signOut;
exports.y = deleteUser;
exports.z = exports.o = exports.m = exports.k = exports.i = exports.b = exports.az = exports.ac = exports.aJ = exports.aI = exports.aH = exports.aE = exports.aD = exports.a = exports.V = exports.U = exports.T = exports.S = exports.R = exports.Q = exports.P = exports.O = exports.N = exports.M = exports.L = exports.K = exports.J = exports.I = exports.H = exports.G = exports.F = exports.C = exports.B = exports.A = void 0;

var _util = require("@firebase/util");

var _app = require("@firebase/app");

var _tslib = require("tslib");

var _logger = require("@firebase/logger");

var _component = require("@firebase/component");

/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An enum of factors that may be used for multifactor authentication.
 *
 * @public
 */
const FactorId = {
  /** Phone as second factor */
  PHONE: 'phone'
};
/**
 * Enumeration of supported providers.
 *
 * @public
 */

exports.F = FactorId;
const ProviderId = {
  /** Facebook provider ID */
  FACEBOOK: 'facebook.com',

  /** GitHub provider ID */
  GITHUB: 'github.com',

  /** Google provider ID */
  GOOGLE: 'google.com',

  /** Password provider */
  PASSWORD: 'password',

  /** Phone provider */
  PHONE: 'phone',

  /** Twitter provider ID */
  TWITTER: 'twitter.com'
};
/**
 * Enumeration of supported sign-in methods.
 *
 * @public
 */

exports.o = ProviderId;
const SignInMethod = {
  /** Email link sign in method */
  EMAIL_LINK: 'emailLink',

  /** Email/password sign in method */
  EMAIL_PASSWORD: 'password',

  /** Facebook sign in method */
  FACEBOOK: 'facebook.com',

  /** GitHub sign in method */
  GITHUB: 'github.com',

  /** Google sign in method */
  GOOGLE: 'google.com',

  /** Phone sign in method */
  PHONE: 'phone',

  /** Twitter sign in method */
  TWITTER: 'twitter.com'
};
/**
 * Enumeration of supported operation types.
 *
 * @public
 */

exports.S = SignInMethod;
const OperationType = {
  /** Operation involving linking an additional provider to an already signed-in user. */
  LINK: 'link',

  /** Operation involving using a provider to reauthenticate an already signed-in user. */
  REAUTHENTICATE: 'reauthenticate',

  /** Operation involving signing in a user. */
  SIGN_IN: 'signIn'
};
/**
 * An enumeration of the possible email action types.
 *
 * @public
 */

exports.O = OperationType;
const ActionCodeOperation = {
  /** The email link sign-in action. */
  EMAIL_SIGNIN: 'EMAIL_SIGNIN',

  /** The password reset action. */
  PASSWORD_RESET: 'PASSWORD_RESET',

  /** The email revocation action. */
  RECOVER_EMAIL: 'RECOVER_EMAIL',

  /** The revert second factor addition email action. */
  REVERT_SECOND_FACTOR_ADDITION: 'REVERT_SECOND_FACTOR_ADDITION',

  /** The revert second factor addition email action. */
  VERIFY_AND_CHANGE_EMAIL: 'VERIFY_AND_CHANGE_EMAIL',

  /** The email verification action. */
  VERIFY_EMAIL: 'VERIFY_EMAIL'
};
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

exports.A = ActionCodeOperation;

function _debugErrorMap() {
  return {
    ["admin-restricted-operation"
    /* ADMIN_ONLY_OPERATION */
    ]: 'This operation is restricted to administrators only.',
    ["argument-error"
    /* ARGUMENT_ERROR */
    ]: '',
    ["app-not-authorized"
    /* APP_NOT_AUTHORIZED */
    ]: "This app, identified by the domain where it's hosted, is not " + 'authorized to use Firebase Authentication with the provided API key. ' + 'Review your key configuration in the Google API console.',
    ["app-not-installed"
    /* APP_NOT_INSTALLED */
    ]: 'The requested mobile application corresponding to the identifier (' + 'Android package name or iOS bundle ID) provided is not installed on ' + 'this device.',
    ["captcha-check-failed"
    /* CAPTCHA_CHECK_FAILED */
    ]: 'The reCAPTCHA response token provided is either invalid, expired, ' + 'already used or the domain associated with it does not match the list ' + 'of whitelisted domains.',
    ["code-expired"
    /* CODE_EXPIRED */
    ]: 'The SMS code has expired. Please re-send the verification code to try ' + 'again.',
    ["cordova-not-ready"
    /* CORDOVA_NOT_READY */
    ]: 'Cordova framework is not ready.',
    ["cors-unsupported"
    /* CORS_UNSUPPORTED */
    ]: 'This browser is not supported.',
    ["credential-already-in-use"
    /* CREDENTIAL_ALREADY_IN_USE */
    ]: 'This credential is already associated with a different user account.',
    ["custom-token-mismatch"
    /* CREDENTIAL_MISMATCH */
    ]: 'The custom token corresponds to a different audience.',
    ["requires-recent-login"
    /* CREDENTIAL_TOO_OLD_LOGIN_AGAIN */
    ]: 'This operation is sensitive and requires recent authentication. Log in ' + 'again before retrying this request.',
    ["dependent-sdk-initialized-before-auth"
    /* DEPENDENT_SDK_INIT_BEFORE_AUTH */
    ]: 'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' + 'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' + 'starting any other Firebase SDK.',
    ["dynamic-link-not-activated"
    /* DYNAMIC_LINK_NOT_ACTIVATED */
    ]: 'Please activate Dynamic Links in the Firebase Console and agree to the terms and ' + 'conditions.',
    ["email-change-needs-verification"
    /* EMAIL_CHANGE_NEEDS_VERIFICATION */
    ]: 'Multi-factor users must always have a verified email.',
    ["email-already-in-use"
    /* EMAIL_EXISTS */
    ]: 'The email address is already in use by another account.',
    ["emulator-config-failed"
    /* EMULATOR_CONFIG_FAILED */
    ]: 'Auth instance has already been used to make a network call. Auth can ' + 'no longer be configured to use the emulator. Try calling ' + '"connectAuthEmulator()" sooner.',
    ["expired-action-code"
    /* EXPIRED_OOB_CODE */
    ]: 'The action code has expired.',
    ["cancelled-popup-request"
    /* EXPIRED_POPUP_REQUEST */
    ]: 'This operation has been cancelled due to another conflicting popup being opened.',
    ["internal-error"
    /* INTERNAL_ERROR */
    ]: 'An internal AuthError has occurred.',
    ["invalid-app-credential"
    /* INVALID_APP_CREDENTIAL */
    ]: 'The phone verification request contains an invalid application verifier.' + ' The reCAPTCHA token response is either invalid or expired.',
    ["invalid-app-id"
    /* INVALID_APP_ID */
    ]: 'The mobile app identifier is not registed for the current project.',
    ["invalid-user-token"
    /* INVALID_AUTH */
    ]: "This user's credential isn't valid for this project. This can happen " + "if the user's token has been tampered with, or if the user isn't for " + 'the project associated with this API key.',
    ["invalid-auth-event"
    /* INVALID_AUTH_EVENT */
    ]: 'An internal AuthError has occurred.',
    ["invalid-verification-code"
    /* INVALID_CODE */
    ]: 'The SMS verification code used to create the phone auth credential is ' + 'invalid. Please resend the verification code sms and be sure to use the ' + 'verification code provided by the user.',
    ["invalid-continue-uri"
    /* INVALID_CONTINUE_URI */
    ]: 'The continue URL provided in the request is invalid.',
    ["invalid-cordova-configuration"
    /* INVALID_CORDOVA_CONFIGURATION */
    ]: 'The following Cordova plugins must be installed to enable OAuth sign-in: ' + 'cordova-plugin-buildinfo, cordova-universal-links-plugin, ' + 'cordova-plugin-browsertab, cordova-plugin-inappbrowser and ' + 'cordova-plugin-customurlscheme.',
    ["invalid-custom-token"
    /* INVALID_CUSTOM_TOKEN */
    ]: 'The custom token format is incorrect. Please check the documentation.',
    ["invalid-dynamic-link-domain"
    /* INVALID_DYNAMIC_LINK_DOMAIN */
    ]: 'The provided dynamic link domain is not configured or authorized for the current project.',
    ["invalid-email"
    /* INVALID_EMAIL */
    ]: 'The email address is badly formatted.',
    ["invalid-emulator-scheme"
    /* INVALID_EMULATOR_SCHEME */
    ]: 'Emulator URL must start with a valid scheme (http:// or https://).',
    ["invalid-api-key"
    /* INVALID_API_KEY */
    ]: 'Your API key is invalid, please check you have copied it correctly.',
    ["invalid-cert-hash"
    /* INVALID_CERT_HASH */
    ]: 'The SHA-1 certificate hash provided is invalid.',
    ["invalid-credential"
    /* INVALID_IDP_RESPONSE */
    ]: 'The supplied auth credential is malformed or has expired.',
    ["invalid-message-payload"
    /* INVALID_MESSAGE_PAYLOAD */
    ]: 'The email template corresponding to this action contains invalid characters in its message. ' + 'Please fix by going to the Auth email templates section in the Firebase Console.',
    ["invalid-multi-factor-session"
    /* INVALID_MFA_SESSION */
    ]: 'The request does not contain a valid proof of first factor successful sign-in.',
    ["invalid-oauth-provider"
    /* INVALID_OAUTH_PROVIDER */
    ]: 'EmailAuthProvider is not supported for this operation. This operation ' + 'only supports OAuth providers.',
    ["invalid-oauth-client-id"
    /* INVALID_OAUTH_CLIENT_ID */
    ]: 'The OAuth client ID provided is either invalid or does not match the ' + 'specified API key.',
    ["unauthorized-domain"
    /* INVALID_ORIGIN */
    ]: 'This domain is not authorized for OAuth operations for your Firebase ' + 'project. Edit the list of authorized domains from the Firebase console.',
    ["invalid-action-code"
    /* INVALID_OOB_CODE */
    ]: 'The action code is invalid. This can happen if the code is malformed, ' + 'expired, or has already been used.',
    ["wrong-password"
    /* INVALID_PASSWORD */
    ]: 'The password is invalid or the user does not have a password.',
    ["invalid-persistence-type"
    /* INVALID_PERSISTENCE */
    ]: 'The specified persistence type is invalid. It can only be local, session or none.',
    ["invalid-phone-number"
    /* INVALID_PHONE_NUMBER */
    ]: 'The format of the phone number provided is incorrect. Please enter the ' + 'phone number in a format that can be parsed into E.164 format. E.164 ' + 'phone numbers are written in the format [+][country code][subscriber ' + 'number including area code].',
    ["invalid-provider-id"
    /* INVALID_PROVIDER_ID */
    ]: 'The specified provider ID is invalid.',
    ["invalid-recipient-email"
    /* INVALID_RECIPIENT_EMAIL */
    ]: 'The email corresponding to this action failed to send as the provided ' + 'recipient email address is invalid.',
    ["invalid-sender"
    /* INVALID_SENDER */
    ]: 'The email template corresponding to this action contains an invalid sender email or name. ' + 'Please fix by going to the Auth email templates section in the Firebase Console.',
    ["invalid-verification-id"
    /* INVALID_SESSION_INFO */
    ]: 'The verification ID used to create the phone auth credential is invalid.',
    ["invalid-tenant-id"
    /* INVALID_TENANT_ID */
    ]: "The Auth instance's tenant ID is invalid.",
    ["missing-android-pkg-name"
    /* MISSING_ANDROID_PACKAGE_NAME */
    ]: 'An Android Package Name must be provided if the Android App is required to be installed.',
    ["auth-domain-config-required"
    /* MISSING_AUTH_DOMAIN */
    ]: 'Be sure to include authDomain when calling firebase.initializeApp(), ' + 'by following the instructions in the Firebase console.',
    ["missing-app-credential"
    /* MISSING_APP_CREDENTIAL */
    ]: 'The phone verification request is missing an application verifier ' + 'assertion. A reCAPTCHA response token needs to be provided.',
    ["missing-verification-code"
    /* MISSING_CODE */
    ]: 'The phone auth credential was created with an empty SMS verification code.',
    ["missing-continue-uri"
    /* MISSING_CONTINUE_URI */
    ]: 'A continue URL must be provided in the request.',
    ["missing-iframe-start"
    /* MISSING_IFRAME_START */
    ]: 'An internal AuthError has occurred.',
    ["missing-ios-bundle-id"
    /* MISSING_IOS_BUNDLE_ID */
    ]: 'An iOS Bundle ID must be provided if an App Store ID is provided.',
    ["missing-or-invalid-nonce"
    /* MISSING_OR_INVALID_NONCE */
    ]: 'The request does not contain a valid nonce. This can occur if the ' + 'SHA-256 hash of the provided raw nonce does not match the hashed nonce ' + 'in the ID token payload.',
    ["missing-multi-factor-info"
    /* MISSING_MFA_INFO */
    ]: 'No second factor identifier is provided.',
    ["missing-multi-factor-session"
    /* MISSING_MFA_SESSION */
    ]: 'The request is missing proof of first factor successful sign-in.',
    ["missing-phone-number"
    /* MISSING_PHONE_NUMBER */
    ]: 'To send verification codes, provide a phone number for the recipient.',
    ["missing-verification-id"
    /* MISSING_SESSION_INFO */
    ]: 'The phone auth credential was created with an empty verification ID.',
    ["app-deleted"
    /* MODULE_DESTROYED */
    ]: 'This instance of FirebaseApp has been deleted.',
    ["multi-factor-info-not-found"
    /* MFA_INFO_NOT_FOUND */
    ]: 'The user does not have a second factor matching the identifier provided.',
    ["multi-factor-auth-required"
    /* MFA_REQUIRED */
    ]: 'Proof of ownership of a second factor is required to complete sign-in.',
    ["account-exists-with-different-credential"
    /* NEED_CONFIRMATION */
    ]: 'An account already exists with the same email address but different ' + 'sign-in credentials. Sign in using a provider associated with this ' + 'email address.',
    ["network-request-failed"
    /* NETWORK_REQUEST_FAILED */
    ]: 'A network AuthError (such as timeout, interrupted connection or unreachable host) has occurred.',
    ["no-auth-event"
    /* NO_AUTH_EVENT */
    ]: 'An internal AuthError has occurred.',
    ["no-such-provider"
    /* NO_SUCH_PROVIDER */
    ]: 'User was not linked to an account with the given provider.',
    ["null-user"
    /* NULL_USER */
    ]: 'A null user object was provided as the argument for an operation which ' + 'requires a non-null user object.',
    ["operation-not-allowed"
    /* OPERATION_NOT_ALLOWED */
    ]: 'The given sign-in provider is disabled for this Firebase project. ' + 'Enable it in the Firebase console, under the sign-in method tab of the ' + 'Auth section.',
    ["operation-not-supported-in-this-environment"
    /* OPERATION_NOT_SUPPORTED */
    ]: 'This operation is not supported in the environment this application is ' + 'running on. "location.protocol" must be http, https or chrome-extension' + ' and web storage must be enabled.',
    ["popup-blocked"
    /* POPUP_BLOCKED */
    ]: 'Unable to establish a connection with the popup. It may have been blocked by the browser.',
    ["popup-closed-by-user"
    /* POPUP_CLOSED_BY_USER */
    ]: 'The popup has been closed by the user before finalizing the operation.',
    ["provider-already-linked"
    /* PROVIDER_ALREADY_LINKED */
    ]: 'User can only be linked to one identity for the given provider.',
    ["quota-exceeded"
    /* QUOTA_EXCEEDED */
    ]: "The project's quota for this operation has been exceeded.",
    ["redirect-cancelled-by-user"
    /* REDIRECT_CANCELLED_BY_USER */
    ]: 'The redirect operation has been cancelled by the user before finalizing.',
    ["redirect-operation-pending"
    /* REDIRECT_OPERATION_PENDING */
    ]: 'A redirect sign-in operation is already pending.',
    ["rejected-credential"
    /* REJECTED_CREDENTIAL */
    ]: 'The request contains malformed or mismatching credentials.',
    ["second-factor-already-in-use"
    /* SECOND_FACTOR_ALREADY_ENROLLED */
    ]: 'The second factor is already enrolled on this account.',
    ["maximum-second-factor-count-exceeded"
    /* SECOND_FACTOR_LIMIT_EXCEEDED */
    ]: 'The maximum allowed number of second factors on a user has been exceeded.',
    ["tenant-id-mismatch"
    /* TENANT_ID_MISMATCH */
    ]: "The provided tenant ID does not match the Auth instance's tenant ID",
    ["timeout"
    /* TIMEOUT */
    ]: 'The operation has timed out.',
    ["user-token-expired"
    /* TOKEN_EXPIRED */
    ]: "The user's credential is no longer valid. The user must sign in again.",
    ["too-many-requests"
    /* TOO_MANY_ATTEMPTS_TRY_LATER */
    ]: 'We have blocked all requests from this device due to unusual activity. ' + 'Try again later.',
    ["unauthorized-continue-uri"
    /* UNAUTHORIZED_DOMAIN */
    ]: 'The domain of the continue URL is not whitelisted.  Please whitelist ' + 'the domain in the Firebase console.',
    ["unsupported-first-factor"
    /* UNSUPPORTED_FIRST_FACTOR */
    ]: 'Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.',
    ["unsupported-persistence-type"
    /* UNSUPPORTED_PERSISTENCE */
    ]: 'The current environment does not support the specified persistence type.',
    ["unsupported-tenant-operation"
    /* UNSUPPORTED_TENANT_OPERATION */
    ]: 'This operation is not supported in a multi-tenant context.',
    ["unverified-email"
    /* UNVERIFIED_EMAIL */
    ]: 'The operation requires a verified email.',
    ["user-cancelled"
    /* USER_CANCELLED */
    ]: 'The user did not grant your application the permissions it requested.',
    ["user-not-found"
    /* USER_DELETED */
    ]: 'There is no user record corresponding to this identifier. The user may ' + 'have been deleted.',
    ["user-disabled"
    /* USER_DISABLED */
    ]: 'The user account has been disabled by an administrator.',
    ["user-mismatch"
    /* USER_MISMATCH */
    ]: 'The supplied credentials do not correspond to the previously signed in user.',
    ["user-signed-out"
    /* USER_SIGNED_OUT */
    ]: '',
    ["weak-password"
    /* WEAK_PASSWORD */
    ]: 'The password must be 6 characters long or more.',
    ["web-storage-unsupported"
    /* WEB_STORAGE_UNSUPPORTED */
    ]: 'This browser is not supported or 3rd party cookies and data may be disabled.',
    ["already-initialized"
    /* ALREADY_INITIALIZED */
    ]: 'initializeAuth() has already been called with ' + 'different options. To avoid this error, call initializeAuth() with the ' + 'same options as when it was originally called, or call getAuth() to return the' + ' already initialized instance.'
  };
}

function _prodErrorMap() {
  // We will include this one message in the prod error map since by the very
  // nature of this error, developers will never be able to see the message
  // using the debugErrorMap (which is installed during auth initialization).
  return {
    ["dependent-sdk-initialized-before-auth"
    /* DEPENDENT_SDK_INIT_BEFORE_AUTH */
    ]: 'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' + 'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' + 'starting any other Firebase SDK.'
  };
}
/**
 * A verbose error map with detailed descriptions for most error codes.
 *
 * See discussion at {@link AuthErrorMap}
 *
 * @public
 */


const debugErrorMap = _debugErrorMap;
/**
 * A minimal error map with all verbose error messages stripped.
 *
 * See discussion at {@link AuthErrorMap}
 *
 * @public
 */

exports.z = debugErrorMap;
const prodErrorMap = _prodErrorMap;
exports.B = prodErrorMap;

const _DEFAULT_AUTH_ERROR_FACTORY = new _util.ErrorFactory('auth', 'Firebase', _prodErrorMap());
/**
 * A map of potential `Auth` error codes, for easier comparison with errors
 * thrown by the SDK.
 *
 * @remarks
 * Note that you can't tree-shake individual keys
 * in the map, so by using the map you might substantially increase your
 * bundle size.
 *
 * @public
 */


const AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY = {
  ADMIN_ONLY_OPERATION: 'auth/admin-restricted-operation',
  ARGUMENT_ERROR: 'auth/argument-error',
  APP_NOT_AUTHORIZED: 'auth/app-not-authorized',
  APP_NOT_INSTALLED: 'auth/app-not-installed',
  CAPTCHA_CHECK_FAILED: 'auth/captcha-check-failed',
  CODE_EXPIRED: 'auth/code-expired',
  CORDOVA_NOT_READY: 'auth/cordova-not-ready',
  CORS_UNSUPPORTED: 'auth/cors-unsupported',
  CREDENTIAL_ALREADY_IN_USE: 'auth/credential-already-in-use',
  CREDENTIAL_MISMATCH: 'auth/custom-token-mismatch',
  CREDENTIAL_TOO_OLD_LOGIN_AGAIN: 'auth/requires-recent-login',
  DEPENDENT_SDK_INIT_BEFORE_AUTH: 'auth/dependent-sdk-initialized-before-auth',
  DYNAMIC_LINK_NOT_ACTIVATED: 'auth/dynamic-link-not-activated',
  EMAIL_CHANGE_NEEDS_VERIFICATION: 'auth/email-change-needs-verification',
  EMAIL_EXISTS: 'auth/email-already-in-use',
  EMULATOR_CONFIG_FAILED: 'auth/emulator-config-failed',
  EXPIRED_OOB_CODE: 'auth/expired-action-code',
  EXPIRED_POPUP_REQUEST: 'auth/cancelled-popup-request',
  INTERNAL_ERROR: 'auth/internal-error',
  INVALID_API_KEY: 'auth/invalid-api-key',
  INVALID_APP_CREDENTIAL: 'auth/invalid-app-credential',
  INVALID_APP_ID: 'auth/invalid-app-id',
  INVALID_AUTH: 'auth/invalid-user-token',
  INVALID_AUTH_EVENT: 'auth/invalid-auth-event',
  INVALID_CERT_HASH: 'auth/invalid-cert-hash',
  INVALID_CODE: 'auth/invalid-verification-code',
  INVALID_CONTINUE_URI: 'auth/invalid-continue-uri',
  INVALID_CORDOVA_CONFIGURATION: 'auth/invalid-cordova-configuration',
  INVALID_CUSTOM_TOKEN: 'auth/invalid-custom-token',
  INVALID_DYNAMIC_LINK_DOMAIN: 'auth/invalid-dynamic-link-domain',
  INVALID_EMAIL: 'auth/invalid-email',
  INVALID_EMULATOR_SCHEME: 'auth/invalid-emulator-scheme',
  INVALID_IDP_RESPONSE: 'auth/invalid-credential',
  INVALID_MESSAGE_PAYLOAD: 'auth/invalid-message-payload',
  INVALID_MFA_SESSION: 'auth/invalid-multi-factor-session',
  INVALID_OAUTH_CLIENT_ID: 'auth/invalid-oauth-client-id',
  INVALID_OAUTH_PROVIDER: 'auth/invalid-oauth-provider',
  INVALID_OOB_CODE: 'auth/invalid-action-code',
  INVALID_ORIGIN: 'auth/unauthorized-domain',
  INVALID_PASSWORD: 'auth/wrong-password',
  INVALID_PERSISTENCE: 'auth/invalid-persistence-type',
  INVALID_PHONE_NUMBER: 'auth/invalid-phone-number',
  INVALID_PROVIDER_ID: 'auth/invalid-provider-id',
  INVALID_RECIPIENT_EMAIL: 'auth/invalid-recipient-email',
  INVALID_SENDER: 'auth/invalid-sender',
  INVALID_SESSION_INFO: 'auth/invalid-verification-id',
  INVALID_TENANT_ID: 'auth/invalid-tenant-id',
  MFA_INFO_NOT_FOUND: 'auth/multi-factor-info-not-found',
  MFA_REQUIRED: 'auth/multi-factor-auth-required',
  MISSING_ANDROID_PACKAGE_NAME: 'auth/missing-android-pkg-name',
  MISSING_APP_CREDENTIAL: 'auth/missing-app-credential',
  MISSING_AUTH_DOMAIN: 'auth/auth-domain-config-required',
  MISSING_CODE: 'auth/missing-verification-code',
  MISSING_CONTINUE_URI: 'auth/missing-continue-uri',
  MISSING_IFRAME_START: 'auth/missing-iframe-start',
  MISSING_IOS_BUNDLE_ID: 'auth/missing-ios-bundle-id',
  MISSING_OR_INVALID_NONCE: 'auth/missing-or-invalid-nonce',
  MISSING_MFA_INFO: 'auth/missing-multi-factor-info',
  MISSING_MFA_SESSION: 'auth/missing-multi-factor-session',
  MISSING_PHONE_NUMBER: 'auth/missing-phone-number',
  MISSING_SESSION_INFO: 'auth/missing-verification-id',
  MODULE_DESTROYED: 'auth/app-deleted',
  NEED_CONFIRMATION: 'auth/account-exists-with-different-credential',
  NETWORK_REQUEST_FAILED: 'auth/network-request-failed',
  NULL_USER: 'auth/null-user',
  NO_AUTH_EVENT: 'auth/no-auth-event',
  NO_SUCH_PROVIDER: 'auth/no-such-provider',
  OPERATION_NOT_ALLOWED: 'auth/operation-not-allowed',
  OPERATION_NOT_SUPPORTED: 'auth/operation-not-supported-in-this-environment',
  POPUP_BLOCKED: 'auth/popup-blocked',
  POPUP_CLOSED_BY_USER: 'auth/popup-closed-by-user',
  PROVIDER_ALREADY_LINKED: 'auth/provider-already-linked',
  QUOTA_EXCEEDED: 'auth/quota-exceeded',
  REDIRECT_CANCELLED_BY_USER: 'auth/redirect-cancelled-by-user',
  REDIRECT_OPERATION_PENDING: 'auth/redirect-operation-pending',
  REJECTED_CREDENTIAL: 'auth/rejected-credential',
  SECOND_FACTOR_ALREADY_ENROLLED: 'auth/second-factor-already-in-use',
  SECOND_FACTOR_LIMIT_EXCEEDED: 'auth/maximum-second-factor-count-exceeded',
  TENANT_ID_MISMATCH: 'auth/tenant-id-mismatch',
  TIMEOUT: 'auth/timeout',
  TOKEN_EXPIRED: 'auth/user-token-expired',
  TOO_MANY_ATTEMPTS_TRY_LATER: 'auth/too-many-requests',
  UNAUTHORIZED_DOMAIN: 'auth/unauthorized-continue-uri',
  UNSUPPORTED_FIRST_FACTOR: 'auth/unsupported-first-factor',
  UNSUPPORTED_PERSISTENCE: 'auth/unsupported-persistence-type',
  UNSUPPORTED_TENANT_OPERATION: 'auth/unsupported-tenant-operation',
  UNVERIFIED_EMAIL: 'auth/unverified-email',
  USER_CANCELLED: 'auth/user-cancelled',
  USER_DELETED: 'auth/user-not-found',
  USER_DISABLED: 'auth/user-disabled',
  USER_MISMATCH: 'auth/user-mismatch',
  USER_SIGNED_OUT: 'auth/user-signed-out',
  WEAK_PASSWORD: 'auth/weak-password',
  WEB_STORAGE_UNSUPPORTED: 'auth/web-storage-unsupported',
  ALREADY_INITIALIZED: 'auth/already-initialized'
};
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

exports.C = AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY;
const logClient = new _logger.Logger('@firebase/auth');

function _logError(msg, ...args) {
  if (logClient.logLevel <= _logger.LogLevel.ERROR) {
    logClient.error(`Auth (${_app.SDK_VERSION}): ${msg}`, ...args);
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function _fail(authOrCode, ...rest) {
  throw createErrorInternal(authOrCode, ...rest);
}

function _createError(authOrCode, ...rest) {
  return createErrorInternal(authOrCode, ...rest);
}

function _errorWithCustomMessage(auth, code, message) {
  const errorMap = Object.assign(Object.assign({}, prodErrorMap()), {
    [code]: message
  });
  const factory = new _util.ErrorFactory('auth', 'Firebase', errorMap);
  return factory.create(code, {
    appName: auth.name
  });
}

function _assertInstanceOf(auth, object, instance) {
  const constructorInstance = instance;

  if (!(object instanceof constructorInstance)) {
    if (constructorInstance.name !== object.constructor.name) {
      _fail(auth, "argument-error"
      /* ARGUMENT_ERROR */
      );
    }

    throw _errorWithCustomMessage(auth, "argument-error"
    /* ARGUMENT_ERROR */
    , `Type of ${object.constructor.name} does not match expected instance.` + `Did you pass a reference from a different Auth SDK?`);
  }
}

function createErrorInternal(authOrCode, ...rest) {
  if (typeof authOrCode !== 'string') {
    const code = rest[0];
    const fullParams = [...rest.slice(1)];

    if (fullParams[0]) {
      fullParams[0].appName = authOrCode.name;
    }

    return authOrCode._errorFactory.create(code, ...fullParams);
  }

  return _DEFAULT_AUTH_ERROR_FACTORY.create(authOrCode, ...rest);
}

function _assert(assertion, authOrCode, ...rest) {
  if (!assertion) {
    throw createErrorInternal(authOrCode, ...rest);
  }
}
/**
 * Unconditionally fails, throwing an internal error with the given message.
 *
 * @param failure type of failure encountered
 * @throws Error
 */


function debugFail(failure) {
  // Log the failure in addition to throw an exception, just in case the
  // exception is swallowed.
  const message = `INTERNAL ASSERTION FAILED: ` + failure;

  _logError(message); // NOTE: We don't use FirebaseError here because these are internal failures
  // that cannot be handled by the user. (Also it would create a circular
  // dependency between the error and assert modules which doesn't work.)


  throw new Error(message);
}
/**
 * Fails if the given assertion condition is false, throwing an Error with the
 * given message if it did.
 *
 * @param assertion
 * @param message
 */


function debugAssert(assertion, message) {
  if (!assertion) {
    debugFail(message);
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const instanceCache = new Map();

function _getInstance(cls) {
  debugAssert(cls instanceof Function, 'Expected a class definition');
  let instance = instanceCache.get(cls);

  if (instance) {
    debugAssert(instance instanceof cls, 'Instance stored in cache mismatched with class');
    return instance;
  }

  instance = new cls();
  instanceCache.set(cls, instance);
  return instance;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Initializes an {@link Auth} instance with fine-grained control over
 * {@link Dependencies}.
 *
 * @remarks
 *
 * This function allows more control over the {@link Auth} instance than
 * {@link getAuth}. `getAuth` uses platform-specific defaults to supply
 * the {@link Dependencies}. In general, `getAuth` is the easiest way to
 * initialize Auth and works for most use cases. Use `initializeAuth` if you
 * need control over which persistence layer is used, or to minimize bundle
 * size if you're not using either `signInWithPopup` or `signInWithRedirect`.
 *
 * For example, if your app only uses anonymous accounts and you only want
 * accounts saved for the current session, initialize `Auth` with:
 *
 * ```js
 * const auth = initializeAuth(app, {
 *   persistence: browserSessionPersistence,
 *   popupRedirectResolver: undefined,
 * });
 * ```
 *
 * @public
 */


function initializeAuth(app, deps) {
  const provider = (0, _app._getProvider)(app, 'auth');

  if (provider.isInitialized()) {
    const auth = provider.getImmediate();
    const initialOptions = provider.getOptions();

    if ((0, _util.deepEqual)(initialOptions, deps !== null && deps !== void 0 ? deps : {})) {
      return auth;
    } else {
      _fail(auth, "already-initialized"
      /* ALREADY_INITIALIZED */
      );
    }
  }

  const auth = provider.initialize({
    options: deps
  });
  return auth;
}

function _initializeAuthInstance(auth, deps) {
  const persistence = (deps === null || deps === void 0 ? void 0 : deps.persistence) || [];
  const hierarchy = (Array.isArray(persistence) ? persistence : [persistence]).map(_getInstance);

  if (deps === null || deps === void 0 ? void 0 : deps.errorMap) {
    auth._updateErrorMap(deps.errorMap);
  } // This promise is intended to float; auth initialization happens in the
  // background, meanwhile the auth object may be used by the app.
  // eslint-disable-next-line @typescript-eslint/no-floating-promises


  auth._initializeWithPersistence(hierarchy, deps === null || deps === void 0 ? void 0 : deps.popupRedirectResolver);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function _getCurrentUrl() {
  var _a;

  return typeof self !== 'undefined' && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.href) || '';
}

function _isHttpOrHttps() {
  return _getCurrentScheme() === 'http:' || _getCurrentScheme() === 'https:';
}

function _getCurrentScheme() {
  var _a;

  return typeof self !== 'undefined' && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.protocol) || null;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Determine whether the browser is working online
 */


function _isOnline() {
  if (typeof navigator !== 'undefined' && navigator && 'onLine' in navigator && typeof navigator.onLine === 'boolean' && (_isHttpOrHttps() || (0, _util.isBrowserExtension)() || 'connection' in navigator)) {
    return navigator.onLine;
  } // If we can't determine the state, assume it is online.


  return true;
}

function _getUserLanguage() {
  if (typeof navigator === 'undefined') {
    return null;
  }

  const navigatorLanguage = navigator;
  return (// Most reliable, but only supported in Chrome/Firefox.
    navigatorLanguage.languages && navigatorLanguage.languages[0] || // Supported in most browsers, but returns the language of the browser
    // UI, not the language set in browser settings.
    navigatorLanguage.language || // Couldn't determine language.
    null
  );
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A structure to help pick between a range of long and short delay durations
 * depending on the current environment. In general, the long delay is used for
 * mobile environments whereas short delays are used for desktop environments.
 */


class Delay {
  constructor(shortDelay, longDelay) {
    this.shortDelay = shortDelay;
    this.longDelay = longDelay; // Internal error when improperly initialized.

    debugAssert(longDelay > shortDelay, 'Short delay should be less than long delay!');
    this.isMobile = (0, _util.isMobileCordova)() || (0, _util.isReactNative)();
  }

  get() {
    if (!_isOnline()) {
      // Pick the shorter timeout.
      return Math.min(5000
      /* OFFLINE */
      , this.shortDelay);
    } // If running in a mobile environment, return the long delay, otherwise
    // return the short delay.
    // This could be improved in the future to dynamically change based on other
    // variables instead of just reading the current environment.


    return this.isMobile ? this.longDelay : this.shortDelay;
  }

}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function _emulatorUrl(config, path) {
  debugAssert(config.emulator, 'Emulator should always be set here');
  const {
    url
  } = config.emulator;

  if (!path) {
    return url;
  }

  return `${url}${path.startsWith('/') ? path.slice(1) : path}`;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


class FetchProvider {
  static initialize(fetchImpl, headersImpl, responseImpl) {
    this.fetchImpl = fetchImpl;

    if (headersImpl) {
      this.headersImpl = headersImpl;
    }

    if (responseImpl) {
      this.responseImpl = responseImpl;
    }
  }

  static fetch() {
    if (this.fetchImpl) {
      return this.fetchImpl;
    }

    if (typeof self !== 'undefined' && 'fetch' in self) {
      return self.fetch;
    }

    debugFail('Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');
  }

  static headers() {
    if (this.headersImpl) {
      return this.headersImpl;
    }

    if (typeof self !== 'undefined' && 'Headers' in self) {
      return self.Headers;
    }

    debugFail('Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');
  }

  static response() {
    if (this.responseImpl) {
      return this.responseImpl;
    }

    if (typeof self !== 'undefined' && 'Response' in self) {
      return self.Response;
    }

    debugFail('Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');
  }

}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Map from errors returned by the server to errors to developer visible errors
 */


exports.aI = FetchProvider;
const SERVER_ERROR_MAP = {
  // Custom token errors.
  ["CREDENTIAL_MISMATCH"
  /* CREDENTIAL_MISMATCH */
  ]: "custom-token-mismatch"
  /* CREDENTIAL_MISMATCH */
  ,
  // This can only happen if the SDK sends a bad request.
  ["MISSING_CUSTOM_TOKEN"
  /* MISSING_CUSTOM_TOKEN */
  ]: "internal-error"
  /* INTERNAL_ERROR */
  ,
  // Create Auth URI errors.
  ["INVALID_IDENTIFIER"
  /* INVALID_IDENTIFIER */
  ]: "invalid-email"
  /* INVALID_EMAIL */
  ,
  // This can only happen if the SDK sends a bad request.
  ["MISSING_CONTINUE_URI"
  /* MISSING_CONTINUE_URI */
  ]: "internal-error"
  /* INTERNAL_ERROR */
  ,
  // Sign in with email and password errors (some apply to sign up too).
  ["INVALID_PASSWORD"
  /* INVALID_PASSWORD */
  ]: "wrong-password"
  /* INVALID_PASSWORD */
  ,
  // This can only happen if the SDK sends a bad request.
  ["MISSING_PASSWORD"
  /* MISSING_PASSWORD */
  ]: "internal-error"
  /* INTERNAL_ERROR */
  ,
  // Sign up with email and password errors.
  ["EMAIL_EXISTS"
  /* EMAIL_EXISTS */
  ]: "email-already-in-use"
  /* EMAIL_EXISTS */
  ,
  ["PASSWORD_LOGIN_DISABLED"
  /* PASSWORD_LOGIN_DISABLED */
  ]: "operation-not-allowed"
  /* OPERATION_NOT_ALLOWED */
  ,
  // Verify assertion for sign in with credential errors:
  ["INVALID_IDP_RESPONSE"
  /* INVALID_IDP_RESPONSE */
  ]: "invalid-credential"
  /* INVALID_IDP_RESPONSE */
  ,
  ["INVALID_PENDING_TOKEN"
  /* INVALID_PENDING_TOKEN */
  ]: "invalid-credential"
  /* INVALID_IDP_RESPONSE */
  ,
  ["FEDERATED_USER_ID_ALREADY_LINKED"
  /* FEDERATED_USER_ID_ALREADY_LINKED */
  ]: "credential-already-in-use"
  /* CREDENTIAL_ALREADY_IN_USE */
  ,
  // This can only happen if the SDK sends a bad request.
  ["MISSING_REQ_TYPE"
  /* MISSING_REQ_TYPE */
  ]: "internal-error"
  /* INTERNAL_ERROR */
  ,
  // Send Password reset email errors:
  ["EMAIL_NOT_FOUND"
  /* EMAIL_NOT_FOUND */
  ]: "user-not-found"
  /* USER_DELETED */
  ,
  ["RESET_PASSWORD_EXCEED_LIMIT"
  /* RESET_PASSWORD_EXCEED_LIMIT */
  ]: "too-many-requests"
  /* TOO_MANY_ATTEMPTS_TRY_LATER */
  ,
  ["EXPIRED_OOB_CODE"
  /* EXPIRED_OOB_CODE */
  ]: "expired-action-code"
  /* EXPIRED_OOB_CODE */
  ,
  ["INVALID_OOB_CODE"
  /* INVALID_OOB_CODE */
  ]: "invalid-action-code"
  /* INVALID_OOB_CODE */
  ,
  // This can only happen if the SDK sends a bad request.
  ["MISSING_OOB_CODE"
  /* MISSING_OOB_CODE */
  ]: "internal-error"
  /* INTERNAL_ERROR */
  ,
  // Operations that require ID token in request:
  ["CREDENTIAL_TOO_OLD_LOGIN_AGAIN"
  /* CREDENTIAL_TOO_OLD_LOGIN_AGAIN */
  ]: "requires-recent-login"
  /* CREDENTIAL_TOO_OLD_LOGIN_AGAIN */
  ,
  ["INVALID_ID_TOKEN"
  /* INVALID_ID_TOKEN */
  ]: "invalid-user-token"
  /* INVALID_AUTH */
  ,
  ["TOKEN_EXPIRED"
  /* TOKEN_EXPIRED */
  ]: "user-token-expired"
  /* TOKEN_EXPIRED */
  ,
  ["USER_NOT_FOUND"
  /* USER_NOT_FOUND */
  ]: "user-token-expired"
  /* TOKEN_EXPIRED */
  ,
  // Other errors.
  ["TOO_MANY_ATTEMPTS_TRY_LATER"
  /* TOO_MANY_ATTEMPTS_TRY_LATER */
  ]: "too-many-requests"
  /* TOO_MANY_ATTEMPTS_TRY_LATER */
  ,
  // Phone Auth related errors.
  ["INVALID_CODE"
  /* INVALID_CODE */
  ]: "invalid-verification-code"
  /* INVALID_CODE */
  ,
  ["INVALID_SESSION_INFO"
  /* INVALID_SESSION_INFO */
  ]: "invalid-verification-id"
  /* INVALID_SESSION_INFO */
  ,
  ["INVALID_TEMPORARY_PROOF"
  /* INVALID_TEMPORARY_PROOF */
  ]: "invalid-credential"
  /* INVALID_IDP_RESPONSE */
  ,
  ["MISSING_SESSION_INFO"
  /* MISSING_SESSION_INFO */
  ]: "missing-verification-id"
  /* MISSING_SESSION_INFO */
  ,
  ["SESSION_EXPIRED"
  /* SESSION_EXPIRED */
  ]: "code-expired"
  /* CODE_EXPIRED */
  ,
  // Other action code errors when additional settings passed.
  // MISSING_CONTINUE_URI is getting mapped to INTERNAL_ERROR above.
  // This is OK as this error will be caught by client side validation.
  ["MISSING_ANDROID_PACKAGE_NAME"
  /* MISSING_ANDROID_PACKAGE_NAME */
  ]: "missing-android-pkg-name"
  /* MISSING_ANDROID_PACKAGE_NAME */
  ,
  ["UNAUTHORIZED_DOMAIN"
  /* UNAUTHORIZED_DOMAIN */
  ]: "unauthorized-continue-uri"
  /* UNAUTHORIZED_DOMAIN */
  ,
  // getProjectConfig errors when clientId is passed.
  ["INVALID_OAUTH_CLIENT_ID"
  /* INVALID_OAUTH_CLIENT_ID */
  ]: "invalid-oauth-client-id"
  /* INVALID_OAUTH_CLIENT_ID */
  ,
  // User actions (sign-up or deletion) disabled errors.
  ["ADMIN_ONLY_OPERATION"
  /* ADMIN_ONLY_OPERATION */
  ]: "admin-restricted-operation"
  /* ADMIN_ONLY_OPERATION */
  ,
  // Multi factor related errors.
  ["INVALID_MFA_PENDING_CREDENTIAL"
  /* INVALID_MFA_PENDING_CREDENTIAL */
  ]: "invalid-multi-factor-session"
  /* INVALID_MFA_SESSION */
  ,
  ["MFA_ENROLLMENT_NOT_FOUND"
  /* MFA_ENROLLMENT_NOT_FOUND */
  ]: "multi-factor-info-not-found"
  /* MFA_INFO_NOT_FOUND */
  ,
  ["MISSING_MFA_ENROLLMENT_ID"
  /* MISSING_MFA_ENROLLMENT_ID */
  ]: "missing-multi-factor-info"
  /* MISSING_MFA_INFO */
  ,
  ["MISSING_MFA_PENDING_CREDENTIAL"
  /* MISSING_MFA_PENDING_CREDENTIAL */
  ]: "missing-multi-factor-session"
  /* MISSING_MFA_SESSION */
  ,
  ["SECOND_FACTOR_EXISTS"
  /* SECOND_FACTOR_EXISTS */
  ]: "second-factor-already-in-use"
  /* SECOND_FACTOR_ALREADY_ENROLLED */
  ,
  ["SECOND_FACTOR_LIMIT_EXCEEDED"
  /* SECOND_FACTOR_LIMIT_EXCEEDED */
  ]: "maximum-second-factor-count-exceeded"
  /* SECOND_FACTOR_LIMIT_EXCEEDED */
  ,
  // Blocking functions related errors.
  ["BLOCKING_FUNCTION_ERROR_RESPONSE"
  /* BLOCKING_FUNCTION_ERROR_RESPONSE */
  ]: "internal-error"
  /* INTERNAL_ERROR */

};
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const DEFAULT_API_TIMEOUT_MS = new Delay(30000, 60000);

function _addTidIfNecessary(auth, request) {
  if (auth.tenantId && !request.tenantId) {
    return Object.assign(Object.assign({}, request), {
      tenantId: auth.tenantId
    });
  }

  return request;
}

async function _performApiRequest(auth, method, path, request, customErrorMap = {}) {
  return _performFetchWithErrorHandling(auth, customErrorMap, () => {
    let body = {};
    let params = {};

    if (request) {
      if (method === "GET"
      /* GET */
      ) {
        params = request;
      } else {
        body = {
          body: JSON.stringify(request)
        };
      }
    }

    const query = (0, _util.querystring)(Object.assign({
      key: auth.config.apiKey
    }, params)).slice(1);
    const headers = new (FetchProvider.headers())();
    headers.set("Content-Type"
    /* CONTENT_TYPE */
    , 'application/json');
    headers.set("X-Client-Version"
    /* X_CLIENT_VERSION */
    , auth._getSdkClientVersion());

    if (auth.languageCode) {
      headers.set("X-Firebase-Locale"
      /* X_FIREBASE_LOCALE */
      , auth.languageCode);
    }

    return FetchProvider.fetch()(_getFinalTarget(auth, auth.config.apiHost, path, query), Object.assign({
      method,
      headers,
      referrerPolicy: 'no-referrer'
    }, body));
  });
}

async function _performFetchWithErrorHandling(auth, customErrorMap, fetchFn) {
  auth._canInitEmulator = false;
  const errorMap = Object.assign(Object.assign({}, SERVER_ERROR_MAP), customErrorMap);

  try {
    const networkTimeout = new NetworkTimeout(auth);
    const response = await Promise.race([fetchFn(), networkTimeout.promise]); // If we've reached this point, the fetch succeeded and the networkTimeout
    // didn't throw; clear the network timeout delay so that Node won't hang

    networkTimeout.clearNetworkTimeout();
    const json = await response.json();

    if ('needConfirmation' in json) {
      throw _makeTaggedError(auth, "account-exists-with-different-credential"
      /* NEED_CONFIRMATION */
      , json);
    }

    if (response.ok && !('errorMessage' in json)) {
      return json;
    } else {
      const errorMessage = response.ok ? json.errorMessage : json.error.message;
      const [serverErrorCode, serverErrorMessage] = errorMessage.split(' : ');

      if (serverErrorCode === "FEDERATED_USER_ID_ALREADY_LINKED"
      /* FEDERATED_USER_ID_ALREADY_LINKED */
      ) {
        throw _makeTaggedError(auth, "credential-already-in-use"
        /* CREDENTIAL_ALREADY_IN_USE */
        , json);
      } else if (serverErrorCode === "EMAIL_EXISTS"
      /* EMAIL_EXISTS */
      ) {
        throw _makeTaggedError(auth, "email-already-in-use"
        /* EMAIL_EXISTS */
        , json);
      }

      const authError = errorMap[serverErrorCode] || serverErrorCode.toLowerCase().replace(/[_\s]+/g, '-');

      if (serverErrorMessage) {
        throw _errorWithCustomMessage(auth, authError, serverErrorMessage);
      } else {
        _fail(auth, authError);
      }
    }
  } catch (e) {
    if (e instanceof _util.FirebaseError) {
      throw e;
    }

    _fail(auth, "network-request-failed"
    /* NETWORK_REQUEST_FAILED */
    );
  }
}

async function _performSignInRequest(auth, method, path, request, customErrorMap = {}) {
  const serverResponse = await _performApiRequest(auth, method, path, request, customErrorMap);

  if ('mfaPendingCredential' in serverResponse) {
    _fail(auth, "multi-factor-auth-required"
    /* MFA_REQUIRED */
    , {
      serverResponse
    });
  }

  return serverResponse;
}

function _getFinalTarget(auth, host, path, query) {
  const base = `${host}${path}?${query}`;

  if (!auth.config.emulator) {
    return `${auth.config.apiScheme}://${base}`;
  }

  return _emulatorUrl(auth.config, base);
}

class NetworkTimeout {
  constructor(auth) {
    this.auth = auth; // Node timers and browser timers are fundamentally incompatible, but we
    // don't care about the value here
    // eslint-disable-next-line @typescript-eslint/no-explicit-any

    this.timer = null;
    this.promise = new Promise((_, reject) => {
      this.timer = setTimeout(() => {
        return reject(_createError(this.auth, "timeout"
        /* TIMEOUT */
        ));
      }, DEFAULT_API_TIMEOUT_MS.get());
    });
  }

  clearNetworkTimeout() {
    clearTimeout(this.timer);
  }

}

function _makeTaggedError(auth, code, response) {
  const errorParams = {
    appName: auth.name
  };

  if (response.email) {
    errorParams.email = response.email;
  }

  if (response.phoneNumber) {
    errorParams.phoneNumber = response.phoneNumber;
  }

  const error = _createError(auth, code, errorParams); // We know customData is defined on error because errorParams is defined


  error.customData._tokenResponse = response;
  return error;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


async function deleteAccount(auth, request) {
  return _performApiRequest(auth, "POST"
  /* POST */
  , "/v1/accounts:delete"
  /* DELETE_ACCOUNT */
  , request);
}

async function deleteLinkedAccounts(auth, request) {
  return _performApiRequest(auth, "POST"
  /* POST */
  , "/v1/accounts:update"
  /* SET_ACCOUNT_INFO */
  , request);
}

async function getAccountInfo(auth, request) {
  return _performApiRequest(auth, "POST"
  /* POST */
  , "/v1/accounts:lookup"
  /* GET_ACCOUNT_INFO */
  , request);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function utcTimestampToDateString(utcTimestamp) {
  if (!utcTimestamp) {
    return undefined;
  }

  try {
    // Convert to date object.
    const date = new Date(Number(utcTimestamp)); // Test date is valid.

    if (!isNaN(date.getTime())) {
      // Convert to UTC date string.
      return date.toUTCString();
    }
  } catch (e) {// Do nothing. undefined will be returned.
  }

  return undefined;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns a JSON Web Token (JWT) used to identify the user to a Firebase service.
 *
 * @remarks
 * Returns the current token if it has not expired or if it will not expire in the next five
 * minutes. Otherwise, this will refresh the token and return a new one.
 *
 * @param user - The user.
 * @param forceRefresh - Force refresh regardless of token expiration.
 *
 * @public
 */


function getIdToken(user, forceRefresh = false) {
  return (0, _util.getModularInstance)(user).getIdToken(forceRefresh);
}
/**
 * Returns a deserialized JSON Web Token (JWT) used to identitfy the user to a Firebase service.
 *
 * @remarks
 * Returns the current token if it has not expired or if it will not expire in the next five
 * minutes. Otherwise, this will refresh the token and return a new one.
 *
 * @param user - The user.
 * @param forceRefresh - Force refresh regardless of token expiration.
 *
 * @public
 */


async function getIdTokenResult(user, forceRefresh = false) {
  const userInternal = (0, _util.getModularInstance)(user);
  const token = await userInternal.getIdToken(forceRefresh);

  const claims = _parseToken(token);

  _assert(claims && claims.exp && claims.auth_time && claims.iat, userInternal.auth, "internal-error"
  /* INTERNAL_ERROR */
  );

  const firebase = typeof claims.firebase === 'object' ? claims.firebase : undefined;
  const signInProvider = firebase === null || firebase === void 0 ? void 0 : firebase['sign_in_provider'];
  return {
    claims,
    token,
    authTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.auth_time)),
    issuedAtTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.iat)),
    expirationTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.exp)),
    signInProvider: signInProvider || null,
    signInSecondFactor: (firebase === null || firebase === void 0 ? void 0 : firebase['sign_in_second_factor']) || null
  };
}

function secondsStringToMilliseconds(seconds) {
  return Number(seconds) * 1000;
}

function _parseToken(token) {
  const [algorithm, payload, signature] = token.split('.');

  if (algorithm === undefined || payload === undefined || signature === undefined) {
    _logError('JWT malformed, contained fewer than 3 sections');

    return null;
  }

  try {
    const decoded = (0, _util.base64Decode)(payload);

    if (!decoded) {
      _logError('Failed to decode base64 JWT payload');

      return null;
    }

    return JSON.parse(decoded);
  } catch (e) {
    _logError('Caught error parsing JWT payload as JSON', e);

    return null;
  }
}
/**
 * Extract expiresIn TTL from a token by subtracting the expiration from the issuance.
 */


function _tokenExpiresIn(token) {
  const parsedToken = _parseToken(token);

  _assert(parsedToken, "internal-error"
  /* INTERNAL_ERROR */
  );

  _assert(typeof parsedToken.exp !== 'undefined', "internal-error"
  /* INTERNAL_ERROR */
  );

  _assert(typeof parsedToken.iat !== 'undefined', "internal-error"
  /* INTERNAL_ERROR */
  );

  return Number(parsedToken.exp) - Number(parsedToken.iat);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


async function _logoutIfInvalidated(user, promise, bypassAuthState = false) {
  if (bypassAuthState) {
    return promise;
  }

  try {
    return await promise;
  } catch (e) {
    if (e instanceof _util.FirebaseError && isUserInvalidated(e)) {
      if (user.auth.currentUser === user) {
        await user.auth.signOut();
      }
    }

    throw e;
  }
}

function isUserInvalidated({
  code
}) {
  return code === `auth/${"user-disabled"
  /* USER_DISABLED */
  }` || code === `auth/${"user-token-expired"
  /* TOKEN_EXPIRED */
  }`;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


class ProactiveRefresh {
  constructor(user) {
    this.user = user;
    this.isRunning = false; // Node timers and browser timers return fundamentally different types.
    // We don't actually care what the value is but TS won't accept unknown and
    // we can't cast properly in both environments.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any

    this.timerId = null;
    this.errorBackoff = 30000
    /* RETRY_BACKOFF_MIN */
    ;
  }

  _start() {
    if (this.isRunning) {
      return;
    }

    this.isRunning = true;
    this.schedule();
  }

  _stop() {
    if (!this.isRunning) {
      return;
    }

    this.isRunning = false;

    if (this.timerId !== null) {
      clearTimeout(this.timerId);
    }
  }

  getInterval(wasError) {
    var _a;

    if (wasError) {
      const interval = this.errorBackoff;
      this.errorBackoff = Math.min(this.errorBackoff * 2, 960000
      /* RETRY_BACKOFF_MAX */
      );
      return interval;
    } else {
      // Reset the error backoff
      this.errorBackoff = 30000
      /* RETRY_BACKOFF_MIN */
      ;
      const expTime = (_a = this.user.stsTokenManager.expirationTime) !== null && _a !== void 0 ? _a : 0;
      const interval = expTime - Date.now() - 300000
      /* OFFSET */
      ;
      return Math.max(0, interval);
    }
  }

  schedule(wasError = false) {
    if (!this.isRunning) {
      // Just in case...
      return;
    }

    const interval = this.getInterval(wasError);
    this.timerId = setTimeout(async () => {
      await this.iteration();
    }, interval);
  }

  async iteration() {
    try {
      await this.user.getIdToken(true);
    } catch (e) {
      // Only retry on network errors
      if (e.code === `auth/${"network-request-failed"
      /* NETWORK_REQUEST_FAILED */
      }`) {
        this.schedule(
        /* wasError */
        true);
      }

      return;
    }

    this.schedule();
  }

}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


class UserMetadata {
  constructor(createdAt, lastLoginAt) {
    this.createdAt = createdAt;
    this.lastLoginAt = lastLoginAt;

    this._initializeTime();
  }

  _initializeTime() {
    this.lastSignInTime = utcTimestampToDateString(this.lastLoginAt);
    this.creationTime = utcTimestampToDateString(this.createdAt);
  }

  _copy(metadata) {
    this.createdAt = metadata.createdAt;
    this.lastLoginAt = metadata.lastLoginAt;

    this._initializeTime();
  }

  toJSON() {
    return {
      createdAt: this.createdAt,
      lastLoginAt: this.lastLoginAt
    };
  }

}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


async function _reloadWithoutSaving(user) {
  var _a;

  const auth = user.auth;
  const idToken = await user.getIdToken();
  const response = await _logoutIfInvalidated(user, getAccountInfo(auth, {
    idToken
  }));

  _assert(response === null || response === void 0 ? void 0 : response.users.length, auth, "internal-error"
  /* INTERNAL_ERROR */
  );

  const coreAccount = response.users[0];

  user._notifyReloadListener(coreAccount);

  const newProviderData = ((_a = coreAccount.providerUserInfo) === null || _a === void 0 ? void 0 : _a.length) ? extractProviderData(coreAccount.providerUserInfo) : [];
  const providerData = mergeProviderData(user.providerData, newProviderData); // Preserves the non-nonymous status of the stored user, even if no more
  // credentials (federated or email/password) are linked to the user. If
  // the user was previously anonymous, then use provider data to update.
  // On the other hand, if it was not anonymous before, it should never be
  // considered anonymous now.

  const oldIsAnonymous = user.isAnonymous;
  const newIsAnonymous = !(user.email && coreAccount.passwordHash) && !(providerData === null || providerData === void 0 ? void 0 : providerData.length);
  const isAnonymous = !oldIsAnonymous ? false : newIsAnonymous;
  const updates = {
    uid: coreAccount.localId,
    displayName: coreAccount.displayName || null,
    photoURL: coreAccount.photoUrl || null,
    email: coreAccount.email || null,
    emailVerified: coreAccount.emailVerified || false,
    phoneNumber: coreAccount.phoneNumber || null,
    tenantId: coreAccount.tenantId || null,
    providerData,
    metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),
    isAnonymous
  };
  Object.assign(user, updates);
}
/**
 * Reloads user account data, if signed in.
 *
 * @param user - The user.
 *
 * @public
 */


async function reload(user) {
  const userInternal = (0, _util.getModularInstance)(user);
  await _reloadWithoutSaving(userInternal); // Even though the current user hasn't changed, update
  // current user will trigger a persistence update w/ the
  // new info.

  await userInternal.auth._persistUserIfCurrent(userInternal);

  userInternal.auth._notifyListenersIfCurrent(userInternal);
}

function mergeProviderData(original, newData) {
  const deduped = original.filter(o => !newData.some(n => n.providerId === o.providerId));
  return [...deduped, ...newData];
}

function extractProviderData(providers) {
  return providers.map(_a => {
    var {
      providerId
    } = _a,
        provider = (0, _tslib.__rest)(_a, ["providerId"]);
    return {
      providerId,
      uid: provider.rawId || '',
      displayName: provider.displayName || null,
      email: provider.email || null,
      phoneNumber: provider.phoneNumber || null,
      photoURL: provider.photoUrl || null
    };
  });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


async function requestStsToken(auth, refreshToken) {
  const response = await _performFetchWithErrorHandling(auth, {}, () => {
    const body = (0, _util.querystring)({
      'grant_type': 'refresh_token',
      'refresh_token': refreshToken
    }).slice(1);
    const {
      tokenApiHost,
      apiKey
    } = auth.config;

    const url = _getFinalTarget(auth, tokenApiHost, "/v1/token"
    /* TOKEN */
    , `key=${apiKey}`);

    return FetchProvider.fetch()(url, {
      method: "POST"
      /* POST */
      ,
      headers: {
        'X-Client-Version': auth._getSdkClientVersion(),
        'Content-Type': 'application/x-www-form-urlencoded'
      },
      body
    });
  }); // The response comes back in snake_case. Convert to camel:

  return {
    accessToken: response.access_token,
    expiresIn: response.expires_in,
    refreshToken: response.refresh_token
  };
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * We need to mark this class as internal explicitly to exclude it in the public typings, because
 * it references AuthInternal which has a circular dependency with UserInternal.
 *
 * @internal
 */


class StsTokenManager {
  constructor() {
    this.refreshToken = null;
    this.accessToken = null;
    this.expirationTime = null;
  }

  get isExpired() {
    return !this.expirationTime || Date.now() > this.expirationTime - 30000
    /* TOKEN_REFRESH */
    ;
  }

  updateFromServerResponse(response) {
    _assert(response.idToken, "internal-error"
    /* INTERNAL_ERROR */
    );

    _assert(typeof response.idToken !== 'undefined', "internal-error"
    /* INTERNAL_ERROR */
    );

    _assert(typeof response.refreshToken !== 'undefined', "internal-error"
    /* INTERNAL_ERROR */
    );

    const expiresIn = 'expiresIn' in response && typeof response.expiresIn !== 'undefined' ? Number(response.expiresIn) : _tokenExpiresIn(response.idToken);
    this.updateTokensAndExpiration(response.idToken, response.refreshToken, expiresIn);
  }

  async getToken(auth, forceRefresh = false) {
    _assert(!this.accessToken || this.refreshToken, auth, "user-token-expired"
    /* TOKEN_EXPIRED */
    );

    if (!forceRefresh && this.accessToken && !this.isExpired) {
      return this.accessToken;
    }

    if (this.refreshToken) {
      await this.refresh(auth, this.refreshToken);
      return this.accessToken;
    }

    return null;
  }

  clearRefreshToken() {
    this.refreshToken = null;
  }

  async refresh(auth, oldToken) {
    const {
      accessToken,
      refreshToken,
      expiresIn
    } = await requestStsToken(auth, oldToken);
    this.updateTokensAndExpiration(accessToken, refreshToken, Number(expiresIn));
  }

  updateTokensAndExpiration(accessToken, refreshToken, expiresInSec) {
    this.refreshToken = refreshToken || null;
    this.accessToken = accessToken || null;
    this.expirationTime = Date.now() + expiresInSec * 1000;
  }

  static fromJSON(appName, object) {
    const {
      refreshToken,
      accessToken,
      expirationTime
    } = object;
    const manager = new StsTokenManager();

    if (refreshToken) {
      _assert(typeof refreshToken === 'string', "internal-error"
      /* INTERNAL_ERROR */
      , {
        appName
      });

      manager.refreshToken = refreshToken;
    }

    if (accessToken) {
      _assert(typeof accessToken === 'string', "internal-error"
      /* INTERNAL_ERROR */
      , {
        appName
      });

      manager.accessToken = accessToken;
    }

    if (expirationTime) {
      _assert(typeof expirationTime === 'number', "internal-error"
      /* INTERNAL_ERROR */
      , {
        appName
      });

      manager.expirationTime = expirationTime;
    }

    return manager;
  }

  toJSON() {
    return {
      refreshToken: this.refreshToken,
      accessToken: this.accessToken,
      expirationTime: this.expirationTime
    };
  }

  _assign(stsTokenManager) {
    this.accessToken = stsTokenManager.accessToken;
    this.refreshToken = stsTokenManager.refreshToken;
    this.expirationTime = stsTokenManager.expirationTime;
  }

  _clone() {
    return Object.assign(new StsTokenManager(), this.toJSON());
  }

  _performRefresh() {
    return debugFail('not implemented');
  }

}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function assertStringOrUndefined(assertion, appName) {
  _assert(typeof assertion === 'string' || typeof assertion === 'undefined', "internal-error"
  /* INTERNAL_ERROR */
  , {
    appName
  });
}

class UserImpl {
  constructor(_a) {
    var {
      uid,
      auth,
      stsTokenManager
    } = _a,
        opt = (0, _tslib.__rest)(_a, ["uid", "auth", "stsTokenManager"]); // For the user object, provider is always Firebase.

    this.providerId = "firebase"
    /* FIREBASE */
    ;
    this.emailVerified = false;
    this.isAnonymous = false;
    this.tenantId = null;
    this.providerData = [];
    this.proactiveRefresh = new ProactiveRefresh(this);
    this.reloadUserInfo = null;
    this.reloadListener = null;
    this.uid = uid;
    this.auth = auth;
    this.stsTokenManager = stsTokenManager;
    this.accessToken = stsTokenManager.accessToken;
    this.displayName = opt.displayName || null;
    this.email = opt.email || null;
    this.phoneNumber = opt.phoneNumber || null;
    this.photoURL = opt.photoURL || null;
    this.isAnonymous = opt.isAnonymous || false;
    this.metadata = new UserMetadata(opt.createdAt || undefined, opt.lastLoginAt || undefined);
  }

  async getIdToken(forceRefresh) {
    const accessToken = await _logoutIfInvalidated(this, this.stsTokenManager.getToken(this.auth, forceRefresh));

    _assert(accessToken, this.auth, "internal-error"
    /* INTERNAL_ERROR */
    );

    if (this.accessToken !== accessToken) {
      this.accessToken = accessToken;
      await this.auth._persistUserIfCurrent(this);

      this.auth._notifyListenersIfCurrent(this);
    }

    return accessToken;
  }

  getIdTokenResult(forceRefresh) {
    return getIdTokenResult(this, forceRefresh);
  }

  reload() {
    return reload(this);
  }

  _assign(user) {
    if (this === user) {
      return;
    }

    _assert(this.uid === user.uid, this.auth, "internal-error"
    /* INTERNAL_ERROR */
    );

    this.displayName = user.displayName;
    this.photoURL = user.photoURL;
    this.email = user.email;
    this.emailVerified = user.emailVerified;
    this.phoneNumber = user.phoneNumber;
    this.isAnonymous = user.isAnonymous;
    this.tenantId = user.tenantId;
    this.providerData = user.providerData.map(userInfo => Object.assign({}, userInfo));

    this.metadata._copy(user.metadata);

    this.stsTokenManager._assign(user.stsTokenManager);
  }

  _clone(auth) {
    return new UserImpl(Object.assign(Object.assign({}, this), {
      auth,
      stsTokenManager: this.stsTokenManager._clone()
    }));
  }

  _onReload(callback) {
    // There should only ever be one listener, and that is a single instance of MultiFactorUser
    _assert(!this.reloadListener, this.auth, "internal-error"
    /* INTERNAL_ERROR */
    );

    this.reloadListener = callback;

    if (this.reloadUserInfo) {
      this._notifyReloadListener(this.reloadUserInfo);

      this.reloadUserInfo = null;
    }
  }

  _notifyReloadListener(userInfo) {
    if (this.reloadListener) {
      this.reloadListener(userInfo);
    } else {
      // If no listener is subscribed yet, save the result so it's available when they do subscribe
      this.reloadUserInfo = userInfo;
    }
  }

  _startProactiveRefresh() {
    this.proactiveRefresh._start();
  }

  _stopProactiveRefresh() {
    this.proactiveRefresh._stop();
  }

  async _updateTokensIfNecessary(response, reload = false) {
    let tokensRefreshed = false;

    if (response.idToken && response.idToken !== this.stsTokenManager.accessToken) {
      this.stsTokenManager.updateFromServerResponse(response);
      tokensRefreshed = true;
    }

    if (reload) {
      await _reloadWithoutSaving(this);
    }

    await this.auth._persistUserIfCurrent(this);

    if (tokensRefreshed) {
      this.auth._notifyListenersIfCurrent(this);
    }
  }

  async delete() {
    const idToken = await this.getIdToken();
    await _logoutIfInvalidated(this, deleteAccount(this.auth, {
      idToken
    }));
    this.stsTokenManager.clearRefreshToken(); // TODO: Determine if cancellable-promises are necessary to use in this class so that delete()
    //       cancels pending actions...

    return this.auth.signOut();
  }

  toJSON() {
    return Object.assign(Object.assign({
      uid: this.uid,
      email: this.email || undefined,
      emailVerified: this.emailVerified,
      displayName: this.displayName || undefined,
      isAnonymous: this.isAnonymous,
      photoURL: this.photoURL || undefined,
      phoneNumber: this.phoneNumber || undefined,
      tenantId: this.tenantId || undefined,
      providerData: this.providerData.map(userInfo => Object.assign({}, userInfo)),
      stsTokenManager: this.stsTokenManager.toJSON(),
      // Redirect event ID must be maintained in case there is a pending
      // redirect event.
      _redirectEventId: this._redirectEventId
    }, this.metadata.toJSON()), {
      // Required for compatibility with the legacy SDK (go/firebase-auth-sdk-persistence-parsing):
      apiKey: this.auth.config.apiKey,
      appName: this.auth.name
    });
  }

  get refreshToken() {
    return this.stsTokenManager.refreshToken || '';
  }

  static _fromJSON(auth, object) {
    var _a, _b, _c, _d, _e, _f, _g, _h;

    const displayName = (_a = object.displayName) !== null && _a !== void 0 ? _a : undefined;
    const email = (_b = object.email) !== null && _b !== void 0 ? _b : undefined;
    const phoneNumber = (_c = object.phoneNumber) !== null && _c !== void 0 ? _c : undefined;
    const photoURL = (_d = object.photoURL) !== null && _d !== void 0 ? _d : undefined;
    const tenantId = (_e = object.tenantId) !== null && _e !== void 0 ? _e : undefined;

    const _redirectEventId = (_f = object._redirectEventId) !== null && _f !== void 0 ? _f : undefined;

    const createdAt = (_g = object.createdAt) !== null && _g !== void 0 ? _g : undefined;
    const lastLoginAt = (_h = object.lastLoginAt) !== null && _h !== void 0 ? _h : undefined;
    const {
      uid,
      emailVerified,
      isAnonymous,
      providerData,
      stsTokenManager: plainObjectTokenManager
    } = object;

    _assert(uid && plainObjectTokenManager, auth, "internal-error"
    /* INTERNAL_ERROR */
    );

    const stsTokenManager = StsTokenManager.fromJSON(this.name, plainObjectTokenManager);

    _assert(typeof uid === 'string', auth, "internal-error"
    /* INTERNAL_ERROR */
    );

    assertStringOrUndefined(displayName, auth.name);
    assertStringOrUndefined(email, auth.name);

    _assert(typeof emailVerified === 'boolean', auth, "internal-error"
    /* INTERNAL_ERROR */
    );

    _assert(typeof isAnonymous === 'boolean', auth, "internal-error"
    /* INTERNAL_ERROR */
    );

    assertStringOrUndefined(phoneNumber, auth.name);
    assertStringOrUndefined(photoURL, auth.name);
    assertStringOrUndefined(tenantId, auth.name);
    assertStringOrUndefined(_redirectEventId, auth.name);
    assertStringOrUndefined(createdAt, auth.name);
    assertStringOrUndefined(lastLoginAt, auth.name);
    const user = new UserImpl({
      uid,
      auth,
      email,
      emailVerified,
      displayName,
      isAnonymous,
      photoURL,
      phoneNumber,
      tenantId,
      stsTokenManager,
      createdAt,
      lastLoginAt
    });

    if (providerData && Array.isArray(providerData)) {
      user.providerData = providerData.map(userInfo => Object.assign({}, userInfo));
    }

    if (_redirectEventId) {
      user._redirectEventId = _redirectEventId;
    }

    return user;
  }
  /**
   * Initialize a User from an idToken server response
   * @param auth
   * @param idTokenResponse
   */


  static async _fromIdTokenResponse(auth, idTokenResponse, isAnonymous = false) {
    const stsTokenManager = new StsTokenManager();
    stsTokenManager.updateFromServerResponse(idTokenResponse); // Initialize the Firebase Auth user.

    const user = new UserImpl({
      uid: idTokenResponse.localId,
      auth,
      stsTokenManager,
      isAnonymous
    }); // Updates the user info and data and resolves with a user instance.

    await _reloadWithoutSaving(user);
    return user;
  }

}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


exports.aD = UserImpl;

class InMemoryPersistence {
  constructor() {
    this.type = "NONE"
    /* NONE */
    ;
    this.storage = {};
  }

  async _isAvailable() {
    return true;
  }

  async _set(key, value) {
    this.storage[key] = value;
  }

  async _get(key) {
    const value = this.storage[key];
    return value === undefined ? null : value;
  }

  async _remove(key) {
    delete this.storage[key];
  }

  _addListener(_key, _listener) {
    // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers
    return;
  }

  _removeListener(_key, _listener) {
    // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers
    return;
  }

}

InMemoryPersistence.type = 'NONE';
/**
 * An implementation of {@link Persistence} of type 'NONE'.
 *
 * @public
 */

const inMemoryPersistence = InMemoryPersistence;
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

exports.K = inMemoryPersistence;

function _persistenceKeyName(key, apiKey, appName) {
  return `${"firebase"
  /* PERSISTENCE */
  }:${key}:${apiKey}:${appName}`;
}

class PersistenceUserManager {
  constructor(persistence, auth, userKey) {
    this.persistence = persistence;
    this.auth = auth;
    this.userKey = userKey;
    const {
      config,
      name
    } = this.auth;
    this.fullUserKey = _persistenceKeyName(this.userKey, config.apiKey, name);
    this.fullPersistenceKey = _persistenceKeyName("persistence"
    /* PERSISTENCE_USER */
    , config.apiKey, name);
    this.boundEventHandler = auth._onStorageEvent.bind(auth);

    this.persistence._addListener(this.fullUserKey, this.boundEventHandler);
  }

  setCurrentUser(user) {
    return this.persistence._set(this.fullUserKey, user.toJSON());
  }

  async getCurrentUser() {
    const blob = await this.persistence._get(this.fullUserKey);
    return blob ? UserImpl._fromJSON(this.auth, blob) : null;
  }

  removeCurrentUser() {
    return this.persistence._remove(this.fullUserKey);
  }

  savePersistenceForRedirect() {
    return this.persistence._set(this.fullPersistenceKey, this.persistence.type);
  }

  async setPersistence(newPersistence) {
    if (this.persistence === newPersistence) {
      return;
    }

    const currentUser = await this.getCurrentUser();
    await this.removeCurrentUser();
    this.persistence = newPersistence;

    if (currentUser) {
      return this.setCurrentUser(currentUser);
    }
  }

  delete() {
    this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);
  }

  static async create(auth, persistenceHierarchy, userKey = "authUser"
  /* AUTH_USER */
  ) {
    if (!persistenceHierarchy.length) {
      return new PersistenceUserManager(_getInstance(inMemoryPersistence), auth, userKey);
    } // Eliminate any persistences that are not available


    const availablePersistences = (await Promise.all(persistenceHierarchy.map(async persistence => {
      if (await persistence._isAvailable()) {
        return persistence;
      }

      return undefined;
    }))).filter(persistence => persistence); // Fall back to the first persistence listed, or in memory if none available

    let selectedPersistence = availablePersistences[0] || _getInstance(inMemoryPersistence);

    const key = _persistenceKeyName(userKey, auth.config.apiKey, auth.name); // Pull out the existing user, setting the chosen persistence to that
    // persistence if the user exists.


    let userToMigrate = null; // Note, here we check for a user in _all_ persistences, not just the
    // ones deemed available. If we can migrate a user out of a broken
    // persistence, we will (but only if that persistence supports migration).

    for (const persistence of persistenceHierarchy) {
      try {
        const blob = await persistence._get(key);

        if (blob) {
          const user = UserImpl._fromJSON(auth, blob); // throws for unparsable blob (wrong format)


          if (persistence !== selectedPersistence) {
            userToMigrate = user;
          }

          selectedPersistence = persistence;
          break;
        }
      } catch (_a) {}
    } // If we find the user in a persistence that does support migration, use
    // that migration path (of only persistences that support migration)


    const migrationHierarchy = availablePersistences.filter(p => p._shouldAllowMigration); // If the persistence does _not_ allow migration, just finish off here

    if (!selectedPersistence._shouldAllowMigration || !migrationHierarchy.length) {
      return new PersistenceUserManager(selectedPersistence, auth, userKey);
    }

    selectedPersistence = migrationHierarchy[0];

    if (userToMigrate) {
      // This normally shouldn't throw since chosenPersistence.isAvailable() is true, but if it does
      // we'll just let it bubble to surface the error.
      await selectedPersistence._set(key, userToMigrate.toJSON());
    } // Attempt to clear the key in other persistences but ignore errors. This helps prevent issues
    // such as users getting stuck with a previous account after signing out and refreshing the tab.


    await Promise.all(persistenceHierarchy.map(async persistence => {
      if (persistence !== selectedPersistence) {
        try {
          await persistence._remove(key);
        } catch (_a) {}
      }
    }));
    return new PersistenceUserManager(selectedPersistence, auth, userKey);
  }

}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Determine the browser for the purposes of reporting usage to the API
 */


function _getBrowserName(userAgent) {
  const ua = userAgent.toLowerCase();

  if (ua.includes('opera/') || ua.includes('opr/') || ua.includes('opios/')) {
    return "Opera"
    /* OPERA */
    ;
  } else if (_isIEMobile(ua)) {
    // Windows phone IEMobile browser.
    return "IEMobile"
    /* IEMOBILE */
    ;
  } else if (ua.includes('msie') || ua.includes('trident/')) {
    return "IE"
    /* IE */
    ;
  } else if (ua.includes('edge/')) {
    return "Edge"
    /* EDGE */
    ;
  } else if (_isFirefox(ua)) {
    return "Firefox"
    /* FIREFOX */
    ;
  } else if (ua.includes('silk/')) {
    return "Silk"
    /* SILK */
    ;
  } else if (_isBlackBerry(ua)) {
    // Blackberry browser.
    return "Blackberry"
    /* BLACKBERRY */
    ;
  } else if (_isWebOS(ua)) {
    // WebOS default browser.
    return "Webos"
    /* WEBOS */
    ;
  } else if (_isSafari(ua)) {
    return "Safari"
    /* SAFARI */
    ;
  } else if ((ua.includes('chrome/') || _isChromeIOS(ua)) && !ua.includes('edge/')) {
    return "Chrome"
    /* CHROME */
    ;
  } else if (_isAndroid(ua)) {
    // Android stock browser.
    return "Android"
    /* ANDROID */
    ;
  } else {
    // Most modern browsers have name/version at end of user agent string.
    const re = /([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/;
    const matches = userAgent.match(re);

    if ((matches === null || matches === void 0 ? void 0 : matches.length) === 2) {
      return matches[1];
    }
  }

  return "Other"
  /* OTHER */
  ;
}

function _isFirefox(ua = (0, _util.getUA)()) {
  return /firefox\//i.test(ua);
}

function _isSafari(userAgent = (0, _util.getUA)()) {
  const ua = userAgent.toLowerCase();
  return ua.includes('safari/') && !ua.includes('chrome/') && !ua.includes('crios/') && !ua.includes('android');
}

function _isChromeIOS(ua = (0, _util.getUA)()) {
  return /crios\//i.test(ua);
}

function _isIEMobile(ua = (0, _util.getUA)()) {
  return /iemobile/i.test(ua);
}

function _isAndroid(ua = (0, _util.getUA)()) {
  return /android/i.test(ua);
}

function _isBlackBerry(ua = (0, _util.getUA)()) {
  return /blackberry/i.test(ua);
}

function _isWebOS(ua = (0, _util.getUA)()) {
  return /webos/i.test(ua);
}

function _isIOS(ua = (0, _util.getUA)()) {
  return /iphone|ipad|ipod/i.test(ua);
}

function _isIOS7Or8(ua = (0, _util.getUA)()) {
  return /(iPad|iPhone|iPod).*OS 7_\d/i.test(ua) || /(iPad|iPhone|iPod).*OS 8_\d/i.test(ua);
}

function _isIOSStandalone(ua = (0, _util.getUA)()) {
  var _a;

  return _isIOS(ua) && !!((_a = window.navigator) === null || _a === void 0 ? void 0 : _a.standalone);
}

function _isIE10() {
  return (0, _util.isIE)() && document.documentMode === 10;
}

function _isMobileBrowser(ua = (0, _util.getUA)()) {
  // TODO: implement getBrowserName equivalent for OS.
  return _isIOS(ua) || _isAndroid(ua) || _isWebOS(ua) || _isBlackBerry(ua) || /windows phone/i.test(ua) || _isIEMobile(ua);
}

function _isIframe() {
  try {
    // Check that the current window is not the top window.
    // If so, return true.
    return !!(window && window !== window.top);
  } catch (e) {
    return false;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Determine the SDK version string
 */


function _getClientVersion(clientPlatform, frameworks = []) {
  let reportedPlatform;

  switch (clientPlatform) {
    case "Browser"
    /* BROWSER */
    :
      // In a browser environment, report the browser name.
      reportedPlatform = _getBrowserName((0, _util.getUA)());
      break;

    case "Worker"
    /* WORKER */
    :
      // Technically a worker runs from a browser but we need to differentiate a
      // worker from a browser.
      // For example: Chrome-Worker/JsCore/4.9.1/FirebaseCore-web.
      reportedPlatform = `${_getBrowserName((0, _util.getUA)())}-${clientPlatform}`;
      break;

    default:
      reportedPlatform = clientPlatform;
  }

  const reportedFrameworks = frameworks.length ? frameworks.join(',') : 'FirebaseCore-web';
  /* default value if no other framework is used */

  return `${reportedPlatform}/${"JsCore"
  /* CORE */
  }/${_app.SDK_VERSION}/${reportedFrameworks}`;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


class AuthImpl {
  constructor(app, config) {
    this.app = app;
    this.config = config;
    this.currentUser = null;
    this.emulatorConfig = null;
    this.operations = Promise.resolve();
    this.authStateSubscription = new Subscription(this);
    this.idTokenSubscription = new Subscription(this);
    this.redirectUser = null;
    this.isProactiveRefreshEnabled = false; // Any network calls will set this to true and prevent subsequent emulator
    // initialization

    this._canInitEmulator = true;
    this._isInitialized = false;
    this._deleted = false;
    this._initializationPromise = null;
    this._popupRedirectResolver = null;
    this._errorFactory = _DEFAULT_AUTH_ERROR_FACTORY; // Tracks the last notified UID for state change listeners to prevent
    // repeated calls to the callbacks. Undefined means it's never been
    // called, whereas null means it's been called with a signed out user

    this.lastNotifiedUid = undefined;
    this.languageCode = null;
    this.tenantId = null;
    this.settings = {
      appVerificationDisabledForTesting: false
    };
    this.frameworks = [];
    this.name = app.name;
    this.clientVersion = config.sdkClientVersion;
  }

  _initializeWithPersistence(persistenceHierarchy, popupRedirectResolver) {
    if (popupRedirectResolver) {
      this._popupRedirectResolver = _getInstance(popupRedirectResolver);
    } // Have to check for app deletion throughout initialization (after each
    // promise resolution)


    this._initializationPromise = this.queue(async () => {
      var _a;

      if (this._deleted) {
        return;
      }

      this.persistenceManager = await PersistenceUserManager.create(this, persistenceHierarchy);

      if (this._deleted) {
        return;
      } // Initialize the resolver early if necessary (only applicable to web:
      // this will cause the iframe to load immediately in certain cases)


      if ((_a = this._popupRedirectResolver) === null || _a === void 0 ? void 0 : _a._shouldInitProactively) {
        await this._popupRedirectResolver._initialize(this);
      }

      await this.initializeCurrentUser(popupRedirectResolver);

      if (this._deleted) {
        return;
      }

      this._isInitialized = true;
    });
    return this._initializationPromise;
  }
  /**
   * If the persistence is changed in another window, the user manager will let us know
   */


  async _onStorageEvent() {
    if (this._deleted) {
      return;
    }

    const user = await this.assertedPersistence.getCurrentUser();

    if (!this.currentUser && !user) {
      // No change, do nothing (was signed out and remained signed out).
      return;
    } // If the same user is to be synchronized.


    if (this.currentUser && user && this.currentUser.uid === user.uid) {
      // Data update, simply copy data changes.
      this._currentUser._assign(user); // If tokens changed from previous user tokens, this will trigger
      // notifyAuthListeners_.


      await this.currentUser.getIdToken();
      return;
    } // Update current Auth state. Either a new login or logout.


    await this._updateCurrentUser(user);
  }

  async initializeCurrentUser(popupRedirectResolver) {
    var _a; // First check to see if we have a pending redirect event.


    let storedUser = await this.assertedPersistence.getCurrentUser();

    if (popupRedirectResolver && this.config.authDomain) {
      await this.getOrInitRedirectPersistenceManager();
      const redirectUserEventId = (_a = this.redirectUser) === null || _a === void 0 ? void 0 : _a._redirectEventId;
      const storedUserEventId = storedUser === null || storedUser === void 0 ? void 0 : storedUser._redirectEventId;
      const result = await this.tryRedirectSignIn(popupRedirectResolver); // If the stored user (i.e. the old "currentUser") has a redirectId that
      // matches the redirect user, then we want to initially sign in with the
      // new user object from result.
      // TODO(samgho): More thoroughly test all of this

      if ((!redirectUserEventId || redirectUserEventId === storedUserEventId) && (result === null || result === void 0 ? void 0 : result.user)) {
        storedUser = result.user;
      }
    } // If no user in persistence, there is no current user. Set to null.


    if (!storedUser) {
      return this.directlySetCurrentUser(null);
    }

    if (!storedUser._redirectEventId) {
      // This isn't a redirect user, we can reload and bail
      // This will also catch the redirected user, if available, as that method
      // strips the _redirectEventId
      return this.reloadAndSetCurrentUserOrClear(storedUser);
    }

    _assert(this._popupRedirectResolver, this, "argument-error"
    /* ARGUMENT_ERROR */
    );

    await this.getOrInitRedirectPersistenceManager(); // If the redirect user's event ID matches the current user's event ID,
    // DO NOT reload the current user, otherwise they'll be cleared from storage.
    // This is important for the reauthenticateWithRedirect() flow.

    if (this.redirectUser && this.redirectUser._redirectEventId === storedUser._redirectEventId) {
      return this.directlySetCurrentUser(storedUser);
    }

    return this.reloadAndSetCurrentUserOrClear(storedUser);
  }

  async tryRedirectSignIn(redirectResolver) {
    // The redirect user needs to be checked (and signed in if available)
    // during auth initialization. All of the normal sign in and link/reauth
    // flows call back into auth and push things onto the promise queue. We
    // need to await the result of the redirect sign in *inside the promise
    // queue*. This presents a problem: we run into deadlock. See:
    //    ┌> [Initialization] ─────┐
    //    ┌> [<other queue tasks>] │
    //    └─ [getRedirectResult] <─┘
    //    where [] are tasks on the queue and arrows denote awaits
    // Initialization will never complete because it's waiting on something
    // that's waiting for initialization to complete!
    //
    // Instead, this method calls getRedirectResult() (stored in
    // _completeRedirectFn) with an optional parameter that instructs all of
    // the underlying auth operations to skip anything that mutates auth state.
    let result = null;

    try {
      // We know this._popupRedirectResolver is set since redirectResolver
      // is passed in. The _completeRedirectFn expects the unwrapped extern.
      result = await this._popupRedirectResolver._completeRedirectFn(this, redirectResolver, true);
    } catch (e) {
      // Swallow any errors here; the code can retrieve them in
      // getRedirectResult().
      await this._setRedirectUser(null);
    }

    return result;
  }

  async reloadAndSetCurrentUserOrClear(user) {
    try {
      await _reloadWithoutSaving(user);
    } catch (e) {
      if (e.code !== `auth/${"network-request-failed"
      /* NETWORK_REQUEST_FAILED */
      }`) {
        // Something's wrong with the user's token. Log them out and remove
        // them from storage
        return this.directlySetCurrentUser(null);
      }
    }

    return this.directlySetCurrentUser(user);
  }

  useDeviceLanguage() {
    this.languageCode = _getUserLanguage();
  }

  async _delete() {
    this._deleted = true;
  }

  async updateCurrentUser(userExtern) {
    // The public updateCurrentUser method needs to make a copy of the user,
    // and also check that the project matches
    const user = userExtern ? (0, _util.getModularInstance)(userExtern) : null;

    if (user) {
      _assert(user.auth.config.apiKey === this.config.apiKey, this, "invalid-user-token"
      /* INVALID_AUTH */
      );
    }

    return this._updateCurrentUser(user && user._clone(this));
  }

  async _updateCurrentUser(user) {
    if (this._deleted) {
      return;
    }

    if (user) {
      _assert(this.tenantId === user.tenantId, this, "tenant-id-mismatch"
      /* TENANT_ID_MISMATCH */
      );
    }

    return this.queue(async () => {
      await this.directlySetCurrentUser(user);
      this.notifyAuthListeners();
    });
  }

  async signOut() {
    // Clear the redirect user when signOut is called
    if (this.redirectPersistenceManager || this._popupRedirectResolver) {
      await this._setRedirectUser(null);
    }

    return this._updateCurrentUser(null);
  }

  setPersistence(persistence) {
    return this.queue(async () => {
      await this.assertedPersistence.setPersistence(_getInstance(persistence));
    });
  }

  _getPersistence() {
    return this.assertedPersistence.persistence.type;
  }

  _updateErrorMap(errorMap) {
    this._errorFactory = new _util.ErrorFactory('auth', 'Firebase', errorMap());
  }

  onAuthStateChanged(nextOrObserver, error, completed) {
    return this.registerStateListener(this.authStateSubscription, nextOrObserver, error, completed);
  }

  onIdTokenChanged(nextOrObserver, error, completed) {
    return this.registerStateListener(this.idTokenSubscription, nextOrObserver, error, completed);
  }

  toJSON() {
    var _a;

    return {
      apiKey: this.config.apiKey,
      authDomain: this.config.authDomain,
      appName: this.name,
      currentUser: (_a = this._currentUser) === null || _a === void 0 ? void 0 : _a.toJSON()
    };
  }

  async _setRedirectUser(user, popupRedirectResolver) {
    const redirectManager = await this.getOrInitRedirectPersistenceManager(popupRedirectResolver);
    return user === null ? redirectManager.removeCurrentUser() : redirectManager.setCurrentUser(user);
  }

  async getOrInitRedirectPersistenceManager(popupRedirectResolver) {
    if (!this.redirectPersistenceManager) {
      const resolver = popupRedirectResolver && _getInstance(popupRedirectResolver) || this._popupRedirectResolver;

      _assert(resolver, this, "argument-error"
      /* ARGUMENT_ERROR */
      );

      this.redirectPersistenceManager = await PersistenceUserManager.create(this, [_getInstance(resolver._redirectPersistence)], "redirectUser"
      /* REDIRECT_USER */
      );
      this.redirectUser = await this.redirectPersistenceManager.getCurrentUser();
    }

    return this.redirectPersistenceManager;
  }

  async _redirectUserForId(id) {
    var _a, _b; // Make sure we've cleared any pending persistence actions if we're not in
    // the initializer


    if (this._isInitialized) {
      await this.queue(async () => {});
    }

    if (((_a = this._currentUser) === null || _a === void 0 ? void 0 : _a._redirectEventId) === id) {
      return this._currentUser;
    }

    if (((_b = this.redirectUser) === null || _b === void 0 ? void 0 : _b._redirectEventId) === id) {
      return this.redirectUser;
    }

    return null;
  }

  async _persistUserIfCurrent(user) {
    if (user === this.currentUser) {
      return this.queue(async () => this.directlySetCurrentUser(user));
    }
  }
  /** Notifies listeners only if the user is current */


  _notifyListenersIfCurrent(user) {
    if (user === this.currentUser) {
      this.notifyAuthListeners();
    }
  }

  _key() {
    return `${this.config.authDomain}:${this.config.apiKey}:${this.name}`;
  }

  _startProactiveRefresh() {
    this.isProactiveRefreshEnabled = true;

    if (this.currentUser) {
      this._currentUser._startProactiveRefresh();
    }
  }

  _stopProactiveRefresh() {
    this.isProactiveRefreshEnabled = false;

    if (this.currentUser) {
      this._currentUser._stopProactiveRefresh();
    }
  }
  /** Returns the current user cast as the internal type */


  get _currentUser() {
    return this.currentUser;
  }

  notifyAuthListeners() {
    var _a, _b;

    if (!this._isInitialized) {
      return;
    }

    this.idTokenSubscription.next(this.currentUser);
    const currentUid = (_b = (_a = this.currentUser) === null || _a === void 0 ? void 0 : _a.uid) !== null && _b !== void 0 ? _b : null;

    if (this.lastNotifiedUid !== currentUid) {
      this.lastNotifiedUid = currentUid;
      this.authStateSubscription.next(this.currentUser);
    }
  }

  registerStateListener(subscription, nextOrObserver, error, completed) {
    if (this._deleted) {
      return () => {};
    }

    const cb = typeof nextOrObserver === 'function' ? nextOrObserver : nextOrObserver.next.bind(nextOrObserver);
    const promise = this._isInitialized ? Promise.resolve() : this._initializationPromise;

    _assert(promise, this, "internal-error"
    /* INTERNAL_ERROR */
    ); // The callback needs to be called asynchronously per the spec.
    // eslint-disable-next-line @typescript-eslint/no-floating-promises


    promise.then(() => cb(this.currentUser));

    if (typeof nextOrObserver === 'function') {
      return subscription.addObserver(nextOrObserver, error, completed);
    } else {
      return subscription.addObserver(nextOrObserver);
    }
  }
  /**
   * Unprotected (from race conditions) method to set the current user. This
   * should only be called from within a queued callback. This is necessary
   * because the queue shouldn't rely on another queued callback.
   */


  async directlySetCurrentUser(user) {
    if (this.currentUser && this.currentUser !== user) {
      this._currentUser._stopProactiveRefresh();

      if (user && this.isProactiveRefreshEnabled) {
        user._startProactiveRefresh();
      }
    }

    this.currentUser = user;

    if (user) {
      await this.assertedPersistence.setCurrentUser(user);
    } else {
      await this.assertedPersistence.removeCurrentUser();
    }
  }

  queue(action) {
    // In case something errors, the callback still should be called in order
    // to keep the promise chain alive
    this.operations = this.operations.then(action, action);
    return this.operations;
  }

  get assertedPersistence() {
    _assert(this.persistenceManager, this, "internal-error"
    /* INTERNAL_ERROR */
    );

    return this.persistenceManager;
  }

  _logFramework(framework) {
    if (!framework || this.frameworks.includes(framework)) {
      return;
    }

    this.frameworks.push(framework); // Sort alphabetically so that "FirebaseCore-web,FirebaseUI-web" and
    // "FirebaseUI-web,FirebaseCore-web" aren't viewed as different.

    this.frameworks.sort();
    this.clientVersion = _getClientVersion(this.config.clientPlatform, this._getFrameworks());
  }

  _getFrameworks() {
    return this.frameworks;
  }

  _getSdkClientVersion() {
    return this.clientVersion;
  }

}
/**
 * Method to be used to cast down to our private implmentation of Auth.
 * It will also handle unwrapping from the compat type if necessary
 *
 * @param auth Auth object passed in from developer
 */


exports.aE = AuthImpl;

function _castAuth(auth) {
  return (0, _util.getModularInstance)(auth);
}
/** Helper class to wrap subscriber logic */


class Subscription {
  constructor(auth) {
    this.auth = auth;
    this.observer = null;
    this.addObserver = (0, _util.createSubscribe)(observer => this.observer = observer);
  }

  get next() {
    _assert(this.observer, this.auth, "internal-error"
    /* INTERNAL_ERROR */
    );

    return this.observer.next.bind(this.observer);
  }

}
/**
 * Changes the {@link Auth} instance to communicate with the Firebase Auth Emulator, instead of production
 * Firebase Auth services.
 *
 * @remarks
 * This must be called synchronously immediately following the first call to
 * {@link initializeAuth}.  Do not use with production credentials as emulator
 * traffic is not encrypted.
 *
 *
 * @example
 * ```javascript
 * connectAuthEmulator(auth, 'http://127.0.0.1:9099', { disableWarnings: true });
 * ```
 *
 * @param auth - The {@link Auth} instance.
 * @param url - The URL at which the emulator is running (eg, 'http://localhost:9099').
 * @param options - Optional. `options.disableWarnings` defaults to `false`. Set it to
 * `true` to disable the warning banner attached to the DOM.
 *
 * @public
 */


function connectAuthEmulator(auth, url, options) {
  const authInternal = _castAuth(auth);

  _assert(authInternal._canInitEmulator, authInternal, "emulator-config-failed"
  /* EMULATOR_CONFIG_FAILED */
  );

  _assert(/^https?:\/\//.test(url), authInternal, "invalid-emulator-scheme"
  /* INVALID_EMULATOR_SCHEME */
  );

  const disableWarnings = !!(options === null || options === void 0 ? void 0 : options.disableWarnings);
  const protocol = extractProtocol(url);
  const {
    host,
    port
  } = extractHostAndPort(url);
  const portStr = port === null ? '' : `:${port}`; // Always replace path with "/" (even if input url had no path at all, or had a different one).

  authInternal.config.emulator = {
    url: `${protocol}//${host}${portStr}/`
  };
  authInternal.settings.appVerificationDisabledForTesting = true;
  authInternal.emulatorConfig = Object.freeze({
    host,
    port,
    protocol: protocol.replace(':', ''),
    options: Object.freeze({
      disableWarnings
    })
  });
  emitEmulatorWarning(disableWarnings);
}

function extractProtocol(url) {
  const protocolEnd = url.indexOf(':');
  return protocolEnd < 0 ? '' : url.substr(0, protocolEnd + 1);
}

function extractHostAndPort(url) {
  const protocol = extractProtocol(url);
  const authority = /(\/\/)?([^?#/]+)/.exec(url.substr(protocol.length)); // Between // and /, ? or #.

  if (!authority) {
    return {
      host: '',
      port: null
    };
  }

  const hostAndPort = authority[2].split('@').pop() || ''; // Strip out "username:password@".

  const bracketedIPv6 = /^(\[[^\]]+\])(:|$)/.exec(hostAndPort);

  if (bracketedIPv6) {
    const host = bracketedIPv6[1];
    return {
      host,
      port: parsePort(hostAndPort.substr(host.length + 1))
    };
  } else {
    const [host, port] = hostAndPort.split(':');
    return {
      host,
      port: parsePort(port)
    };
  }
}

function parsePort(portStr) {
  if (!portStr) {
    return null;
  }

  const port = Number(portStr);

  if (isNaN(port)) {
    return null;
  }

  return port;
}

function emitEmulatorWarning(disableBanner) {
  function attachBanner() {
    const el = document.createElement('p');
    const sty = el.style;
    el.innerText = 'Running in emulator mode. Do not use with production credentials.';
    sty.position = 'fixed';
    sty.width = '100%';
    sty.backgroundColor = '#ffffff';
    sty.border = '.1em solid #000000';
    sty.color = '#b50000';
    sty.bottom = '0px';
    sty.left = '0px';
    sty.margin = '0px';
    sty.zIndex = '10000';
    sty.textAlign = 'center';
    el.classList.add('firebase-emulator-warning');
    document.body.appendChild(el);
  }

  if (typeof console !== 'undefined' && typeof console.info === 'function') {
    console.info('WARNING: You are using the Auth Emulator,' + ' which is intended for local testing only.  Do not use with' + ' production credentials.');
  }

  if (typeof window !== 'undefined' && typeof document !== 'undefined' && !disableBanner) {
    if (document.readyState === 'loading') {
      window.addEventListener('DOMContentLoaded', attachBanner);
    } else {
      attachBanner();
    }
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Interface that represents the credentials returned by an {@link AuthProvider}.
 *
 * @remarks
 * Implementations specify the details about each auth provider's credential requirements.
 *
 * @public
 */


class AuthCredential {
  /** @internal */
  constructor(
  /**
   * The authentication provider ID for the credential.
   *
   * @remarks
   * For example, 'facebook.com', or 'google.com'.
   */
  providerId,
  /**
   * The authentication sign in method for the credential.
   *
   * @remarks
   * For example, {@link SignInMethod}.EMAIL_PASSWORD, or
   * {@link SignInMethod}.EMAIL_LINK. This corresponds to the sign-in method
   * identifier as returned in {@link fetchSignInMethodsForEmail}.
   */
  signInMethod) {
    this.providerId = providerId;
    this.signInMethod = signInMethod;
  }
  /**
   * Returns a JSON-serializable representation of this object.
   *
   * @returns a JSON-serializable representation of this object.
   */


  toJSON() {
    return debugFail('not implemented');
  }
  /** @internal */


  _getIdTokenResponse(_auth) {
    return debugFail('not implemented');
  }
  /** @internal */


  _linkToIdToken(_auth, _idToken) {
    return debugFail('not implemented');
  }
  /** @internal */


  _getReauthenticationResolver(_auth) {
    return debugFail('not implemented');
  }

}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


exports.G = AuthCredential;

async function resetPassword(auth, request) {
  return _performApiRequest(auth, "POST"
  /* POST */
  , "/v1/accounts:resetPassword"
  /* RESET_PASSWORD */
  , _addTidIfNecessary(auth, request));
}

async function updateEmailPassword(auth, request) {
  return _performApiRequest(auth, "POST"
  /* POST */
  , "/v1/accounts:update"
  /* SET_ACCOUNT_INFO */
  , request);
}

async function applyActionCode$1(auth, request) {
  return _performApiRequest(auth, "POST"
  /* POST */
  , "/v1/accounts:update"
  /* SET_ACCOUNT_INFO */
  , _addTidIfNecessary(auth, request));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


async function signInWithPassword(auth, request) {
  return _performSignInRequest(auth, "POST"
  /* POST */
  , "/v1/accounts:signInWithPassword"
  /* SIGN_IN_WITH_PASSWORD */
  , _addTidIfNecessary(auth, request));
}

async function sendOobCode(auth, request) {
  return _performApiRequest(auth, "POST"
  /* POST */
  , "/v1/accounts:sendOobCode"
  /* SEND_OOB_CODE */
  , _addTidIfNecessary(auth, request));
}

async function sendEmailVerification$1(auth, request) {
  return sendOobCode(auth, request);
}

async function sendPasswordResetEmail$1(auth, request) {
  return sendOobCode(auth, request);
}

async function sendSignInLinkToEmail$1(auth, request) {
  return sendOobCode(auth, request);
}

async function verifyAndChangeEmail(auth, request) {
  return sendOobCode(auth, request);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


async function signInWithEmailLink$1(auth, request) {
  return _performSignInRequest(auth, "POST"
  /* POST */
  , "/v1/accounts:signInWithEmailLink"
  /* SIGN_IN_WITH_EMAIL_LINK */
  , _addTidIfNecessary(auth, request));
}

async function signInWithEmailLinkForLinking(auth, request) {
  return _performSignInRequest(auth, "POST"
  /* POST */
  , "/v1/accounts:signInWithEmailLink"
  /* SIGN_IN_WITH_EMAIL_LINK */
  , _addTidIfNecessary(auth, request));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Interface that represents the credentials returned by {@link EmailAuthProvider} for
 * {@link ProviderId}.PASSWORD
 *
 * @remarks
 * Covers both {@link SignInMethod}.EMAIL_PASSWORD and
 * {@link SignInMethod}.EMAIL_LINK.
 *
 * @public
 */


class EmailAuthCredential extends AuthCredential {
  /** @internal */
  constructor(
  /** @internal */
  _email,
  /** @internal */
  _password, signInMethod,
  /** @internal */
  _tenantId = null) {
    super("password"
    /* PASSWORD */
    , signInMethod);
    this._email = _email;
    this._password = _password;
    this._tenantId = _tenantId;
  }
  /** @internal */


  static _fromEmailAndPassword(email, password) {
    return new EmailAuthCredential(email, password, "password"
    /* EMAIL_PASSWORD */
    );
  }
  /** @internal */


  static _fromEmailAndCode(email, oobCode, tenantId = null) {
    return new EmailAuthCredential(email, oobCode, "emailLink"
    /* EMAIL_LINK */
    , tenantId);
  }
  /** {@inheritdoc AuthCredential.toJSON} */


  toJSON() {
    return {
      email: this._email,
      password: this._password,
      signInMethod: this.signInMethod,
      tenantId: this._tenantId
    };
  }
  /**
   * Static method to deserialize a JSON representation of an object into an {@link  AuthCredential}.
   *
   * @param json - Either `object` or the stringified representation of the object. When string is
   * provided, `JSON.parse` would be called first.
   *
   * @returns If the JSON input does not represent an {@link AuthCredential}, null is returned.
   */


  static fromJSON(json) {
    const obj = typeof json === 'string' ? JSON.parse(json) : json;

    if ((obj === null || obj === void 0 ? void 0 : obj.email) && (obj === null || obj === void 0 ? void 0 : obj.password)) {
      if (obj.signInMethod === "password"
      /* EMAIL_PASSWORD */
      ) {
        return this._fromEmailAndPassword(obj.email, obj.password);
      } else if (obj.signInMethod === "emailLink"
      /* EMAIL_LINK */
      ) {
        return this._fromEmailAndCode(obj.email, obj.password, obj.tenantId);
      }
    }

    return null;
  }
  /** @internal */


  async _getIdTokenResponse(auth) {
    switch (this.signInMethod) {
      case "password"
      /* EMAIL_PASSWORD */
      :
        return signInWithPassword(auth, {
          returnSecureToken: true,
          email: this._email,
          password: this._password
        });

      case "emailLink"
      /* EMAIL_LINK */
      :
        return signInWithEmailLink$1(auth, {
          email: this._email,
          oobCode: this._password
        });

      default:
        _fail(auth, "internal-error"
        /* INTERNAL_ERROR */
        );

    }
  }
  /** @internal */


  async _linkToIdToken(auth, idToken) {
    switch (this.signInMethod) {
      case "password"
      /* EMAIL_PASSWORD */
      :
        return updateEmailPassword(auth, {
          idToken,
          returnSecureToken: true,
          email: this._email,
          password: this._password
        });

      case "emailLink"
      /* EMAIL_LINK */
      :
        return signInWithEmailLinkForLinking(auth, {
          idToken,
          email: this._email,
          oobCode: this._password
        });

      default:
        _fail(auth, "internal-error"
        /* INTERNAL_ERROR */
        );

    }
  }
  /** @internal */


  _getReauthenticationResolver(auth) {
    return this._getIdTokenResponse(auth);
  }

}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


exports.H = EmailAuthCredential;

async function signInWithIdp(auth, request) {
  return _performSignInRequest(auth, "POST"
  /* POST */
  , "/v1/accounts:signInWithIdp"
  /* SIGN_IN_WITH_IDP */
  , _addTidIfNecessary(auth, request));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const IDP_REQUEST_URI$1 = 'http://localhost';
/**
 * Represents the OAuth credentials returned by an {@link OAuthProvider}.
 *
 * @remarks
 * Implementations specify the details about each auth provider's credential requirements.
 *
 * @public
 */

class OAuthCredential extends AuthCredential {
  constructor() {
    super(...arguments);
    this.pendingToken = null;
  }
  /** @internal */


  static _fromParams(params) {
    const cred = new OAuthCredential(params.providerId, params.signInMethod);

    if (params.idToken || params.accessToken) {
      // OAuth 2 and either ID token or access token.
      if (params.idToken) {
        cred.idToken = params.idToken;
      }

      if (params.accessToken) {
        cred.accessToken = params.accessToken;
      } // Add nonce if available and no pendingToken is present.


      if (params.nonce && !params.pendingToken) {
        cred.nonce = params.nonce;
      }

      if (params.pendingToken) {
        cred.pendingToken = params.pendingToken;
      }
    } else if (params.oauthToken && params.oauthTokenSecret) {
      // OAuth 1 and OAuth token with token secret
      cred.accessToken = params.oauthToken;
      cred.secret = params.oauthTokenSecret;
    } else {
      _fail("argument-error"
      /* ARGUMENT_ERROR */
      );
    }

    return cred;
  }
  /** {@inheritdoc AuthCredential.toJSON}  */


  toJSON() {
    return {
      idToken: this.idToken,
      accessToken: this.accessToken,
      secret: this.secret,
      nonce: this.nonce,
      pendingToken: this.pendingToken,
      providerId: this.providerId,
      signInMethod: this.signInMethod
    };
  }
  /**
   * Static method to deserialize a JSON representation of an object into an
   * {@link  AuthCredential}.
   *
   * @param json - Input can be either Object or the stringified representation of the object.
   * When string is provided, JSON.parse would be called first.
   *
   * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.
   */


  static fromJSON(json) {
    const obj = typeof json === 'string' ? JSON.parse(json) : json;
    const {
      providerId,
      signInMethod
    } = obj,
          rest = (0, _tslib.__rest)(obj, ["providerId", "signInMethod"]);

    if (!providerId || !signInMethod) {
      return null;
    }

    const cred = new OAuthCredential(providerId, signInMethod);
    Object.assign(cred, rest);
    return cred;
  }
  /** @internal */


  _getIdTokenResponse(auth) {
    const request = this.buildRequest();
    return signInWithIdp(auth, request);
  }
  /** @internal */


  _linkToIdToken(auth, idToken) {
    const request = this.buildRequest();
    request.idToken = idToken;
    return signInWithIdp(auth, request);
  }
  /** @internal */


  _getReauthenticationResolver(auth) {
    const request = this.buildRequest();
    request.autoCreate = false;
    return signInWithIdp(auth, request);
  }

  buildRequest() {
    const request = {
      requestUri: IDP_REQUEST_URI$1,
      returnSecureToken: true
    };

    if (this.pendingToken) {
      request.pendingToken = this.pendingToken;
    } else {
      const postBody = {};

      if (this.idToken) {
        postBody['id_token'] = this.idToken;
      }

      if (this.accessToken) {
        postBody['access_token'] = this.accessToken;
      }

      if (this.secret) {
        postBody['oauth_token_secret'] = this.secret;
      }

      postBody['providerId'] = this.providerId;

      if (this.nonce && !this.pendingToken) {
        postBody['nonce'] = this.nonce;
      }

      request.postBody = (0, _util.querystring)(postBody);
    }

    return request;
  }

}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


exports.I = OAuthCredential;

async function sendPhoneVerificationCode(auth, request) {
  return _performApiRequest(auth, "POST"
  /* POST */
  , "/v1/accounts:sendVerificationCode"
  /* SEND_VERIFICATION_CODE */
  , _addTidIfNecessary(auth, request));
}

async function signInWithPhoneNumber$1(auth, request) {
  return _performSignInRequest(auth, "POST"
  /* POST */
  , "/v1/accounts:signInWithPhoneNumber"
  /* SIGN_IN_WITH_PHONE_NUMBER */
  , _addTidIfNecessary(auth, request));
}

async function linkWithPhoneNumber$1(auth, request) {
  const response = await _performSignInRequest(auth, "POST"
  /* POST */
  , "/v1/accounts:signInWithPhoneNumber"
  /* SIGN_IN_WITH_PHONE_NUMBER */
  , _addTidIfNecessary(auth, request));

  if (response.temporaryProof) {
    throw _makeTaggedError(auth, "account-exists-with-different-credential"
    /* NEED_CONFIRMATION */
    , response);
  }

  return response;
}

const VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_ = {
  ["USER_NOT_FOUND"
  /* USER_NOT_FOUND */
  ]: "user-not-found"
  /* USER_DELETED */

};

async function verifyPhoneNumberForExisting(auth, request) {
  const apiRequest = Object.assign(Object.assign({}, request), {
    operation: 'REAUTH'
  });
  return _performSignInRequest(auth, "POST"
  /* POST */
  , "/v1/accounts:signInWithPhoneNumber"
  /* SIGN_IN_WITH_PHONE_NUMBER */
  , _addTidIfNecessary(auth, apiRequest), VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Represents the credentials returned by {@link PhoneAuthProvider}.
 *
 * @public
 */


class PhoneAuthCredential extends AuthCredential {
  constructor(params) {
    super("phone"
    /* PHONE */
    , "phone"
    /* PHONE */
    );
    this.params = params;
  }
  /** @internal */


  static _fromVerification(verificationId, verificationCode) {
    return new PhoneAuthCredential({
      verificationId,
      verificationCode
    });
  }
  /** @internal */


  static _fromTokenResponse(phoneNumber, temporaryProof) {
    return new PhoneAuthCredential({
      phoneNumber,
      temporaryProof
    });
  }
  /** @internal */


  _getIdTokenResponse(auth) {
    return signInWithPhoneNumber$1(auth, this._makeVerificationRequest());
  }
  /** @internal */


  _linkToIdToken(auth, idToken) {
    return linkWithPhoneNumber$1(auth, Object.assign({
      idToken
    }, this._makeVerificationRequest()));
  }
  /** @internal */


  _getReauthenticationResolver(auth) {
    return verifyPhoneNumberForExisting(auth, this._makeVerificationRequest());
  }
  /** @internal */


  _makeVerificationRequest() {
    const {
      temporaryProof,
      phoneNumber,
      verificationId,
      verificationCode
    } = this.params;

    if (temporaryProof && phoneNumber) {
      return {
        temporaryProof,
        phoneNumber
      };
    }

    return {
      sessionInfo: verificationId,
      code: verificationCode
    };
  }
  /** {@inheritdoc AuthCredential.toJSON} */


  toJSON() {
    const obj = {
      providerId: this.providerId
    };

    if (this.params.phoneNumber) {
      obj.phoneNumber = this.params.phoneNumber;
    }

    if (this.params.temporaryProof) {
      obj.temporaryProof = this.params.temporaryProof;
    }

    if (this.params.verificationCode) {
      obj.verificationCode = this.params.verificationCode;
    }

    if (this.params.verificationId) {
      obj.verificationId = this.params.verificationId;
    }

    return obj;
  }
  /** Generates a phone credential based on a plain object or a JSON string. */


  static fromJSON(json) {
    if (typeof json === 'string') {
      json = JSON.parse(json);
    }

    const {
      verificationId,
      verificationCode,
      phoneNumber,
      temporaryProof
    } = json;

    if (!verificationCode && !verificationId && !phoneNumber && !temporaryProof) {
      return null;
    }

    return new PhoneAuthCredential({
      verificationId,
      verificationCode,
      phoneNumber,
      temporaryProof
    });
  }

}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Maps the mode string in action code URL to Action Code Info operation.
 *
 * @param mode
 */


exports.J = PhoneAuthCredential;

function parseMode(mode) {
  switch (mode) {
    case 'recoverEmail':
      return "RECOVER_EMAIL"
      /* RECOVER_EMAIL */
      ;

    case 'resetPassword':
      return "PASSWORD_RESET"
      /* PASSWORD_RESET */
      ;

    case 'signIn':
      return "EMAIL_SIGNIN"
      /* EMAIL_SIGNIN */
      ;

    case 'verifyEmail':
      return "VERIFY_EMAIL"
      /* VERIFY_EMAIL */
      ;

    case 'verifyAndChangeEmail':
      return "VERIFY_AND_CHANGE_EMAIL"
      /* VERIFY_AND_CHANGE_EMAIL */
      ;

    case 'revertSecondFactorAddition':
      return "REVERT_SECOND_FACTOR_ADDITION"
      /* REVERT_SECOND_FACTOR_ADDITION */
      ;

    default:
      return null;
  }
}
/**
 * Helper to parse FDL links
 *
 * @param url
 */


function parseDeepLink(url) {
  const link = (0, _util.querystringDecode)((0, _util.extractQuerystring)(url))['link']; // Double link case (automatic redirect).

  const doubleDeepLink = link ? (0, _util.querystringDecode)((0, _util.extractQuerystring)(link))['deep_link_id'] : null; // iOS custom scheme links.

  const iOSDeepLink = (0, _util.querystringDecode)((0, _util.extractQuerystring)(url))['deep_link_id'];
  const iOSDoubleDeepLink = iOSDeepLink ? (0, _util.querystringDecode)((0, _util.extractQuerystring)(iOSDeepLink))['link'] : null;
  return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;
}
/**
 * A utility class to parse email action URLs such as password reset, email verification,
 * email link sign in, etc.
 *
 * @public
 */


class ActionCodeURL {
  /**
   * @param actionLink - The link from which to extract the URL.
   * @returns The {@link ActionCodeURL} object, or null if the link is invalid.
   *
   * @internal
   */
  constructor(actionLink) {
    var _a, _b, _c, _d, _e, _f;

    const searchParams = (0, _util.querystringDecode)((0, _util.extractQuerystring)(actionLink));
    const apiKey = (_a = searchParams["apiKey"
    /* API_KEY */
    ]) !== null && _a !== void 0 ? _a : null;
    const code = (_b = searchParams["oobCode"
    /* CODE */
    ]) !== null && _b !== void 0 ? _b : null;
    const operation = parseMode((_c = searchParams["mode"
    /* MODE */
    ]) !== null && _c !== void 0 ? _c : null); // Validate API key, code and mode.

    _assert(apiKey && code && operation, "argument-error"
    /* ARGUMENT_ERROR */
    );

    this.apiKey = apiKey;
    this.operation = operation;
    this.code = code;
    this.continueUrl = (_d = searchParams["continueUrl"
    /* CONTINUE_URL */
    ]) !== null && _d !== void 0 ? _d : null;
    this.languageCode = (_e = searchParams["languageCode"
    /* LANGUAGE_CODE */
    ]) !== null && _e !== void 0 ? _e : null;
    this.tenantId = (_f = searchParams["tenantId"
    /* TENANT_ID */
    ]) !== null && _f !== void 0 ? _f : null;
  }
  /**
   * Parses the email action link string and returns an {@link ActionCodeURL} if the link is valid,
   * otherwise returns null.
   *
   * @param link  - The email action link string.
   * @returns The {@link ActionCodeURL} object, or null if the link is invalid.
   *
   * @public
   */


  static parseLink(link) {
    const actionLink = parseDeepLink(link);

    try {
      return new ActionCodeURL(actionLink);
    } catch (_a) {
      return null;
    }
  }

}
/**
 * Parses the email action link string and returns an {@link ActionCodeURL} if
 * the link is valid, otherwise returns null.
 *
 * @public
 */


exports.ac = ActionCodeURL;

function parseActionCodeURL(link) {
  return ActionCodeURL.parseLink(link);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Provider for generating {@link EmailAuthCredential}.
 *
 * @public
 */


class EmailAuthProvider {
  constructor() {
    /**
     * Always set to {@link ProviderId}.PASSWORD, even for email link.
     */
    this.providerId = EmailAuthProvider.PROVIDER_ID;
  }
  /**
   * Initialize an {@link AuthCredential} using an email and password.
   *
   * @example
   * ```javascript
   * const authCredential = EmailAuthProvider.credential(email, password);
   * const userCredential = await signInWithCredential(auth, authCredential);
   * ```
   *
   * @example
   * ```javascript
   * const userCredential = await signInWithEmailAndPassword(auth, email, password);
   * ```
   *
   * @param email - Email address.
   * @param password - User account password.
   * @returns The auth provider credential.
   */


  static credential(email, password) {
    return EmailAuthCredential._fromEmailAndPassword(email, password);
  }
  /**
   * Initialize an {@link AuthCredential} using an email and an email link after a sign in with
   * email link operation.
   *
   * @example
   * ```javascript
   * const authCredential = EmailAuthProvider.credentialWithLink(auth, email, emailLink);
   * const userCredential = await signInWithCredential(auth, authCredential);
   * ```
   *
   * @example
   * ```javascript
   * await sendSignInLinkToEmail(auth, email);
   * // Obtain emailLink from user.
   * const userCredential = await signInWithEmailLink(auth, email, emailLink);
   * ```
   *
   * @param auth - The {@link Auth} instance used to verify the link.
   * @param email - Email address.
   * @param emailLink - Sign-in email link.
   * @returns - The auth provider credential.
   */


  static credentialWithLink(email, emailLink) {
    const actionCodeUrl = ActionCodeURL.parseLink(emailLink);

    _assert(actionCodeUrl, "argument-error"
    /* ARGUMENT_ERROR */
    );

    return EmailAuthCredential._fromEmailAndCode(email, actionCodeUrl.code, actionCodeUrl.tenantId);
  }

}
/**
 * Always set to {@link ProviderId}.PASSWORD, even for email link.
 */


exports.L = EmailAuthProvider;
EmailAuthProvider.PROVIDER_ID = "password"
/* PASSWORD */
;
/**
 * Always set to {@link SignInMethod}.EMAIL_PASSWORD.
 */

EmailAuthProvider.EMAIL_PASSWORD_SIGN_IN_METHOD = "password"
/* EMAIL_PASSWORD */
;
/**
 * Always set to {@link SignInMethod}.EMAIL_LINK.
 */

EmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD = "emailLink"
/* EMAIL_LINK */
;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The base class for all Federated providers (OAuth (including OIDC), SAML).
 *
 * This class is not meant to be instantiated directly.
 *
 * @public
 */

class FederatedAuthProvider {
  /**
   * Constructor for generic OAuth providers.
   *
   * @param providerId - Provider for which credentials should be generated.
   */
  constructor(providerId) {
    this.providerId = providerId;
    /** @internal */

    this.defaultLanguageCode = null;
    /** @internal */

    this.customParameters = {};
  }
  /**
   * Set the language gode.
   *
   * @param languageCode - language code
   */


  setDefaultLanguage(languageCode) {
    this.defaultLanguageCode = languageCode;
  }
  /**
   * Sets the OAuth custom parameters to pass in an OAuth request for popup and redirect sign-in
   * operations.
   *
   * @remarks
   * For a detailed list, check the reserved required OAuth 2.0 parameters such as `client_id`,
   * `redirect_uri`, `scope`, `response_type`, and `state` are not allowed and will be ignored.
   *
   * @param customOAuthParameters - The custom OAuth parameters to pass in the OAuth request.
   */


  setCustomParameters(customOAuthParameters) {
    this.customParameters = customOAuthParameters;
    return this;
  }
  /**
   * Retrieve the current list of {@link CustomParameters}.
   */


  getCustomParameters() {
    return this.customParameters;
  }

}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Common code to all OAuth providers. This is separate from the
 * {@link OAuthProvider} so that child providers (like
 * {@link GoogleAuthProvider}) don't inherit the `credential` instance method.
 * Instead, they rely on a static `credential` method.
 */


class BaseOAuthProvider extends FederatedAuthProvider {
  constructor() {
    super(...arguments);
    /** @internal */

    this.scopes = [];
  }
  /**
   * Add an OAuth scope to the credential.
   *
   * @param scope - Provider OAuth scope to add.
   */


  addScope(scope) {
    // If not already added, add scope to list.
    if (!this.scopes.includes(scope)) {
      this.scopes.push(scope);
    }

    return this;
  }
  /**
   * Retrieve the current list of OAuth scopes.
   */


  getScopes() {
    return [...this.scopes];
  }

}
/**
 * Provider for generating generic {@link OAuthCredential}.
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new OAuthProvider('google.com');
 * // Start a sign in process for an unauthenticated user.
 * provider.addScope('profile');
 * provider.addScope('email');
 * await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * if (result) {
 *   // This is the signed-in user
 *   const user = result.user;
 *   // This gives you a OAuth Access Token for the provider.
 *   const credential = provider.credentialFromResult(auth, result);
 *   const token = credential.accessToken;
 * }
 * ```
 *
 * @example
 * ```javascript
 * // Sign in using a popup.
 * const provider = new OAuthProvider('google.com');
 * provider.addScope('profile');
 * provider.addScope('email');
 * const result = await signInWithPopup(auth, provider);
 *
 * // The signed-in user info.
 * const user = result.user;
 * // This gives you a OAuth Access Token for the provider.
 * const credential = provider.credentialFromResult(auth, result);
 * const token = credential.accessToken;
 * ```
 * @public
 */


class OAuthProvider extends BaseOAuthProvider {
  /**
   * Creates an {@link OAuthCredential} from a JSON string or a plain object.
   * @param json - A plain object or a JSON string
   */
  static credentialFromJSON(json) {
    const obj = typeof json === 'string' ? JSON.parse(json) : json;

    _assert('providerId' in obj && 'signInMethod' in obj, "argument-error"
    /* ARGUMENT_ERROR */
    );

    return OAuthCredential._fromParams(obj);
  }
  /**
   * Creates a {@link OAuthCredential} from a generic OAuth provider's access token or ID token.
   *
   * @remarks
   * The raw nonce is required when an ID token with a nonce field is provided. The SHA-256 hash of
   * the raw nonce must match the nonce field in the ID token.
   *
   * @example
   * ```javascript
   * // `googleUser` from the onsuccess Google Sign In callback.
   * // Initialize a generate OAuth provider with a `google.com` providerId.
   * const provider = new OAuthProvider('google.com');
   * const credential = provider.credential({
   *   idToken: googleUser.getAuthResponse().id_token,
   * });
   * const result = await signInWithCredential(credential);
   * ```
   *
   * @param params - Either the options object containing the ID token, access token and raw nonce
   * or the ID token string.
   */


  credential(params) {
    return this._credential(params);
  }
  /** An internal credential method that accepts more permissive options */


  _credential(params) {
    _assert(params.idToken || params.accessToken, "argument-error"
    /* ARGUMENT_ERROR */
    ); // For OAuthCredential, sign in method is same as providerId.


    return OAuthCredential._fromParams(Object.assign(Object.assign({}, params), {
      providerId: this.providerId,
      signInMethod: this.providerId
    }));
  }
  /**
   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
   *
   * @param userCredential - The user credential.
   */


  static credentialFromResult(userCredential) {
    return OAuthProvider.oauthCredentialFromTaggedObject(userCredential);
  }
  /**
   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
   * thrown during a sign-in, link, or reauthenticate operation.
   *
   * @param userCredential - The user credential.
   */


  static credentialFromError(error) {
    return OAuthProvider.oauthCredentialFromTaggedObject(error.customData || {});
  }

  static oauthCredentialFromTaggedObject({
    _tokenResponse: tokenResponse
  }) {
    if (!tokenResponse) {
      return null;
    }

    const {
      oauthIdToken,
      oauthAccessToken,
      oauthTokenSecret,
      pendingToken,
      nonce,
      providerId
    } = tokenResponse;

    if (!oauthAccessToken && !oauthTokenSecret && !oauthIdToken && !pendingToken) {
      return null;
    }

    if (!providerId) {
      return null;
    }

    try {
      return new OAuthProvider(providerId)._credential({
        idToken: oauthIdToken,
        accessToken: oauthAccessToken,
        rawNonce: nonce,
        pendingToken
      });
    } catch (e) {
      return null;
    }
  }

}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.FACEBOOK.
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new FacebookAuthProvider();
 * // Start a sign in process for an unauthenticated user.
 * provider.addScope('user_birthday');
 * await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * if (result) {
 *   // This is the signed-in user
 *   const user = result.user;
 *   // This gives you a Facebook Access Token.
 *   const credential = provider.credentialFromResult(auth, result);
 *   const token = credential.accessToken;
 * }
 * ```
 *
 * @example
 * ```javascript
 * // Sign in using a popup.
 * const provider = new FacebookAuthProvider();
 * provider.addScope('user_birthday');
 * const result = await signInWithPopup(auth, provider);
 *
 * // The signed-in user info.
 * const user = result.user;
 * // This gives you a Facebook Access Token.
 * const credential = provider.credentialFromResult(auth, result);
 * const token = credential.accessToken;
 * ```
 *
 * @public
 */


exports.T = OAuthProvider;

class FacebookAuthProvider extends BaseOAuthProvider {
  constructor() {
    super("facebook.com"
    /* FACEBOOK */
    );
  }
  /**
   * Creates a credential for Facebook.
   *
   * @example
   * ```javascript
   * // `event` from the Facebook auth.authResponseChange callback.
   * const credential = FacebookAuthProvider.credential(event.authResponse.accessToken);
   * const result = await signInWithCredential(credential);
   * ```
   *
   * @param accessToken - Facebook access token.
   */


  static credential(accessToken) {
    return OAuthCredential._fromParams({
      providerId: FacebookAuthProvider.PROVIDER_ID,
      signInMethod: FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD,
      accessToken
    });
  }
  /**
   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
   *
   * @param userCredential - The user credential.
   */


  static credentialFromResult(userCredential) {
    return FacebookAuthProvider.credentialFromTaggedObject(userCredential);
  }
  /**
   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
   * thrown during a sign-in, link, or reauthenticate operation.
   *
   * @param userCredential - The user credential.
   */


  static credentialFromError(error) {
    return FacebookAuthProvider.credentialFromTaggedObject(error.customData || {});
  }

  static credentialFromTaggedObject({
    _tokenResponse: tokenResponse
  }) {
    if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {
      return null;
    }

    if (!tokenResponse.oauthAccessToken) {
      return null;
    }

    try {
      return FacebookAuthProvider.credential(tokenResponse.oauthAccessToken);
    } catch (_a) {
      return null;
    }
  }

}
/** Always set to {@link SignInMethod}.FACEBOOK. */


exports.M = FacebookAuthProvider;
FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD = "facebook.com"
/* FACEBOOK */
;
/** Always set to {@link ProviderId}.FACEBOOK. */

FacebookAuthProvider.PROVIDER_ID = "facebook.com"
/* FACEBOOK */
;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Provider for generating an an {@link OAuthCredential} for {@link ProviderId}.GOOGLE.
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new GoogleAuthProvider();
 * // Start a sign in process for an unauthenticated user.
 * provider.addScope('profile');
 * provider.addScope('email');
 * await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * if (result) {
 *   // This is the signed-in user
 *   const user = result.user;
 *   // This gives you a Google Access Token.
 *   const credential = provider.credentialFromResult(auth, result);
 *   const token = credential.accessToken;
 * }
 * ```
 *
 * @example
 * ```javascript
 * // Sign in using a popup.
 * const provider = new GoogleAuthProvider();
 * provider.addScope('profile');
 * provider.addScope('email');
 * const result = await signInWithPopup(auth, provider);
 *
 * // The signed-in user info.
 * const user = result.user;
 * // This gives you a Google Access Token.
 * const credential = provider.credentialFromResult(auth, result);
 * const token = credential.accessToken;
 * ```
 *
 * @public
 */

class GoogleAuthProvider extends BaseOAuthProvider {
  constructor() {
    super("google.com"
    /* GOOGLE */
    );
    this.addScope('profile');
  }
  /**
   * Creates a credential for Google. At least one of ID token and access token is required.
   *
   * @example
   * ```javascript
   * // \`googleUser\` from the onsuccess Google Sign In callback.
   * const credential = GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token);
   * const result = await signInWithCredential(credential);
   * ```
   *
   * @param idToken - Google ID token.
   * @param accessToken - Google access token.
   */


  static credential(idToken, accessToken) {
    return OAuthCredential._fromParams({
      providerId: GoogleAuthProvider.PROVIDER_ID,
      signInMethod: GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD,
      idToken,
      accessToken
    });
  }
  /**
   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
   *
   * @param userCredential - The user credential.
   */


  static credentialFromResult(userCredential) {
    return GoogleAuthProvider.credentialFromTaggedObject(userCredential);
  }
  /**
   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
   * thrown during a sign-in, link, or reauthenticate operation.
   *
   * @param userCredential - The user credential.
   */


  static credentialFromError(error) {
    return GoogleAuthProvider.credentialFromTaggedObject(error.customData || {});
  }

  static credentialFromTaggedObject({
    _tokenResponse: tokenResponse
  }) {
    if (!tokenResponse) {
      return null;
    }

    const {
      oauthIdToken,
      oauthAccessToken
    } = tokenResponse;

    if (!oauthIdToken && !oauthAccessToken) {
      // This could be an oauth 1 credential or a phone credential
      return null;
    }

    try {
      return GoogleAuthProvider.credential(oauthIdToken, oauthAccessToken);
    } catch (_a) {
      return null;
    }
  }

}
/** Always set to {@link SignInMethod}.GOOGLE. */


exports.N = GoogleAuthProvider;
GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD = "google.com"
/* GOOGLE */
;
/** Always set to {@link ProviderId}.GOOGLE. */

GoogleAuthProvider.PROVIDER_ID = "google.com"
/* GOOGLE */
;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GITHUB.
 *
 * @remarks
 * GitHub requires an OAuth 2.0 redirect, so you can either handle the redirect directly, or use
 * the {@link signInWithPopup} handler:
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new GithubAuthProvider();
 * // Start a sign in process for an unauthenticated user.
 * provider.addScope('repo');
 * await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * if (result) {
 *   // This is the signed-in user
 *   const user = result.user;
 *   // This gives you a Github Access Token.
 *   const credential = provider.credentialFromResult(auth, result);
 *   const token = credential.accessToken;
 * }
 * ```
 *
 * @example
 * ```javascript
 * // Sign in using a popup.
 * const provider = new GithubAuthProvider();
 * provider.addScope('repo');
 * const result = await signInWithPopup(auth, provider);
 *
 * // The signed-in user info.
 * const user = result.user;
 * // This gives you a Github Access Token.
 * const credential = provider.credentialFromResult(auth, result);
 * const token = credential.accessToken;
 * ```
 * @public
 */

class GithubAuthProvider extends BaseOAuthProvider {
  constructor() {
    super("github.com"
    /* GITHUB */
    );
  }
  /**
   * Creates a credential for Github.
   *
   * @param accessToken - Github access token.
   */


  static credential(accessToken) {
    return OAuthCredential._fromParams({
      providerId: GithubAuthProvider.PROVIDER_ID,
      signInMethod: GithubAuthProvider.GITHUB_SIGN_IN_METHOD,
      accessToken
    });
  }
  /**
   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
   *
   * @param userCredential - The user credential.
   */


  static credentialFromResult(userCredential) {
    return GithubAuthProvider.credentialFromTaggedObject(userCredential);
  }
  /**
   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
   * thrown during a sign-in, link, or reauthenticate operation.
   *
   * @param userCredential - The user credential.
   */


  static credentialFromError(error) {
    return GithubAuthProvider.credentialFromTaggedObject(error.customData || {});
  }

  static credentialFromTaggedObject({
    _tokenResponse: tokenResponse
  }) {
    if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {
      return null;
    }

    if (!tokenResponse.oauthAccessToken) {
      return null;
    }

    try {
      return GithubAuthProvider.credential(tokenResponse.oauthAccessToken);
    } catch (_a) {
      return null;
    }
  }

}
/** Always set to {@link SignInMethod}.GITHUB. */


exports.Q = GithubAuthProvider;
GithubAuthProvider.GITHUB_SIGN_IN_METHOD = "github.com"
/* GITHUB */
;
/** Always set to {@link ProviderId}.GITHUB. */

GithubAuthProvider.PROVIDER_ID = "github.com"
/* GITHUB */
;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const IDP_REQUEST_URI = 'http://localhost';
/**
 * @public
 */

class SAMLAuthCredential extends AuthCredential {
  /** @internal */
  constructor(providerId, pendingToken) {
    super(providerId, providerId);
    this.pendingToken = pendingToken;
  }
  /** @internal */


  _getIdTokenResponse(auth) {
    const request = this.buildRequest();
    return signInWithIdp(auth, request);
  }
  /** @internal */


  _linkToIdToken(auth, idToken) {
    const request = this.buildRequest();
    request.idToken = idToken;
    return signInWithIdp(auth, request);
  }
  /** @internal */


  _getReauthenticationResolver(auth) {
    const request = this.buildRequest();
    request.autoCreate = false;
    return signInWithIdp(auth, request);
  }
  /** {@inheritdoc AuthCredential.toJSON}  */


  toJSON() {
    return {
      signInMethod: this.signInMethod,
      providerId: this.providerId,
      pendingToken: this.pendingToken
    };
  }
  /**
   * Static method to deserialize a JSON representation of an object into an
   * {@link  AuthCredential}.
   *
   * @param json - Input can be either Object or the stringified representation of the object.
   * When string is provided, JSON.parse would be called first.
   *
   * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.
   */


  static fromJSON(json) {
    const obj = typeof json === 'string' ? JSON.parse(json) : json;
    const {
      providerId,
      signInMethod,
      pendingToken
    } = obj;

    if (!providerId || !signInMethod || !pendingToken || providerId !== signInMethod) {
      return null;
    }

    return new SAMLAuthCredential(providerId, pendingToken);
  }
  /**
   * Helper static method to avoid exposing the constructor to end users.
   *
   * @internal
   */


  static _create(providerId, pendingToken) {
    return new SAMLAuthCredential(providerId, pendingToken);
  }

  buildRequest() {
    return {
      requestUri: IDP_REQUEST_URI,
      returnSecureToken: true,
      pendingToken: this.pendingToken
    };
  }

}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


exports.aJ = SAMLAuthCredential;
const SAML_PROVIDER_PREFIX = 'saml.';
/**
 * An {@link AuthProvider} for SAML.
 *
 * @public
 */

class SAMLAuthProvider extends FederatedAuthProvider {
  /**
   * Constructor. The providerId must start with "saml."
   * @param providerId - SAML provider ID.
   */
  constructor(providerId) {
    _assert(providerId.startsWith(SAML_PROVIDER_PREFIX), "argument-error"
    /* ARGUMENT_ERROR */
    );

    super(providerId);
  }
  /**
   * Generates an {@link AuthCredential} from a {@link UserCredential} after a
   * successful SAML flow completes.
   *
   * @remarks
   *
   * For example, to get an {@link AuthCredential}, you could write the
   * following code:
   *
   * ```js
   * const userCredential = await signInWithPopup(auth, samlProvider);
   * const credential = SAMLAuthProvider.credentialFromResult(userCredential);
   * ```
   *
   * @param userCredential - The user credential.
   */


  static credentialFromResult(userCredential) {
    return SAMLAuthProvider.samlCredentialFromTaggedObject(userCredential);
  }
  /**
   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
   * thrown during a sign-in, link, or reauthenticate operation.
   *
   * @param userCredential - The user credential.
   */


  static credentialFromError(error) {
    return SAMLAuthProvider.samlCredentialFromTaggedObject(error.customData || {});
  }
  /**
   * Creates an {@link AuthCredential} from a JSON string or a plain object.
   * @param json - A plain object or a JSON string
   */


  static credentialFromJSON(json) {
    const credential = SAMLAuthCredential.fromJSON(json);

    _assert(credential, "argument-error"
    /* ARGUMENT_ERROR */
    );

    return credential;
  }

  static samlCredentialFromTaggedObject({
    _tokenResponse: tokenResponse
  }) {
    if (!tokenResponse) {
      return null;
    }

    const {
      pendingToken,
      providerId
    } = tokenResponse;

    if (!pendingToken || !providerId) {
      return null;
    }

    try {
      return SAMLAuthCredential._create(providerId, pendingToken);
    } catch (e) {
      return null;
    }
  }

}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.TWITTER.
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new TwitterAuthProvider();
 * // Start a sign in process for an unauthenticated user.
 * await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * if (result) {
 *   // This is the signed-in user
 *   const user = result.user;
 *   // This gives you a Twitter Access Token and Secret.
 *   const credential = provider.credentialFromResult(auth, result);
 *   const token = credential.accessToken;
 *   const secret = credential.secret;
 * }
 * ```
 *
 * @example
 * ```javascript
 * // Sign in using a popup.
 * const provider = new TwitterAuthProvider();
 * const result = await signInWithPopup(auth, provider);
 *
 * // The signed-in user info.
 * const user = result.user;
 * // This gives you a Twitter Access Token and Secret.
 * const credential = provider.credentialFromResult(auth, result);
 * const token = credential.accessToken;
 * const secret = credential.secret;
 * ```
 *
 * @public
 */


exports.U = SAMLAuthProvider;

class TwitterAuthProvider extends BaseOAuthProvider {
  constructor() {
    super("twitter.com"
    /* TWITTER */
    );
  }
  /**
   * Creates a credential for Twitter.
   *
   * @param token - Twitter access token.
   * @param secret - Twitter secret.
   */


  static credential(token, secret) {
    return OAuthCredential._fromParams({
      providerId: TwitterAuthProvider.PROVIDER_ID,
      signInMethod: TwitterAuthProvider.TWITTER_SIGN_IN_METHOD,
      oauthToken: token,
      oauthTokenSecret: secret
    });
  }
  /**
   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
   *
   * @param userCredential - The user credential.
   */


  static credentialFromResult(userCredential) {
    return TwitterAuthProvider.credentialFromTaggedObject(userCredential);
  }
  /**
   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
   * thrown during a sign-in, link, or reauthenticate operation.
   *
   * @param userCredential - The user credential.
   */


  static credentialFromError(error) {
    return TwitterAuthProvider.credentialFromTaggedObject(error.customData || {});
  }

  static credentialFromTaggedObject({
    _tokenResponse: tokenResponse
  }) {
    if (!tokenResponse) {
      return null;
    }

    const {
      oauthAccessToken,
      oauthTokenSecret
    } = tokenResponse;

    if (!oauthAccessToken || !oauthTokenSecret) {
      return null;
    }

    try {
      return TwitterAuthProvider.credential(oauthAccessToken, oauthTokenSecret);
    } catch (_a) {
      return null;
    }
  }

}
/** Always set to {@link SignInMethod}.TWITTER. */


exports.V = TwitterAuthProvider;
TwitterAuthProvider.TWITTER_SIGN_IN_METHOD = "twitter.com"
/* TWITTER */
;
/** Always set to {@link ProviderId}.TWITTER. */

TwitterAuthProvider.PROVIDER_ID = "twitter.com"
/* TWITTER */
;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

async function signUp(auth, request) {
  return _performSignInRequest(auth, "POST"
  /* POST */
  , "/v1/accounts:signUp"
  /* SIGN_UP */
  , _addTidIfNecessary(auth, request));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


class UserCredentialImpl {
  constructor(params) {
    this.user = params.user;
    this.providerId = params.providerId;
    this._tokenResponse = params._tokenResponse;
    this.operationType = params.operationType;
  }

  static async _fromIdTokenResponse(auth, operationType, idTokenResponse, isAnonymous = false) {
    const user = await UserImpl._fromIdTokenResponse(auth, idTokenResponse, isAnonymous);
    const providerId = providerIdForResponse(idTokenResponse);
    const userCred = new UserCredentialImpl({
      user,
      providerId,
      _tokenResponse: idTokenResponse,
      operationType
    });
    return userCred;
  }

  static async _forOperation(user, operationType, response) {
    await user._updateTokensIfNecessary(response,
    /* reload */
    true);
    const providerId = providerIdForResponse(response);
    return new UserCredentialImpl({
      user,
      providerId,
      _tokenResponse: response,
      operationType
    });
  }

}

function providerIdForResponse(response) {
  if (response.providerId) {
    return response.providerId;
  }

  if ('phoneNumber' in response) {
    return "phone"
    /* PHONE */
    ;
  }

  return null;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Asynchronously signs in as an anonymous user.
 *
 * @remarks
 * If there is already an anonymous user signed in, that user will be returned; otherwise, a
 * new anonymous user identity will be created and returned.
 *
 * @param auth - The {@link Auth} instance.
 *
 * @public
 */


async function signInAnonymously(auth) {
  var _a;

  const authInternal = _castAuth(auth);

  await authInternal._initializationPromise;

  if ((_a = authInternal.currentUser) === null || _a === void 0 ? void 0 : _a.isAnonymous) {
    // If an anonymous user is already signed in, no need to sign them in again.
    return new UserCredentialImpl({
      user: authInternal.currentUser,
      providerId: null,
      operationType: "signIn"
      /* SIGN_IN */

    });
  }

  const response = await signUp(authInternal, {
    returnSecureToken: true
  });
  const userCredential = await UserCredentialImpl._fromIdTokenResponse(authInternal, "signIn"
  /* SIGN_IN */
  , response, true);
  await authInternal._updateCurrentUser(userCredential.user);
  return userCredential;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


class MultiFactorError extends _util.FirebaseError {
  constructor(auth, error, operationType, user) {
    var _a;

    super(error.code, error.message);
    this.operationType = operationType;
    this.user = user;
    this.name = 'FirebaseError'; // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work

    Object.setPrototypeOf(this, MultiFactorError.prototype);
    this.appName = auth.name;
    this.code = error.code;
    this.tenantId = (_a = auth.tenantId) !== null && _a !== void 0 ? _a : undefined;
    this.serverResponse = error.customData.serverResponse;
  }

  static _fromErrorAndOperation(auth, error, operationType, user) {
    return new MultiFactorError(auth, error, operationType, user);
  }

}

function _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user) {
  const idTokenProvider = operationType === "reauthenticate"
  /* REAUTHENTICATE */
  ? credential._getReauthenticationResolver(auth) : credential._getIdTokenResponse(auth);
  return idTokenProvider.catch(error => {
    if (error.code === `auth/${"multi-factor-auth-required"
    /* MFA_REQUIRED */
    }`) {
      throw MultiFactorError._fromErrorAndOperation(auth, error, operationType, user);
    }

    throw error;
  });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Takes a set of UserInfo provider data and converts it to a set of names
 */


function providerDataAsNames(providerData) {
  return new Set(providerData.map(({
    providerId
  }) => providerId).filter(pid => !!pid));
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Unlinks a provider from a user account.
 *
 * @param user - The user.
 * @param providerId - The provider to unlink.
 *
 * @public
 */


async function unlink(user, providerId) {
  const userInternal = (0, _util.getModularInstance)(user);
  await _assertLinkedStatus(true, userInternal, providerId);
  const {
    providerUserInfo
  } = await deleteLinkedAccounts(userInternal.auth, {
    idToken: await userInternal.getIdToken(),
    deleteProvider: [providerId]
  });
  const providersLeft = providerDataAsNames(providerUserInfo || []);
  userInternal.providerData = userInternal.providerData.filter(pd => providersLeft.has(pd.providerId));

  if (!providersLeft.has("phone"
  /* PHONE */
  )) {
    userInternal.phoneNumber = null;
  }

  await userInternal.auth._persistUserIfCurrent(userInternal);
  return userInternal;
}

async function _link$1(user, credential, bypassAuthState = false) {
  const response = await _logoutIfInvalidated(user, credential._linkToIdToken(user.auth, await user.getIdToken()), bypassAuthState);
  return UserCredentialImpl._forOperation(user, "link"
  /* LINK */
  , response);
}

async function _assertLinkedStatus(expected, user, provider) {
  await _reloadWithoutSaving(user);
  const providerIds = providerDataAsNames(user.providerData);
  const code = expected === false ? "provider-already-linked"
  /* PROVIDER_ALREADY_LINKED */
  : "no-such-provider"
  /* NO_SUCH_PROVIDER */
  ;

  _assert(providerIds.has(provider) === expected, user.auth, code);
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


async function _reauthenticate(user, credential, bypassAuthState = false) {
  const {
    auth
  } = user;
  const operationType = "reauthenticate"
  /* REAUTHENTICATE */
  ;

  try {
    const response = await _logoutIfInvalidated(user, _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user), bypassAuthState);

    _assert(response.idToken, auth, "internal-error"
    /* INTERNAL_ERROR */
    );

    const parsed = _parseToken(response.idToken);

    _assert(parsed, auth, "internal-error"
    /* INTERNAL_ERROR */
    );

    const {
      sub: localId
    } = parsed;

    _assert(user.uid === localId, auth, "user-mismatch"
    /* USER_MISMATCH */
    );

    return UserCredentialImpl._forOperation(user, operationType, response);
  } catch (e) {
    // Convert user deleted error into user mismatch
    if ((e === null || e === void 0 ? void 0 : e.code) === `auth/${"user-not-found"
    /* USER_DELETED */
    }`) {
      _fail(auth, "user-mismatch"
      /* USER_MISMATCH */
      );
    }

    throw e;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


async function _signInWithCredential(auth, credential, bypassAuthState = false) {
  const operationType = "signIn"
  /* SIGN_IN */
  ;
  const response = await _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential);
  const userCredential = await UserCredentialImpl._fromIdTokenResponse(auth, operationType, response);

  if (!bypassAuthState) {
    await auth._updateCurrentUser(userCredential.user);
  }

  return userCredential;
}
/**
 * Asynchronously signs in with the given credentials.
 *
 * @remarks
 * An {@link AuthProvider} can be used to generate the credential.
 *
 * @param auth - The {@link Auth} instance.
 * @param credential - The auth credential.
 *
 * @public
 */


async function signInWithCredential(auth, credential) {
  return _signInWithCredential(_castAuth(auth), credential);
}
/**
 * Links the user account with the given credentials.
 *
 * @remarks
 * An {@link AuthProvider} can be used to generate the credential.
 *
 * @param user - The user.
 * @param credential - The auth credential.
 *
 * @public
 */


async function linkWithCredential(user, credential) {
  const userInternal = (0, _util.getModularInstance)(user);
  await _assertLinkedStatus(false, userInternal, credential.providerId);
  return _link$1(userInternal, credential);
}
/**
 * Re-authenticates a user using a fresh credential.
 *
 * @remarks
 * Use before operations such as {@link updatePassword} that require tokens from recent sign-in
 * attempts. This method can be used to recover from a `CREDENTIAL_TOO_OLD_LOGIN_AGAIN` error.
 *
 * @param user - The user.
 * @param credential - The auth credential.
 *
 * @public
 */


async function reauthenticateWithCredential(user, credential) {
  return _reauthenticate((0, _util.getModularInstance)(user), credential);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


async function signInWithCustomToken$1(auth, request) {
  return _performSignInRequest(auth, "POST"
  /* POST */
  , "/v1/accounts:signInWithCustomToken"
  /* SIGN_IN_WITH_CUSTOM_TOKEN */
  , _addTidIfNecessary(auth, request));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Asynchronously signs in using a custom token.
 *
 * @remarks
 * Custom tokens are used to integrate Firebase Auth with existing auth systems, and must
 * be generated by an auth backend using the
 * {@link https://firebase.google.com/docs/reference/admin/node/admin.auth.Auth#createcustomtoken | createCustomToken}
 * method in the {@link https://firebase.google.com/docs/auth/admin | Admin SDK} .
 *
 * Fails with an error if the token is invalid, expired, or not accepted by the Firebase Auth service.
 *
 * @param auth - The {@link Auth} instance.
 * @param customToken - The custom token to sign in with.
 *
 * @public
 */


async function signInWithCustomToken(auth, customToken) {
  const authInternal = _castAuth(auth);

  const response = await signInWithCustomToken$1(authInternal, {
    token: customToken,
    returnSecureToken: true
  });
  const cred = await UserCredentialImpl._fromIdTokenResponse(authInternal, "signIn"
  /* SIGN_IN */
  , response);
  await authInternal._updateCurrentUser(cred.user);
  return cred;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


class MultiFactorInfoImpl {
  constructor(factorId, response) {
    this.factorId = factorId;
    this.uid = response.mfaEnrollmentId;
    this.enrollmentTime = new Date(response.enrolledAt).toUTCString();
    this.displayName = response.displayName;
  }

  static _fromServerResponse(auth, enrollment) {
    if ('phoneInfo' in enrollment) {
      return PhoneMultiFactorInfo._fromServerResponse(auth, enrollment);
    }

    return _fail(auth, "internal-error"
    /* INTERNAL_ERROR */
    );
  }

}

class PhoneMultiFactorInfo extends MultiFactorInfoImpl {
  constructor(response) {
    super("phone"
    /* PHONE */
    , response);
    this.phoneNumber = response.phoneInfo;
  }

  static _fromServerResponse(_auth, enrollment) {
    return new PhoneMultiFactorInfo(enrollment);
  }

}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function _setActionCodeSettingsOnRequest(auth, request, actionCodeSettings) {
  var _a;

  _assert(((_a = actionCodeSettings.url) === null || _a === void 0 ? void 0 : _a.length) > 0, auth, "invalid-continue-uri"
  /* INVALID_CONTINUE_URI */
  );

  _assert(typeof actionCodeSettings.dynamicLinkDomain === 'undefined' || actionCodeSettings.dynamicLinkDomain.length > 0, auth, "invalid-dynamic-link-domain"
  /* INVALID_DYNAMIC_LINK_DOMAIN */
  );

  request.continueUrl = actionCodeSettings.url;
  request.dynamicLinkDomain = actionCodeSettings.dynamicLinkDomain;
  request.canHandleCodeInApp = actionCodeSettings.handleCodeInApp;

  if (actionCodeSettings.iOS) {
    _assert(actionCodeSettings.iOS.bundleId.length > 0, auth, "missing-ios-bundle-id"
    /* MISSING_IOS_BUNDLE_ID */
    );

    request.iosBundleId = actionCodeSettings.iOS.bundleId;
  }

  if (actionCodeSettings.android) {
    _assert(actionCodeSettings.android.packageName.length > 0, auth, "missing-android-pkg-name"
    /* MISSING_ANDROID_PACKAGE_NAME */
    );

    request.androidInstallApp = actionCodeSettings.android.installApp;
    request.androidMinimumVersionCode = actionCodeSettings.android.minimumVersion;
    request.androidPackageName = actionCodeSettings.android.packageName;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Sends a password reset email to the given email address.
 *
 * @remarks
 * To complete the password reset, call {@link confirmPasswordReset} with the code supplied in
 * the email sent to the user, along with the new password specified by the user.
 *
 * @example
 * ```javascript
 * const actionCodeSettings = {
 *   url: 'https://www.example.com/?email=user@example.com',
 *   iOS: {
 *      bundleId: 'com.example.ios'
 *   },
 *   android: {
 *     packageName: 'com.example.android',
 *     installApp: true,
 *     minimumVersion: '12'
 *   },
 *   handleCodeInApp: true
 * };
 * await sendPasswordResetEmail(auth, 'user@example.com', actionCodeSettings);
 * // Obtain code from user.
 * await confirmPasswordReset('user@example.com', code);
 * ```
 *
 * @param auth - The {@link Auth} instance.
 * @param email - The user's email address.
 * @param actionCodeSettings - The {@link ActionCodeSettings}.
 *
 * @public
 */


async function sendPasswordResetEmail(auth, email, actionCodeSettings) {
  const authModular = (0, _util.getModularInstance)(auth);
  const request = {
    requestType: "PASSWORD_RESET"
    /* PASSWORD_RESET */
    ,
    email
  };

  if (actionCodeSettings) {
    _setActionCodeSettingsOnRequest(authModular, request, actionCodeSettings);
  }

  await sendPasswordResetEmail$1(authModular, request);
}
/**
 * Completes the password reset process, given a confirmation code and new password.
 *
 * @param auth - The {@link Auth} instance.
 * @param oobCode - A confirmation code sent to the user.
 * @param newPassword - The new password.
 *
 * @public
 */


async function confirmPasswordReset(auth, oobCode, newPassword) {
  await resetPassword((0, _util.getModularInstance)(auth), {
    oobCode,
    newPassword
  }); // Do not return the email.
}
/**
 * Applies a verification code sent to the user by email or other out-of-band mechanism.
 *
 * @param auth - The {@link Auth} instance.
 * @param oobCode - A verification code sent to the user.
 *
 * @public
 */


async function applyActionCode(auth, oobCode) {
  await applyActionCode$1((0, _util.getModularInstance)(auth), {
    oobCode
  });
}
/**
 * Checks a verification code sent to the user by email or other out-of-band mechanism.
 *
 * @returns metadata about the code.
 *
 * @param auth - The {@link Auth} instance.
 * @param oobCode - A verification code sent to the user.
 *
 * @public
 */


async function checkActionCode(auth, oobCode) {
  const authModular = (0, _util.getModularInstance)(auth);
  const response = await resetPassword(authModular, {
    oobCode
  }); // Email could be empty only if the request type is EMAIL_SIGNIN or
  // VERIFY_AND_CHANGE_EMAIL.
  // New email should not be empty if the request type is
  // VERIFY_AND_CHANGE_EMAIL.
  // Multi-factor info could not be empty if the request type is
  // REVERT_SECOND_FACTOR_ADDITION.

  const operation = response.requestType;

  _assert(operation, authModular, "internal-error"
  /* INTERNAL_ERROR */
  );

  switch (operation) {
    case "EMAIL_SIGNIN"
    /* EMAIL_SIGNIN */
    :
      break;

    case "VERIFY_AND_CHANGE_EMAIL"
    /* VERIFY_AND_CHANGE_EMAIL */
    :
      _assert(response.newEmail, authModular, "internal-error"
      /* INTERNAL_ERROR */
      );

      break;

    case "REVERT_SECOND_FACTOR_ADDITION"
    /* REVERT_SECOND_FACTOR_ADDITION */
    :
      _assert(response.mfaInfo, authModular, "internal-error"
      /* INTERNAL_ERROR */
      );

    // fall through

    default:
      _assert(response.email, authModular, "internal-error"
      /* INTERNAL_ERROR */
      );

  } // The multi-factor info for revert second factor addition


  let multiFactorInfo = null;

  if (response.mfaInfo) {
    multiFactorInfo = MultiFactorInfoImpl._fromServerResponse(_castAuth(authModular), response.mfaInfo);
  }

  return {
    data: {
      email: (response.requestType === "VERIFY_AND_CHANGE_EMAIL"
      /* VERIFY_AND_CHANGE_EMAIL */
      ? response.newEmail : response.email) || null,
      previousEmail: (response.requestType === "VERIFY_AND_CHANGE_EMAIL"
      /* VERIFY_AND_CHANGE_EMAIL */
      ? response.email : response.newEmail) || null,
      multiFactorInfo
    },
    operation
  };
}
/**
 * Checks a password reset code sent to the user by email or other out-of-band mechanism.
 *
 * @returns the user's email address if valid.
 *
 * @param auth - The {@link Auth} instance.
 * @param code - A verification code sent to the user.
 *
 * @public
 */


async function verifyPasswordResetCode(auth, code) {
  const {
    data
  } = await checkActionCode((0, _util.getModularInstance)(auth), code); // Email should always be present since a code was sent to it

  return data.email;
}
/**
 * Creates a new user account associated with the specified email address and password.
 *
 * @remarks
 * On successful creation of the user account, this user will also be signed in to your application.
 *
 * User account creation can fail if the account already exists or the password is invalid.
 *
 * Note: The email address acts as a unique identifier for the user and enables an email-based
 * password reset. This function will create a new user account and set the initial user password.
 *
 * @param auth - The {@link Auth} instance.
 * @param email - The user's email address.
 * @param password - The user's chosen password.
 *
 * @public
 */


async function createUserWithEmailAndPassword(auth, email, password) {
  const authInternal = _castAuth(auth);

  const response = await signUp(authInternal, {
    returnSecureToken: true,
    email,
    password
  });
  const userCredential = await UserCredentialImpl._fromIdTokenResponse(authInternal, "signIn"
  /* SIGN_IN */
  , response);
  await authInternal._updateCurrentUser(userCredential.user);
  return userCredential;
}
/**
 * Asynchronously signs in using an email and password.
 *
 * @remarks
 * Fails with an error if the email address and password do not match.
 *
 * Note: The user's password is NOT the password used to access the user's email account. The
 * email address serves as a unique identifier for the user, and the password is used to access
 * the user's account in your Firebase project. See also: {@link createUserWithEmailAndPassword}.
 *
 * @param auth - The {@link Auth} instance.
 * @param email - The users email address.
 * @param password - The users password.
 *
 * @public
 */


function signInWithEmailAndPassword(auth, email, password) {
  return signInWithCredential((0, _util.getModularInstance)(auth), EmailAuthProvider.credential(email, password));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Sends a sign-in email link to the user with the specified email.
 *
 * @remarks
 * The sign-in operation has to always be completed in the app unlike other out of band email
 * actions (password reset and email verifications). This is because, at the end of the flow,
 * the user is expected to be signed in and their Auth state persisted within the app.
 *
 * To complete sign in with the email link, call {@link signInWithEmailLink} with the email
 * address and the email link supplied in the email sent to the user.
 *
 * @example
 * ```javascript
 * const actionCodeSettings = {
 *   url: 'https://www.example.com/?email=user@example.com',
 *   iOS: {
 *      bundleId: 'com.example.ios'
 *   },
 *   android: {
 *     packageName: 'com.example.android',
 *     installApp: true,
 *     minimumVersion: '12'
 *   },
 *   handleCodeInApp: true
 * };
 * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);
 * // Obtain emailLink from the user.
 * if(isSignInWithEmailLink(auth, emailLink)) {
 *   await signInWithEmailLink('user@example.com', 'user@example.com', emailLink);
 * }
 * ```
 *
 * @param authInternal - The {@link Auth} instance.
 * @param email - The user's email address.
 * @param actionCodeSettings - The {@link ActionCodeSettings}.
 *
 * @public
 */


async function sendSignInLinkToEmail(auth, email, actionCodeSettings) {
  const authModular = (0, _util.getModularInstance)(auth);
  const request = {
    requestType: "EMAIL_SIGNIN"
    /* EMAIL_SIGNIN */
    ,
    email
  };

  _assert(actionCodeSettings.handleCodeInApp, authModular, "argument-error"
  /* ARGUMENT_ERROR */
  );

  if (actionCodeSettings) {
    _setActionCodeSettingsOnRequest(authModular, request, actionCodeSettings);
  }

  await sendSignInLinkToEmail$1(authModular, request);
}
/**
 * Checks if an incoming link is a sign-in with email link suitable for {@link signInWithEmailLink}.
 *
 * @param auth - The {@link Auth} instance.
 * @param emailLink - The link sent to the user's email address.
 *
 * @public
 */


function isSignInWithEmailLink(auth, emailLink) {
  const actionCodeUrl = ActionCodeURL.parseLink(emailLink);
  return (actionCodeUrl === null || actionCodeUrl === void 0 ? void 0 : actionCodeUrl.operation) === "EMAIL_SIGNIN"
  /* EMAIL_SIGNIN */
  ;
}
/**
 * Asynchronously signs in using an email and sign-in email link.
 *
 * @remarks
 * If no link is passed, the link is inferred from the current URL.
 *
 * Fails with an error if the email address is invalid or OTP in email link expires.
 *
 * Note: Confirm the link is a sign-in email link before calling this method firebase.auth.Auth.isSignInWithEmailLink.
 *
 * @example
 * ```javascript
 * const actionCodeSettings = {
 *   url: 'https://www.example.com/?email=user@example.com',
 *   iOS: {
 *      bundleId: 'com.example.ios'
 *   },
 *   android: {
 *     packageName: 'com.example.android',
 *     installApp: true,
 *     minimumVersion: '12'
 *   },
 *   handleCodeInApp: true
 * };
 * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);
 * // Obtain emailLink from the user.
 * if(isSignInWithEmailLink(auth, emailLink)) {
 *   await signInWithEmailLink('user@example.com', 'user@example.com', emailLink);
 * }
 * ```
 *
 * @param auth - The {@link Auth} instance.
 * @param email - The user's email address.
 * @param emailLink - The link sent to the user's email address.
 *
 * @public
 */


async function signInWithEmailLink(auth, email, emailLink) {
  const authModular = (0, _util.getModularInstance)(auth);
  const credential = EmailAuthProvider.credentialWithLink(email, emailLink || _getCurrentUrl()); // Check if the tenant ID in the email link matches the tenant ID on Auth
  // instance.

  _assert(credential._tenantId === (authModular.tenantId || null), authModular, "tenant-id-mismatch"
  /* TENANT_ID_MISMATCH */
  );

  return signInWithCredential(authModular, credential);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


async function createAuthUri(auth, request) {
  return _performApiRequest(auth, "POST"
  /* POST */
  , "/v1/accounts:createAuthUri"
  /* CREATE_AUTH_URI */
  , _addTidIfNecessary(auth, request));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Gets the list of possible sign in methods for the given email address.
 *
 * @remarks
 * This is useful to differentiate methods of sign-in for the same provider, eg.
 * {@link EmailAuthProvider} which has 2 methods of sign-in,
 * {@link SignInMethod}.EMAIL_PASSWORD and
 * {@link SignInMethod}.EMAIL_LINK.
 *
 * @param auth - The {@link Auth} instance.
 * @param email - The user's email address.
 *
 * @public
 */


async function fetchSignInMethodsForEmail(auth, email) {
  // createAuthUri returns an error if continue URI is not http or https.
  // For environments like Cordova, Chrome extensions, native frameworks, file
  // systems, etc, use http://localhost as continue URL.
  const continueUri = _isHttpOrHttps() ? _getCurrentUrl() : 'http://localhost';
  const request = {
    identifier: email,
    continueUri
  };
  const {
    signinMethods
  } = await createAuthUri((0, _util.getModularInstance)(auth), request);
  return signinMethods || [];
}
/**
 * Sends a verification email to a user.
 *
 * @remarks
 * The verification process is completed by calling {@link applyActionCode}.
 *
 * @example
 * ```javascript
 * const actionCodeSettings = {
 *   url: 'https://www.example.com/?email=user@example.com',
 *   iOS: {
 *      bundleId: 'com.example.ios'
 *   },
 *   android: {
 *     packageName: 'com.example.android',
 *     installApp: true,
 *     minimumVersion: '12'
 *   },
 *   handleCodeInApp: true
 * };
 * await sendEmailVerification(user, actionCodeSettings);
 * // Obtain code from the user.
 * await applyActionCode(auth, code);
 * ```
 *
 * @param user - The user.
 * @param actionCodeSettings - The {@link ActionCodeSettings}.
 *
 * @public
 */


async function sendEmailVerification(user, actionCodeSettings) {
  const userInternal = (0, _util.getModularInstance)(user);
  const idToken = await user.getIdToken();
  const request = {
    requestType: "VERIFY_EMAIL"
    /* VERIFY_EMAIL */
    ,
    idToken
  };

  if (actionCodeSettings) {
    _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);
  }

  const {
    email
  } = await sendEmailVerification$1(userInternal.auth, request);

  if (email !== user.email) {
    await user.reload();
  }
}
/**
 * Sends a verification email to a new email address.
 *
 * @remarks
 * The user's email will be updated to the new one after being verified.
 *
 * If you have a custom email action handler, you can complete the verification process by calling
 * {@link applyActionCode}.
 *
 * @example
 * ```javascript
 * const actionCodeSettings = {
 *   url: 'https://www.example.com/?email=user@example.com',
 *   iOS: {
 *      bundleId: 'com.example.ios'
 *   },
 *   android: {
 *     packageName: 'com.example.android',
 *     installApp: true,
 *     minimumVersion: '12'
 *   },
 *   handleCodeInApp: true
 * };
 * await verifyBeforeUpdateEmail(user, 'newemail@example.com', actionCodeSettings);
 * // Obtain code from the user.
 * await applyActionCode(auth, code);
 * ```
 *
 * @param user - The user.
 * @param newEmail - The new email address to be verified before update.
 * @param actionCodeSettings - The {@link ActionCodeSettings}.
 *
 * @public
 */


async function verifyBeforeUpdateEmail(user, newEmail, actionCodeSettings) {
  const userInternal = (0, _util.getModularInstance)(user);
  const idToken = await user.getIdToken();
  const request = {
    requestType: "VERIFY_AND_CHANGE_EMAIL"
    /* VERIFY_AND_CHANGE_EMAIL */
    ,
    idToken,
    newEmail
  };

  if (actionCodeSettings) {
    _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);
  }

  const {
    email
  } = await verifyAndChangeEmail(userInternal.auth, request);

  if (email !== user.email) {
    // If the local copy of the email on user is outdated, reload the
    // user.
    await user.reload();
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


async function updateProfile$1(auth, request) {
  return _performApiRequest(auth, "POST"
  /* POST */
  , "/v1/accounts:update"
  /* SET_ACCOUNT_INFO */
  , request);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Updates a user's profile data.
 *
 * @param user - The user.
 * @param profile - The profile's `displayName` and `photoURL` to update.
 *
 * @public
 */


async function updateProfile(user, {
  displayName,
  photoURL: photoUrl
}) {
  if (displayName === undefined && photoUrl === undefined) {
    return;
  }

  const userInternal = (0, _util.getModularInstance)(user);
  const idToken = await userInternal.getIdToken();
  const profileRequest = {
    idToken,
    displayName,
    photoUrl,
    returnSecureToken: true
  };
  const response = await _logoutIfInvalidated(userInternal, updateProfile$1(userInternal.auth, profileRequest));
  userInternal.displayName = response.displayName || null;
  userInternal.photoURL = response.photoUrl || null; // Update the password provider as well

  const passwordProvider = userInternal.providerData.find(({
    providerId
  }) => providerId === "password"
  /* PASSWORD */
  );

  if (passwordProvider) {
    passwordProvider.displayName = userInternal.displayName;
    passwordProvider.photoURL = userInternal.photoURL;
  }

  await userInternal._updateTokensIfNecessary(response);
}
/**
 * Updates the user's email address.
 *
 * @remarks
 * An email will be sent to the original email address (if it was set) that allows to revoke the
 * email address change, in order to protect them from account hijacking.
 *
 * Important: this is a security sensitive operation that requires the user to have recently signed
 * in. If this requirement isn't met, ask the user to authenticate again and then call
 * {@link reauthenticateWithCredential}.
 *
 * @param user - The user.
 * @param newEmail - The new email address.
 *
 * @public
 */


function updateEmail(user, newEmail) {
  return updateEmailOrPassword((0, _util.getModularInstance)(user), newEmail, null);
}
/**
 * Updates the user's password.
 *
 * @remarks
 * Important: this is a security sensitive operation that requires the user to have recently signed
 * in. If this requirement isn't met, ask the user to authenticate again and then call
 * {@link reauthenticateWithCredential}.
 *
 * @param user - The user.
 * @param newPassword - The new password.
 *
 * @public
 */


function updatePassword(user, newPassword) {
  return updateEmailOrPassword((0, _util.getModularInstance)(user), null, newPassword);
}

async function updateEmailOrPassword(user, email, password) {
  const {
    auth
  } = user;
  const idToken = await user.getIdToken();
  const request = {
    idToken,
    returnSecureToken: true
  };

  if (email) {
    request.email = email;
  }

  if (password) {
    request.password = password;
  }

  const response = await _logoutIfInvalidated(user, updateEmailPassword(auth, request));
  await user._updateTokensIfNecessary(response,
  /* reload */
  true);
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Parse the `AdditionalUserInfo` from the ID token response.
 *
 */


function _fromIdTokenResponse(idTokenResponse) {
  var _a, _b;

  if (!idTokenResponse) {
    return null;
  }

  const {
    providerId
  } = idTokenResponse;
  const profile = idTokenResponse.rawUserInfo ? JSON.parse(idTokenResponse.rawUserInfo) : {};
  const isNewUser = idTokenResponse.isNewUser || idTokenResponse.kind === "identitytoolkit#SignupNewUserResponse"
  /* SignupNewUser */
  ;

  if (!providerId && (idTokenResponse === null || idTokenResponse === void 0 ? void 0 : idTokenResponse.idToken)) {
    const signInProvider = (_b = (_a = _parseToken(idTokenResponse.idToken)) === null || _a === void 0 ? void 0 : _a.firebase) === null || _b === void 0 ? void 0 : _b['sign_in_provider'];

    if (signInProvider) {
      const filteredProviderId = signInProvider !== "anonymous"
      /* ANONYMOUS */
      && signInProvider !== "custom"
      /* CUSTOM */
      ? signInProvider : null; // Uses generic class in accordance with the legacy SDK.

      return new GenericAdditionalUserInfo(isNewUser, filteredProviderId);
    }
  }

  if (!providerId) {
    return null;
  }

  switch (providerId) {
    case "facebook.com"
    /* FACEBOOK */
    :
      return new FacebookAdditionalUserInfo(isNewUser, profile);

    case "github.com"
    /* GITHUB */
    :
      return new GithubAdditionalUserInfo(isNewUser, profile);

    case "google.com"
    /* GOOGLE */
    :
      return new GoogleAdditionalUserInfo(isNewUser, profile);

    case "twitter.com"
    /* TWITTER */
    :
      return new TwitterAdditionalUserInfo(isNewUser, profile, idTokenResponse.screenName || null);

    case "custom"
    /* CUSTOM */
    :
    case "anonymous"
    /* ANONYMOUS */
    :
      return new GenericAdditionalUserInfo(isNewUser, null);

    default:
      return new GenericAdditionalUserInfo(isNewUser, providerId, profile);
  }
}

class GenericAdditionalUserInfo {
  constructor(isNewUser, providerId, profile = {}) {
    this.isNewUser = isNewUser;
    this.providerId = providerId;
    this.profile = profile;
  }

}

class FederatedAdditionalUserInfoWithUsername extends GenericAdditionalUserInfo {
  constructor(isNewUser, providerId, profile, username) {
    super(isNewUser, providerId, profile);
    this.username = username;
  }

}

class FacebookAdditionalUserInfo extends GenericAdditionalUserInfo {
  constructor(isNewUser, profile) {
    super(isNewUser, "facebook.com"
    /* FACEBOOK */
    , profile);
  }

}

class GithubAdditionalUserInfo extends FederatedAdditionalUserInfoWithUsername {
  constructor(isNewUser, profile) {
    super(isNewUser, "github.com"
    /* GITHUB */
    , profile, typeof (profile === null || profile === void 0 ? void 0 : profile.login) === 'string' ? profile === null || profile === void 0 ? void 0 : profile.login : null);
  }

}

class GoogleAdditionalUserInfo extends GenericAdditionalUserInfo {
  constructor(isNewUser, profile) {
    super(isNewUser, "google.com"
    /* GOOGLE */
    , profile);
  }

}

class TwitterAdditionalUserInfo extends FederatedAdditionalUserInfoWithUsername {
  constructor(isNewUser, profile, screenName) {
    super(isNewUser, "twitter.com"
    /* TWITTER */
    , profile, screenName);
  }

}
/**
 * Extracts provider specific {@link AdditionalUserInfo} for the given credential.
 *
 * @param userCredential - The user credential.
 *
 * @public
 */


function getAdditionalUserInfo(userCredential) {
  const {
    user,
    _tokenResponse
  } = userCredential;

  if (user.isAnonymous && !_tokenResponse) {
    // Handle the special case where signInAnonymously() gets called twice.
    // No network call is made so there's nothing to actually fill this in
    return {
      providerId: null,
      isNewUser: false,
      profile: null
    };
  }

  return _fromIdTokenResponse(_tokenResponse);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Non-optional auth methods.

/**
 * Changes the type of persistence on the {@link Auth} instance for the currently saved
 * `Auth` session and applies this type of persistence for future sign-in requests, including
 * sign-in with redirect requests.
 *
 * @remarks
 * This makes it easy for a user signing in to specify whether their session should be
 * remembered or not. It also makes it easier to never persist the `Auth` state for applications
 * that are shared by other users or have sensitive data.
 *
 * @example
 * ```javascript
 * setPersistence(auth, browserSessionPersistence);
 * ```
 *
 * @param auth - The {@link Auth} instance.
 * @param persistence - The {@link Persistence} to use.
 * @returns A `Promise` that resolves once the persistence change has completed
 *
 * @public
 */


function setPersistence(auth, persistence) {
  return (0, _util.getModularInstance)(auth).setPersistence(persistence);
}
/**
 * Adds an observer for changes to the signed-in user's ID token, which includes sign-in,
 * sign-out, and token refresh events.
 *
 * @param auth - The {@link Auth} instance.
 * @param nextOrObserver - callback triggered on change.
 * @param error - callback triggered on error.
 * @param completed - callback triggered when observer is removed.
 *
 * @public
 */


function onIdTokenChanged(auth, nextOrObserver, error, completed) {
  return (0, _util.getModularInstance)(auth).onIdTokenChanged(nextOrObserver, error, completed);
}
/**
 * Adds an observer for changes to the user's sign-in state.
 *
 * @remarks
 * To keep the old behavior, see {@link onIdTokenChanged}.
 *
 * @param auth - The {@link Auth} instance.
 * @param nextOrObserver - callback triggered on change.
 * @param error - callback triggered on error.
 * @param completed - callback triggered when observer is removed.
 *
 * @public
 */


function onAuthStateChanged(auth, nextOrObserver, error, completed) {
  return (0, _util.getModularInstance)(auth).onAuthStateChanged(nextOrObserver, error, completed);
}
/**
 * Sets the current language to the default device/browser preference.
 *
 * @param auth - The {@link Auth} instance.
 *
 * @public
 */


function useDeviceLanguage(auth) {
  (0, _util.getModularInstance)(auth).useDeviceLanguage();
}
/**
 * Asynchronously sets the provided user as {@link Auth.currentUser} on the
 * {@link Auth} instance.
 *
 * @remarks
 * A new instance copy of the user provided will be made and set as currentUser.
 *
 * This will trigger {@link onAuthStateChanged} and {@link onIdTokenChanged} listeners
 * like other sign in methods.
 *
 * The operation fails with an error if the user to be updated belongs to a different Firebase
 * project.
 *
 * @param auth - The {@link Auth} instance.
 * @param user - The new {@link User}.
 *
 * @public
 */


function updateCurrentUser(auth, user) {
  return (0, _util.getModularInstance)(auth).updateCurrentUser(user);
}
/**
 * Signs out the current user.
 *
 * @param auth - The {@link Auth} instance.
 *
 * @public
 */


function signOut(auth) {
  return (0, _util.getModularInstance)(auth).signOut();
}
/**
 * Deletes and signs out the user.
 *
 * @remarks
 * Important: this is a security-sensitive operation that requires the user to have recently
 * signed in. If this requirement isn't met, ask the user to authenticate again and then call
 * {@link reauthenticateWithCredential}.
 *
 * @param user - The user.
 *
 * @public
 */


async function deleteUser(user) {
  return (0, _util.getModularInstance)(user).delete();
}

class MultiFactorSessionImpl {
  constructor(type, credential) {
    this.type = type;
    this.credential = credential;
  }

  static _fromIdtoken(idToken) {
    return new MultiFactorSessionImpl("enroll"
    /* ENROLL */
    , idToken);
  }

  static _fromMfaPendingCredential(mfaPendingCredential) {
    return new MultiFactorSessionImpl("signin"
    /* SIGN_IN */
    , mfaPendingCredential);
  }

  toJSON() {
    const key = this.type === "enroll"
    /* ENROLL */
    ? 'idToken' : 'pendingCredential';
    return {
      multiFactorSession: {
        [key]: this.credential
      }
    };
  }

  static fromJSON(obj) {
    var _a, _b;

    if (obj === null || obj === void 0 ? void 0 : obj.multiFactorSession) {
      if ((_a = obj.multiFactorSession) === null || _a === void 0 ? void 0 : _a.pendingCredential) {
        return MultiFactorSessionImpl._fromMfaPendingCredential(obj.multiFactorSession.pendingCredential);
      } else if ((_b = obj.multiFactorSession) === null || _b === void 0 ? void 0 : _b.idToken) {
        return MultiFactorSessionImpl._fromIdtoken(obj.multiFactorSession.idToken);
      }
    }

    return null;
  }

}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


class MultiFactorResolverImpl {
  constructor(session, hints, signInResolver) {
    this.session = session;
    this.hints = hints;
    this.signInResolver = signInResolver;
  }
  /** @internal */


  static _fromError(authExtern, error) {
    const auth = _castAuth(authExtern);

    const hints = (error.serverResponse.mfaInfo || []).map(enrollment => MultiFactorInfoImpl._fromServerResponse(auth, enrollment));

    _assert(error.serverResponse.mfaPendingCredential, auth, "internal-error"
    /* INTERNAL_ERROR */
    );

    const session = MultiFactorSessionImpl._fromMfaPendingCredential(error.serverResponse.mfaPendingCredential);

    return new MultiFactorResolverImpl(session, hints, async assertion => {
      const mfaResponse = await assertion._process(auth, session); // Clear out the unneeded fields from the old login response

      delete error.serverResponse.mfaInfo;
      delete error.serverResponse.mfaPendingCredential; // Use in the new token & refresh token in the old response

      const idTokenResponse = Object.assign(Object.assign({}, error.serverResponse), {
        idToken: mfaResponse.idToken,
        refreshToken: mfaResponse.refreshToken
      }); // TODO: we should collapse this switch statement into UserCredentialImpl._forOperation and have it support the SIGN_IN case

      switch (error.operationType) {
        case "signIn"
        /* SIGN_IN */
        :
          const userCredential = await UserCredentialImpl._fromIdTokenResponse(auth, error.operationType, idTokenResponse);
          await auth._updateCurrentUser(userCredential.user);
          return userCredential;

        case "reauthenticate"
        /* REAUTHENTICATE */
        :
          _assert(error.user, auth, "internal-error"
          /* INTERNAL_ERROR */
          );

          return UserCredentialImpl._forOperation(error.user, error.operationType, idTokenResponse);

        default:
          _fail(auth, "internal-error"
          /* INTERNAL_ERROR */
          );

      }
    });
  }

  async resolveSignIn(assertionExtern) {
    const assertion = assertionExtern;
    return this.signInResolver(assertion);
  }

}
/**
 * Provides a {@link MultiFactorResolver} suitable for completion of a
 * multi-factor flow.
 *
 * @param auth - The {@link Auth} instance.
 * @param error - The {@link MultiFactorError} raised during a sign-in, or
 * reauthentication operation.
 *
 * @public
 */


function getMultiFactorResolver(auth, error) {
  var _a;

  const authModular = (0, _util.getModularInstance)(auth);
  const errorInternal = error;

  _assert(error.operationType, authModular, "argument-error"
  /* ARGUMENT_ERROR */
  );

  _assert((_a = errorInternal.serverResponse) === null || _a === void 0 ? void 0 : _a.mfaPendingCredential, authModular, "argument-error"
  /* ARGUMENT_ERROR */
  );

  return MultiFactorResolverImpl._fromError(authModular, errorInternal);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function startEnrollPhoneMfa(auth, request) {
  return _performApiRequest(auth, "POST"
  /* POST */
  , "/v2/accounts/mfaEnrollment:start"
  /* START_PHONE_MFA_ENROLLMENT */
  , Object.assign({
    tenantId: auth.tenantId
  }, request));
}

function finalizeEnrollPhoneMfa(auth, request) {
  return _performApiRequest(auth, "POST"
  /* POST */
  , "/v2/accounts/mfaEnrollment:finalize"
  /* FINALIZE_PHONE_MFA_ENROLLMENT */
  , Object.assign({
    tenantId: auth.tenantId
  }, request));
}

function withdrawMfa(auth, request) {
  return _performApiRequest(auth, "POST"
  /* POST */
  , "/v2/accounts/mfaEnrollment:withdraw"
  /* WITHDRAW_MFA */
  , Object.assign({
    tenantId: auth.tenantId
  }, request));
}

class MultiFactorUserImpl {
  constructor(user) {
    this.user = user;
    this.enrolledFactors = [];

    user._onReload(userInfo => {
      if (userInfo.mfaInfo) {
        this.enrolledFactors = userInfo.mfaInfo.map(enrollment => MultiFactorInfoImpl._fromServerResponse(user.auth, enrollment));
      }
    });
  }

  static _fromUser(user) {
    return new MultiFactorUserImpl(user);
  }

  async getSession() {
    return MultiFactorSessionImpl._fromIdtoken(await this.user.getIdToken());
  }

  async enroll(assertionExtern, displayName) {
    const assertion = assertionExtern;
    const session = await this.getSession();
    const finalizeMfaResponse = await _logoutIfInvalidated(this.user, assertion._process(this.user.auth, session, displayName)); // New tokens will be issued after enrollment of the new second factors.
    // They need to be updated on the user.

    await this.user._updateTokensIfNecessary(finalizeMfaResponse); // The user needs to be reloaded to get the new multi-factor information
    // from server. USER_RELOADED event will be triggered and `enrolledFactors`
    // will be updated.

    return this.user.reload();
  }

  async unenroll(infoOrUid) {
    const mfaEnrollmentId = typeof infoOrUid === 'string' ? infoOrUid : infoOrUid.uid;
    const idToken = await this.user.getIdToken();
    const idTokenResponse = await _logoutIfInvalidated(this.user, withdrawMfa(this.user.auth, {
      idToken,
      mfaEnrollmentId
    })); // Remove the second factor from the user's list.

    this.enrolledFactors = this.enrolledFactors.filter(({
      uid
    }) => uid !== mfaEnrollmentId); // Depending on whether the backend decided to revoke the user's session,
    // the tokenResponse may be empty. If the tokens were not updated (and they
    // are now invalid), reloading the user will discover this and invalidate
    // the user's state accordingly.

    await this.user._updateTokensIfNecessary(idTokenResponse);

    try {
      await this.user.reload();
    } catch (e) {
      if (e.code !== `auth/${"user-token-expired"
      /* TOKEN_EXPIRED */
      }`) {
        throw e;
      }
    }
  }

}

const multiFactorUserCache = new WeakMap();
/**
 * The {@link MultiFactorUser} corresponding to the user.
 *
 * @remarks
 * This is used to access all multi-factor properties and operations related to the user.
 *
 * @param user - The user.
 *
 * @public
 */

function multiFactor(user) {
  const userModular = (0, _util.getModularInstance)(user);

  if (!multiFactorUserCache.has(userModular)) {
    multiFactorUserCache.set(userModular, MultiFactorUserImpl._fromUser(userModular));
  }

  return multiFactorUserCache.get(userModular);
}

const STORAGE_AVAILABLE_KEY = '__sak';
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// There are two different browser persistence types: local and session.
// Both have the same implementation but use a different underlying storage
// object.

class BrowserPersistenceClass {
  constructor(storage, type) {
    this.storage = storage;
    this.type = type;
  }

  _isAvailable() {
    try {
      if (!this.storage) {
        return Promise.resolve(false);
      }

      this.storage.setItem(STORAGE_AVAILABLE_KEY, '1');
      this.storage.removeItem(STORAGE_AVAILABLE_KEY);
      return Promise.resolve(true);
    } catch (_a) {
      return Promise.resolve(false);
    }
  }

  _set(key, value) {
    this.storage.setItem(key, JSON.stringify(value));
    return Promise.resolve();
  }

  _get(key) {
    const json = this.storage.getItem(key);
    return Promise.resolve(json ? JSON.parse(json) : null);
  }

  _remove(key) {
    this.storage.removeItem(key);
    return Promise.resolve();
  }

}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function _iframeCannotSyncWebStorage() {
  const ua = (0, _util.getUA)();
  return _isSafari(ua) || _isIOS(ua);
} // The polling period in case events are not supported


const _POLLING_INTERVAL_MS$1 = 1000; // The IE 10 localStorage cross tab synchronization delay in milliseconds

const IE10_LOCAL_STORAGE_SYNC_DELAY = 10;

class BrowserLocalPersistence extends BrowserPersistenceClass {
  constructor() {
    super(window.localStorage, "LOCAL"
    /* LOCAL */
    );
    this.listeners = {};
    this.localCache = {}; // setTimeout return value is platform specific
    // eslint-disable-next-line @typescript-eslint/no-explicit-any

    this.pollTimer = null; // Safari or iOS browser and embedded in an iframe.

    this.safariLocalStorageNotSynced = _iframeCannotSyncWebStorage() && _isIframe(); // Whether to use polling instead of depending on window events

    this.fallbackToPolling = _isMobileBrowser();
    this._shouldAllowMigration = true;
    this.boundEventHandler = this.onStorageEvent.bind(this);
  }

  forAllChangedKeys(cb) {
    // Check all keys with listeners on them.
    for (const key of Object.keys(this.listeners)) {
      // Get value from localStorage.
      const newValue = this.storage.getItem(key);
      const oldValue = this.localCache[key]; // If local map value does not match, trigger listener with storage event.
      // Differentiate this simulated event from the real storage event.

      if (newValue !== oldValue) {
        cb(key, oldValue, newValue);
      }
    }
  }

  onStorageEvent(event, poll = false) {
    // Key would be null in some situations, like when localStorage is cleared
    if (!event.key) {
      this.forAllChangedKeys((key, _oldValue, newValue) => {
        this.notifyListeners(key, newValue);
      });
      return;
    }

    const key = event.key; // Check the mechanism how this event was detected.
    // The first event will dictate the mechanism to be used.

    if (poll) {
      // Environment detects storage changes via polling.
      // Remove storage event listener to prevent possible event duplication.
      this.detachListener();
    } else {
      // Environment detects storage changes via storage event listener.
      // Remove polling listener to prevent possible event duplication.
      this.stopPolling();
    } // Safari embedded iframe. Storage event will trigger with the delta
    // changes but no changes will be applied to the iframe localStorage.


    if (this.safariLocalStorageNotSynced) {
      // Get current iframe page value.
      const storedValue = this.storage.getItem(key); // Value not synchronized, synchronize manually.

      if (event.newValue !== storedValue) {
        if (event.newValue !== null) {
          // Value changed from current value.
          this.storage.setItem(key, event.newValue);
        } else {
          // Current value deleted.
          this.storage.removeItem(key);
        }
      } else if (this.localCache[key] === event.newValue && !poll) {
        // Already detected and processed, do not trigger listeners again.
        return;
      }
    }

    const triggerListeners = () => {
      // Keep local map up to date in case storage event is triggered before
      // poll.
      const storedValue = this.storage.getItem(key);

      if (!poll && this.localCache[key] === storedValue) {
        // Real storage event which has already been detected, do nothing.
        // This seems to trigger in some IE browsers for some reason.
        return;
      }

      this.notifyListeners(key, storedValue);
    };

    const storedValue = this.storage.getItem(key);

    if (_isIE10() && storedValue !== event.newValue && event.newValue !== event.oldValue) {
      // IE 10 has this weird bug where a storage event would trigger with the
      // correct key, oldValue and newValue but localStorage.getItem(key) does
      // not yield the updated value until a few milliseconds. This ensures
      // this recovers from that situation.
      setTimeout(triggerListeners, IE10_LOCAL_STORAGE_SYNC_DELAY);
    } else {
      triggerListeners();
    }
  }

  notifyListeners(key, value) {
    this.localCache[key] = value;
    const listeners = this.listeners[key];

    if (listeners) {
      for (const listener of Array.from(listeners)) {
        listener(value ? JSON.parse(value) : value);
      }
    }
  }

  startPolling() {
    this.stopPolling();
    this.pollTimer = setInterval(() => {
      this.forAllChangedKeys((key, oldValue, newValue) => {
        this.onStorageEvent(new StorageEvent('storage', {
          key,
          oldValue,
          newValue
        }),
        /* poll */
        true);
      });
    }, _POLLING_INTERVAL_MS$1);
  }

  stopPolling() {
    if (this.pollTimer) {
      clearInterval(this.pollTimer);
      this.pollTimer = null;
    }
  }

  attachListener() {
    window.addEventListener('storage', this.boundEventHandler);
  }

  detachListener() {
    window.removeEventListener('storage', this.boundEventHandler);
  }

  _addListener(key, listener) {
    if (Object.keys(this.listeners).length === 0) {
      // Whether browser can detect storage event when it had already been pushed to the background.
      // This may happen in some mobile browsers. A localStorage change in the foreground window
      // will not be detected in the background window via the storage event.
      // This was detected in iOS 7.x mobile browsers
      if (this.fallbackToPolling) {
        this.startPolling();
      } else {
        this.attachListener();
      }
    }

    if (!this.listeners[key]) {
      this.listeners[key] = new Set(); // Populate the cache to avoid spuriously triggering on first poll.

      this.localCache[key] = this.storage.getItem(key);
    }

    this.listeners[key].add(listener);
  }

  _removeListener(key, listener) {
    if (this.listeners[key]) {
      this.listeners[key].delete(listener);

      if (this.listeners[key].size === 0) {
        delete this.listeners[key];
      }
    }

    if (Object.keys(this.listeners).length === 0) {
      this.detachListener();
      this.stopPolling();
    }
  } // Update local cache on base operations:


  async _set(key, value) {
    await super._set(key, value);
    this.localCache[key] = JSON.stringify(value);
  }

  async _get(key) {
    const value = await super._get(key);
    this.localCache[key] = JSON.stringify(value);
    return value;
  }

  async _remove(key) {
    await super._remove(key);
    delete this.localCache[key];
  }

}

BrowserLocalPersistence.type = 'LOCAL';
/**
 * An implementation of {@link Persistence} of type `LOCAL` using `localStorage`
 * for the underlying storage.
 *
 * @public
 */

const browserLocalPersistence = BrowserLocalPersistence;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

exports.b = browserLocalPersistence;

class BrowserSessionPersistence extends BrowserPersistenceClass {
  constructor() {
    super(window.sessionStorage, "SESSION"
    /* SESSION */
    );
  }

  _addListener(_key, _listener) {
    // Listeners are not supported for session storage since it cannot be shared across windows
    return;
  }

  _removeListener(_key, _listener) {
    // Listeners are not supported for session storage since it cannot be shared across windows
    return;
  }

}

BrowserSessionPersistence.type = 'SESSION';
/**
 * An implementation of {@link Persistence} of `SESSION` using `sessionStorage`
 * for the underlying storage.
 *
 * @public
 */

const browserSessionPersistence = BrowserSessionPersistence;
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Shim for Promise.allSettled, note the slightly different format of `fulfilled` vs `status`.
 *
 * @param promises - Array of promises to wait on.
 */

exports.a = browserSessionPersistence;

function _allSettled(promises) {
  return Promise.all(promises.map(async promise => {
    try {
      const value = await promise;
      return {
        fulfilled: true,
        value
      };
    } catch (reason) {
      return {
        fulfilled: false,
        reason
      };
    }
  }));
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Interface class for receiving messages.
 *
 */


class Receiver {
  constructor(eventTarget) {
    this.eventTarget = eventTarget;
    this.handlersMap = {};
    this.boundEventHandler = this.handleEvent.bind(this);
  }
  /**
   * Obtain an instance of a Receiver for a given event target, if none exists it will be created.
   *
   * @param eventTarget - An event target (such as window or self) through which the underlying
   * messages will be received.
   */


  static _getInstance(eventTarget) {
    // The results are stored in an array since objects can't be keys for other
    // objects. In addition, setting a unique property on an event target as a
    // hash map key may not be allowed due to CORS restrictions.
    const existingInstance = this.receivers.find(receiver => receiver.isListeningto(eventTarget));

    if (existingInstance) {
      return existingInstance;
    }

    const newInstance = new Receiver(eventTarget);
    this.receivers.push(newInstance);
    return newInstance;
  }

  isListeningto(eventTarget) {
    return this.eventTarget === eventTarget;
  }
  /**
   * Fans out a MessageEvent to the appropriate listeners.
   *
   * @remarks
   * Sends an {@link Status.ACK} upon receipt and a {@link Status.DONE} once all handlers have
   * finished processing.
   *
   * @param event - The MessageEvent.
   *
   */


  async handleEvent(event) {
    const messageEvent = event;
    const {
      eventId,
      eventType,
      data
    } = messageEvent.data;
    const handlers = this.handlersMap[eventType];

    if (!(handlers === null || handlers === void 0 ? void 0 : handlers.size)) {
      return;
    }

    messageEvent.ports[0].postMessage({
      status: "ack"
      /* ACK */
      ,
      eventId,
      eventType
    });
    const promises = Array.from(handlers).map(async handler => handler(messageEvent.origin, data));
    const response = await _allSettled(promises);
    messageEvent.ports[0].postMessage({
      status: "done"
      /* DONE */
      ,
      eventId,
      eventType,
      response
    });
  }
  /**
   * Subscribe an event handler for a particular event.
   *
   * @param eventType - Event name to subscribe to.
   * @param eventHandler - The event handler which should receive the events.
   *
   */


  _subscribe(eventType, eventHandler) {
    if (Object.keys(this.handlersMap).length === 0) {
      this.eventTarget.addEventListener('message', this.boundEventHandler);
    }

    if (!this.handlersMap[eventType]) {
      this.handlersMap[eventType] = new Set();
    }

    this.handlersMap[eventType].add(eventHandler);
  }
  /**
   * Unsubscribe an event handler from a particular event.
   *
   * @param eventType - Event name to unsubscribe from.
   * @param eventHandler - Optinoal event handler, if none provided, unsubscribe all handlers on this event.
   *
   */


  _unsubscribe(eventType, eventHandler) {
    if (this.handlersMap[eventType] && eventHandler) {
      this.handlersMap[eventType].delete(eventHandler);
    }

    if (!eventHandler || this.handlersMap[eventType].size === 0) {
      delete this.handlersMap[eventType];
    }

    if (Object.keys(this.handlersMap).length === 0) {
      this.eventTarget.removeEventListener('message', this.boundEventHandler);
    }
  }

}

Receiver.receivers = [];
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function _generateEventId(prefix = '', digits = 10) {
  let random = '';

  for (let i = 0; i < digits; i++) {
    random += Math.floor(Math.random() * 10);
  }

  return prefix + random;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Interface for sending messages and waiting for a completion response.
 *
 */


class Sender {
  constructor(target) {
    this.target = target;
    this.handlers = new Set();
  }
  /**
   * Unsubscribe the handler and remove it from our tracking Set.
   *
   * @param handler - The handler to unsubscribe.
   */


  removeMessageHandler(handler) {
    if (handler.messageChannel) {
      handler.messageChannel.port1.removeEventListener('message', handler.onMessage);
      handler.messageChannel.port1.close();
    }

    this.handlers.delete(handler);
  }
  /**
   * Send a message to the Receiver located at {@link target}.
   *
   * @remarks
   * We'll first wait a bit for an ACK , if we get one we will wait significantly longer until the
   * receiver has had a chance to fully process the event.
   *
   * @param eventType - Type of event to send.
   * @param data - The payload of the event.
   * @param timeout - Timeout for waiting on an ACK from the receiver.
   *
   * @returns An array of settled promises from all the handlers that were listening on the receiver.
   */


  async _send(eventType, data, timeout = 50
  /* ACK */
  ) {
    const messageChannel = typeof MessageChannel !== 'undefined' ? new MessageChannel() : null;

    if (!messageChannel) {
      throw new Error("connection_unavailable"
      /* CONNECTION_UNAVAILABLE */
      );
    } // Node timers and browser timers return fundamentally different types.
    // We don't actually care what the value is but TS won't accept unknown and
    // we can't cast properly in both environments.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any


    let completionTimer;
    let handler;
    return new Promise((resolve, reject) => {
      const eventId = _generateEventId('', 20);

      messageChannel.port1.start();
      const ackTimer = setTimeout(() => {
        reject(new Error("unsupported_event"
        /* UNSUPPORTED_EVENT */
        ));
      }, timeout);
      handler = {
        messageChannel,

        onMessage(event) {
          const messageEvent = event;

          if (messageEvent.data.eventId !== eventId) {
            return;
          }

          switch (messageEvent.data.status) {
            case "ack"
            /* ACK */
            :
              // The receiver should ACK first.
              clearTimeout(ackTimer);
              completionTimer = setTimeout(() => {
                reject(new Error("timeout"
                /* TIMEOUT */
                ));
              }, 3000
              /* COMPLETION */
              );
              break;

            case "done"
            /* DONE */
            :
              // Once the receiver's handlers are finished we will get the results.
              clearTimeout(completionTimer);
              resolve(messageEvent.data.response);
              break;

            default:
              clearTimeout(ackTimer);
              clearTimeout(completionTimer);
              reject(new Error("invalid_response"
              /* INVALID_RESPONSE */
              ));
              break;
          }
        }

      };
      this.handlers.add(handler);
      messageChannel.port1.addEventListener('message', handler.onMessage);
      this.target.postMessage({
        eventType,
        eventId,
        data
      }, [messageChannel.port2]);
    }).finally(() => {
      if (handler) {
        this.removeMessageHandler(handler);
      }
    });
  }

}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Lazy accessor for window, since the compat layer won't tree shake this out,
 * we need to make sure not to mess with window unless we have to
 */


function _window() {
  return window;
}

function _setWindowLocation(url) {
  _window().location.href = url;
}
/**
 * @license
 * Copyright 2020 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function _isWorker() {
  return typeof _window()['WorkerGlobalScope'] !== 'undefined' && typeof _window()['importScripts'] === 'function';
}

async function _getActiveServiceWorker() {
  if (!(navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker)) {
    return null;
  }

  try {
    const registration = await navigator.serviceWorker.ready;
    return registration.active;
  } catch (_a) {
    return null;
  }
}

function _getServiceWorkerController() {
  var _a;

  return ((_a = navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker) === null || _a === void 0 ? void 0 : _a.controller) || null;
}

function _getWorkerGlobalScope() {
  return _isWorker() ? self : null;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const DB_NAME = 'firebaseLocalStorageDb';
const DB_VERSION = 1;
const DB_OBJECTSTORE_NAME = 'firebaseLocalStorage';
const DB_DATA_KEYPATH = 'fbase_key';
/**
 * Promise wrapper for IDBRequest
 *
 * Unfortunately we can't cleanly extend Promise<T> since promises are not callable in ES6
 *
 */

class DBPromise {
  constructor(request) {
    this.request = request;
  }

  toPromise() {
    return new Promise((resolve, reject) => {
      this.request.addEventListener('success', () => {
        resolve(this.request.result);
      });
      this.request.addEventListener('error', () => {
        reject(this.request.error);
      });
    });
  }

}

function getObjectStore(db, isReadWrite) {
  return db.transaction([DB_OBJECTSTORE_NAME], isReadWrite ? 'readwrite' : 'readonly').objectStore(DB_OBJECTSTORE_NAME);
}

function _deleteDatabase() {
  const request = indexedDB.deleteDatabase(DB_NAME);
  return new DBPromise(request).toPromise();
}

function _openDatabase() {
  const request = indexedDB.open(DB_NAME, DB_VERSION);
  return new Promise((resolve, reject) => {
    request.addEventListener('error', () => {
      reject(request.error);
    });
    request.addEventListener('upgradeneeded', () => {
      const db = request.result;

      try {
        db.createObjectStore(DB_OBJECTSTORE_NAME, {
          keyPath: DB_DATA_KEYPATH
        });
      } catch (e) {
        reject(e);
      }
    });
    request.addEventListener('success', async () => {
      const db = request.result; // Strange bug that occurs in Firefox when multiple tabs are opened at the
      // same time. The only way to recover seems to be deleting the database
      // and re-initializing it.
      // https://github.com/firebase/firebase-js-sdk/issues/634

      if (!db.objectStoreNames.contains(DB_OBJECTSTORE_NAME)) {
        // Need to close the database or else you get a `blocked` event
        db.close();
        await _deleteDatabase();
        resolve(await _openDatabase());
      } else {
        resolve(db);
      }
    });
  });
}

async function _putObject(db, key, value) {
  const request = getObjectStore(db, true).put({
    [DB_DATA_KEYPATH]: key,
    value
  });
  return new DBPromise(request).toPromise();
}

async function getObject(db, key) {
  const request = getObjectStore(db, false).get(key);
  const data = await new DBPromise(request).toPromise();
  return data === undefined ? null : data.value;
}

function _deleteObject(db, key) {
  const request = getObjectStore(db, true).delete(key);
  return new DBPromise(request).toPromise();
}

const _POLLING_INTERVAL_MS = 800;
const _TRANSACTION_RETRY_COUNT = 3;

class IndexedDBLocalPersistence {
  constructor() {
    this.type = "LOCAL"
    /* LOCAL */
    ;
    this._shouldAllowMigration = true;
    this.listeners = {};
    this.localCache = {}; // setTimeout return value is platform specific
    // eslint-disable-next-line @typescript-eslint/no-explicit-any

    this.pollTimer = null;
    this.pendingWrites = 0;
    this.receiver = null;
    this.sender = null;
    this.serviceWorkerReceiverAvailable = false;
    this.activeServiceWorker = null; // Fire & forget the service worker registration as it may never resolve

    this._workerInitializationPromise = this.initializeServiceWorkerMessaging().then(() => {}, () => {});
  }

  async _openDb() {
    if (this.db) {
      return this.db;
    }

    this.db = await _openDatabase();
    return this.db;
  }

  async _withRetries(op) {
    let numAttempts = 0;

    while (true) {
      try {
        const db = await this._openDb();
        return await op(db);
      } catch (e) {
        if (numAttempts++ > _TRANSACTION_RETRY_COUNT) {
          throw e;
        }

        if (this.db) {
          this.db.close();
          this.db = undefined;
        } // TODO: consider adding exponential backoff

      }
    }
  }
  /**
   * IndexedDB events do not propagate from the main window to the worker context.  We rely on a
   * postMessage interface to send these events to the worker ourselves.
   */


  async initializeServiceWorkerMessaging() {
    return _isWorker() ? this.initializeReceiver() : this.initializeSender();
  }
  /**
   * As the worker we should listen to events from the main window.
   */


  async initializeReceiver() {
    this.receiver = Receiver._getInstance(_getWorkerGlobalScope()); // Refresh from persistence if we receive a KeyChanged message.

    this.receiver._subscribe("keyChanged"
    /* KEY_CHANGED */
    , async (_origin, data) => {
      const keys = await this._poll();
      return {
        keyProcessed: keys.includes(data.key)
      };
    }); // Let the sender know that we are listening so they give us more timeout.


    this.receiver._subscribe("ping"
    /* PING */
    , async (_origin, _data) => {
      return ["keyChanged"
      /* KEY_CHANGED */
      ];
    });
  }
  /**
   * As the main window, we should let the worker know when keys change (set and remove).
   *
   * @remarks
   * {@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/ready | ServiceWorkerContainer.ready}
   * may not resolve.
   */


  async initializeSender() {
    var _a, _b; // Check to see if there's an active service worker.


    this.activeServiceWorker = await _getActiveServiceWorker();

    if (!this.activeServiceWorker) {
      return;
    }

    this.sender = new Sender(this.activeServiceWorker); // Ping the service worker to check what events they can handle.

    const results = await this.sender._send("ping"
    /* PING */
    , {}, 800
    /* LONG_ACK */
    );

    if (!results) {
      return;
    }

    if (((_a = results[0]) === null || _a === void 0 ? void 0 : _a.fulfilled) && ((_b = results[0]) === null || _b === void 0 ? void 0 : _b.value.includes("keyChanged"
    /* KEY_CHANGED */
    ))) {
      this.serviceWorkerReceiverAvailable = true;
    }
  }
  /**
   * Let the worker know about a changed key, the exact key doesn't technically matter since the
   * worker will just trigger a full sync anyway.
   *
   * @remarks
   * For now, we only support one service worker per page.
   *
   * @param key - Storage key which changed.
   */


  async notifyServiceWorker(key) {
    if (!this.sender || !this.activeServiceWorker || _getServiceWorkerController() !== this.activeServiceWorker) {
      return;
    }

    try {
      await this.sender._send("keyChanged"
      /* KEY_CHANGED */
      , {
        key
      }, // Use long timeout if receiver has previously responded to a ping from us.
      this.serviceWorkerReceiverAvailable ? 800
      /* LONG_ACK */
      : 50
      /* ACK */
      );
    } catch (_a) {// This is a best effort approach. Ignore errors.
    }
  }

  async _isAvailable() {
    try {
      if (!indexedDB) {
        return false;
      }

      const db = await _openDatabase();
      await _putObject(db, STORAGE_AVAILABLE_KEY, '1');
      await _deleteObject(db, STORAGE_AVAILABLE_KEY);
      return true;
    } catch (_a) {}

    return false;
  }

  async _withPendingWrite(write) {
    this.pendingWrites++;

    try {
      await write();
    } finally {
      this.pendingWrites--;
    }
  }

  async _set(key, value) {
    return this._withPendingWrite(async () => {
      await this._withRetries(db => _putObject(db, key, value));
      this.localCache[key] = value;
      return this.notifyServiceWorker(key);
    });
  }

  async _get(key) {
    const obj = await this._withRetries(db => getObject(db, key));
    this.localCache[key] = obj;
    return obj;
  }

  async _remove(key) {
    return this._withPendingWrite(async () => {
      await this._withRetries(db => _deleteObject(db, key));
      delete this.localCache[key];
      return this.notifyServiceWorker(key);
    });
  }

  async _poll() {
    // TODO: check if we need to fallback if getAll is not supported
    const result = await this._withRetries(db => {
      const getAllRequest = getObjectStore(db, false).getAll();
      return new DBPromise(getAllRequest).toPromise();
    });

    if (!result) {
      return [];
    } // If we have pending writes in progress abort, we'll get picked up on the next poll


    if (this.pendingWrites !== 0) {
      return [];
    }

    const keys = [];
    const keysInResult = new Set();

    for (const {
      fbase_key: key,
      value
    } of result) {
      keysInResult.add(key);

      if (JSON.stringify(this.localCache[key]) !== JSON.stringify(value)) {
        this.notifyListeners(key, value);
        keys.push(key);
      }
    }

    for (const localKey of Object.keys(this.localCache)) {
      if (this.localCache[localKey] && !keysInResult.has(localKey)) {
        // Deleted
        this.notifyListeners(localKey, null);
        keys.push(localKey);
      }
    }

    return keys;
  }

  notifyListeners(key, newValue) {
    this.localCache[key] = newValue;
    const listeners = this.listeners[key];

    if (listeners) {
      for (const listener of Array.from(listeners)) {
        listener(newValue);
      }
    }
  }

  startPolling() {
    this.stopPolling();
    this.pollTimer = setInterval(async () => this._poll(), _POLLING_INTERVAL_MS);
  }

  stopPolling() {
    if (this.pollTimer) {
      clearInterval(this.pollTimer);
      this.pollTimer = null;
    }
  }

  _addListener(key, listener) {
    if (Object.keys(this.listeners).length === 0) {
      this.startPolling();
    }

    if (!this.listeners[key]) {
      this.listeners[key] = new Set(); // Populate the cache to avoid spuriously triggering on first poll.

      void this._get(key); // This can happen in the background async and we can return immediately.
    }

    this.listeners[key].add(listener);
  }

  _removeListener(key, listener) {
    if (this.listeners[key]) {
      this.listeners[key].delete(listener);

      if (this.listeners[key].size === 0) {
        delete this.listeners[key];
      }
    }

    if (Object.keys(this.listeners).length === 0) {
      this.stopPolling();
    }
  }

}

IndexedDBLocalPersistence.type = 'LOCAL';
/**
 * An implementation of {@link Persistence} of type `LOCAL` using `indexedDB`
 * for the underlying storage.
 *
 * @public
 */

const indexedDBLocalPersistence = IndexedDBLocalPersistence;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

exports.i = indexedDBLocalPersistence;

function startSignInPhoneMfa(auth, request) {
  return _performApiRequest(auth, "POST"
  /* POST */
  , "/v2/accounts/mfaSignIn:start"
  /* START_PHONE_MFA_SIGN_IN */
  , Object.assign({
    tenantId: auth.tenantId
  }, request));
}

function finalizeSignInPhoneMfa(auth, request) {
  return _performApiRequest(auth, "POST"
  /* POST */
  , "/v2/accounts/mfaSignIn:finalize"
  /* FINALIZE_PHONE_MFA_SIGN_IN */
  , Object.assign({
    tenantId: auth.tenantId
  }, request));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


async function getRecaptchaParams(auth) {
  return (await _performApiRequest(auth, "GET"
  /* GET */
  , "/v1/recaptchaParams"
  /* GET_RECAPTCHA_PARAM */
  )).recaptchaSiteKey || '';
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function getScriptParentElement() {
  var _a, _b;

  return (_b = (_a = document.getElementsByTagName('head')) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : document;
}

function _loadJS(url) {
  // TODO: consider adding timeout support & cancellation
  return new Promise((resolve, reject) => {
    const el = document.createElement('script');
    el.setAttribute('src', url);
    el.onload = resolve;

    el.onerror = e => {
      const error = _createError("internal-error"
      /* INTERNAL_ERROR */
      );

      error.customData = e;
      reject(error);
    };

    el.type = 'text/javascript';
    el.charset = 'UTF-8';
    getScriptParentElement().appendChild(el);
  });
}

function _generateCallbackName(prefix) {
  return `__${prefix}${Math.floor(Math.random() * 1000000)}`;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const _SOLVE_TIME_MS = 500;
const _EXPIRATION_TIME_MS = 60000;
const _WIDGET_ID_START = 1000000000000;

class MockReCaptcha {
  constructor(auth) {
    this.auth = auth;
    this.counter = _WIDGET_ID_START;
    this._widgets = new Map();
  }

  render(container, parameters) {
    const id = this.counter;

    this._widgets.set(id, new MockWidget(container, this.auth.name, parameters || {}));

    this.counter++;
    return id;
  }

  reset(optWidgetId) {
    var _a;

    const id = optWidgetId || _WIDGET_ID_START;
    void ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.delete());

    this._widgets.delete(id);
  }

  getResponse(optWidgetId) {
    var _a;

    const id = optWidgetId || _WIDGET_ID_START;
    return ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.getResponse()) || '';
  }

  async execute(optWidgetId) {
    var _a;

    const id = optWidgetId || _WIDGET_ID_START;
    void ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.execute());
    return '';
  }

}

class MockWidget {
  constructor(containerOrId, appName, params) {
    this.params = params;
    this.timerId = null;
    this.deleted = false;
    this.responseToken = null;

    this.clickHandler = () => {
      this.execute();
    };

    const container = typeof containerOrId === 'string' ? document.getElementById(containerOrId) : containerOrId;

    _assert(container, "argument-error"
    /* ARGUMENT_ERROR */
    , {
      appName
    });

    this.container = container;
    this.isVisible = this.params.size !== 'invisible';

    if (this.isVisible) {
      this.execute();
    } else {
      this.container.addEventListener('click', this.clickHandler);
    }
  }

  getResponse() {
    this.checkIfDeleted();
    return this.responseToken;
  }

  delete() {
    this.checkIfDeleted();
    this.deleted = true;

    if (this.timerId) {
      clearTimeout(this.timerId);
      this.timerId = null;
    }

    this.container.removeEventListener('click', this.clickHandler);
  }

  execute() {
    this.checkIfDeleted();

    if (this.timerId) {
      return;
    }

    this.timerId = window.setTimeout(() => {
      this.responseToken = generateRandomAlphaNumericString(50);
      const {
        callback,
        'expired-callback': expiredCallback
      } = this.params;

      if (callback) {
        try {
          callback(this.responseToken);
        } catch (e) {}
      }

      this.timerId = window.setTimeout(() => {
        this.timerId = null;
        this.responseToken = null;

        if (expiredCallback) {
          try {
            expiredCallback();
          } catch (e) {}
        }

        if (this.isVisible) {
          this.execute();
        }
      }, _EXPIRATION_TIME_MS);
    }, _SOLVE_TIME_MS);
  }

  checkIfDeleted() {
    if (this.deleted) {
      throw new Error('reCAPTCHA mock was already deleted!');
    }
  }

}

function generateRandomAlphaNumericString(len) {
  const chars = [];
  const allowedChars = '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';

  for (let i = 0; i < len; i++) {
    chars.push(allowedChars.charAt(Math.floor(Math.random() * allowedChars.length)));
  }

  return chars.join('');
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ReCaptcha will load using the same callback, so the callback function needs
// to be kept around


const _JSLOAD_CALLBACK = _generateCallbackName('rcb');

const NETWORK_TIMEOUT_DELAY = new Delay(30000, 60000);
const RECAPTCHA_BASE = 'https://www.google.com/recaptcha/api.js?';
/**
 * Loader for the GReCaptcha library. There should only ever be one of this.
 */

class ReCaptchaLoaderImpl {
  constructor() {
    this.hostLanguage = '';
    this.counter = 0;
    this.librarySeparatelyLoaded = !!_window().grecaptcha;
  }

  load(auth, hl = '') {
    _assert(isHostLanguageValid(hl), auth, "argument-error"
    /* ARGUMENT_ERROR */
    );

    if (this.shouldResolveImmediately(hl)) {
      return Promise.resolve(_window().grecaptcha);
    }

    return new Promise((resolve, reject) => {
      const networkTimeout = _window().setTimeout(() => {
        reject(_createError(auth, "network-request-failed"
        /* NETWORK_REQUEST_FAILED */
        ));
      }, NETWORK_TIMEOUT_DELAY.get());

      _window()[_JSLOAD_CALLBACK] = () => {
        _window().clearTimeout(networkTimeout);

        delete _window()[_JSLOAD_CALLBACK];

        const recaptcha = _window().grecaptcha;

        if (!recaptcha) {
          reject(_createError(auth, "internal-error"
          /* INTERNAL_ERROR */
          ));
          return;
        } // Wrap the greptcha render function so that we know if the developer has
        // called it separately


        const render = recaptcha.render;

        recaptcha.render = (container, params) => {
          const widgetId = render(container, params);
          this.counter++;
          return widgetId;
        };

        this.hostLanguage = hl;
        resolve(recaptcha);
      };

      const url = `${RECAPTCHA_BASE}?${(0, _util.querystring)({
        onload: _JSLOAD_CALLBACK,
        render: 'explicit',
        hl
      })}`;

      _loadJS(url).catch(() => {
        clearTimeout(networkTimeout);
        reject(_createError(auth, "internal-error"
        /* INTERNAL_ERROR */
        ));
      });
    });
  }

  clearedOneInstance() {
    this.counter--;
  }

  shouldResolveImmediately(hl) {
    // We can resolve immediately if:
    //   • grecaptcha is already defined AND (
    //     1. the requested language codes are the same OR
    //     2. there exists already a ReCaptcha on the page
    //     3. the library was already loaded by the app
    // In cases (2) and (3), we _can't_ reload as it would break the recaptchas
    // that are already in the page
    return !!_window().grecaptcha && (hl === this.hostLanguage || this.counter > 0 || this.librarySeparatelyLoaded);
  }

}

function isHostLanguageValid(hl) {
  return hl.length <= 6 && /^\s*[a-zA-Z0-9\-]*\s*$/.test(hl);
}

class MockReCaptchaLoaderImpl {
  async load(auth) {
    return new MockReCaptcha(auth);
  }

  clearedOneInstance() {}

}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const RECAPTCHA_VERIFIER_TYPE = 'recaptcha';
const DEFAULT_PARAMS = {
  theme: 'light',
  type: 'image'
};
/**
 * An {@link https://www.google.com/recaptcha/ | reCAPTCHA}-based application verifier.
 *
 * @public
 */

class RecaptchaVerifier {
  /**
   *
   * @param containerOrId - The reCAPTCHA container parameter.
   *
   * @remarks
   * This has different meaning depending on whether the reCAPTCHA is hidden or visible. For a
   * visible reCAPTCHA the container must be empty. If a string is used, it has to correspond to
   * an element ID. The corresponding element must also must be in the DOM at the time of
   * initialization.
   *
   * @param parameters - The optional reCAPTCHA parameters.
   *
   * @remarks
   * Check the reCAPTCHA docs for a comprehensive list. All parameters are accepted except for
   * the sitekey. Firebase Auth backend provisions a reCAPTCHA for each project and will
   * configure this upon rendering. For an invisible reCAPTCHA, a size key must have the value
   * 'invisible'.
   *
   * @param authExtern - The corresponding Firebase {@link Auth} instance.
   *
   * @remarks
   * If none is provided, the default Firebase {@link Auth} instance is used. A Firebase {@link Auth} instance
   * must be initialized with an API key, otherwise an error will be thrown.
   */
  constructor(containerOrId, parameters = Object.assign({}, DEFAULT_PARAMS), authExtern) {
    this.parameters = parameters;
    /**
     * The application verifier type.
     *
     * @remarks
     * For a reCAPTCHA verifier, this is 'recaptcha'.
     */

    this.type = RECAPTCHA_VERIFIER_TYPE;
    this.destroyed = false;
    this.widgetId = null;
    this.tokenChangeListeners = new Set();
    this.renderPromise = null;
    this.recaptcha = null;
    this.auth = _castAuth(authExtern);
    this.isInvisible = this.parameters.size === 'invisible';

    _assert(typeof document !== 'undefined', this.auth, "operation-not-supported-in-this-environment"
    /* OPERATION_NOT_SUPPORTED */
    );

    const container = typeof containerOrId === 'string' ? document.getElementById(containerOrId) : containerOrId;

    _assert(container, this.auth, "argument-error"
    /* ARGUMENT_ERROR */
    );

    this.container = container;
    this.parameters.callback = this.makeTokenCallback(this.parameters.callback);
    this._recaptchaLoader = this.auth.settings.appVerificationDisabledForTesting ? new MockReCaptchaLoaderImpl() : new ReCaptchaLoaderImpl();
    this.validateStartingState(); // TODO: Figure out if sdk version is needed
  }
  /**
   * Waits for the user to solve the reCAPTCHA and resolves with the reCAPTCHA token.
   *
   * @returns A Promise for the reCAPTCHA token.
   */


  async verify() {
    this.assertNotDestroyed();
    const id = await this.render();
    const recaptcha = this.getAssertedRecaptcha();
    const response = recaptcha.getResponse(id);

    if (response) {
      return response;
    }

    return new Promise(resolve => {
      const tokenChange = token => {
        if (!token) {
          return; // Ignore token expirations.
        }

        this.tokenChangeListeners.delete(tokenChange);
        resolve(token);
      };

      this.tokenChangeListeners.add(tokenChange);

      if (this.isInvisible) {
        recaptcha.execute(id);
      }
    });
  }
  /**
   * Renders the reCAPTCHA widget on the page.
   *
   * @returns A Promise that resolves with the reCAPTCHA widget ID.
   */


  render() {
    try {
      this.assertNotDestroyed();
    } catch (e) {
      // This method returns a promise. Since it's not async (we want to return the
      // _same_ promise if rendering is still occurring), the API surface should
      // reject with the error rather than just throw
      return Promise.reject(e);
    }

    if (this.renderPromise) {
      return this.renderPromise;
    }

    this.renderPromise = this.makeRenderPromise().catch(e => {
      this.renderPromise = null;
      throw e;
    });
    return this.renderPromise;
  }
  /** @internal */


  _reset() {
    this.assertNotDestroyed();

    if (this.widgetId !== null) {
      this.getAssertedRecaptcha().reset(this.widgetId);
    }
  }
  /**
   * Clears the reCAPTCHA widget from the page and destroys the instance.
   */


  clear() {
    this.assertNotDestroyed();
    this.destroyed = true;

    this._recaptchaLoader.clearedOneInstance();

    if (!this.isInvisible) {
      this.container.childNodes.forEach(node => {
        this.container.removeChild(node);
      });
    }
  }

  validateStartingState() {
    _assert(!this.parameters.sitekey, this.auth, "argument-error"
    /* ARGUMENT_ERROR */
    );

    _assert(this.isInvisible || !this.container.hasChildNodes(), this.auth, "argument-error"
    /* ARGUMENT_ERROR */
    );

    _assert(typeof document !== 'undefined', this.auth, "operation-not-supported-in-this-environment"
    /* OPERATION_NOT_SUPPORTED */
    );
  }

  makeTokenCallback(existing) {
    return token => {
      this.tokenChangeListeners.forEach(listener => listener(token));

      if (typeof existing === 'function') {
        existing(token);
      } else if (typeof existing === 'string') {
        const globalFunc = _window()[existing];

        if (typeof globalFunc === 'function') {
          globalFunc(token);
        }
      }
    };
  }

  assertNotDestroyed() {
    _assert(!this.destroyed, this.auth, "internal-error"
    /* INTERNAL_ERROR */
    );
  }

  async makeRenderPromise() {
    await this.init();

    if (!this.widgetId) {
      let container = this.container;

      if (!this.isInvisible) {
        const guaranteedEmpty = document.createElement('div');
        container.appendChild(guaranteedEmpty);
        container = guaranteedEmpty;
      }

      this.widgetId = this.getAssertedRecaptcha().render(container, this.parameters);
    }

    return this.widgetId;
  }

  async init() {
    _assert(_isHttpOrHttps() && !_isWorker(), this.auth, "internal-error"
    /* INTERNAL_ERROR */
    );

    await domReady();
    this.recaptcha = await this._recaptchaLoader.load(this.auth, this.auth.languageCode || undefined);
    const siteKey = await getRecaptchaParams(this.auth);

    _assert(siteKey, this.auth, "internal-error"
    /* INTERNAL_ERROR */
    );

    this.parameters.sitekey = siteKey;
  }

  getAssertedRecaptcha() {
    _assert(this.recaptcha, this.auth, "internal-error"
    /* INTERNAL_ERROR */
    );

    return this.recaptcha;
  }

}

exports.R = RecaptchaVerifier;

function domReady() {
  let resolver = null;
  return new Promise(resolve => {
    if (document.readyState === 'complete') {
      resolve();
      return;
    } // Document not ready, wait for load before resolving.
    // Save resolver, so we can remove listener in case it was externally
    // cancelled.


    resolver = () => resolve();

    window.addEventListener('load', resolver);
  }).catch(e => {
    if (resolver) {
      window.removeEventListener('load', resolver);
    }

    throw e;
  });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


class ConfirmationResultImpl {
  constructor(verificationId, onConfirmation) {
    this.verificationId = verificationId;
    this.onConfirmation = onConfirmation;
  }

  confirm(verificationCode) {
    const authCredential = PhoneAuthCredential._fromVerification(this.verificationId, verificationCode);

    return this.onConfirmation(authCredential);
  }

}
/**
 * Asynchronously signs in using a phone number.
 *
 * @remarks
 * This method sends a code via SMS to the given
 * phone number, and returns a {@link ConfirmationResult}. After the user
 * provides the code sent to their phone, call {@link ConfirmationResult.confirm}
 * with the code to sign the user in.
 *
 * For abuse prevention, this method also requires a {@link ApplicationVerifier}.
 * This SDK includes a reCAPTCHA-based implementation, {@link RecaptchaVerifier}.
 *
 * @example
 * ```javascript
 * // 'recaptcha-container' is the ID of an element in the DOM.
 * const applicationVerifier = new firebase.auth.RecaptchaVerifier('recaptcha-container');
 * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);
 * // Obtain a verificationCode from the user.
 * const credential = await confirmationResult.confirm(verificationCode);
 * ```
 *
 * @param auth - The {@link Auth} instance.
 * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).
 * @param appVerifier - The {@link ApplicationVerifier}.
 *
 * @public
 */


async function signInWithPhoneNumber(auth, phoneNumber, appVerifier) {
  const authInternal = _castAuth(auth);

  const verificationId = await _verifyPhoneNumber(authInternal, phoneNumber, (0, _util.getModularInstance)(appVerifier));
  return new ConfirmationResultImpl(verificationId, cred => signInWithCredential(authInternal, cred));
}
/**
 * Links the user account with the given phone number.
 *
 * @param user - The user.
 * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).
 * @param appVerifier - The {@link ApplicationVerifier}.
 *
 * @public
 */


async function linkWithPhoneNumber(user, phoneNumber, appVerifier) {
  const userInternal = (0, _util.getModularInstance)(user);
  await _assertLinkedStatus(false, userInternal, "phone"
  /* PHONE */
  );
  const verificationId = await _verifyPhoneNumber(userInternal.auth, phoneNumber, (0, _util.getModularInstance)(appVerifier));
  return new ConfirmationResultImpl(verificationId, cred => linkWithCredential(userInternal, cred));
}
/**
 * Re-authenticates a user using a fresh phone credential.
 *
 * @remarks Use before operations such as {@link updatePassword} that require tokens from recent sign-in attempts.
 *
 * @param user - The user.
 * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).
 * @param appVerifier - The {@link ApplicationVerifier}.
 *
 * @public
 */


async function reauthenticateWithPhoneNumber(user, phoneNumber, appVerifier) {
  const userInternal = (0, _util.getModularInstance)(user);
  const verificationId = await _verifyPhoneNumber(userInternal.auth, phoneNumber, (0, _util.getModularInstance)(appVerifier));
  return new ConfirmationResultImpl(verificationId, cred => reauthenticateWithCredential(userInternal, cred));
}
/**
 * Returns a verification ID to be used in conjunction with the SMS code that is sent.
 *
 */


async function _verifyPhoneNumber(auth, options, verifier) {
  var _a;

  const recaptchaToken = await verifier.verify();

  try {
    _assert(typeof recaptchaToken === 'string', auth, "argument-error"
    /* ARGUMENT_ERROR */
    );

    _assert(verifier.type === RECAPTCHA_VERIFIER_TYPE, auth, "argument-error"
    /* ARGUMENT_ERROR */
    );

    let phoneInfoOptions;

    if (typeof options === 'string') {
      phoneInfoOptions = {
        phoneNumber: options
      };
    } else {
      phoneInfoOptions = options;
    }

    if ('session' in phoneInfoOptions) {
      const session = phoneInfoOptions.session;

      if ('phoneNumber' in phoneInfoOptions) {
        _assert(session.type === "enroll"
        /* ENROLL */
        , auth, "internal-error"
        /* INTERNAL_ERROR */
        );

        const response = await startEnrollPhoneMfa(auth, {
          idToken: session.credential,
          phoneEnrollmentInfo: {
            phoneNumber: phoneInfoOptions.phoneNumber,
            recaptchaToken
          }
        });
        return response.phoneSessionInfo.sessionInfo;
      } else {
        _assert(session.type === "signin"
        /* SIGN_IN */
        , auth, "internal-error"
        /* INTERNAL_ERROR */
        );

        const mfaEnrollmentId = ((_a = phoneInfoOptions.multiFactorHint) === null || _a === void 0 ? void 0 : _a.uid) || phoneInfoOptions.multiFactorUid;

        _assert(mfaEnrollmentId, auth, "missing-multi-factor-info"
        /* MISSING_MFA_INFO */
        );

        const response = await startSignInPhoneMfa(auth, {
          mfaPendingCredential: session.credential,
          mfaEnrollmentId,
          phoneSignInInfo: {
            recaptchaToken
          }
        });
        return response.phoneResponseInfo.sessionInfo;
      }
    } else {
      const {
        sessionInfo
      } = await sendPhoneVerificationCode(auth, {
        phoneNumber: phoneInfoOptions.phoneNumber,
        recaptchaToken
      });
      return sessionInfo;
    }
  } finally {
    verifier._reset();
  }
}
/**
 * Updates the user's phone number.
 *
 * @example
 * ```
 * // 'recaptcha-container' is the ID of an element in the DOM.
 * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');
 * const provider = new PhoneAuthProvider(auth);
 * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);
 * // Obtain the verificationCode from the user.
 * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);
 * await updatePhoneNumber(user, phoneCredential);
 * ```
 *
 * @param user - The user.
 * @param credential - A credential authenticating the new phone number.
 *
 * @public
 */


async function updatePhoneNumber(user, credential) {
  await _link$1((0, _util.getModularInstance)(user), credential);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Provider for generating an {@link PhoneAuthCredential}.
 *
 * @example
 * ```javascript
 * // 'recaptcha-container' is the ID of an element in the DOM.
 * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');
 * const provider = new PhoneAuthProvider(auth);
 * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);
 * // Obtain the verificationCode from the user.
 * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);
 * const userCredential = await signInWithCredential(auth, phoneCredential);
 * ```
 *
 * @public
 */


class PhoneAuthProvider {
  /**
   * @param auth - The Firebase {@link Auth} instance in which sign-ins should occur.
   *
   */
  constructor(auth) {
    /** Always set to {@link ProviderId}.PHONE. */
    this.providerId = PhoneAuthProvider.PROVIDER_ID;
    this.auth = _castAuth(auth);
  }
  /**
   *
   * Starts a phone number authentication flow by sending a verification code to the given phone
   * number.
   *
   * @example
   * ```javascript
   * const provider = new PhoneAuthProvider(auth);
   * const verificationId = await provider.verifyPhoneNumber(phoneNumber, applicationVerifier);
   * // Obtain verificationCode from the user.
   * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);
   * const userCredential = await signInWithCredential(auth, authCredential);
   * ```
   *
   * @example
   * An alternative flow is provided using the `signInWithPhoneNumber` method.
   * ```javascript
   * const confirmationResult = signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);
   * // Obtain verificationCode from the user.
   * const userCredential = confirmationResult.confirm(verificationCode);
   * ```
   *
   * @param phoneInfoOptions - The user's {@link PhoneInfoOptions}. The phone number should be in
   * E.164 format (e.g. +16505550101).
   * @param applicationVerifier - For abuse prevention, this method also requires a
   * {@link ApplicationVerifier}. This SDK includes a reCAPTCHA-based implementation,
   * {@link RecaptchaVerifier}.
   *
   * @returns A Promise for a verification ID that can be passed to
   * {@link PhoneAuthProvider.credential} to identify this flow..
   */


  verifyPhoneNumber(phoneOptions, applicationVerifier) {
    return _verifyPhoneNumber(this.auth, phoneOptions, (0, _util.getModularInstance)(applicationVerifier));
  }
  /**
   * Creates a phone auth credential, given the verification ID from
   * {@link PhoneAuthProvider.verifyPhoneNumber} and the code that was sent to the user's
   * mobile device.
   *
   * @example
   * ```javascript
   * const provider = new PhoneAuthProvider(auth);
   * const verificationId = provider.verifyPhoneNumber(phoneNumber, applicationVerifier);
   * // Obtain verificationCode from the user.
   * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);
   * const userCredential = signInWithCredential(auth, authCredential);
   * ```
   *
   * @example
   * An alternative flow is provided using the `signInWithPhoneNumber` method.
   * ```javascript
   * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);
   * // Obtain verificationCode from the user.
   * const userCredential = await confirmationResult.confirm(verificationCode);
   * ```
   *
   * @param verificationId - The verification ID returned from {@link PhoneAuthProvider.verifyPhoneNumber}.
   * @param verificationCode - The verification code sent to the user's mobile device.
   *
   * @returns The auth provider credential.
   */


  static credential(verificationId, verificationCode) {
    return PhoneAuthCredential._fromVerification(verificationId, verificationCode);
  }
  /**
   * Generates an {@link AuthCredential} from a {@link UserCredential}.
   * @param userCredential - The user credential.
   */


  static credentialFromResult(userCredential) {
    const credential = userCredential;
    return PhoneAuthProvider.credentialFromTaggedObject(credential);
  }
  /**
   * Returns an {@link AuthCredential} when passed an error.
   *
   * @remarks
   *
   * This method works for errors like
   * `auth/account-exists-with-different-credentials`. This is useful for
   * recovering when attempting to set a user's phone number but the number
   * in question is already tied to another account. For example, the following
   * code tries to update the current user's phone number, and if that
   * fails, links the user with the account associated with that number:
   *
   * ```js
   * const provider = new PhoneAuthProvider(auth);
   * const verificationId = await provider.verifyPhoneNumber(number, verifier);
   * try {
   *   const code = ''; // Prompt the user for the verification code
   *   await updatePhoneNumber(
   *       auth.currentUser,
   *       PhoneAuthProvider.credential(verificationId, code));
   * } catch (e) {
   *   if (e.code === 'auth/account-exists-with-different-credential') {
   *     const cred = PhoneAuthProvider.credentialFromError(e);
   *     await linkWithCredential(auth.currentUser, cred);
   *   }
   * }
   *
   * // At this point, auth.currentUser.phoneNumber === number.
   * ```
   *
   * @param error - The error to generate a credential from.
   */


  static credentialFromError(error) {
    return PhoneAuthProvider.credentialFromTaggedObject(error.customData || {});
  }

  static credentialFromTaggedObject({
    _tokenResponse: tokenResponse
  }) {
    if (!tokenResponse) {
      return null;
    }

    const {
      phoneNumber,
      temporaryProof
    } = tokenResponse;

    if (phoneNumber && temporaryProof) {
      return PhoneAuthCredential._fromTokenResponse(phoneNumber, temporaryProof);
    }

    return null;
  }

}
/** Always set to {@link ProviderId}.PHONE. */


exports.P = PhoneAuthProvider;
PhoneAuthProvider.PROVIDER_ID = "phone"
/* PHONE */
;
/** Always set to {@link SignInMethod}.PHONE. */

PhoneAuthProvider.PHONE_SIGN_IN_METHOD = "phone"
/* PHONE */
;
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Chooses a popup/redirect resolver to use. This prefers the override (which
 * is directly passed in), and falls back to the property set on the auth
 * object. If neither are available, this function errors w/ an argument error.
 */

function _withDefaultResolver(auth, resolverOverride) {
  if (resolverOverride) {
    return _getInstance(resolverOverride);
  }

  _assert(auth._popupRedirectResolver, auth, "argument-error"
  /* ARGUMENT_ERROR */
  );

  return auth._popupRedirectResolver;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


class IdpCredential extends AuthCredential {
  constructor(params) {
    super("custom"
    /* CUSTOM */
    , "custom"
    /* CUSTOM */
    );
    this.params = params;
  }

  _getIdTokenResponse(auth) {
    return signInWithIdp(auth, this._buildIdpRequest());
  }

  _linkToIdToken(auth, idToken) {
    return signInWithIdp(auth, this._buildIdpRequest(idToken));
  }

  _getReauthenticationResolver(auth) {
    return signInWithIdp(auth, this._buildIdpRequest());
  }

  _buildIdpRequest(idToken) {
    const request = {
      requestUri: this.params.requestUri,
      sessionId: this.params.sessionId,
      postBody: this.params.postBody,
      tenantId: this.params.tenantId,
      pendingToken: this.params.pendingToken,
      returnSecureToken: true,
      returnIdpCredential: true
    };

    if (idToken) {
      request.idToken = idToken;
    }

    return request;
  }

}

function _signIn(params) {
  return _signInWithCredential(params.auth, new IdpCredential(params), params.bypassAuthState);
}

function _reauth(params) {
  const {
    auth,
    user
  } = params;

  _assert(user, auth, "internal-error"
  /* INTERNAL_ERROR */
  );

  return _reauthenticate(user, new IdpCredential(params), params.bypassAuthState);
}

async function _link(params) {
  const {
    auth,
    user
  } = params;

  _assert(user, auth, "internal-error"
  /* INTERNAL_ERROR */
  );

  return _link$1(user, new IdpCredential(params), params.bypassAuthState);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Popup event manager. Handles the popup's entire lifecycle; listens to auth
 * events
 */


class AbstractPopupRedirectOperation {
  constructor(auth, filter, resolver, user, bypassAuthState = false) {
    this.auth = auth;
    this.resolver = resolver;
    this.user = user;
    this.bypassAuthState = bypassAuthState;
    this.pendingPromise = null;
    this.eventManager = null;
    this.filter = Array.isArray(filter) ? filter : [filter];
  }

  execute() {
    return new Promise(async (resolve, reject) => {
      this.pendingPromise = {
        resolve,
        reject
      };

      try {
        this.eventManager = await this.resolver._initialize(this.auth);
        await this.onExecution();
        this.eventManager.registerConsumer(this);
      } catch (e) {
        this.reject(e);
      }
    });
  }

  async onAuthEvent(event) {
    const {
      urlResponse,
      sessionId,
      postBody,
      tenantId,
      error,
      type
    } = event;

    if (error) {
      this.reject(error);
      return;
    }

    const params = {
      auth: this.auth,
      requestUri: urlResponse,
      sessionId: sessionId,
      tenantId: tenantId || undefined,
      postBody: postBody || undefined,
      user: this.user,
      bypassAuthState: this.bypassAuthState
    };

    try {
      this.resolve(await this.getIdpTask(type)(params));
    } catch (e) {
      this.reject(e);
    }
  }

  onError(error) {
    this.reject(error);
  }

  getIdpTask(type) {
    switch (type) {
      case "signInViaPopup"
      /* SIGN_IN_VIA_POPUP */
      :
      case "signInViaRedirect"
      /* SIGN_IN_VIA_REDIRECT */
      :
        return _signIn;

      case "linkViaPopup"
      /* LINK_VIA_POPUP */
      :
      case "linkViaRedirect"
      /* LINK_VIA_REDIRECT */
      :
        return _link;

      case "reauthViaPopup"
      /* REAUTH_VIA_POPUP */
      :
      case "reauthViaRedirect"
      /* REAUTH_VIA_REDIRECT */
      :
        return _reauth;

      default:
        _fail(this.auth, "internal-error"
        /* INTERNAL_ERROR */
        );

    }
  }

  resolve(cred) {
    debugAssert(this.pendingPromise, 'Pending promise was never set');
    this.pendingPromise.resolve(cred);
    this.unregisterAndCleanUp();
  }

  reject(error) {
    debugAssert(this.pendingPromise, 'Pending promise was never set');
    this.pendingPromise.reject(error);
    this.unregisterAndCleanUp();
  }

  unregisterAndCleanUp() {
    if (this.eventManager) {
      this.eventManager.unregisterConsumer(this);
    }

    this.pendingPromise = null;
    this.cleanUp();
  }

}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const _POLL_WINDOW_CLOSE_TIMEOUT = new Delay(2000, 10000);
/**
 * Authenticates a Firebase client using a popup-based OAuth authentication flow.
 *
 * @remarks
 * If succeeds, returns the signed in user along with the provider's credential. If sign in was
 * unsuccessful, returns an error object containing additional information about the error.
 *
 * @example
 * ```javascript
 * // Sign in using a popup.
 * const provider = new FacebookAuthProvider();
 * const result = await signInWithPopup(auth, provider);
 *
 * // The signed-in user info.
 * const user = result.user;
 * // This gives you a Facebook Access Token.
 * const credential = provider.credentialFromResult(auth, result);
 * const token = credential.accessToken;
 * ```
 *
 * @param auth - The {@link Auth} instance.
 * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
 * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
 * @param resolver - An instance of {@link PopupRedirectResolver}, optional
 * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
 *
 *
 * @public
 */


async function signInWithPopup(auth, provider, resolver) {
  const authInternal = _castAuth(auth);

  _assertInstanceOf(auth, provider, FederatedAuthProvider);

  const resolverInternal = _withDefaultResolver(authInternal, resolver);

  const action = new PopupOperation(authInternal, "signInViaPopup"
  /* SIGN_IN_VIA_POPUP */
  , provider, resolverInternal);
  return action.executeNotNull();
}
/**
 * Reauthenticates the current user with the specified {@link OAuthProvider} using a pop-up based
 * OAuth flow.
 *
 * @remarks
 * If the reauthentication is successful, the returned result will contain the user and the
 * provider's credential.
 *
 * @example
 * ```javascript
 * // Sign in using a popup.
 * const provider = new FacebookAuthProvider();
 * const result = await signInWithPopup(auth, provider);
 * // Reauthenticate using a popup.
 * await reauthenticateWithPopup(result.user, provider);
 * ```
 *
 * @param user - The user.
 * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
 * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
 * @param resolver - An instance of {@link PopupRedirectResolver}, optional
 * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
 *
 * @public
 */


async function reauthenticateWithPopup(user, provider, resolver) {
  const userInternal = (0, _util.getModularInstance)(user);

  _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);

  const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);

  const action = new PopupOperation(userInternal.auth, "reauthViaPopup"
  /* REAUTH_VIA_POPUP */
  , provider, resolverInternal, userInternal);
  return action.executeNotNull();
}
/**
 * Links the authenticated provider to the user account using a pop-up based OAuth flow.
 *
 * @remarks
 * If the linking is successful, the returned result will contain the user and the provider's credential.
 *
 *
 * @example
 * ```javascript
 * // Sign in using some other provider.
 * const result = await signInWithEmailAndPassword(auth, email, password);
 * // Link using a popup.
 * const provider = new FacebookAuthProvider();
 * await linkWithPopup(result.user, provider);
 * ```
 *
 * @param user - The user.
 * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
 * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
 * @param resolver - An instance of {@link PopupRedirectResolver}, optional
 * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
 *
 * @public
 */


async function linkWithPopup(user, provider, resolver) {
  const userInternal = (0, _util.getModularInstance)(user);

  _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);

  const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);

  const action = new PopupOperation(userInternal.auth, "linkViaPopup"
  /* LINK_VIA_POPUP */
  , provider, resolverInternal, userInternal);
  return action.executeNotNull();
}
/**
 * Popup event manager. Handles the popup's entire lifecycle; listens to auth
 * events
 *
 */


class PopupOperation extends AbstractPopupRedirectOperation {
  constructor(auth, filter, provider, resolver, user) {
    super(auth, filter, resolver, user);
    this.provider = provider;
    this.authWindow = null;
    this.pollId = null;

    if (PopupOperation.currentPopupAction) {
      PopupOperation.currentPopupAction.cancel();
    }

    PopupOperation.currentPopupAction = this;
  }

  async executeNotNull() {
    const result = await this.execute();

    _assert(result, this.auth, "internal-error"
    /* INTERNAL_ERROR */
    );

    return result;
  }

  async onExecution() {
    debugAssert(this.filter.length === 1, 'Popup operations only handle one event');

    const eventId = _generateEventId();

    this.authWindow = await this.resolver._openPopup(this.auth, this.provider, this.filter[0], // There's always one, see constructor
    eventId);
    this.authWindow.associatedEvent = eventId; // Check for web storage support and origin validation _after_ the popup is
    // loaded. These operations are slow (~1 second or so) Rather than
    // waiting on them before opening the window, optimistically open the popup
    // and check for storage support at the same time. If storage support is
    // not available, this will cause the whole thing to reject properly. It
    // will also close the popup, but since the promise has already rejected,
    // the popup closed by user poll will reject into the void.

    this.resolver._originValidation(this.auth).catch(e => {
      this.reject(e);
    });

    this.resolver._isIframeWebStorageSupported(this.auth, isSupported => {
      if (!isSupported) {
        this.reject(_createError(this.auth, "web-storage-unsupported"
        /* WEB_STORAGE_UNSUPPORTED */
        ));
      }
    }); // Handle user closure. Notice this does *not* use await


    this.pollUserCancellation();
  }

  get eventId() {
    var _a;

    return ((_a = this.authWindow) === null || _a === void 0 ? void 0 : _a.associatedEvent) || null;
  }

  cancel() {
    this.reject(_createError(this.auth, "cancelled-popup-request"
    /* EXPIRED_POPUP_REQUEST */
    ));
  }

  cleanUp() {
    if (this.authWindow) {
      this.authWindow.close();
    }

    if (this.pollId) {
      window.clearTimeout(this.pollId);
    }

    this.authWindow = null;
    this.pollId = null;
    PopupOperation.currentPopupAction = null;
  }

  pollUserCancellation() {
    const poll = () => {
      var _a, _b;

      if ((_b = (_a = this.authWindow) === null || _a === void 0 ? void 0 : _a.window) === null || _b === void 0 ? void 0 : _b.closed) {
        // Make sure that there is sufficient time for whatever action to
        // complete. The window could have closed but the sign in network
        // call could still be in flight.
        this.pollId = window.setTimeout(() => {
          this.pollId = null;
          this.reject(_createError(this.auth, "popup-closed-by-user"
          /* POPUP_CLOSED_BY_USER */
          ));
        }, 2000
        /* AUTH_EVENT */
        );
        return;
      }

      this.pollId = window.setTimeout(poll, _POLL_WINDOW_CLOSE_TIMEOUT.get());
    };

    poll();
  }

} // Only one popup is ever shown at once. The lifecycle of the current popup
// can be managed / cancelled by the constructor.


PopupOperation.currentPopupAction = null;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const PENDING_REDIRECT_KEY = 'pendingRedirect'; // We only get one redirect outcome for any one auth, so just store it
// in here.

const redirectOutcomeMap = new Map();

class RedirectAction extends AbstractPopupRedirectOperation {
  constructor(auth, resolver, bypassAuthState = false) {
    super(auth, ["signInViaRedirect"
    /* SIGN_IN_VIA_REDIRECT */
    , "linkViaRedirect"
    /* LINK_VIA_REDIRECT */
    , "reauthViaRedirect"
    /* REAUTH_VIA_REDIRECT */
    , "unknown"
    /* UNKNOWN */
    ], resolver, undefined, bypassAuthState);
    this.eventId = null;
  }
  /**
   * Override the execute function; if we already have a redirect result, then
   * just return it.
   */


  async execute() {
    let readyOutcome = redirectOutcomeMap.get(this.auth._key());

    if (!readyOutcome) {
      try {
        const hasPendingRedirect = await _getAndClearPendingRedirectStatus(this.resolver, this.auth);
        const result = hasPendingRedirect ? await super.execute() : null;

        readyOutcome = () => Promise.resolve(result);
      } catch (e) {
        readyOutcome = () => Promise.reject(e);
      }

      redirectOutcomeMap.set(this.auth._key(), readyOutcome);
    }

    return readyOutcome();
  }

  async onAuthEvent(event) {
    if (event.type === "signInViaRedirect"
    /* SIGN_IN_VIA_REDIRECT */
    ) {
      return super.onAuthEvent(event);
    } else if (event.type === "unknown"
    /* UNKNOWN */
    ) {
      // This is a sentinel value indicating there's no pending redirect
      this.resolve(null);
      return;
    }

    if (event.eventId) {
      const user = await this.auth._redirectUserForId(event.eventId);

      if (user) {
        this.user = user;
        return super.onAuthEvent(event);
      } else {
        this.resolve(null);
      }
    }
  }

  async onExecution() {}

  cleanUp() {}

}

async function _getAndClearPendingRedirectStatus(resolver, auth) {
  const key = pendingRedirectKey(auth);
  const hasPendingRedirect = (await resolverPersistence(resolver)._get(key)) === 'true';
  await resolverPersistence(resolver)._remove(key);
  return hasPendingRedirect;
}

async function _setPendingRedirectStatus(resolver, auth) {
  return resolverPersistence(resolver)._set(pendingRedirectKey(auth), 'true');
}

function _clearRedirectOutcomes() {
  redirectOutcomeMap.clear();
}

function resolverPersistence(resolver) {
  return _getInstance(resolver._redirectPersistence);
}

function pendingRedirectKey(auth) {
  return _persistenceKeyName(PENDING_REDIRECT_KEY, auth.config.apiKey, auth.name);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Authenticates a Firebase client using a full-page redirect flow.
 *
 * @remarks
 * To handle the results and errors for this operation, refer to {@link getRedirectResult}.
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new FacebookAuthProvider();
 * // You can add additional scopes to the provider:
 * provider.addScope('user_birthday');
 * // Start a sign in process for an unauthenticated user.
 * await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * if (result) {
 *   // This is the signed-in user
 *   const user = result.user;
 *   // This gives you a Facebook Access Token.
 *   const credential = provider.credentialFromResult(auth, result);
 *   const token = credential.accessToken;
 * }
 * // As this API can be used for sign-in, linking and reauthentication,
 * // check the operationType to determine what triggered this redirect
 * // operation.
 * const operationType = result.operationType;
 * ```
 *
 * @param auth - The {@link Auth} instance.
 * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
 * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
 * @param resolver - An instance of {@link PopupRedirectResolver}, optional
 * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
 *
 * @public
 */


function signInWithRedirect(auth, provider, resolver) {
  return _signInWithRedirect(auth, provider, resolver);
}

async function _signInWithRedirect(auth, provider, resolver) {
  const authInternal = _castAuth(auth);

  _assertInstanceOf(auth, provider, FederatedAuthProvider);

  const resolverInternal = _withDefaultResolver(authInternal, resolver);

  await _setPendingRedirectStatus(resolverInternal, authInternal);
  return resolverInternal._openRedirect(authInternal, provider, "signInViaRedirect"
  /* SIGN_IN_VIA_REDIRECT */
  );
}
/**
 * Reauthenticates the current user with the specified {@link OAuthProvider} using a full-page redirect flow.
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new FacebookAuthProvider();
 * const result = await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * // Link using a redirect.
 * await linkWithRedirect(result.user, provider);
 * // This will again trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * ```
 *
 * @param user - The user.
 * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
 * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
 * @param resolver - An instance of {@link PopupRedirectResolver}, optional
 * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
 *
 * @public
 */


function reauthenticateWithRedirect(user, provider, resolver) {
  return _reauthenticateWithRedirect(user, provider, resolver);
}

async function _reauthenticateWithRedirect(user, provider, resolver) {
  const userInternal = (0, _util.getModularInstance)(user);

  _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider); // Allow the resolver to error before persisting the redirect user


  const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);

  await _setPendingRedirectStatus(resolverInternal, userInternal.auth);
  const eventId = await prepareUserForRedirect(userInternal);
  return resolverInternal._openRedirect(userInternal.auth, provider, "reauthViaRedirect"
  /* REAUTH_VIA_REDIRECT */
  , eventId);
}
/**
 * Links the {@link OAuthProvider} to the user account using a full-page redirect flow.
 *
 * @example
 * ```javascript
 * // Sign in using some other provider.
 * const result = await signInWithEmailAndPassword(auth, email, password);
 * // Link using a redirect.
 * const provider = new FacebookAuthProvider();
 * await linkWithRedirect(result.user, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * ```
 *
 * @param user - The user.
 * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
 * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
 * @param resolver - An instance of {@link PopupRedirectResolver}, optional
 * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
 *
 *
 * @public
 */


function linkWithRedirect(user, provider, resolver) {
  return _linkWithRedirect(user, provider, resolver);
}

async function _linkWithRedirect(user, provider, resolver) {
  const userInternal = (0, _util.getModularInstance)(user);

  _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider); // Allow the resolver to error before persisting the redirect user


  const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);

  await _assertLinkedStatus(false, userInternal, provider.providerId);
  await _setPendingRedirectStatus(resolverInternal, userInternal.auth);
  const eventId = await prepareUserForRedirect(userInternal);
  return resolverInternal._openRedirect(userInternal.auth, provider, "linkViaRedirect"
  /* LINK_VIA_REDIRECT */
  , eventId);
}
/**
 * Returns a {@link UserCredential} from the redirect-based sign-in flow.
 *
 * @remarks
 * If sign-in succeeded, returns the signed in user. If sign-in was unsuccessful, fails with an
 * error. If no redirect operation was called, returns a {@link UserCredential}
 * with a null `user`.
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new FacebookAuthProvider();
 * // You can add additional scopes to the provider:
 * provider.addScope('user_birthday');
 * // Start a sign in process for an unauthenticated user.
 * await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * if (result) {
 *   // This is the signed-in user
 *   const user = result.user;
 *   // This gives you a Facebook Access Token.
 *   const credential = provider.credentialFromResult(auth, result);
 *   const token = credential.accessToken;
 * }
 * // As this API can be used for sign-in, linking and reauthentication,
 * // check the operationType to determine what triggered this redirect
 * // operation.
 * const operationType = result.operationType;
 * ```
 *
 * @param auth - The {@link Auth} instance.
 * @param resolver - An instance of {@link PopupRedirectResolver}, optional
 * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
 *
 * @public
 */


async function getRedirectResult(auth, resolver) {
  await _castAuth(auth)._initializationPromise;
  return _getRedirectResult(auth, resolver, false);
}

async function _getRedirectResult(auth, resolverExtern, bypassAuthState = false) {
  const authInternal = _castAuth(auth);

  const resolver = _withDefaultResolver(authInternal, resolverExtern);

  const action = new RedirectAction(authInternal, resolver, bypassAuthState);
  const result = await action.execute();

  if (result && !bypassAuthState) {
    delete result.user._redirectEventId;
    await authInternal._persistUserIfCurrent(result.user);
    await authInternal._setRedirectUser(null, resolverExtern);
  }

  return result;
}

async function prepareUserForRedirect(user) {
  const eventId = _generateEventId(`${user.uid}:::`);

  user._redirectEventId = eventId;
  await user.auth._setRedirectUser(user);
  await user.auth._persistUserIfCurrent(user);
  return eventId;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// The amount of time to store the UIDs of seen events; this is
// set to 10 min by default


const EVENT_DUPLICATION_CACHE_DURATION_MS = 10 * 60 * 1000;

class AuthEventManager {
  constructor(auth) {
    this.auth = auth;
    this.cachedEventUids = new Set();
    this.consumers = new Set();
    this.queuedRedirectEvent = null;
    this.hasHandledPotentialRedirect = false;
    this.lastProcessedEventTime = Date.now();
  }

  registerConsumer(authEventConsumer) {
    this.consumers.add(authEventConsumer);

    if (this.queuedRedirectEvent && this.isEventForConsumer(this.queuedRedirectEvent, authEventConsumer)) {
      this.sendToConsumer(this.queuedRedirectEvent, authEventConsumer);
      this.saveEventToCache(this.queuedRedirectEvent);
      this.queuedRedirectEvent = null;
    }
  }

  unregisterConsumer(authEventConsumer) {
    this.consumers.delete(authEventConsumer);
  }

  onEvent(event) {
    // Check if the event has already been handled
    if (this.hasEventBeenHandled(event)) {
      return false;
    }

    let handled = false;
    this.consumers.forEach(consumer => {
      if (this.isEventForConsumer(event, consumer)) {
        handled = true;
        this.sendToConsumer(event, consumer);
        this.saveEventToCache(event);
      }
    });

    if (this.hasHandledPotentialRedirect || !isRedirectEvent(event)) {
      // If we've already seen a redirect before, or this is a popup event,
      // bail now
      return handled;
    }

    this.hasHandledPotentialRedirect = true; // If the redirect wasn't handled, hang on to it

    if (!handled) {
      this.queuedRedirectEvent = event;
      handled = true;
    }

    return handled;
  }

  sendToConsumer(event, consumer) {
    var _a;

    if (event.error && !isNullRedirectEvent(event)) {
      const code = ((_a = event.error.code) === null || _a === void 0 ? void 0 : _a.split('auth/')[1]) || "internal-error"
      /* INTERNAL_ERROR */
      ;
      consumer.onError(_createError(this.auth, code));
    } else {
      consumer.onAuthEvent(event);
    }
  }

  isEventForConsumer(event, consumer) {
    const eventIdMatches = consumer.eventId === null || !!event.eventId && event.eventId === consumer.eventId;
    return consumer.filter.includes(event.type) && eventIdMatches;
  }

  hasEventBeenHandled(event) {
    if (Date.now() - this.lastProcessedEventTime >= EVENT_DUPLICATION_CACHE_DURATION_MS) {
      this.cachedEventUids.clear();
    }

    return this.cachedEventUids.has(eventUid(event));
  }

  saveEventToCache(event) {
    this.cachedEventUids.add(eventUid(event));
    this.lastProcessedEventTime = Date.now();
  }

}

exports.az = AuthEventManager;

function eventUid(e) {
  return [e.type, e.eventId, e.sessionId, e.tenantId].filter(v => v).join('-');
}

function isNullRedirectEvent({
  type,
  error
}) {
  return type === "unknown"
  /* UNKNOWN */
  && (error === null || error === void 0 ? void 0 : error.code) === `auth/${"no-auth-event"
  /* NO_AUTH_EVENT */
  }`;
}

function isRedirectEvent(event) {
  switch (event.type) {
    case "signInViaRedirect"
    /* SIGN_IN_VIA_REDIRECT */
    :
    case "linkViaRedirect"
    /* LINK_VIA_REDIRECT */
    :
    case "reauthViaRedirect"
    /* REAUTH_VIA_REDIRECT */
    :
      return true;

    case "unknown"
    /* UNKNOWN */
    :
      return isNullRedirectEvent(event);

    default:
      return false;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


async function _getProjectConfig(auth, request = {}) {
  return _performApiRequest(auth, "GET"
  /* GET */
  , "/v1/projects"
  /* GET_PROJECT_CONFIG */
  , request);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const IP_ADDRESS_REGEX = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;
const HTTP_REGEX = /^https?/;

async function _validateOrigin(auth) {
  // Skip origin validation if we are in an emulated environment
  if (auth.config.emulator) {
    return;
  }

  const {
    authorizedDomains
  } = await _getProjectConfig(auth);

  for (const domain of authorizedDomains) {
    try {
      if (matchDomain(domain)) {
        return;
      }
    } catch (_a) {// Do nothing if there's a URL error; just continue searching
    }
  } // In the old SDK, this error also provides helpful messages.


  _fail(auth, "unauthorized-domain"
  /* INVALID_ORIGIN */
  );
}

function matchDomain(expected) {
  const currentUrl = _getCurrentUrl();

  const {
    protocol,
    hostname
  } = new URL(currentUrl);

  if (expected.startsWith('chrome-extension://')) {
    const ceUrl = new URL(expected);

    if (ceUrl.hostname === '' && hostname === '') {
      // For some reason we're not parsing chrome URLs properly
      return protocol === 'chrome-extension:' && expected.replace('chrome-extension://', '') === currentUrl.replace('chrome-extension://', '');
    }

    return protocol === 'chrome-extension:' && ceUrl.hostname === hostname;
  }

  if (!HTTP_REGEX.test(protocol)) {
    return false;
  }

  if (IP_ADDRESS_REGEX.test(expected)) {
    // The domain has to be exactly equal to the pattern, as an IP domain will
    // only contain the IP, no extra character.
    return hostname === expected;
  } // Dots in pattern should be escaped.


  const escapedDomainPattern = expected.replace(/\./g, '\\.'); // Non ip address domains.
  // domain.com = *.domain.com OR domain.com

  const re = new RegExp('^(.+\\.' + escapedDomainPattern + '|' + escapedDomainPattern + ')$', 'i');
  return re.test(hostname);
}
/**
 * @license
 * Copyright 2020 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const NETWORK_TIMEOUT = new Delay(30000, 60000);
/**
 * Reset unlaoded GApi modules. If gapi.load fails due to a network error,
 * it will stop working after a retrial. This is a hack to fix this issue.
 */

function resetUnloadedGapiModules() {
  // Clear last failed gapi.load state to force next gapi.load to first
  // load the failed gapi.iframes module.
  // Get gapix.beacon context.
  const beacon = _window().___jsl; // Get current hint.


  if (beacon === null || beacon === void 0 ? void 0 : beacon.H) {
    // Get gapi hint.
    for (const hint of Object.keys(beacon.H)) {
      // Requested modules.
      beacon.H[hint].r = beacon.H[hint].r || []; // Loaded modules.

      beacon.H[hint].L = beacon.H[hint].L || []; // Set requested modules to a copy of the loaded modules.

      beacon.H[hint].r = [...beacon.H[hint].L]; // Clear pending callbacks.

      if (beacon.CP) {
        for (let i = 0; i < beacon.CP.length; i++) {
          // Remove all failed pending callbacks.
          beacon.CP[i] = null;
        }
      }
    }
  }
}

function loadGapi(auth) {
  return new Promise((resolve, reject) => {
    var _a, _b, _c; // Function to run when gapi.load is ready.


    function loadGapiIframe() {
      // The developer may have tried to previously run gapi.load and failed.
      // Run this to fix that.
      resetUnloadedGapiModules();
      gapi.load('gapi.iframes', {
        callback: () => {
          resolve(gapi.iframes.getContext());
        },
        ontimeout: () => {
          // The above reset may be sufficient, but having this reset after
          // failure ensures that if the developer calls gapi.load after the
          // connection is re-established and before another attempt to embed
          // the iframe, it would work and would not be broken because of our
          // failed attempt.
          // Timeout when gapi.iframes.Iframe not loaded.
          resetUnloadedGapiModules();
          reject(_createError(auth, "network-request-failed"
          /* NETWORK_REQUEST_FAILED */
          ));
        },
        timeout: NETWORK_TIMEOUT.get()
      });
    }

    if ((_b = (_a = _window().gapi) === null || _a === void 0 ? void 0 : _a.iframes) === null || _b === void 0 ? void 0 : _b.Iframe) {
      // If gapi.iframes.Iframe available, resolve.
      resolve(gapi.iframes.getContext());
    } else if (!!((_c = _window().gapi) === null || _c === void 0 ? void 0 : _c.load)) {
      // Gapi loader ready, load gapi.iframes.
      loadGapiIframe();
    } else {
      // Create a new iframe callback when this is called so as not to overwrite
      // any previous defined callback. This happens if this method is called
      // multiple times in parallel and could result in the later callback
      // overwriting the previous one. This would end up with a iframe
      // timeout.
      const cbName = _generateCallbackName('iframefcb'); // GApi loader not available, dynamically load platform.js.


      _window()[cbName] = () => {
        // GApi loader should be ready.
        if (!!gapi.load) {
          loadGapiIframe();
        } else {
          // Gapi loader failed, throw error.
          reject(_createError(auth, "network-request-failed"
          /* NETWORK_REQUEST_FAILED */
          ));
        }
      }; // Load GApi loader.


      return _loadJS(`https://apis.google.com/js/api.js?onload=${cbName}`);
    }
  }).catch(error => {
    // Reset cached promise to allow for retrial.
    cachedGApiLoader = null;
    throw error;
  });
}

let cachedGApiLoader = null;

function _loadGapi(auth) {
  cachedGApiLoader = cachedGApiLoader || loadGapi(auth);
  return cachedGApiLoader;
}
/**
 * @license
 * Copyright 2020 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const PING_TIMEOUT = new Delay(5000, 15000);
const IFRAME_PATH = '__/auth/iframe';
const EMULATED_IFRAME_PATH = 'emulator/auth/iframe';
const IFRAME_ATTRIBUTES = {
  style: {
    position: 'absolute',
    top: '-100px',
    width: '1px',
    height: '1px'
  }
}; // Map from apiHost to endpoint ID for passing into iframe. In current SDK, apiHost can be set to
// anything (not from a list of endpoints with IDs as in legacy), so this is the closest we can get.

const EID_FROM_APIHOST = new Map([["identitytoolkit.googleapis.com"
/* API_HOST */
, 'p'], ['staging-identitytoolkit.sandbox.googleapis.com', 's'], ['test-identitytoolkit.sandbox.googleapis.com', 't'] // test
]);

function getIframeUrl(auth) {
  const config = auth.config;

  _assert(config.authDomain, auth, "auth-domain-config-required"
  /* MISSING_AUTH_DOMAIN */
  );

  const url = config.emulator ? _emulatorUrl(config, EMULATED_IFRAME_PATH) : `https://${auth.config.authDomain}/${IFRAME_PATH}`;
  const params = {
    apiKey: config.apiKey,
    appName: auth.name,
    v: _app.SDK_VERSION
  };
  const eid = EID_FROM_APIHOST.get(auth.config.apiHost);

  if (eid) {
    params.eid = eid;
  }

  const frameworks = auth._getFrameworks();

  if (frameworks.length) {
    params.fw = frameworks.join(',');
  }

  return `${url}?${(0, _util.querystring)(params).slice(1)}`;
}

async function _openIframe(auth) {
  const context = await _loadGapi(auth);

  const gapi = _window().gapi;

  _assert(gapi, auth, "internal-error"
  /* INTERNAL_ERROR */
  );

  return context.open({
    where: document.body,
    url: getIframeUrl(auth),
    messageHandlersFilter: gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER,
    attributes: IFRAME_ATTRIBUTES,
    dontclear: true
  }, iframe => new Promise(async (resolve, reject) => {
    await iframe.restyle({
      // Prevent iframe from closing on mouse out.
      setHideOnLeave: false
    });

    const networkError = _createError(auth, "network-request-failed"
    /* NETWORK_REQUEST_FAILED */
    ); // Confirm iframe is correctly loaded.
    // To fallback on failure, set a timeout.


    const networkErrorTimer = _window().setTimeout(() => {
      reject(networkError);
    }, PING_TIMEOUT.get()); // Clear timer and resolve pending iframe ready promise.


    function clearTimerAndResolve() {
      _window().clearTimeout(networkErrorTimer);

      resolve(iframe);
    } // This returns an IThenable. However the reject part does not call
    // when the iframe is not loaded.


    iframe.ping(clearTimerAndResolve).then(clearTimerAndResolve, () => {
      reject(networkError);
    });
  }));
}
/**
 * @license
 * Copyright 2020 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const BASE_POPUP_OPTIONS = {
  location: 'yes',
  resizable: 'yes',
  statusbar: 'yes',
  toolbar: 'no'
};
const DEFAULT_WIDTH = 500;
const DEFAULT_HEIGHT = 600;
const TARGET_BLANK = '_blank';
const FIREFOX_EMPTY_URL = 'http://localhost';

class AuthPopup {
  constructor(window) {
    this.window = window;
    this.associatedEvent = null;
  }

  close() {
    if (this.window) {
      try {
        this.window.close();
      } catch (e) {}
    }
  }

}

exports.aH = AuthPopup;

function _open(auth, url, name, width = DEFAULT_WIDTH, height = DEFAULT_HEIGHT) {
  const top = Math.max((window.screen.availHeight - height) / 2, 0).toString();
  const left = Math.max((window.screen.availWidth - width) / 2, 0).toString();
  let target = '';
  const options = Object.assign(Object.assign({}, BASE_POPUP_OPTIONS), {
    width: width.toString(),
    height: height.toString(),
    top,
    left
  }); // Chrome iOS 7 and 8 is returning an undefined popup win when target is
  // specified, even though the popup is not necessarily blocked.

  const ua = (0, _util.getUA)().toLowerCase();

  if (name) {
    target = _isChromeIOS(ua) ? TARGET_BLANK : name;
  }

  if (_isFirefox(ua)) {
    // Firefox complains when invalid URLs are popped out. Hacky way to bypass.
    url = url || FIREFOX_EMPTY_URL; // Firefox disables by default scrolling on popup windows, which can create
    // issues when the user has many Google accounts, for instance.

    options.scrollbars = 'yes';
  }

  const optionsString = Object.entries(options).reduce((accum, [key, value]) => `${accum}${key}=${value},`, '');

  if (_isIOSStandalone(ua) && target !== '_self') {
    openAsNewWindowIOS(url || '', target);
    return new AuthPopup(null);
  } // about:blank getting sanitized causing browsers like IE/Edge to display
  // brief error message before redirecting to handler.


  const newWin = window.open(url || '', target, optionsString);

  _assert(newWin, auth, "popup-blocked"
  /* POPUP_BLOCKED */
  ); // Flaky on IE edge, encapsulate with a try and catch.


  try {
    newWin.focus();
  } catch (e) {}

  return new AuthPopup(newWin);
}

function openAsNewWindowIOS(url, target) {
  const el = document.createElement('a');
  el.href = url;
  el.target = target;
  const click = document.createEvent('MouseEvent');
  click.initMouseEvent('click', true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 1, null);
  el.dispatchEvent(click);
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * URL for Authentication widget which will initiate the OAuth handshake
 *
 * @internal
 */


const WIDGET_PATH = '__/auth/handler';
/**
 * URL for emulated environment
 *
 * @internal
 */

const EMULATOR_WIDGET_PATH = 'emulator/auth/handler';

function _getRedirectUrl(auth, provider, authType, redirectUrl, eventId, additionalParams) {
  _assert(auth.config.authDomain, auth, "auth-domain-config-required"
  /* MISSING_AUTH_DOMAIN */
  );

  _assert(auth.config.apiKey, auth, "invalid-api-key"
  /* INVALID_API_KEY */
  );

  const params = {
    apiKey: auth.config.apiKey,
    appName: auth.name,
    authType,
    redirectUrl,
    v: _app.SDK_VERSION,
    eventId
  };

  if (provider instanceof FederatedAuthProvider) {
    provider.setDefaultLanguage(auth.languageCode);
    params.providerId = provider.providerId || '';

    if (!(0, _util.isEmpty)(provider.getCustomParameters())) {
      params.customParameters = JSON.stringify(provider.getCustomParameters());
    } // TODO set additionalParams from the provider as well?


    for (const [key, value] of Object.entries(additionalParams || {})) {
      params[key] = value;
    }
  }

  if (provider instanceof BaseOAuthProvider) {
    const scopes = provider.getScopes().filter(scope => scope !== '');

    if (scopes.length > 0) {
      params.scopes = scopes.join(',');
    }
  }

  if (auth.tenantId) {
    params.tid = auth.tenantId;
  } // TODO: maybe set eid as endipointId
  // TODO: maybe set fw as Frameworks.join(",")


  const paramsDict = params;

  for (const key of Object.keys(paramsDict)) {
    if (paramsDict[key] === undefined) {
      delete paramsDict[key];
    }
  }

  return `${getHandlerBase(auth)}?${(0, _util.querystring)(paramsDict).slice(1)}`;
}

function getHandlerBase({
  config
}) {
  if (!config.emulator) {
    return `https://${config.authDomain}/${WIDGET_PATH}`;
  }

  return _emulatorUrl(config, EMULATOR_WIDGET_PATH);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The special web storage event
 *
 */


const WEB_STORAGE_SUPPORT_KEY = 'webStorageSupport';

class BrowserPopupRedirectResolver {
  constructor() {
    this.eventManagers = {};
    this.iframes = {};
    this.originValidationPromises = {};
    this._redirectPersistence = browserSessionPersistence;
    this._completeRedirectFn = _getRedirectResult;
  } // Wrapping in async even though we don't await anywhere in order
  // to make sure errors are raised as promise rejections


  async _openPopup(auth, provider, authType, eventId) {
    var _a;

    debugAssert((_a = this.eventManagers[auth._key()]) === null || _a === void 0 ? void 0 : _a.manager, '_initialize() not called before _openPopup()');

    const url = _getRedirectUrl(auth, provider, authType, _getCurrentUrl(), eventId);

    return _open(auth, url, _generateEventId());
  }

  async _openRedirect(auth, provider, authType, eventId) {
    await this._originValidation(auth);

    _setWindowLocation(_getRedirectUrl(auth, provider, authType, _getCurrentUrl(), eventId));

    return new Promise(() => {});
  }

  _initialize(auth) {
    const key = auth._key();

    if (this.eventManagers[key]) {
      const {
        manager,
        promise
      } = this.eventManagers[key];

      if (manager) {
        return Promise.resolve(manager);
      } else {
        debugAssert(promise, 'If manager is not set, promise should be');
        return promise;
      }
    }

    const promise = this.initAndGetManager(auth);
    this.eventManagers[key] = {
      promise
    };
    return promise;
  }

  async initAndGetManager(auth) {
    const iframe = await _openIframe(auth);
    const manager = new AuthEventManager(auth);
    iframe.register('authEvent', iframeEvent => {
      _assert(iframeEvent === null || iframeEvent === void 0 ? void 0 : iframeEvent.authEvent, auth, "invalid-auth-event"
      /* INVALID_AUTH_EVENT */
      ); // TODO: Consider splitting redirect and popup events earlier on


      const handled = manager.onEvent(iframeEvent.authEvent);
      return {
        status: handled ? "ACK"
        /* ACK */
        : "ERROR"
        /* ERROR */

      };
    }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);
    this.eventManagers[auth._key()] = {
      manager
    };
    this.iframes[auth._key()] = iframe;
    return manager;
  }

  _isIframeWebStorageSupported(auth, cb) {
    const iframe = this.iframes[auth._key()];

    iframe.send(WEB_STORAGE_SUPPORT_KEY, {
      type: WEB_STORAGE_SUPPORT_KEY
    }, result => {
      var _a;

      const isSupported = (_a = result === null || result === void 0 ? void 0 : result[0]) === null || _a === void 0 ? void 0 : _a[WEB_STORAGE_SUPPORT_KEY];

      if (isSupported !== undefined) {
        cb(!!isSupported);
      }

      _fail(auth, "internal-error"
      /* INTERNAL_ERROR */
      );
    }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);
  }

  _originValidation(auth) {
    const key = auth._key();

    if (!this.originValidationPromises[key]) {
      this.originValidationPromises[key] = _validateOrigin(auth);
    }

    return this.originValidationPromises[key];
  }

  get _shouldInitProactively() {
    // Mobile browsers and Safari need to optimistically initialize
    return _isMobileBrowser() || _isSafari() || _isIOS();
  }

}
/**
 * An implementation of {@link PopupRedirectResolver} suitable for browser
 * based applications.
 *
 * @public
 */


const browserPopupRedirectResolver = BrowserPopupRedirectResolver;
exports.k = browserPopupRedirectResolver;

class MultiFactorAssertionImpl {
  constructor(factorId) {
    this.factorId = factorId;
  }

  _process(auth, session, displayName) {
    switch (session.type) {
      case "enroll"
      /* ENROLL */
      :
        return this._finalizeEnroll(auth, session.credential, displayName);

      case "signin"
      /* SIGN_IN */
      :
        return this._finalizeSignIn(auth, session.credential);

      default:
        return debugFail('unexpected MultiFactorSessionType');
    }
  }

}
/**
 * {@inheritdoc PhoneMultiFactorAssertion}
 *
 * @public
 */


class PhoneMultiFactorAssertionImpl extends MultiFactorAssertionImpl {
  constructor(credential) {
    super("phone"
    /* PHONE */
    );
    this.credential = credential;
  }
  /** @internal */


  static _fromCredential(credential) {
    return new PhoneMultiFactorAssertionImpl(credential);
  }
  /** @internal */


  _finalizeEnroll(auth, idToken, displayName) {
    return finalizeEnrollPhoneMfa(auth, {
      idToken,
      displayName,
      phoneVerificationInfo: this.credential._makeVerificationRequest()
    });
  }
  /** @internal */


  _finalizeSignIn(auth, mfaPendingCredential) {
    return finalizeSignInPhoneMfa(auth, {
      mfaPendingCredential,
      phoneVerificationInfo: this.credential._makeVerificationRequest()
    });
  }

}
/**
 * Provider for generating a {@link PhoneMultiFactorAssertion}.
 *
 * @public
 */


class PhoneMultiFactorGenerator {
  constructor() {}
  /**
   * Provides a {@link PhoneMultiFactorAssertion} to confirm ownership of the phone second factor.
   *
   * @param phoneAuthCredential - A credential provided by {@link PhoneAuthProvider.credential}.
   * @returns A {@link PhoneMultiFactorAssertion} which can be used with
   * {@link MultiFactorResolver.resolveSignIn}
   */


  static assertion(credential) {
    return PhoneMultiFactorAssertionImpl._fromCredential(credential);
  }

}

exports.m = PhoneMultiFactorGenerator;
var name = "@firebase/auth";
var version = "0.17.2";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

class AuthInterop {
  constructor(auth) {
    this.auth = auth;
    this.internalListeners = new Map();
  }

  getUid() {
    var _a;

    this.assertAuthConfigured();
    return ((_a = this.auth.currentUser) === null || _a === void 0 ? void 0 : _a.uid) || null;
  }

  async getToken(forceRefresh) {
    this.assertAuthConfigured();
    await this.auth._initializationPromise;

    if (!this.auth.currentUser) {
      return null;
    }

    const accessToken = await this.auth.currentUser.getIdToken(forceRefresh);
    return {
      accessToken
    };
  }

  addAuthTokenListener(listener) {
    this.assertAuthConfigured();

    if (this.internalListeners.has(listener)) {
      return;
    }

    const unsubscribe = this.auth.onIdTokenChanged(user => {
      var _a;

      listener(((_a = user) === null || _a === void 0 ? void 0 : _a.stsTokenManager.accessToken) || null);
    });
    this.internalListeners.set(listener, unsubscribe);
    this.updateProactiveRefresh();
  }

  removeAuthTokenListener(listener) {
    this.assertAuthConfigured();
    const unsubscribe = this.internalListeners.get(listener);

    if (!unsubscribe) {
      return;
    }

    this.internalListeners.delete(listener);
    unsubscribe();
    this.updateProactiveRefresh();
  }

  assertAuthConfigured() {
    _assert(this.auth._initializationPromise, "dependent-sdk-initialized-before-auth"
    /* DEPENDENT_SDK_INIT_BEFORE_AUTH */
    );
  }

  updateProactiveRefresh() {
    if (this.internalListeners.size > 0) {
      this.auth._startProactiveRefresh();
    } else {
      this.auth._stopProactiveRefresh();
    }
  }

}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function getVersionForPlatform(clientPlatform) {
  switch (clientPlatform) {
    case "Node"
    /* NODE */
    :
      return 'node';

    case "ReactNative"
    /* REACT_NATIVE */
    :
      return 'rn';

    case "Worker"
    /* WORKER */
    :
      return 'webworker';

    case "Cordova"
    /* CORDOVA */
    :
      return 'cordova';

    default:
      return undefined;
  }
}
/** @internal */


function registerAuth(clientPlatform) {
  (0, _app._registerComponent)(new _component.Component("auth"
  /* AUTH */
  , (container, {
    options: deps
  }) => {
    const app = container.getProvider('app').getImmediate();
    const {
      apiKey,
      authDomain
    } = app.options;
    return (app => {
      _assert(apiKey && !apiKey.includes(':'), "invalid-api-key"
      /* INVALID_API_KEY */
      , {
        appName: app.name
      }); // Auth domain is optional if IdP sign in isn't being used


      _assert(!(authDomain === null || authDomain === void 0 ? void 0 : authDomain.includes(':')), "argument-error"
      /* ARGUMENT_ERROR */
      , {
        appName: app.name
      });

      const config = {
        apiKey,
        authDomain,
        clientPlatform,
        apiHost: "identitytoolkit.googleapis.com"
        /* API_HOST */
        ,
        tokenApiHost: "securetoken.googleapis.com"
        /* TOKEN_API_HOST */
        ,
        apiScheme: "https"
        /* API_SCHEME */
        ,
        sdkClientVersion: _getClientVersion(clientPlatform)
      };
      const authInstance = new AuthImpl(app, config);

      _initializeAuthInstance(authInstance, deps);

      return authInstance;
    })(app);
  }, "PUBLIC"
  /* PUBLIC */
  )
  /**
   * Auth can only be initialized by explicitly calling getAuth() or initializeAuth()
   * For why we do this, See go/firebase-next-auth-init
   */
  .setInstantiationMode("EXPLICIT"
  /* EXPLICIT */
  )
  /**
   * Because all firebase products that depend on auth depend on auth-internal directly,
   * we need to initialize auth-internal after auth is initialized to make it available to other firebase products.
   */
  .setInstanceCreatedCallback((container, _instanceIdentifier, _instance) => {
    const authInternalProvider = container.getProvider("auth-internal"
    /* AUTH_INTERNAL */
    );
    authInternalProvider.initialize();
  }));
  (0, _app._registerComponent)(new _component.Component("auth-internal"
  /* AUTH_INTERNAL */
  , container => {
    const auth = _castAuth(container.getProvider("auth"
    /* AUTH */
    ).getImmediate());

    return (auth => new AuthInterop(auth))(auth);
  }, "PRIVATE"
  /* PRIVATE */
  ).setInstantiationMode("EXPLICIT"
  /* EXPLICIT */
  ));
  (0, _app.registerVersion)(name, version, getVersionForPlatform(clientPlatform));
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns the Auth instance associated with the provided {@link @firebase/app#FirebaseApp}.
 * If no instance exists, initializes an Auth instance with platform-specific default dependencies.
 *
 * @param app - The Firebase App.
 *
 * @public
 */


function getAuth(app = (0, _app.getApp)()) {
  const provider = (0, _app._getProvider)(app, 'auth');

  if (provider.isInitialized()) {
    return provider.getImmediate();
  }

  return initializeAuth(app, {
    popupRedirectResolver: browserPopupRedirectResolver,
    persistence: [indexedDBLocalPersistence, browserLocalPersistence, browserSessionPersistence]
  });
}

registerAuth("Browser"
/* BROWSER */
);
},{"@firebase/util":"node_modules/@firebase/util/dist/index.esm.js","@firebase/app":"node_modules/@firebase/app/dist/index.esm2017.js","tslib":"node_modules/tslib/tslib.es6.js","@firebase/logger":"node_modules/@firebase/logger/dist/index.esm.js","@firebase/component":"node_modules/@firebase/component/dist/index.esm.js"}],"node_modules/@firebase/auth/dist/esm2017/internal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addFrameworkForLogging = addFrameworkForLogging;
Object.defineProperty(exports, "ActionCodeOperation", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.A;
  }
});
Object.defineProperty(exports, "ActionCodeURL", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.ac;
  }
});
Object.defineProperty(exports, "AuthCredential", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.G;
  }
});
Object.defineProperty(exports, "AuthErrorCodes", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.C;
  }
});
Object.defineProperty(exports, "AuthImpl", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.aE;
  }
});
Object.defineProperty(exports, "AuthPopup", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.aH;
  }
});
Object.defineProperty(exports, "EmailAuthCredential", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.H;
  }
});
Object.defineProperty(exports, "EmailAuthProvider", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.L;
  }
});
Object.defineProperty(exports, "FacebookAuthProvider", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.M;
  }
});
Object.defineProperty(exports, "FactorId", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.F;
  }
});
Object.defineProperty(exports, "FetchProvider", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.aI;
  }
});
Object.defineProperty(exports, "GithubAuthProvider", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.Q;
  }
});
Object.defineProperty(exports, "GoogleAuthProvider", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.N;
  }
});
Object.defineProperty(exports, "OAuthCredential", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.I;
  }
});
Object.defineProperty(exports, "OAuthProvider", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.T;
  }
});
Object.defineProperty(exports, "OperationType", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.O;
  }
});
Object.defineProperty(exports, "PhoneAuthCredential", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.J;
  }
});
Object.defineProperty(exports, "PhoneAuthProvider", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.P;
  }
});
Object.defineProperty(exports, "PhoneMultiFactorGenerator", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.m;
  }
});
Object.defineProperty(exports, "ProviderId", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.o;
  }
});
Object.defineProperty(exports, "RecaptchaVerifier", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.R;
  }
});
Object.defineProperty(exports, "SAMLAuthCredential", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.aJ;
  }
});
Object.defineProperty(exports, "SAMLAuthProvider", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.U;
  }
});
Object.defineProperty(exports, "SignInMethod", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.S;
  }
});
Object.defineProperty(exports, "TwitterAuthProvider", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.V;
  }
});
Object.defineProperty(exports, "UserImpl", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.aD;
  }
});
Object.defineProperty(exports, "_assert", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.aw;
  }
});
Object.defineProperty(exports, "_castAuth", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.aC;
  }
});
Object.defineProperty(exports, "_fail", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.as;
  }
});
Object.defineProperty(exports, "_generateEventId", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.aG;
  }
});
Object.defineProperty(exports, "_getClientVersion", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.aF;
  }
});
Object.defineProperty(exports, "_getInstance", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.ax;
  }
});
Object.defineProperty(exports, "_getRedirectResult", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.aA;
  }
});
Object.defineProperty(exports, "_persistenceKeyName", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.ay;
  }
});
Object.defineProperty(exports, "applyActionCode", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.a1;
  }
});
Object.defineProperty(exports, "browserLocalPersistence", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.b;
  }
});
Object.defineProperty(exports, "browserPopupRedirectResolver", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.k;
  }
});
Object.defineProperty(exports, "browserSessionPersistence", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.a;
  }
});
Object.defineProperty(exports, "checkActionCode", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.a2;
  }
});
Object.defineProperty(exports, "confirmPasswordReset", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.a0;
  }
});
Object.defineProperty(exports, "connectAuthEmulator", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.E;
  }
});
Object.defineProperty(exports, "createUserWithEmailAndPassword", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.a4;
  }
});
Object.defineProperty(exports, "debugErrorMap", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.z;
  }
});
Object.defineProperty(exports, "deleteUser", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.y;
  }
});
Object.defineProperty(exports, "fetchSignInMethodsForEmail", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.a9;
  }
});
Object.defineProperty(exports, "getAdditionalUserInfo", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.ak;
  }
});
Object.defineProperty(exports, "getAuth", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.n;
  }
});
Object.defineProperty(exports, "getIdToken", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.ah;
  }
});
Object.defineProperty(exports, "getIdTokenResult", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.ai;
  }
});
Object.defineProperty(exports, "getMultiFactorResolver", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.am;
  }
});
Object.defineProperty(exports, "getRedirectResult", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.j;
  }
});
Object.defineProperty(exports, "inMemoryPersistence", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.K;
  }
});
Object.defineProperty(exports, "indexedDBLocalPersistence", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.i;
  }
});
Object.defineProperty(exports, "initializeAuth", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.D;
  }
});
Object.defineProperty(exports, "isSignInWithEmailLink", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.a7;
  }
});
Object.defineProperty(exports, "linkWithCredential", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.Y;
  }
});
Object.defineProperty(exports, "linkWithPhoneNumber", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.l;
  }
});
Object.defineProperty(exports, "linkWithPopup", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.d;
  }
});
Object.defineProperty(exports, "linkWithRedirect", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.g;
  }
});
Object.defineProperty(exports, "multiFactor", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.an;
  }
});
Object.defineProperty(exports, "onAuthStateChanged", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.t;
  }
});
Object.defineProperty(exports, "onIdTokenChanged", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.q;
  }
});
Object.defineProperty(exports, "parseActionCodeURL", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.ad;
  }
});
Object.defineProperty(exports, "prodErrorMap", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.B;
  }
});
Object.defineProperty(exports, "reauthenticateWithCredential", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.Z;
  }
});
Object.defineProperty(exports, "reauthenticateWithPhoneNumber", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.r;
  }
});
Object.defineProperty(exports, "reauthenticateWithPopup", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.e;
  }
});
Object.defineProperty(exports, "reauthenticateWithRedirect", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.h;
  }
});
Object.defineProperty(exports, "reload", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.al;
  }
});
Object.defineProperty(exports, "sendEmailVerification", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.aa;
  }
});
Object.defineProperty(exports, "sendPasswordResetEmail", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.$;
  }
});
Object.defineProperty(exports, "sendSignInLinkToEmail", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.a6;
  }
});
Object.defineProperty(exports, "setPersistence", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.p;
  }
});
Object.defineProperty(exports, "signInAnonymously", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.W;
  }
});
Object.defineProperty(exports, "signInWithCredential", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.X;
  }
});
Object.defineProperty(exports, "signInWithCustomToken", {
  enumerable: true,
  get: function () {
    return _index8fbd02b._;
  }
});
Object.defineProperty(exports, "signInWithEmailAndPassword", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.a5;
  }
});
Object.defineProperty(exports, "signInWithEmailLink", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.a8;
  }
});
Object.defineProperty(exports, "signInWithPhoneNumber", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.s;
  }
});
Object.defineProperty(exports, "signInWithPopup", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.c;
  }
});
Object.defineProperty(exports, "signInWithRedirect", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.f;
  }
});
Object.defineProperty(exports, "signOut", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.x;
  }
});
Object.defineProperty(exports, "unlink", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.aj;
  }
});
Object.defineProperty(exports, "updateCurrentUser", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.w;
  }
});
Object.defineProperty(exports, "updateEmail", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.af;
  }
});
Object.defineProperty(exports, "updatePassword", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.ag;
  }
});
Object.defineProperty(exports, "updatePhoneNumber", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.u;
  }
});
Object.defineProperty(exports, "updateProfile", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.ae;
  }
});
Object.defineProperty(exports, "useDeviceLanguage", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.v;
  }
});
Object.defineProperty(exports, "verifyBeforeUpdateEmail", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.ab;
  }
});
Object.defineProperty(exports, "verifyPasswordResetCode", {
  enumerable: true,
  get: function () {
    return _index8fbd02b.a3;
  }
});
exports.cordovaPopupRedirectResolver = void 0;

var _index8fbd02b = require("./index-8fbd02b6.js");

var _util = require("@firebase/util");

require("@firebase/app");

require("tslib");

require("@firebase/logger");

require("@firebase/component");

/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function _cordovaWindow() {
  return window;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * How long to wait after the app comes back into focus before concluding that
 * the user closed the sign in tab.
 */


const REDIRECT_TIMEOUT_MS = 2000;
/**
 * Generates the URL for the OAuth handler.
 */

async function _generateHandlerUrl(auth, event, provider) {
  var _a; // Get the cordova plugins


  const {
    BuildInfo
  } = _cordovaWindow();

  (0, _index8fbd02b.ap)(event.sessionId, 'AuthEvent did not contain a session ID');
  const sessionDigest = await computeSha256(event.sessionId);
  const additionalParams = {};

  if ((0, _index8fbd02b.aq)()) {
    // iOS app identifier
    additionalParams['ibi'] = BuildInfo.packageName;
  } else if ((0, _index8fbd02b.ar)()) {
    // Android app identifier
    additionalParams['apn'] = BuildInfo.packageName;
  } else {
    (0, _index8fbd02b.as)(auth, "operation-not-supported-in-this-environment"
    /* OPERATION_NOT_SUPPORTED */
    );
  } // Add the display name if available


  if (BuildInfo.displayName) {
    additionalParams['appDisplayName'] = BuildInfo.displayName;
  } // Attached the hashed session ID


  additionalParams['sessionId'] = sessionDigest;
  return (0, _index8fbd02b.at)(auth, provider, event.type, undefined, (_a = event.eventId) !== null && _a !== void 0 ? _a : undefined, additionalParams);
}
/**
 * Validates that this app is valid for this project configuration
 */


async function _validateOrigin(auth) {
  const {
    BuildInfo
  } = _cordovaWindow();

  const request = {};

  if ((0, _index8fbd02b.aq)()) {
    request.iosBundleId = BuildInfo.packageName;
  } else if ((0, _index8fbd02b.ar)()) {
    request.androidPackageName = BuildInfo.packageName;
  } else {
    (0, _index8fbd02b.as)(auth, "operation-not-supported-in-this-environment"
    /* OPERATION_NOT_SUPPORTED */
    );
  } // Will fail automatically if package name is not authorized


  await (0, _index8fbd02b.au)(auth, request);
}

function _performRedirect(handlerUrl) {
  // Get the cordova plugins
  const {
    cordova
  } = _cordovaWindow();

  return new Promise(resolve => {
    cordova.plugins.browsertab.isAvailable(browserTabIsAvailable => {
      let iabRef = null;

      if (browserTabIsAvailable) {
        cordova.plugins.browsertab.openUrl(handlerUrl);
      } else {
        // TODO: Return the inappbrowser ref that's returned from the open call
        iabRef = cordova.InAppBrowser.open(handlerUrl, (0, _index8fbd02b.ao)() ? '_blank' : '_system', 'location=yes');
      }

      resolve(iabRef);
    });
  });
}
/**
 * This function waits for app activity to be seen before resolving. It does
 * this by attaching listeners to various dom events. Once the app is determined
 * to be visible, this promise resolves. AFTER that resolution, the listeners
 * are detached and any browser tabs left open will be closed.
 */


async function _waitForAppResume(auth, eventListener, iabRef) {
  // Get the cordova plugins
  const {
    cordova
  } = _cordovaWindow();

  let cleanup = () => {};

  try {
    await new Promise((resolve, reject) => {
      let onCloseTimer = null; // DEFINE ALL THE CALLBACKS =====

      function authEventSeen() {
        var _a; // Auth event was detected. Resolve this promise and close the extra
        // window if it's still open.


        resolve();
        const closeBrowserTab = (_a = cordova.plugins.browsertab) === null || _a === void 0 ? void 0 : _a.close;

        if (typeof closeBrowserTab === 'function') {
          closeBrowserTab();
        } // Close inappbrowser emebedded webview in iOS7 and 8 case if still
        // open.


        if (typeof (iabRef === null || iabRef === void 0 ? void 0 : iabRef.close) === 'function') {
          iabRef.close();
        }
      }

      function resumed() {
        if (onCloseTimer) {
          // This code already ran; do not rerun.
          return;
        }

        onCloseTimer = window.setTimeout(() => {
          // Wait two seeconds after resume then reject.
          reject((0, _index8fbd02b.av)(auth, "redirect-cancelled-by-user"
          /* REDIRECT_CANCELLED_BY_USER */
          ));
        }, REDIRECT_TIMEOUT_MS);
      }

      function visibilityChanged() {
        if ((document === null || document === void 0 ? void 0 : document.visibilityState) === 'visible') {
          resumed();
        }
      } // ATTACH ALL THE LISTENERS =====
      // Listen for the auth event


      eventListener.addPassiveListener(authEventSeen); // Listen for resume and visibility events

      document.addEventListener('resume', resumed, false);

      if ((0, _index8fbd02b.ar)()) {
        document.addEventListener('visibilitychange', visibilityChanged, false);
      } // SETUP THE CLEANUP FUNCTION =====


      cleanup = () => {
        eventListener.removePassiveListener(authEventSeen);
        document.removeEventListener('resume', resumed, false);
        document.removeEventListener('visibilitychange', visibilityChanged, false);

        if (onCloseTimer) {
          window.clearTimeout(onCloseTimer);
        }
      };
    });
  } finally {
    cleanup();
  }
}
/**
 * Checks the configuration of the Cordova environment. This has no side effect
 * if the configuration is correct; otherwise it throws an error with the
 * missing plugin.
 */


function _checkCordovaConfiguration(auth) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;

  const win = _cordovaWindow(); // Check all dependencies installed.
  // https://github.com/nordnet/cordova-universal-links-plugin
  // Note that cordova-universal-links-plugin has been abandoned.
  // A fork with latest fixes is available at:
  // https://www.npmjs.com/package/cordova-universal-links-plugin-fix


  (0, _index8fbd02b.aw)(typeof ((_a = win === null || win === void 0 ? void 0 : win.universalLinks) === null || _a === void 0 ? void 0 : _a.subscribe) === 'function', auth, "invalid-cordova-configuration"
  /* INVALID_CORDOVA_CONFIGURATION */
  , {
    missingPlugin: 'cordova-universal-links-plugin-fix'
  }); // https://www.npmjs.com/package/cordova-plugin-buildinfo

  (0, _index8fbd02b.aw)(typeof ((_b = win === null || win === void 0 ? void 0 : win.BuildInfo) === null || _b === void 0 ? void 0 : _b.packageName) !== 'undefined', auth, "invalid-cordova-configuration"
  /* INVALID_CORDOVA_CONFIGURATION */
  , {
    missingPlugin: 'cordova-plugin-buildInfo'
  }); // https://github.com/google/cordova-plugin-browsertab

  (0, _index8fbd02b.aw)(typeof ((_e = (_d = (_c = win === null || win === void 0 ? void 0 : win.cordova) === null || _c === void 0 ? void 0 : _c.plugins) === null || _d === void 0 ? void 0 : _d.browsertab) === null || _e === void 0 ? void 0 : _e.openUrl) === 'function', auth, "invalid-cordova-configuration"
  /* INVALID_CORDOVA_CONFIGURATION */
  , {
    missingPlugin: 'cordova-plugin-browsertab'
  });
  (0, _index8fbd02b.aw)(typeof ((_h = (_g = (_f = win === null || win === void 0 ? void 0 : win.cordova) === null || _f === void 0 ? void 0 : _f.plugins) === null || _g === void 0 ? void 0 : _g.browsertab) === null || _h === void 0 ? void 0 : _h.isAvailable) === 'function', auth, "invalid-cordova-configuration"
  /* INVALID_CORDOVA_CONFIGURATION */
  , {
    missingPlugin: 'cordova-plugin-browsertab'
  }); // https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-inappbrowser/

  (0, _index8fbd02b.aw)(typeof ((_k = (_j = win === null || win === void 0 ? void 0 : win.cordova) === null || _j === void 0 ? void 0 : _j.InAppBrowser) === null || _k === void 0 ? void 0 : _k.open) === 'function', auth, "invalid-cordova-configuration"
  /* INVALID_CORDOVA_CONFIGURATION */
  , {
    missingPlugin: 'cordova-plugin-inappbrowser'
  });
}
/**
 * Computes the SHA-256 of a session ID. The SubtleCrypto interface is only
 * available in "secure" contexts, which covers Cordova (which is served on a file
 * protocol).
 */


async function computeSha256(sessionId) {
  const bytes = stringToArrayBuffer(sessionId); // TODO: For IE11 crypto has a different name and this operation comes back
  //       as an object, not a promise. This is the old proposed standard that
  //       is used by IE11:
  // https://www.w3.org/TR/2013/WD-WebCryptoAPI-20130108/#cryptooperation-interface

  const buf = await crypto.subtle.digest('SHA-256', bytes);
  const arr = Array.from(new Uint8Array(buf));
  return arr.map(num => num.toString(16).padStart(2, '0')).join('');
}

function stringToArrayBuffer(str) {
  // This function is only meant to deal with an ASCII charset and makes
  // certain simplifying assumptions.
  (0, _index8fbd02b.ap)(/[0-9a-zA-Z]+/.test(str), 'Can only convert alpha-numeric strings');

  if (typeof TextEncoder !== 'undefined') {
    return new TextEncoder().encode(str);
  }

  const buff = new ArrayBuffer(str.length);
  const view = new Uint8Array(buff);

  for (let i = 0; i < str.length; i++) {
    view[i] = str.charCodeAt(i);
  }

  return view;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const SESSION_ID_LENGTH = 20;
/** Custom AuthEventManager that adds passive listeners to events */

class CordovaAuthEventManager extends _index8fbd02b.az {
  constructor() {
    super(...arguments);
    this.passiveListeners = new Set();
    this.initPromise = new Promise(resolve => {
      this.resolveInialized = resolve;
    });
  }

  addPassiveListener(cb) {
    this.passiveListeners.add(cb);
  }

  removePassiveListener(cb) {
    this.passiveListeners.delete(cb);
  } // In a Cordova environment, this manager can live through multiple redirect
  // operations


  resetRedirect() {
    this.queuedRedirectEvent = null;
    this.hasHandledPotentialRedirect = false;
  }
  /** Override the onEvent method */


  onEvent(event) {
    this.resolveInialized();
    this.passiveListeners.forEach(cb => cb(event));
    return super.onEvent(event);
  }

  async initialized() {
    await this.initPromise;
  }

}
/**
 * Generates a (partial) {@link AuthEvent}.
 */


function _generateNewEvent(auth, type, eventId = null) {
  return {
    type,
    eventId,
    urlResponse: null,
    sessionId: generateSessionId(),
    postBody: null,
    tenantId: auth.tenantId,
    error: (0, _index8fbd02b.av)(auth, "no-auth-event"
    /* NO_AUTH_EVENT */
    )
  };
}

function _savePartialEvent(auth, event) {
  return storage()._set(persistenceKey(auth), event);
}

async function _getAndRemoveEvent(auth) {
  const event = await storage()._get(persistenceKey(auth));

  if (event) {
    await storage()._remove(persistenceKey(auth));
  }

  return event;
}

function _eventFromPartialAndUrl(partialEvent, url) {
  var _a, _b; // Parse the deep link within the dynamic link URL.


  const callbackUrl = _getDeepLinkFromCallback(url); // Confirm it is actually a callback URL.
  // Currently the universal link will be of this format:
  // https://<AUTH_DOMAIN>/__/auth/callback<OAUTH_RESPONSE>
  // This is a fake URL but is not intended to take the user anywhere
  // and just redirect to the app.


  if (callbackUrl.includes('/__/auth/callback')) {
    // Check if there is an error in the URL.
    // This mechanism is also used to pass errors back to the app:
    // https://<AUTH_DOMAIN>/__/auth/callback?firebaseError=<STRINGIFIED_ERROR>
    const params = searchParamsOrEmpty(callbackUrl); // Get the error object corresponding to the stringified error if found.

    const errorObject = params['firebaseError'] ? parseJsonOrNull(decodeURIComponent(params['firebaseError'])) : null;
    const code = (_b = (_a = errorObject === null || errorObject === void 0 ? void 0 : errorObject['code']) === null || _a === void 0 ? void 0 : _a.split('auth/')) === null || _b === void 0 ? void 0 : _b[1];
    const error = code ? (0, _index8fbd02b.av)(code) : null;

    if (error) {
      return {
        type: partialEvent.type,
        eventId: partialEvent.eventId,
        tenantId: partialEvent.tenantId,
        error,
        urlResponse: null,
        sessionId: null,
        postBody: null
      };
    } else {
      return {
        type: partialEvent.type,
        eventId: partialEvent.eventId,
        tenantId: partialEvent.tenantId,
        sessionId: partialEvent.sessionId,
        urlResponse: callbackUrl,
        postBody: null
      };
    }
  }

  return null;
}

function generateSessionId() {
  const chars = [];
  const allowedChars = '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';

  for (let i = 0; i < SESSION_ID_LENGTH; i++) {
    const idx = Math.floor(Math.random() * allowedChars.length);
    chars.push(allowedChars.charAt(idx));
  }

  return chars.join('');
}

function storage() {
  return (0, _index8fbd02b.ax)(_index8fbd02b.b);
}

function persistenceKey(auth) {
  return (0, _index8fbd02b.ay)("authEvent"
  /* AUTH_EVENT */
  , auth.config.apiKey, auth.name);
}

function parseJsonOrNull(json) {
  try {
    return JSON.parse(json);
  } catch (e) {
    return null;
  }
} // Exported for testing


function _getDeepLinkFromCallback(url) {
  const params = searchParamsOrEmpty(url);
  const link = params['link'] ? decodeURIComponent(params['link']) : undefined; // Double link case (automatic redirect)

  const doubleDeepLink = searchParamsOrEmpty(link)['link']; // iOS custom scheme links.

  const iOSDeepLink = params['deep_link_id'] ? decodeURIComponent(params['deep_link_id']) : undefined;
  const iOSDoubleDeepLink = searchParamsOrEmpty(iOSDeepLink)['link'];
  return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;
}
/**
 * Optimistically tries to get search params from a string, or else returns an
 * empty search params object.
 */


function searchParamsOrEmpty(url) {
  if (!(url === null || url === void 0 ? void 0 : url.includes('?'))) {
    return {};
  }

  const [_, ...rest] = url.split('?');
  return (0, _util.querystringDecode)(rest.join('?'));
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * How long to wait for the initial auth event before concluding no
 * redirect pending
 */


const INITIAL_EVENT_TIMEOUT_MS = 500;

class CordovaPopupRedirectResolver {
  constructor() {
    this._redirectPersistence = _index8fbd02b.a;
    this._shouldInitProactively = true; // This is lightweight for Cordova

    this.eventManagers = new Map();
    this.originValidationPromises = {};
    this._completeRedirectFn = _index8fbd02b.aA;
  }

  async _initialize(auth) {
    const key = auth._key();

    let manager = this.eventManagers.get(key);

    if (!manager) {
      manager = new CordovaAuthEventManager(auth);
      this.eventManagers.set(key, manager);
      this.attachCallbackListeners(auth, manager);
    }

    return manager;
  }

  _openPopup(auth) {
    (0, _index8fbd02b.as)(auth, "operation-not-supported-in-this-environment"
    /* OPERATION_NOT_SUPPORTED */
    );
  }

  async _openRedirect(auth, provider, authType, eventId) {
    _checkCordovaConfiguration(auth);

    const manager = await this._initialize(auth);
    await manager.initialized(); // Reset the persisted redirect states. This does not matter on Web where
    // the redirect always blows away application state entirely. On Cordova,
    // the app maintains control flow through the redirect.

    manager.resetRedirect();
    (0, _index8fbd02b.aB)();
    await this._originValidation(auth);

    const event = _generateNewEvent(auth, authType, eventId);

    await _savePartialEvent(auth, event);
    const url = await _generateHandlerUrl(auth, event, provider);
    const iabRef = await _performRedirect(url);
    return _waitForAppResume(auth, manager, iabRef);
  }

  _isIframeWebStorageSupported(_auth, _cb) {
    throw new Error('Method not implemented.');
  }

  _originValidation(auth) {
    const key = auth._key();

    if (!this.originValidationPromises[key]) {
      this.originValidationPromises[key] = _validateOrigin(auth);
    }

    return this.originValidationPromises[key];
  }

  attachCallbackListeners(auth, manager) {
    // Get the global plugins
    const {
      universalLinks,
      handleOpenURL,
      BuildInfo
    } = _cordovaWindow();

    const noEventTimeout = setTimeout(async () => {
      // We didn't see that initial event. Clear any pending object and
      // dispatch no event
      await _getAndRemoveEvent(auth);
      manager.onEvent(generateNoEvent());
    }, INITIAL_EVENT_TIMEOUT_MS);

    const universalLinksCb = async eventData => {
      // We have an event so we can clear the no event timeout
      clearTimeout(noEventTimeout);
      const partialEvent = await _getAndRemoveEvent(auth);
      let finalEvent = null;

      if (partialEvent && (eventData === null || eventData === void 0 ? void 0 : eventData['url'])) {
        finalEvent = _eventFromPartialAndUrl(partialEvent, eventData['url']);
      } // If finalEvent is never filled, trigger with no event


      manager.onEvent(finalEvent || generateNoEvent());
    }; // Universal links subscriber doesn't exist for iOS, so we need to check


    if (typeof universalLinks !== 'undefined' && typeof universalLinks.subscribe === 'function') {
      universalLinks.subscribe(null, universalLinksCb);
    } // iOS 7 or 8 custom URL schemes.
    // This is also the current default behavior for iOS 9+.
    // For this to work, cordova-plugin-customurlscheme needs to be installed.
    // https://github.com/EddyVerbruggen/Custom-URL-scheme
    // Do not overwrite the existing developer's URL handler.


    const existingHandleOpenURL = handleOpenURL;
    const packagePrefix = `${BuildInfo.packageName.toLowerCase()}://`;

    _cordovaWindow().handleOpenURL = async url => {
      if (url.toLowerCase().startsWith(packagePrefix)) {
        // We want this intentionally to float
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        universalLinksCb({
          url
        });
      } // Call the developer's handler if it is present.


      if (typeof existingHandleOpenURL === 'function') {
        try {
          existingHandleOpenURL(url);
        } catch (e) {
          // This is a developer error. Don't stop the flow of the SDK.
          console.error(e);
        }
      }
    };
  }

}
/**
 * An implementation of {@link PopupRedirectResolver} suitable for Cordova
 * based applications.
 *
 * @public
 */


const cordovaPopupRedirectResolver = CordovaPopupRedirectResolver;
exports.cordovaPopupRedirectResolver = cordovaPopupRedirectResolver;

function generateNoEvent() {
  return {
    type: "unknown"
    /* UNKNOWN */
    ,
    eventId: null,
    sessionId: null,
    urlResponse: null,
    postBody: null,
    tenantId: null,
    error: (0, _index8fbd02b.av)("no-auth-event"
    /* NO_AUTH_EVENT */
    )
  };
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// This function should only be called by frameworks (e.g. FirebaseUI-web) to log their usage.
// It is not intended for direct use by developer apps. NO jsdoc here to intentionally leave it out
// of autogenerated documentation pages to reduce accidental misuse.


function addFrameworkForLogging(auth, framework) {
  (0, _index8fbd02b.aC)(auth)._logFramework(framework);
}
},{"./index-8fbd02b6.js":"node_modules/@firebase/auth/dist/esm2017/index-8fbd02b6.js","@firebase/util":"node_modules/@firebase/util/dist/index.esm.js","@firebase/app":"node_modules/@firebase/app/dist/index.esm2017.js","tslib":"node_modules/tslib/tslib.es6.js","@firebase/logger":"node_modules/@firebase/logger/dist/index.esm.js","@firebase/component":"node_modules/@firebase/component/dist/index.esm.js"}],"node_modules/@firebase/auth-compat/dist/index.esm2017.js":[function(require,module,exports) {
var global = arguments[3];
"use strict";

var _appCompat = _interopRequireDefault(require("@firebase/app-compat"));

var exp = _interopRequireWildcard(require("@firebase/auth/internal"));

var _component = require("@firebase/component");

var _util = require("@firebase/util");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var name = "@firebase/auth-compat";
var version = "0.1.2";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const CORDOVA_ONDEVICEREADY_TIMEOUT_MS = 1000;

function _getCurrentScheme() {
  var _a;

  return ((_a = self === null || self === void 0 ? void 0 : self.location) === null || _a === void 0 ? void 0 : _a.protocol) || null;
}
/**
 * @return {boolean} Whether the current environment is http or https.
 */


function _isHttpOrHttps() {
  return _getCurrentScheme() === 'http:' || _getCurrentScheme() === 'https:';
}
/**
 * @param {?string=} ua The user agent.
 * @return {boolean} Whether the app is rendered in a mobile iOS or Android
 *     Cordova environment.
 */


function _isAndroidOrIosCordovaScheme(ua = (0, _util.getUA)()) {
  return !!((_getCurrentScheme() === 'file:' || _getCurrentScheme() === 'ionic:') && ua.toLowerCase().match(/iphone|ipad|ipod|android/));
}
/**
 * @return {boolean} Whether the environment is a native environment, where
 *     CORS checks do not apply.
 */


function _isNativeEnvironment() {
  return (0, _util.isReactNative)() || (0, _util.isNode)();
}
/**
 * Checks whether the user agent is IE11.
 * @return {boolean} True if it is IE11.
 */


function _isIe11() {
  return (0, _util.isIE)() && (document === null || document === void 0 ? void 0 : document.documentMode) === 11;
}
/**
 * Checks whether the user agent is Edge.
 * @param {string} userAgent The browser user agent string.
 * @return {boolean} True if it is Edge.
 */


function _isEdge(ua = (0, _util.getUA)()) {
  return /Edge\/\d+/.test(ua);
}
/**
 * @param {?string=} opt_userAgent The navigator user agent.
 * @return {boolean} Whether local storage is not synchronized between an iframe
 *     and a popup of the same domain.
 */


function _isLocalStorageNotSynchronized(ua = (0, _util.getUA)()) {
  return _isIe11() || _isEdge(ua);
}
/** @return {boolean} Whether web storage is supported. */


function _isWebStorageSupported() {
  try {
    const storage = self.localStorage;

    const key = exp._generateEventId();

    if (storage) {
      // setItem will throw an exception if we cannot access WebStorage (e.g.,
      // Safari in private mode).
      storage['setItem'](key, '1');
      storage['removeItem'](key); // For browsers where iframe web storage does not synchronize with a popup
      // of the same domain, indexedDB is used for persistent storage. These
      // browsers include IE11 and Edge.
      // Make sure it is supported (IE11 and Edge private mode does not support
      // that).

      if (_isLocalStorageNotSynchronized()) {
        // In such browsers, if indexedDB is not supported, an iframe cannot be
        // notified of the popup sign in result.
        return (0, _util.isIndexedDBAvailable)();
      }

      return true;
    }
  } catch (e) {
    // localStorage is not available from a worker. Test availability of
    // indexedDB.
    return _isWorker() && (0, _util.isIndexedDBAvailable)();
  }

  return false;
}
/**
 * @param {?Object=} global The optional global scope.
 * @return {boolean} Whether current environment is a worker.
 */


function _isWorker() {
  // WorkerGlobalScope only defined in worker environment.
  return typeof global !== 'undefined' && 'WorkerGlobalScope' in global && 'importScripts' in global;
}

function _isPopupRedirectSupported() {
  return (_isHttpOrHttps() || (0, _util.isBrowserExtension)() || _isAndroidOrIosCordovaScheme()) && // React Native with remote debugging reports its location.protocol as
  // http.
  !_isNativeEnvironment() && // Local storage has to be supported for browser popup and redirect
  // operations to work.
  _isWebStorageSupported() && // DOM, popups and redirects are not supported within a worker.
  !_isWorker();
}
/** Quick check that indicates the platform *may* be Cordova */


function _isLikelyCordova() {
  return _isAndroidOrIosCordovaScheme() && typeof document !== 'undefined';
}

async function _isCordova() {
  if (!_isLikelyCordova()) {
    return false;
  }

  return new Promise(resolve => {
    const timeoutId = setTimeout(() => {
      // We've waited long enough; the telltale Cordova event didn't happen
      resolve(false);
    }, CORDOVA_ONDEVICEREADY_TIMEOUT_MS);
    document.addEventListener('deviceready', () => {
      clearTimeout(timeoutId);
      resolve(true);
    });
  });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const Persistence = {
  LOCAL: 'local',
  NONE: 'none',
  SESSION: 'session'
};
const _assert$3 = exp._assert;
const PERSISTENCE_KEY = 'persistence';
/**
 * Validates that an argument is a valid persistence value. If an invalid type
 * is specified, an error is thrown synchronously.
 */

function _validatePersistenceArgument(auth, persistence) {
  _assert$3(Object.values(Persistence).includes(persistence), auth, "invalid-persistence-type"
  /* INVALID_PERSISTENCE */
  ); // Validate if the specified type is supported in the current environment.


  if ((0, _util.isReactNative)()) {
    // This is only supported in a browser.
    _assert$3(persistence !== Persistence.SESSION, auth, "unsupported-persistence-type"
    /* UNSUPPORTED_PERSISTENCE */
    );

    return;
  }

  if ((0, _util.isNode)()) {
    // Only none is supported in Node.js.
    _assert$3(persistence === Persistence.NONE, auth, "unsupported-persistence-type"
    /* UNSUPPORTED_PERSISTENCE */
    );

    return;
  }

  if (_isWorker()) {
    // In a worker environment, either LOCAL or NONE are supported.
    // If indexedDB not supported and LOCAL provided, throw an error
    _assert$3(persistence === Persistence.NONE || persistence === Persistence.LOCAL && (0, _util.isIndexedDBAvailable)(), auth, "unsupported-persistence-type"
    /* UNSUPPORTED_PERSISTENCE */
    );

    return;
  } // This is restricted by what the browser supports.


  _assert$3(persistence === Persistence.NONE || _isWebStorageSupported(), auth, "unsupported-persistence-type"
  /* UNSUPPORTED_PERSISTENCE */
  );
}

async function _savePersistenceForRedirect(auth) {
  await auth._initializationPromise;
  const win = getSelfWindow();

  const key = exp._persistenceKeyName(PERSISTENCE_KEY, auth.config.apiKey, auth.name);

  if (win === null || win === void 0 ? void 0 : win.sessionStorage) {
    win.sessionStorage.setItem(key, auth._getPersistence());
  }
}

function _getPersistencesFromRedirect(apiKey, appName) {
  const win = getSelfWindow();

  if (!(win === null || win === void 0 ? void 0 : win.sessionStorage)) {
    return [];
  }

  const key = exp._persistenceKeyName(PERSISTENCE_KEY, apiKey, appName);

  const persistence = win.sessionStorage.getItem(key);

  switch (persistence) {
    case Persistence.NONE:
      return [exp.inMemoryPersistence];

    case Persistence.LOCAL:
      return [exp.indexedDBLocalPersistence, exp.browserSessionPersistence];

    case Persistence.SESSION:
      return [exp.browserSessionPersistence];

    default:
      return [];
  }
}

function getSelfWindow() {
  return typeof window !== 'undefined' ? window : null;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const _assert$2 = exp._assert;
/** Platform-agnostic popup-redirect resolver */

class CompatPopupRedirectResolver {
  constructor() {
    // Create both resolvers for dynamic resolution later
    this.browserResolver = exp._getInstance(exp.browserPopupRedirectResolver);
    this.cordovaResolver = exp._getInstance(exp.cordovaPopupRedirectResolver); // The actual resolver in use: either browserResolver or cordovaResolver.

    this.underlyingResolver = null;
    this._redirectPersistence = exp.browserSessionPersistence;
    this._completeRedirectFn = exp._getRedirectResult;
  }

  async _initialize(auth) {
    await this.selectUnderlyingResolver();
    return this.assertedUnderlyingResolver._initialize(auth);
  }

  async _openPopup(auth, provider, authType, eventId) {
    await this.selectUnderlyingResolver();
    return this.assertedUnderlyingResolver._openPopup(auth, provider, authType, eventId);
  }

  async _openRedirect(auth, provider, authType, eventId) {
    await this.selectUnderlyingResolver();
    return this.assertedUnderlyingResolver._openRedirect(auth, provider, authType, eventId);
  }

  _isIframeWebStorageSupported(auth, cb) {
    this.assertedUnderlyingResolver._isIframeWebStorageSupported(auth, cb);
  }

  _originValidation(auth) {
    return this.assertedUnderlyingResolver._originValidation(auth);
  }

  get _shouldInitProactively() {
    return _isLikelyCordova() || this.browserResolver._shouldInitProactively;
  }

  get assertedUnderlyingResolver() {
    _assert$2(this.underlyingResolver, "internal-error"
    /* INTERNAL_ERROR */
    );

    return this.underlyingResolver;
  }

  async selectUnderlyingResolver() {
    if (this.underlyingResolver) {
      return;
    } // We haven't yet determined whether or not we're in Cordova; go ahead
    // and determine that state now.


    const isCordova = await _isCordova();
    this.underlyingResolver = isCordova ? this.cordovaResolver : this.browserResolver;
  }

}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function unwrap(object) {
  return object.unwrap();
}

function wrapped(object) {
  return object.wrapped();
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function credentialFromResponse(userCredential) {
  return credentialFromObject(userCredential);
}

function attachExtraErrorFields(auth, e) {
  var _a; // The response contains all fields from the server which may or may not
  // actually match the underlying type


  const response = (_a = e.customData) === null || _a === void 0 ? void 0 : _a._tokenResponse;

  if (e.code === 'auth/multi-factor-auth-required') {
    const mfaErr = e;
    mfaErr.resolver = new MultiFactorResolver(auth, exp.getMultiFactorResolver(auth, e));
  } else if (response) {
    const credential = credentialFromObject(e);
    const credErr = e;

    if (credential) {
      credErr.credential = credential;
      credErr.tenantId = response.tenantId || undefined;
      credErr.email = response.email || undefined;
      credErr.phoneNumber = response.phoneNumber || undefined;
    }
  }
}

function credentialFromObject(object) {
  const {
    _tokenResponse
  } = object instanceof _util.FirebaseError ? object.customData : object;

  if (!_tokenResponse) {
    return null;
  } // Handle phone Auth credential responses, as they have a different format
  // from other backend responses (i.e. no providerId). This is also only the
  // case for user credentials (does not work for errors).


  if (!(object instanceof _util.FirebaseError)) {
    if ('temporaryProof' in _tokenResponse && 'phoneNumber' in _tokenResponse) {
      return exp.PhoneAuthProvider.credentialFromResult(object);
    }
  }

  const providerId = _tokenResponse.providerId; // Email and password is not supported as there is no situation where the
  // server would return the password to the client.

  if (!providerId || providerId === exp.ProviderId.PASSWORD) {
    return null;
  }

  let provider;

  switch (providerId) {
    case exp.ProviderId.GOOGLE:
      provider = exp.GoogleAuthProvider;
      break;

    case exp.ProviderId.FACEBOOK:
      provider = exp.FacebookAuthProvider;
      break;

    case exp.ProviderId.GITHUB:
      provider = exp.GithubAuthProvider;
      break;

    case exp.ProviderId.TWITTER:
      provider = exp.TwitterAuthProvider;
      break;

    default:
      const {
        oauthIdToken,
        oauthAccessToken,
        oauthTokenSecret,
        pendingToken,
        nonce
      } = _tokenResponse;

      if (!oauthAccessToken && !oauthTokenSecret && !oauthIdToken && !pendingToken) {
        return null;
      } // TODO(avolkovi): uncomment this and get it working with SAML & OIDC


      if (pendingToken) {
        if (providerId.startsWith('saml.')) {
          return exp.SAMLAuthCredential._create(providerId, pendingToken);
        } else {
          // OIDC and non-default providers excluding Twitter.
          return exp.OAuthCredential._fromParams({
            providerId,
            signInMethod: providerId,
            pendingToken,
            idToken: oauthIdToken,
            accessToken: oauthAccessToken
          });
        }
      }

      return new exp.OAuthProvider(providerId).credential({
        idToken: oauthIdToken,
        accessToken: oauthAccessToken,
        rawNonce: nonce
      });
  }

  return object instanceof _util.FirebaseError ? provider.credentialFromError(object) : provider.credentialFromResult(object);
}

async function convertCredential(auth, credentialPromise) {
  let credential;

  try {
    credential = await credentialPromise;
  } catch (e) {
    if (e instanceof _util.FirebaseError) {
      attachExtraErrorFields(auth, e);
    }

    throw e;
  }

  const {
    operationType,
    user
  } = credential;
  return {
    operationType,
    credential: credentialFromResponse(credential),
    additionalUserInfo: exp.getAdditionalUserInfo(credential),
    user: User.getOrCreate(user)
  };
}

async function convertConfirmationResult(auth, confirmationResultPromise) {
  const confirmationResultExp = await confirmationResultPromise;
  return {
    verificationId: confirmationResultExp.verificationId,
    confirm: verificationCode => convertCredential(auth, confirmationResultExp.confirm(verificationCode))
  };
}

class MultiFactorResolver {
  constructor(auth, resolver) {
    this.resolver = resolver;
    this.auth = wrapped(auth);
  }

  get session() {
    return this.resolver.session;
  }

  get hints() {
    return this.resolver.hints;
  }

  resolveSignIn(assertion) {
    return convertCredential(unwrap(this.auth), this.resolver.resolveSignIn(assertion));
  }

}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


class User {
  constructor(_delegate) {
    this._delegate = _delegate;
    this.multiFactor = exp.multiFactor(_delegate);
  }

  static getOrCreate(user) {
    if (!User.USER_MAP.has(user)) {
      User.USER_MAP.set(user, new User(user));
    }

    return User.USER_MAP.get(user);
  }

  delete() {
    return this._delegate.delete();
  }

  reload() {
    return this._delegate.reload();
  }

  toJSON() {
    return this._delegate.toJSON();
  }

  getIdTokenResult(forceRefresh) {
    return this._delegate.getIdTokenResult(forceRefresh);
  }

  getIdToken(forceRefresh) {
    return this._delegate.getIdToken(forceRefresh);
  }

  linkAndRetrieveDataWithCredential(credential) {
    return this.linkWithCredential(credential);
  }

  async linkWithCredential(credential) {
    return convertCredential(this.auth, exp.linkWithCredential(this._delegate, credential));
  }

  async linkWithPhoneNumber(phoneNumber, applicationVerifier) {
    return convertConfirmationResult(this.auth, exp.linkWithPhoneNumber(this._delegate, phoneNumber, applicationVerifier));
  }

  async linkWithPopup(provider) {
    return convertCredential(this.auth, exp.linkWithPopup(this._delegate, provider, CompatPopupRedirectResolver));
  }

  async linkWithRedirect(provider) {
    await _savePersistenceForRedirect(exp._castAuth(this.auth));
    return exp.linkWithRedirect(this._delegate, provider, CompatPopupRedirectResolver);
  }

  reauthenticateAndRetrieveDataWithCredential(credential) {
    return this.reauthenticateWithCredential(credential);
  }

  async reauthenticateWithCredential(credential) {
    return convertCredential(this.auth, exp.reauthenticateWithCredential(this._delegate, credential));
  }

  reauthenticateWithPhoneNumber(phoneNumber, applicationVerifier) {
    return convertConfirmationResult(this.auth, exp.reauthenticateWithPhoneNumber(this._delegate, phoneNumber, applicationVerifier));
  }

  reauthenticateWithPopup(provider) {
    return convertCredential(this.auth, exp.reauthenticateWithPopup(this._delegate, provider, CompatPopupRedirectResolver));
  }

  async reauthenticateWithRedirect(provider) {
    await _savePersistenceForRedirect(exp._castAuth(this.auth));
    return exp.reauthenticateWithRedirect(this._delegate, provider, CompatPopupRedirectResolver);
  }

  sendEmailVerification(actionCodeSettings) {
    return exp.sendEmailVerification(this._delegate, actionCodeSettings);
  }

  async unlink(providerId) {
    await exp.unlink(this._delegate, providerId);
    return this;
  }

  updateEmail(newEmail) {
    return exp.updateEmail(this._delegate, newEmail);
  }

  updatePassword(newPassword) {
    return exp.updatePassword(this._delegate, newPassword);
  }

  updatePhoneNumber(phoneCredential) {
    return exp.updatePhoneNumber(this._delegate, phoneCredential);
  }

  updateProfile(profile) {
    return exp.updateProfile(this._delegate, profile);
  }

  verifyBeforeUpdateEmail(newEmail, actionCodeSettings) {
    return exp.verifyBeforeUpdateEmail(this._delegate, newEmail, actionCodeSettings);
  }

  get emailVerified() {
    return this._delegate.emailVerified;
  }

  get isAnonymous() {
    return this._delegate.isAnonymous;
  }

  get metadata() {
    return this._delegate.metadata;
  }

  get phoneNumber() {
    return this._delegate.phoneNumber;
  }

  get providerData() {
    return this._delegate.providerData;
  }

  get refreshToken() {
    return this._delegate.refreshToken;
  }

  get tenantId() {
    return this._delegate.tenantId;
  }

  get displayName() {
    return this._delegate.displayName;
  }

  get email() {
    return this._delegate.email;
  }

  get photoURL() {
    return this._delegate.photoURL;
  }

  get providerId() {
    return this._delegate.providerId;
  }

  get uid() {
    return this._delegate.uid;
  }

  get auth() {
    return this._delegate.auth;
  }

} // Maintain a map so that there's always a 1:1 mapping between new User and
// legacy compat users


User.USER_MAP = new WeakMap();
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const _assert$1 = exp._assert;

class Auth {
  constructor(app, provider) {
    this.app = app;

    if (provider.isInitialized()) {
      this._delegate = provider.getImmediate();
      this.linkUnderlyingAuth();
      return;
    }

    const {
      apiKey
    } = app.options; // TODO: platform needs to be determined using heuristics

    _assert$1(apiKey, "invalid-api-key"
    /* INVALID_API_KEY */
    , {
      appName: app.name
    });

    let persistences = [exp.inMemoryPersistence]; // Only deal with persistences in web environments

    if (typeof window !== 'undefined') {
      // Note this is slightly different behavior: in this case, the stored
      // persistence is checked *first* rather than last. This is because we want
      // to prefer stored persistence type in the hierarchy.
      persistences = _getPersistencesFromRedirect(apiKey, app.name);

      for (const persistence of [exp.indexedDBLocalPersistence, exp.browserLocalPersistence, exp.browserSessionPersistence]) {
        if (!persistences.includes(persistence)) {
          persistences.push(persistence);
        }
      }
    } // TODO: platform needs to be determined using heuristics


    _assert$1(apiKey, "invalid-api-key"
    /* INVALID_API_KEY */
    , {
      appName: app.name
    }); // Only use a popup/redirect resolver in browser environments


    const resolver = typeof window !== 'undefined' ? CompatPopupRedirectResolver : undefined;
    this._delegate = provider.initialize({
      options: {
        persistence: persistences,
        popupRedirectResolver: resolver
      }
    });

    this._delegate._updateErrorMap(exp.debugErrorMap);

    this.linkUnderlyingAuth();
  }

  get emulatorConfig() {
    return this._delegate.emulatorConfig;
  }

  get currentUser() {
    if (!this._delegate.currentUser) {
      return null;
    }

    return User.getOrCreate(this._delegate.currentUser);
  }

  get languageCode() {
    return this._delegate.languageCode;
  }

  set languageCode(languageCode) {
    this._delegate.languageCode = languageCode;
  }

  get settings() {
    return this._delegate.settings;
  }

  get tenantId() {
    return this._delegate.tenantId;
  }

  set tenantId(tid) {
    this._delegate.tenantId = tid;
  }

  useDeviceLanguage() {
    this._delegate.useDeviceLanguage();
  }

  signOut() {
    return this._delegate.signOut();
  }

  useEmulator(url, options) {
    exp.connectAuthEmulator(this._delegate, url, options);
  }

  applyActionCode(code) {
    return exp.applyActionCode(this._delegate, code);
  }

  checkActionCode(code) {
    return exp.checkActionCode(this._delegate, code);
  }

  confirmPasswordReset(code, newPassword) {
    return exp.confirmPasswordReset(this._delegate, code, newPassword);
  }

  async createUserWithEmailAndPassword(email, password) {
    return convertCredential(this._delegate, exp.createUserWithEmailAndPassword(this._delegate, email, password));
  }

  fetchProvidersForEmail(email) {
    return this.fetchSignInMethodsForEmail(email);
  }

  fetchSignInMethodsForEmail(email) {
    return exp.fetchSignInMethodsForEmail(this._delegate, email);
  }

  isSignInWithEmailLink(emailLink) {
    return exp.isSignInWithEmailLink(this._delegate, emailLink);
  }

  async getRedirectResult() {
    _assert$1(_isPopupRedirectSupported(), this._delegate, "operation-not-supported-in-this-environment"
    /* OPERATION_NOT_SUPPORTED */
    );

    const credential = await exp.getRedirectResult(this._delegate, CompatPopupRedirectResolver);

    if (!credential) {
      return {
        credential: null,
        user: null
      };
    }

    return convertCredential(this._delegate, Promise.resolve(credential));
  } // This function should only be called by frameworks (e.g. FirebaseUI-web) to log their usage.
  // It is not intended for direct use by developer apps. NO jsdoc here to intentionally leave it
  // out of autogenerated documentation pages to reduce accidental misuse.


  addFrameworkForLogging(framework) {
    exp.addFrameworkForLogging(this._delegate, framework);
  }

  onAuthStateChanged(nextOrObserver, errorFn, completed) {
    const {
      next,
      error,
      complete
    } = wrapObservers(nextOrObserver, errorFn, completed);
    return this._delegate.onAuthStateChanged(next, error, complete);
  }

  onIdTokenChanged(nextOrObserver, errorFn, completed) {
    const {
      next,
      error,
      complete
    } = wrapObservers(nextOrObserver, errorFn, completed);
    return this._delegate.onIdTokenChanged(next, error, complete);
  }

  sendSignInLinkToEmail(email, actionCodeSettings) {
    return exp.sendSignInLinkToEmail(this._delegate, email, actionCodeSettings);
  }

  sendPasswordResetEmail(email, actionCodeSettings) {
    return exp.sendPasswordResetEmail(this._delegate, email, actionCodeSettings || undefined);
  }

  async setPersistence(persistence) {
    _validatePersistenceArgument(this._delegate, persistence);

    let converted;

    switch (persistence) {
      case Persistence.SESSION:
        converted = exp.browserSessionPersistence;
        break;

      case Persistence.LOCAL:
        // Not using isIndexedDBAvailable() since it only checks if indexedDB is defined.
        const isIndexedDBFullySupported = await exp._getInstance(exp.indexedDBLocalPersistence)._isAvailable();
        converted = isIndexedDBFullySupported ? exp.indexedDBLocalPersistence : exp.browserLocalPersistence;
        break;

      case Persistence.NONE:
        converted = exp.inMemoryPersistence;
        break;

      default:
        return exp._fail("argument-error"
        /* ARGUMENT_ERROR */
        , {
          appName: this._delegate.name
        });
    }

    return this._delegate.setPersistence(converted);
  }

  signInAndRetrieveDataWithCredential(credential) {
    return this.signInWithCredential(credential);
  }

  signInAnonymously() {
    return convertCredential(this._delegate, exp.signInAnonymously(this._delegate));
  }

  signInWithCredential(credential) {
    return convertCredential(this._delegate, exp.signInWithCredential(this._delegate, credential));
  }

  signInWithCustomToken(token) {
    return convertCredential(this._delegate, exp.signInWithCustomToken(this._delegate, token));
  }

  signInWithEmailAndPassword(email, password) {
    return convertCredential(this._delegate, exp.signInWithEmailAndPassword(this._delegate, email, password));
  }

  signInWithEmailLink(email, emailLink) {
    return convertCredential(this._delegate, exp.signInWithEmailLink(this._delegate, email, emailLink));
  }

  signInWithPhoneNumber(phoneNumber, applicationVerifier) {
    return convertConfirmationResult(this._delegate, exp.signInWithPhoneNumber(this._delegate, phoneNumber, applicationVerifier));
  }

  async signInWithPopup(provider) {
    _assert$1(_isPopupRedirectSupported(), this._delegate, "operation-not-supported-in-this-environment"
    /* OPERATION_NOT_SUPPORTED */
    );

    return convertCredential(this._delegate, exp.signInWithPopup(this._delegate, provider, CompatPopupRedirectResolver));
  }

  async signInWithRedirect(provider) {
    _assert$1(_isPopupRedirectSupported(), this._delegate, "operation-not-supported-in-this-environment"
    /* OPERATION_NOT_SUPPORTED */
    );

    await _savePersistenceForRedirect(this._delegate);
    return exp.signInWithRedirect(this._delegate, provider, CompatPopupRedirectResolver);
  }

  updateCurrentUser(user) {
    // remove ts-ignore once overloads are defined for exp functions to accept compat objects
    // @ts-ignore
    return this._delegate.updateCurrentUser(user);
  }

  verifyPasswordResetCode(code) {
    return exp.verifyPasswordResetCode(this._delegate, code);
  }

  unwrap() {
    return this._delegate;
  }

  _delete() {
    return this._delegate._delete();
  }

  linkUnderlyingAuth() {
    this._delegate.wrapped = () => this;
  }

}

Auth.Persistence = Persistence;

function wrapObservers(nextOrObserver, error, complete) {
  let next = nextOrObserver;

  if (typeof nextOrObserver !== 'function') {
    ({
      next,
      error,
      complete
    } = nextOrObserver);
  } // We know 'next' is now a function


  const oldNext = next;

  const newNext = user => oldNext(user && User.getOrCreate(user));

  return {
    next: newNext,
    error: error,
    complete
  };
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


class PhoneAuthProvider {
  constructor() {
    this.providerId = 'phone'; // TODO: remove ts-ignore when moving types from auth-types to auth-compat
    // @ts-ignore

    this._delegate = new exp.PhoneAuthProvider(unwrap(_appCompat.default.auth()));
  }

  static credential(verificationId, verificationCode) {
    return exp.PhoneAuthProvider.credential(verificationId, verificationCode);
  }

  verifyPhoneNumber(phoneInfoOptions, applicationVerifier) {
    return this._delegate.verifyPhoneNumber( // The implementation matches but the types are subtly incompatible
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    phoneInfoOptions, applicationVerifier);
  }

  unwrap() {
    return this._delegate;
  }

}

PhoneAuthProvider.PHONE_SIGN_IN_METHOD = exp.PhoneAuthProvider.PHONE_SIGN_IN_METHOD;
PhoneAuthProvider.PROVIDER_ID = exp.PhoneAuthProvider.PROVIDER_ID;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const _assert = exp._assert;

class RecaptchaVerifier {
  constructor(container, parameters, app = _appCompat.default.app()) {
    var _a; // API key is required for web client RPC calls.


    _assert((_a = app.options) === null || _a === void 0 ? void 0 : _a.apiKey, "invalid-api-key"
    /* INVALID_API_KEY */
    , {
      appName: app.name
    });

    this._delegate = new exp.RecaptchaVerifier(container, // eslint-disable-next-line @typescript-eslint/no-explicit-any
    parameters, // TODO: remove ts-ignore when moving types from auth-types to auth-compat
    // @ts-ignore
    app.auth());
    this.type = this._delegate.type;
  }

  clear() {
    this._delegate.clear();
  }

  render() {
    return this._delegate.render();
  }

  verify() {
    return this._delegate.verify();
  }

}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const AUTH_TYPE = 'auth-compat'; // Create auth components to register with firebase.
// Provides Auth public APIs.

function registerAuthCompat(instance) {
  instance.INTERNAL.registerComponent(new _component.Component(AUTH_TYPE, container => {
    // getImmediate for FirebaseApp will always succeed
    const app = container.getProvider('app-compat').getImmediate();
    const authProvider = container.getProvider('auth');
    return new Auth(app, authProvider);
  }, "PUBLIC"
  /* PUBLIC */
  ).setServiceProps({
    ActionCodeInfo: {
      Operation: {
        EMAIL_SIGNIN: exp.ActionCodeOperation.EMAIL_SIGNIN,
        PASSWORD_RESET: exp.ActionCodeOperation.PASSWORD_RESET,
        RECOVER_EMAIL: exp.ActionCodeOperation.RECOVER_EMAIL,
        REVERT_SECOND_FACTOR_ADDITION: exp.ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION,
        VERIFY_AND_CHANGE_EMAIL: exp.ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL,
        VERIFY_EMAIL: exp.ActionCodeOperation.VERIFY_EMAIL
      }
    },
    EmailAuthProvider: exp.EmailAuthProvider,
    FacebookAuthProvider: exp.FacebookAuthProvider,
    GithubAuthProvider: exp.GithubAuthProvider,
    GoogleAuthProvider: exp.GoogleAuthProvider,
    OAuthProvider: exp.OAuthProvider,
    //   SAMLAuthProvider,
    PhoneAuthProvider: PhoneAuthProvider,
    PhoneMultiFactorGenerator: exp.PhoneMultiFactorGenerator,
    RecaptchaVerifier: RecaptchaVerifier,
    TwitterAuthProvider: exp.TwitterAuthProvider,
    Auth,
    AuthCredential: exp.AuthCredential,
    Error: _util.FirebaseError
  }).setInstantiationMode("LAZY"
  /* LAZY */
  ).setMultipleInstances(false));
  instance.registerVersion(name, version);
}

registerAuthCompat(_appCompat.default);
},{"@firebase/app-compat":"node_modules/@firebase/app-compat/dist/index.esm2017.js","@firebase/auth/internal":"node_modules/@firebase/auth/dist/esm2017/internal.js","@firebase/component":"node_modules/@firebase/component/dist/index.esm.js","@firebase/util":"node_modules/@firebase/util/dist/index.esm.js"}],"node_modules/process/browser.js":[function(require,module,exports) {

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};
},{}],"node_modules/@firebase/database/dist/index.esm2017.js":[function(require,module,exports) {
var process = require("process");
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._repoManagerDatabaseFromApp = repoManagerDatabaseFromApp;
exports._setSDKVersion = setSDKVersion;
exports.child = child;
exports.connectDatabaseEmulator = connectDatabaseEmulator;
exports.enableLogging = enableLogging;
exports.endAt = endAt;
exports.endBefore = endBefore;
exports.equalTo = equalTo;
exports.get = get;
exports.getDatabase = getDatabase;
exports.goOffline = goOffline;
exports.goOnline = goOnline;
exports.increment = increment;
exports.limitToFirst = limitToFirst;
exports.limitToLast = limitToLast;
exports.off = off;
exports.onChildAdded = onChildAdded;
exports.onChildChanged = onChildChanged;
exports.onChildMoved = onChildMoved;
exports.onChildRemoved = onChildRemoved;
exports.onDisconnect = onDisconnect;
exports.onValue = onValue;
exports.orderByChild = orderByChild;
exports.orderByKey = orderByKey;
exports.orderByPriority = orderByPriority;
exports.orderByValue = orderByValue;
exports.push = push;
exports.query = query;
exports.ref = ref;
exports.refFromURL = refFromURL;
exports.remove = remove;
exports.runTransaction = runTransaction;
exports.serverTimestamp = serverTimestamp;
exports.set = set;
exports.setPriority = setPriority;
exports.setWithPriority = setWithPriority;
exports.startAfter = startAfter;
exports.startAt = startAt;
exports.update = update;
exports._validateWritablePath = exports._validatePathString = exports._TEST_ACCESS_hijackHash = exports._TEST_ACCESS_forceRestClient = exports._ReferenceImpl = exports._QueryParams = exports._QueryImpl = exports.TransactionResult = exports.QueryConstraint = exports.OnDisconnect = exports.Database = exports.DataSnapshot = void 0;

var _app = require("@firebase/app");

var _component = require("@firebase/component");

var _util = require("@firebase/util");

var _logger = require("@firebase/logger");

const name = "@firebase/database";
const version = "0.12.0";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** The semver (www.semver.org) version of the SDK. */

let SDK_VERSION = '';
/**
 * SDK_VERSION should be set before any database instance is created
 * @internal
 */

function setSDKVersion(version) {
  SDK_VERSION = version;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Wraps a DOM Storage object and:
 * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.
 * - prefixes names with "firebase:" to avoid collisions with app data.
 *
 * We automatically (see storage.js) create two such wrappers, one for sessionStorage,
 * and one for localStorage.
 *
 */


class DOMStorageWrapper {
  /**
   * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)
   */
  constructor(domStorage_) {
    this.domStorage_ = domStorage_; // Use a prefix to avoid collisions with other stuff saved by the app.

    this.prefix_ = 'firebase:';
  }
  /**
   * @param key - The key to save the value under
   * @param value - The value being stored, or null to remove the key.
   */


  set(key, value) {
    if (value == null) {
      this.domStorage_.removeItem(this.prefixedName_(key));
    } else {
      this.domStorage_.setItem(this.prefixedName_(key), (0, _util.stringify)(value));
    }
  }
  /**
   * @returns The value that was stored under this key, or null
   */


  get(key) {
    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));

    if (storedVal == null) {
      return null;
    } else {
      return (0, _util.jsonEval)(storedVal);
    }
  }

  remove(key) {
    this.domStorage_.removeItem(this.prefixedName_(key));
  }

  prefixedName_(name) {
    return this.prefix_ + name;
  }

  toString() {
    return this.domStorage_.toString();
  }

}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An in-memory storage implementation that matches the API of DOMStorageWrapper
 * (TODO: create interface for both to implement).
 */


class MemoryStorage {
  constructor() {
    this.cache_ = {};
    this.isInMemoryStorage = true;
  }

  set(key, value) {
    if (value == null) {
      delete this.cache_[key];
    } else {
      this.cache_[key] = value;
    }
  }

  get(key) {
    if ((0, _util.contains)(this.cache_, key)) {
      return this.cache_[key];
    }

    return null;
  }

  remove(key) {
    delete this.cache_[key];
  }

}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.
 * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change
 * to reflect this type
 *
 * @param domStorageName - Name of the underlying storage object
 *   (e.g. 'localStorage' or 'sessionStorage').
 * @returns Turning off type information until a common interface is defined.
 */


const createStoragefor = function (domStorageName) {
  try {
    // NOTE: just accessing "localStorage" or "window['localStorage']" may throw a security exception,
    // so it must be inside the try/catch.
    if (typeof window !== 'undefined' && typeof window[domStorageName] !== 'undefined') {
      // Need to test cache. Just because it's here doesn't mean it works
      const domStorage = window[domStorageName];
      domStorage.setItem('firebase:sentinel', 'cache');
      domStorage.removeItem('firebase:sentinel');
      return new DOMStorageWrapper(domStorage);
    }
  } catch (e) {} // Failed to create wrapper.  Just return in-memory storage.
  // TODO: log?


  return new MemoryStorage();
};
/** A storage object that lasts across sessions */


const PersistentStorage = createStoragefor('localStorage');
/** A storage object that only lasts one session */

const SessionStorage = createStoragefor('sessionStorage');
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const logClient = new _logger.Logger('@firebase/database');
/**
 * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).
 */

const LUIDGenerator = function () {
  let id = 1;
  return function () {
    return id++;
  };
}();
/**
 * Sha1 hash of the input string
 * @param str - The string to hash
 * @returns {!string} The resulting hash
 */


const sha1 = function (str) {
  const utf8Bytes = (0, _util.stringToByteArray)(str);
  const sha1 = new _util.Sha1();
  sha1.update(utf8Bytes);
  const sha1Bytes = sha1.digest();
  return _util.base64.encodeByteArray(sha1Bytes);
};

const buildLogMessage_ = function (...varArgs) {
  let message = '';

  for (let i = 0; i < varArgs.length; i++) {
    const arg = varArgs[i];

    if (Array.isArray(arg) || arg && typeof arg === 'object' && // eslint-disable-next-line @typescript-eslint/no-explicit-any
    typeof arg.length === 'number') {
      message += buildLogMessage_.apply(null, arg);
    } else if (typeof arg === 'object') {
      message += (0, _util.stringify)(arg);
    } else {
      message += arg;
    }

    message += ' ';
  }

  return message;
};
/**
 * Use this for all debug messages in Firebase.
 */


let logger = null;
/**
 * Flag to check for log availability on first log message
 */

let firstLog_ = true;
/**
 * The implementation of Firebase.enableLogging (defined here to break dependencies)
 * @param logger_ - A flag to turn on logging, or a custom logger
 * @param persistent - Whether or not to persist logging settings across refreshes
 */

const enableLogging$1 = function (logger_, persistent) {
  (0, _util.assert)(!persistent || logger_ === true || logger_ === false, "Can't turn on custom loggers persistently.");

  if (logger_ === true) {
    logClient.logLevel = _logger.LogLevel.VERBOSE;
    logger = logClient.log.bind(logClient);

    if (persistent) {
      SessionStorage.set('logging_enabled', true);
    }
  } else if (typeof logger_ === 'function') {
    logger = logger_;
  } else {
    logger = null;
    SessionStorage.remove('logging_enabled');
  }
};

const log = function (...varArgs) {
  if (firstLog_ === true) {
    firstLog_ = false;

    if (logger === null && SessionStorage.get('logging_enabled') === true) {
      enableLogging$1(true);
    }
  }

  if (logger) {
    const message = buildLogMessage_.apply(null, varArgs);
    logger(message);
  }
};

const logWrapper = function (prefix) {
  return function (...varArgs) {
    log(prefix, ...varArgs);
  };
};

const error = function (...varArgs) {
  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);
  logClient.error(message);
};

const fatal = function (...varArgs) {
  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;
  logClient.error(message);
  throw new Error(message);
};

const warn = function (...varArgs) {
  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);
  logClient.warn(message);
};
/**
 * Logs a warning if the containing page uses https. Called when a call to new Firebase
 * does not use https.
 */


const warnIfPageIsSecure = function () {
  // Be very careful accessing browser globals. Who knows what may or may not exist.
  if (typeof window !== 'undefined' && window.location && window.location.protocol && window.location.protocol.indexOf('https:') !== -1) {
    warn('Insecure Firebase access from a secure page. ' + 'Please use https in calls to new Firebase().');
  }
};
/**
 * Returns true if data is NaN, or +/- Infinity.
 */


const isInvalidJSONNumber = function (data) {
  return typeof data === 'number' && (data !== data || // NaN
  data === Number.POSITIVE_INFINITY || data === Number.NEGATIVE_INFINITY);
};

const executeWhenDOMReady = function (fn) {
  if ((0, _util.isNodeSdk)() || document.readyState === 'complete') {
    fn();
  } else {
    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which
    // fire before onload), but fall back to onload.
    let called = false;

    const wrappedFn = function () {
      if (!document.body) {
        setTimeout(wrappedFn, Math.floor(10));
        return;
      }

      if (!called) {
        called = true;
        fn();
      }
    };

    if (document.addEventListener) {
      document.addEventListener('DOMContentLoaded', wrappedFn, false); // fallback to onload.

      window.addEventListener('load', wrappedFn, false); // eslint-disable-next-line @typescript-eslint/no-explicit-any
    } else if (document.attachEvent) {
      // IE.
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      document.attachEvent('onreadystatechange', () => {
        if (document.readyState === 'complete') {
          wrappedFn();
        }
      }); // fallback to onload.
      // eslint-disable-next-line @typescript-eslint/no-explicit-any

      window.attachEvent('onload', wrappedFn); // jQuery has an extra hack for IE that we could employ (based on
      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.
      // I'm hoping we don't need it.
    }
  }
};
/**
 * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names
 */


const MIN_NAME = '[MIN_NAME]';
/**
 * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names
 */

const MAX_NAME = '[MAX_NAME]';
/**
 * Compares valid Firebase key names, plus min and max name
 */

const nameCompare = function (a, b) {
  if (a === b) {
    return 0;
  } else if (a === MIN_NAME || b === MAX_NAME) {
    return -1;
  } else if (b === MIN_NAME || a === MAX_NAME) {
    return 1;
  } else {
    const aAsInt = tryParseInt(a),
          bAsInt = tryParseInt(b);

    if (aAsInt !== null) {
      if (bAsInt !== null) {
        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;
      } else {
        return -1;
      }
    } else if (bAsInt !== null) {
      return 1;
    } else {
      return a < b ? -1 : 1;
    }
  }
};
/**
 * @returns {!number} comparison result.
 */


const stringCompare = function (a, b) {
  if (a === b) {
    return 0;
  } else if (a < b) {
    return -1;
  } else {
    return 1;
  }
};

const requireKey = function (key, obj) {
  if (obj && key in obj) {
    return obj[key];
  } else {
    throw new Error('Missing required key (' + key + ') in object: ' + (0, _util.stringify)(obj));
  }
};

const ObjectToUniqueKey = function (obj) {
  if (typeof obj !== 'object' || obj === null) {
    return (0, _util.stringify)(obj);
  }

  const keys = []; // eslint-disable-next-line guard-for-in

  for (const k in obj) {
    keys.push(k);
  } // Export as json, but with the keys sorted.


  keys.sort();
  let key = '{';

  for (let i = 0; i < keys.length; i++) {
    if (i !== 0) {
      key += ',';
    }

    key += (0, _util.stringify)(keys[i]);
    key += ':';
    key += ObjectToUniqueKey(obj[keys[i]]);
  }

  key += '}';
  return key;
};
/**
 * Splits a string into a number of smaller segments of maximum size
 * @param str - The string
 * @param segsize - The maximum number of chars in the string.
 * @returns The string, split into appropriately-sized chunks
 */


const splitStringBySize = function (str, segsize) {
  const len = str.length;

  if (len <= segsize) {
    return [str];
  }

  const dataSegs = [];

  for (let c = 0; c < len; c += segsize) {
    if (c + segsize > len) {
      dataSegs.push(str.substring(c, len));
    } else {
      dataSegs.push(str.substring(c, c + segsize));
    }
  }

  return dataSegs;
};
/**
 * Apply a function to each (key, value) pair in an object or
 * apply a function to each (index, value) pair in an array
 * @param obj - The object or array to iterate over
 * @param fn - The function to apply
 */


function each(obj, fn) {
  for (const key in obj) {
    if (obj.hasOwnProperty(key)) {
      fn(key, obj[key]);
    }
  }
}
/**
 * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)
 * I made one modification at the end and removed the NaN / Infinity
 * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.
 * @param v - A double
 *
 */


const doubleToIEEE754String = function (v) {
  (0, _util.assert)(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL

  const ebits = 11,
        fbits = 52;
  const bias = (1 << ebits - 1) - 1;
  let s, e, f, ln, i; // Compute sign, exponent, fraction
  // Skip NaN / Infinity handling --MJL.

  if (v === 0) {
    e = 0;
    f = 0;
    s = 1 / v === -Infinity ? 1 : 0;
  } else {
    s = v < 0;
    v = Math.abs(v);

    if (v >= Math.pow(2, 1 - bias)) {
      // Normalized
      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);
      e = ln + bias;
      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));
    } else {
      // Denormalized
      e = 0;
      f = Math.round(v / Math.pow(2, 1 - bias - fbits));
    }
  } // Pack sign, exponent, fraction


  const bits = [];

  for (i = fbits; i; i -= 1) {
    bits.push(f % 2 ? 1 : 0);
    f = Math.floor(f / 2);
  }

  for (i = ebits; i; i -= 1) {
    bits.push(e % 2 ? 1 : 0);
    e = Math.floor(e / 2);
  }

  bits.push(s ? 1 : 0);
  bits.reverse();
  const str = bits.join(''); // Return the data as a hex string. --MJL

  let hexByteString = '';

  for (i = 0; i < 64; i += 8) {
    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);

    if (hexByte.length === 1) {
      hexByte = '0' + hexByte;
    }

    hexByteString = hexByteString + hexByte;
  }

  return hexByteString.toLowerCase();
};
/**
 * Used to detect if we're in a Chrome content script (which executes in an
 * isolated environment where long-polling doesn't work).
 */


const isChromeExtensionContentScript = function () {
  return !!(typeof window === 'object' && window['chrome'] && window['chrome']['extension'] && !/^chrome/.test(window.location.href));
};
/**
 * Used to detect if we're in a Windows 8 Store app.
 */


const isWindowsStoreApp = function () {
  // Check for the presence of a couple WinRT globals
  return typeof Windows === 'object' && typeof Windows.UI === 'object';
};
/**
 * Converts a server error code to a Javascript Error
 */


function errorForServerCode(code, query) {
  let reason = 'Unknown Error';

  if (code === 'too_big') {
    reason = 'The data requested exceeds the maximum size ' + 'that can be accessed with a single request.';
  } else if (code === 'permission_denied') {
    reason = "Client doesn't have permission to access the desired data.";
  } else if (code === 'unavailable') {
    reason = 'The service is unavailable';
  }

  const error = new Error(code + ' at ' + query._path.toString() + ': ' + reason); // eslint-disable-next-line @typescript-eslint/no-explicit-any

  error.code = code.toUpperCase();
  return error;
}
/**
 * Used to test for integer-looking strings
 */


const INTEGER_REGEXP_ = new RegExp('^-?(0*)\\d{1,10}$');
/**
 * For use in keys, the minimum possible 32-bit integer.
 */

const INTEGER_32_MIN = -2147483648;
/**
 * For use in kyes, the maximum possible 32-bit integer.
 */

const INTEGER_32_MAX = 2147483647;
/**
 * If the string contains a 32-bit integer, return it.  Else return null.
 */

const tryParseInt = function (str) {
  if (INTEGER_REGEXP_.test(str)) {
    const intVal = Number(str);

    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {
      return intVal;
    }
  }

  return null;
};
/**
 * Helper to run some code but catch any exceptions and re-throw them later.
 * Useful for preventing user callbacks from breaking internal code.
 *
 * Re-throwing the exception from a setTimeout is a little evil, but it's very
 * convenient (we don't have to try to figure out when is a safe point to
 * re-throw it), and the behavior seems reasonable:
 *
 * * If you aren't pausing on exceptions, you get an error in the console with
 *   the correct stack trace.
 * * If you're pausing on all exceptions, the debugger will pause on your
 *   exception and then again when we rethrow it.
 * * If you're only pausing on uncaught exceptions, the debugger will only pause
 *   on us re-throwing it.
 *
 * @param fn - The code to guard.
 */


const exceptionGuard = function (fn) {
  try {
    fn();
  } catch (e) {
    // Re-throw exception when it's safe.
    setTimeout(() => {
      // It used to be that "throw e" would result in a good console error with
      // relevant context, but as of Chrome 39, you just get the firebase.js
      // file/line number where we re-throw it, which is useless. So we log
      // e.stack explicitly.
      const stack = e.stack || '';
      warn('Exception was thrown by user callback.', stack);
      throw e;
    }, Math.floor(0));
  }
};
/**
 * @returns {boolean} true if we think we're currently being crawled.
 */


const beingCrawled = function () {
  const userAgent = typeof window === 'object' && window['navigator'] && window['navigator']['userAgent'] || ''; // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we
  // believe to support JavaScript/AJAX rendering.
  // NOTE: Google Webmaster Tools doesn't really belong, but their "This is how a visitor to your website
  // would have seen the page" is flaky if we don't treat it as a crawler.

  return userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0;
};
/**
 * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.
 *
 * It is removed with clearTimeout() as normal.
 *
 * @param fn - Function to run.
 * @param time - Milliseconds to wait before running.
 * @returns The setTimeout() return value.
 */


const setTimeoutNonBlocking = function (fn, time) {
  const timeout = setTimeout(fn, time); // eslint-disable-next-line @typescript-eslint/no-explicit-any

  if (typeof timeout === 'object' && timeout['unref']) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    timeout['unref']();
  }

  return timeout;
};
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Abstraction around AppCheck's token fetching capabilities.
 */


class AppCheckTokenProvider {
  constructor(appName_, appCheckProvider) {
    this.appName_ = appName_;
    this.appCheckProvider = appCheckProvider;
    this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({
      optional: true
    });

    if (!this.appCheck) {
      appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then(appCheck => this.appCheck = appCheck);
    }
  }

  getToken(forceRefresh) {
    if (!this.appCheck) {
      return new Promise((resolve, reject) => {
        // Support delayed initialization of FirebaseAppCheck. This allows our
        // customers to initialize the RTDB SDK before initializing Firebase
        // AppCheck and ensures that all requests are authenticated if a token
        // becomes available before the timoeout below expires.
        setTimeout(() => {
          if (this.appCheck) {
            this.getToken(forceRefresh).then(resolve, reject);
          } else {
            resolve(null);
          }
        }, 0);
      });
    }

    return this.appCheck.getToken(forceRefresh);
  }

  addTokenChangeListener(listener) {
    var _a;

    (_a = this.appCheckProvider) === null || _a === void 0 ? void 0 : _a.get().then(appCheck => appCheck.addTokenListener(listener));
  }

  notifyForInvalidToken() {
    warn(`Provided AppCheck credentials for the app named "${this.appName_}" ` + 'are invalid. This usually indicates your app was not initialized correctly.');
  }

}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Abstraction around FirebaseApp's token fetching capabilities.
 */


class FirebaseAuthTokenProvider {
  constructor(appName_, firebaseOptions_, authProvider_) {
    this.appName_ = appName_;
    this.firebaseOptions_ = firebaseOptions_;
    this.authProvider_ = authProvider_;
    this.auth_ = null;
    this.auth_ = authProvider_.getImmediate({
      optional: true
    });

    if (!this.auth_) {
      authProvider_.onInit(auth => this.auth_ = auth);
    }
  }

  getToken(forceRefresh) {
    if (!this.auth_) {
      return new Promise((resolve, reject) => {
        // Support delayed initialization of FirebaseAuth. This allows our
        // customers to initialize the RTDB SDK before initializing Firebase
        // Auth and ensures that all requests are authenticated if a token
        // becomes available before the timoeout below expires.
        setTimeout(() => {
          if (this.auth_) {
            this.getToken(forceRefresh).then(resolve, reject);
          } else {
            resolve(null);
          }
        }, 0);
      });
    }

    return this.auth_.getToken(forceRefresh).catch(error => {
      // TODO: Need to figure out all the cases this is raised and whether
      // this makes sense.
      if (error && error.code === 'auth/token-not-initialized') {
        log('Got auth/token-not-initialized error.  Treating as null token.');
        return null;
      } else {
        return Promise.reject(error);
      }
    });
  }

  addTokenChangeListener(listener) {
    // TODO: We might want to wrap the listener and call it with no args to
    // avoid a leaky abstraction, but that makes removing the listener harder.
    if (this.auth_) {
      this.auth_.addAuthTokenListener(listener);
    } else {
      this.authProvider_.get().then(auth => auth.addAuthTokenListener(listener));
    }
  }

  removeTokenChangeListener(listener) {
    this.authProvider_.get().then(auth => auth.removeAuthTokenListener(listener));
  }

  notifyForInvalidToken() {
    let errorMessage = 'Provided authentication credentials for the app named "' + this.appName_ + '" are invalid. This usually indicates your app was not ' + 'initialized correctly. ';

    if ('credential' in this.firebaseOptions_) {
      errorMessage += 'Make sure the "credential" property provided to initializeApp() ' + 'is authorized to access the specified "databaseURL" and is from the correct ' + 'project.';
    } else if ('serviceAccount' in this.firebaseOptions_) {
      errorMessage += 'Make sure the "serviceAccount" property provided to initializeApp() ' + 'is authorized to access the specified "databaseURL" and is from the correct ' + 'project.';
    } else {
      errorMessage += 'Make sure the "apiKey" and "databaseURL" properties provided to ' + 'initializeApp() match the values provided for your app at ' + 'https://console.firebase.google.com/.';
    }

    warn(errorMessage);
  }

}
/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */


class EmulatorTokenProvider {
  constructor(accessToken) {
    this.accessToken = accessToken;
  }

  getToken(forceRefresh) {
    return Promise.resolve({
      accessToken: this.accessToken
    });
  }

  addTokenChangeListener(listener) {
    // Invoke the listener immediately to match the behavior in Firebase Auth
    // (see packages/auth/src/auth.js#L1807)
    listener(this.accessToken);
  }

  removeTokenChangeListener(listener) {}

  notifyForInvalidToken() {}

}
/** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */


EmulatorTokenProvider.OWNER = 'owner';
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const PROTOCOL_VERSION = '5';
const VERSION_PARAM = 'v';
const TRANSPORT_SESSION_PARAM = 's';
const REFERER_PARAM = 'r';
const FORGE_REF = 'f'; // Matches console.firebase.google.com, firebase-console-*.corp.google.com and
// firebase.corp.google.com

const FORGE_DOMAIN_RE = /(console\.firebase|firebase-console-\w+\.corp|firebase\.corp)\.google\.com/;
const LAST_SESSION_PARAM = 'ls';
const APPLICATION_ID_PARAM = 'p';
const APP_CHECK_TOKEN_PARAM = 'ac';
const WEBSOCKET = 'websocket';
const LONG_POLLING = 'long_polling';
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A class that holds metadata about a Repo object
 */

class RepoInfo {
  /**
   * @param host - Hostname portion of the url for the repo
   * @param secure - Whether or not this repo is accessed over ssl
   * @param namespace - The namespace represented by the repo
   * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).
   * @param nodeAdmin - Whether this instance uses Admin SDK credentials
   * @param persistenceKey - Override the default session persistence storage key
   */
  constructor(host, secure, namespace, webSocketOnly, nodeAdmin = false, persistenceKey = '', includeNamespaceInQueryParams = false) {
    this.secure = secure;
    this.namespace = namespace;
    this.webSocketOnly = webSocketOnly;
    this.nodeAdmin = nodeAdmin;
    this.persistenceKey = persistenceKey;
    this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;
    this._host = host.toLowerCase();
    this._domain = this._host.substr(this._host.indexOf('.') + 1);
    this.internalHost = PersistentStorage.get('host:' + host) || this._host;
  }

  isCacheableHost() {
    return this.internalHost.substr(0, 2) === 's-';
  }

  isCustomHost() {
    return this._domain !== 'firebaseio.com' && this._domain !== 'firebaseio-demo.com';
  }

  get host() {
    return this._host;
  }

  set host(newHost) {
    if (newHost !== this.internalHost) {
      this.internalHost = newHost;

      if (this.isCacheableHost()) {
        PersistentStorage.set('host:' + this._host, this.internalHost);
      }
    }
  }

  toString() {
    let str = this.toURLString();

    if (this.persistenceKey) {
      str += '<' + this.persistenceKey + '>';
    }

    return str;
  }

  toURLString() {
    const protocol = this.secure ? 'https://' : 'http://';
    const query = this.includeNamespaceInQueryParams ? `?ns=${this.namespace}` : '';
    return `${protocol}${this.host}/${query}`;
  }

}

function repoInfoNeedsQueryParam(repoInfo) {
  return repoInfo.host !== repoInfo.internalHost || repoInfo.isCustomHost() || repoInfo.includeNamespaceInQueryParams;
}
/**
 * Returns the websocket URL for this repo
 * @param repoInfo - RepoInfo object
 * @param type - of connection
 * @param params - list
 * @returns The URL for this repo
 */


function repoInfoConnectionURL(repoInfo, type, params) {
  (0, _util.assert)(typeof type === 'string', 'typeof type must == string');
  (0, _util.assert)(typeof params === 'object', 'typeof params must == object');
  let connURL;

  if (type === WEBSOCKET) {
    connURL = (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';
  } else if (type === LONG_POLLING) {
    connURL = (repoInfo.secure ? 'https://' : 'http://') + repoInfo.internalHost + '/.lp?';
  } else {
    throw new Error('Unknown connection type: ' + type);
  }

  if (repoInfoNeedsQueryParam(repoInfo)) {
    params['ns'] = repoInfo.namespace;
  }

  const pairs = [];
  each(params, (key, value) => {
    pairs.push(key + '=' + value);
  });
  return connURL + pairs.join('&');
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Tracks a collection of stats.
 */


class StatsCollection {
  constructor() {
    this.counters_ = {};
  }

  incrementCounter(name, amount = 1) {
    if (!(0, _util.contains)(this.counters_, name)) {
      this.counters_[name] = 0;
    }

    this.counters_[name] += amount;
  }

  get() {
    return (0, _util.deepCopy)(this.counters_);
  }

}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const collections = {};
const reporters = {};

function statsManagerGetCollection(repoInfo) {
  const hashString = repoInfo.toString();

  if (!collections[hashString]) {
    collections[hashString] = new StatsCollection();
  }

  return collections[hashString];
}

function statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {
  const hashString = repoInfo.toString();

  if (!reporters[hashString]) {
    reporters[hashString] = creatorFunction();
  }

  return reporters[hashString];
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This class ensures the packets from the server arrive in order
 * This class takes data from the server and ensures it gets passed into the callbacks in order.
 */


class PacketReceiver {
  /**
   * @param onMessage_
   */
  constructor(onMessage_) {
    this.onMessage_ = onMessage_;
    this.pendingResponses = [];
    this.currentResponseNum = 0;
    this.closeAfterResponse = -1;
    this.onClose = null;
  }

  closeAfter(responseNum, callback) {
    this.closeAfterResponse = responseNum;
    this.onClose = callback;

    if (this.closeAfterResponse < this.currentResponseNum) {
      this.onClose();
      this.onClose = null;
    }
  }
  /**
   * Each message from the server comes with a response number, and an array of data. The responseNumber
   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all
   * browsers will respond in the same order as the requests we sent
   */


  handleResponse(requestNum, data) {
    this.pendingResponses[requestNum] = data;

    while (this.pendingResponses[this.currentResponseNum]) {
      const toProcess = this.pendingResponses[this.currentResponseNum];
      delete this.pendingResponses[this.currentResponseNum];

      for (let i = 0; i < toProcess.length; ++i) {
        if (toProcess[i]) {
          exceptionGuard(() => {
            this.onMessage_(toProcess[i]);
          });
        }
      }

      if (this.currentResponseNum === this.closeAfterResponse) {
        if (this.onClose) {
          this.onClose();
          this.onClose = null;
        }

        break;
      }

      this.currentResponseNum++;
    }
  }

}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// URL query parameters associated with longpolling


const FIREBASE_LONGPOLL_START_PARAM = 'start';
const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';
const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';
const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';
const FIREBASE_LONGPOLL_ID_PARAM = 'id';
const FIREBASE_LONGPOLL_PW_PARAM = 'pw';
const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';
const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';
const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';
const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';
const FIREBASE_LONGPOLL_DATA_PARAM = 'd';
const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe'; //Data size constants.
//TODO: Perf: the maximum length actually differs from browser to browser.
// We should check what browser we're on and set accordingly.

const MAX_URL_DATA_SIZE = 1870;
const SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=

const MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;
/**
 * Keepalive period
 * send a fresh request at minimum every 25 seconds. Opera has a maximum request
 * length of 30 seconds that we can't exceed.
 */

const KEEPALIVE_REQUEST_INTERVAL = 25000;
/**
 * How long to wait before aborting a long-polling connection attempt.
 */

const LP_CONNECT_TIMEOUT = 30000;
/**
 * This class manages a single long-polling connection.
 */

class BrowserPollConnection {
  /**
   * @param connId An identifier for this connection, used for logging
   * @param repoInfo The info for the endpoint to send data to.
   * @param applicationId The Firebase App ID for this project.
   * @param appCheckToken The AppCheck token for this client.
   * @param authToken The AuthToken to use for this connection.
   * @param transportSessionId Optional transportSessionid if we are
   * reconnecting for an existing transport session
   * @param lastSessionId Optional lastSessionId if the PersistentConnection has
   * already created a connection previously
   */
  constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {
    this.connId = connId;
    this.repoInfo = repoInfo;
    this.applicationId = applicationId;
    this.appCheckToken = appCheckToken;
    this.authToken = authToken;
    this.transportSessionId = transportSessionId;
    this.lastSessionId = lastSessionId;
    this.bytesSent = 0;
    this.bytesReceived = 0;
    this.everConnected_ = false;
    this.log_ = logWrapper(connId);
    this.stats_ = statsManagerGetCollection(repoInfo);

    this.urlFn = params => {
      // Always add the token if we have one.
      if (this.appCheckToken) {
        params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;
      }

      return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);
    };
  }
  /**
   * @param onMessage - Callback when messages arrive
   * @param onDisconnect - Callback with connection lost.
   */


  open(onMessage, onDisconnect) {
    this.curSegmentNum = 0;
    this.onDisconnect_ = onDisconnect;
    this.myPacketOrderer = new PacketReceiver(onMessage);
    this.isClosed_ = false;
    this.connectTimeoutTimer_ = setTimeout(() => {
      this.log_('Timed out trying to connect.'); // Make sure we clear the host cache

      this.onClosed_();
      this.connectTimeoutTimer_ = null; // eslint-disable-next-line @typescript-eslint/no-explicit-any
    }, Math.floor(LP_CONNECT_TIMEOUT)); // Ensure we delay the creation of the iframe until the DOM is loaded.

    executeWhenDOMReady(() => {
      if (this.isClosed_) {
        return;
      } //Set up a callback that gets triggered once a connection is set up.


      this.scriptTagHolder = new FirebaseIFrameScriptHolder((...args) => {
        const [command, arg1, arg2, arg3, arg4] = args;
        this.incrementIncomingBytes_(args);

        if (!this.scriptTagHolder) {
          return; // we closed the connection.
        }

        if (this.connectTimeoutTimer_) {
          clearTimeout(this.connectTimeoutTimer_);
          this.connectTimeoutTimer_ = null;
        }

        this.everConnected_ = true;

        if (command === FIREBASE_LONGPOLL_START_PARAM) {
          this.id = arg1;
          this.password = arg2;
        } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {
          // Don't clear the host cache. We got a response from the server, so we know it's reachable
          if (arg1) {
            // We aren't expecting any more data (other than what the server's already in the process of sending us
            // through our already open polls), so don't send any more.
            this.scriptTagHolder.sendNewPolls = false; // arg1 in this case is the last response number sent by the server. We should try to receive
            // all of the responses up to this one before closing

            this.myPacketOrderer.closeAfter(arg1, () => {
              this.onClosed_();
            });
          } else {
            this.onClosed_();
          }
        } else {
          throw new Error('Unrecognized command received: ' + command);
        }
      }, (...args) => {
        const [pN, data] = args;
        this.incrementIncomingBytes_(args);
        this.myPacketOrderer.handleResponse(pN, data);
      }, () => {
        this.onClosed_();
      }, this.urlFn); //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results
      //from cache.

      const urlParams = {};
      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';
      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);

      if (this.scriptTagHolder.uniqueCallbackIdentifier) {
        urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = this.scriptTagHolder.uniqueCallbackIdentifier;
      }

      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;

      if (this.transportSessionId) {
        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;
      }

      if (this.lastSessionId) {
        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;
      }

      if (this.applicationId) {
        urlParams[APPLICATION_ID_PARAM] = this.applicationId;
      }

      if (this.appCheckToken) {
        urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;
      }

      if (typeof location !== 'undefined' && location.hostname && FORGE_DOMAIN_RE.test(location.hostname)) {
        urlParams[REFERER_PARAM] = FORGE_REF;
      }

      const connectURL = this.urlFn(urlParams);
      this.log_('Connecting via long-poll to ' + connectURL);
      this.scriptTagHolder.addTag(connectURL, () => {
        /* do nothing */
      });
    });
  }
  /**
   * Call this when a handshake has completed successfully and we want to consider the connection established
   */


  start() {
    this.scriptTagHolder.startLongPoll(this.id, this.password);
    this.addDisconnectPingFrame(this.id, this.password);
  }
  /**
   * Forces long polling to be considered as a potential transport
   */


  static forceAllow() {
    BrowserPollConnection.forceAllow_ = true;
  }
  /**
   * Forces longpolling to not be considered as a potential transport
   */


  static forceDisallow() {
    BrowserPollConnection.forceDisallow_ = true;
  } // Static method, use string literal so it can be accessed in a generic way


  static isAvailable() {
    if ((0, _util.isNodeSdk)()) {
      return false;
    } else if (BrowserPollConnection.forceAllow_) {
      return true;
    } else {
      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in
      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).
      return !BrowserPollConnection.forceDisallow_ && typeof document !== 'undefined' && document.createElement != null && !isChromeExtensionContentScript() && !isWindowsStoreApp();
    }
  }
  /**
   * No-op for polling
   */


  markConnectionHealthy() {}
  /**
   * Stops polling and cleans up the iframe
   */


  shutdown_() {
    this.isClosed_ = true;

    if (this.scriptTagHolder) {
      this.scriptTagHolder.close();
      this.scriptTagHolder = null;
    } //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.


    if (this.myDisconnFrame) {
      document.body.removeChild(this.myDisconnFrame);
      this.myDisconnFrame = null;
    }

    if (this.connectTimeoutTimer_) {
      clearTimeout(this.connectTimeoutTimer_);
      this.connectTimeoutTimer_ = null;
    }
  }
  /**
   * Triggered when this transport is closed
   */


  onClosed_() {
    if (!this.isClosed_) {
      this.log_('Longpoll is closing itself');
      this.shutdown_();

      if (this.onDisconnect_) {
        this.onDisconnect_(this.everConnected_);
        this.onDisconnect_ = null;
      }
    }
  }
  /**
   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server
   * that we've left.
   */


  close() {
    if (!this.isClosed_) {
      this.log_('Longpoll is being closed.');
      this.shutdown_();
    }
  }
  /**
   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then
   * broken into chunks (since URLs have a small maximum length).
   * @param data - The JSON data to transmit.
   */


  send(data) {
    const dataStr = (0, _util.stringify)(data);
    this.bytesSent += dataStr.length;
    this.stats_.incrementCounter('bytes_sent', dataStr.length); //first, lets get the base64-encoded data

    const base64data = (0, _util.base64Encode)(dataStr); //We can only fit a certain amount in each URL, so we need to split this request
    //up into multiple pieces if it doesn't fit in one request.

    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE); //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number
    //of segments so that we can reassemble the packet on the server.

    for (let i = 0; i < dataSegs.length; i++) {
      this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);
      this.curSegmentNum++;
    }
  }
  /**
   * This is how we notify the server that we're leaving.
   * We aren't able to send requests with DHTML on a window close event, but we can
   * trigger XHR requests in some browsers (everything but Opera basically).
   */


  addDisconnectPingFrame(id, pw) {
    if ((0, _util.isNodeSdk)()) {
      return;
    }

    this.myDisconnFrame = document.createElement('iframe');
    const urlParams = {};
    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';
    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;
    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;
    this.myDisconnFrame.src = this.urlFn(urlParams);
    this.myDisconnFrame.style.display = 'none';
    document.body.appendChild(this.myDisconnFrame);
  }
  /**
   * Used to track the bytes received by this client
   */


  incrementIncomingBytes_(args) {
    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.
    const bytesReceived = (0, _util.stringify)(args).length;
    this.bytesReceived += bytesReceived;
    this.stats_.incrementCounter('bytes_received', bytesReceived);
  }

}
/*********************************************************************************************
 * A wrapper around an iframe that is used as a long-polling script holder.
 *********************************************************************************************/


class FirebaseIFrameScriptHolder {
  /**
   * @param commandCB - The callback to be called when control commands are recevied from the server.
   * @param onMessageCB - The callback to be triggered when responses arrive from the server.
   * @param onDisconnect - The callback to be triggered when this tag holder is closed
   * @param urlFn - A function that provides the URL of the endpoint to send data to.
   */
  constructor(commandCB, onMessageCB, onDisconnect, urlFn) {
    this.onDisconnect = onDisconnect;
    this.urlFn = urlFn; //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause
    //problems in some browsers.

    this.outstandingRequests = new Set(); //A queue of the pending segments waiting for transmission to the server.

    this.pendingSegs = []; //A serial number. We use this for two things:
    // 1) A way to ensure the browser doesn't cache responses to polls
    // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The
    //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute
    //    JSONP code in the order it was added to the iframe.

    this.currentSerial = Math.floor(Math.random() * 100000000); // This gets set to false when we're "closing down" the connection (e.g. we're switching transports but there's still
    // incoming data from the server that we're waiting for).

    this.sendNewPolls = true;

    if (!(0, _util.isNodeSdk)()) {
      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the
      //iframes where we put the long-polling script tags. We have two callbacks:
      //   1) Command Callback - Triggered for control issues, like starting a connection.
      //   2) Message Callback - Triggered when new data arrives.
      this.uniqueCallbackIdentifier = LUIDGenerator();
      window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;
      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB; //Create an iframe for us to add script tags to.

      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_(); // Set the iframe's contents.

      let script = ''; // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient
      // for ie9, but ie8 needs to do it again in the document itself.

      if (this.myIFrame.src && this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {
        const currentDomain = document.domain;
        script = '<script>document.domain="' + currentDomain + '";</script>';
      }

      const iframeContents = '<html><body>' + script + '</body></html>';

      try {
        this.myIFrame.doc.open();
        this.myIFrame.doc.write(iframeContents);
        this.myIFrame.doc.close();
      } catch (e) {
        log('frame writing exception');

        if (e.stack) {
          log(e.stack);
        }

        log(e);
      }
    } else {
      this.commandCB = commandCB;
      this.onMessageCB = onMessageCB;
    }
  }
  /**
   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can
   * actually use.
   */


  static createIFrame_() {
    const iframe = document.createElement('iframe');
    iframe.style.display = 'none'; // This is necessary in order to initialize the document inside the iframe

    if (document.body) {
      document.body.appendChild(iframe);

      try {
        // If document.domain has been modified in IE, this will throw an error, and we need to set the
        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute
        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.
        const a = iframe.contentWindow.document;

        if (!a) {
          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.
          log('No IE domain setting required');
        }
      } catch (e) {
        const domain = document.domain;
        iframe.src = "javascript:void((function(){document.open();document.domain='" + domain + "';document.close();})())";
      }
    } else {
      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this
      // never gets hit.
      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';
    } // Get the document of the iframe in a browser-specific way.


    if (iframe.contentDocument) {
      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari
    } else if (iframe.contentWindow) {
      iframe.doc = iframe.contentWindow.document; // Internet Explorer
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
    } else if (iframe.document) {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      iframe.doc = iframe.document; //others?
    }

    return iframe;
  }
  /**
   * Cancel all outstanding queries and remove the frame.
   */


  close() {
    //Mark this iframe as dead, so no new requests are sent.
    this.alive = false;

    if (this.myIFrame) {
      //We have to actually remove all of the html inside this iframe before removing it from the
      //window, or IE will continue loading and executing the script tags we've already added, which
      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.
      this.myIFrame.doc.body.innerHTML = '';
      setTimeout(() => {
        if (this.myIFrame !== null) {
          document.body.removeChild(this.myIFrame);
          this.myIFrame = null;
        }
      }, Math.floor(0));
    } // Protect from being called recursively.


    const onDisconnect = this.onDisconnect;

    if (onDisconnect) {
      this.onDisconnect = null;
      onDisconnect();
    }
  }
  /**
   * Actually start the long-polling session by adding the first script tag(s) to the iframe.
   * @param id - The ID of this connection
   * @param pw - The password for this connection
   */


  startLongPoll(id, pw) {
    this.myID = id;
    this.myPW = pw;
    this.alive = true; //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.

    while (this.newRequest_()) {}
  }
  /**
   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't
   * too many outstanding requests and we are still alive.
   *
   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if
   * needed.
   */


  newRequest_() {
    // We keep one outstanding request open all the time to receive data, but if we need to send data
    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically
    // close the old request.
    if (this.alive && this.sendNewPolls && this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {
      //construct our url
      this.currentSerial++;
      const urlParams = {};
      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;
      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;
      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;
      let theURL = this.urlFn(urlParams); //Now add as much data as we can.

      let curDataString = '';
      let i = 0;

      while (this.pendingSegs.length > 0) {
        //first, lets see if the next segment will fit.
        const nextSeg = this.pendingSegs[0];

        if (nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <= MAX_URL_DATA_SIZE) {
          //great, the segment will fit. Lets append it.
          const theSeg = this.pendingSegs.shift();
          curDataString = curDataString + '&' + FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM + i + '=' + theSeg.seg + '&' + FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET + i + '=' + theSeg.ts + '&' + FIREBASE_LONGPOLL_DATA_PARAM + i + '=' + theSeg.d;
          i++;
        } else {
          break;
        }
      }

      theURL = theURL + curDataString;
      this.addLongPollTag_(theURL, this.currentSerial);
      return true;
    } else {
      return false;
    }
  }
  /**
   * Queue a packet for transmission to the server.
   * @param segnum - A sequential id for this packet segment used for reassembly
   * @param totalsegs - The total number of segments in this packet
   * @param data - The data for this segment.
   */


  enqueueSegment(segnum, totalsegs, data) {
    //add this to the queue of segments to send.
    this.pendingSegs.push({
      seg: segnum,
      ts: totalsegs,
      d: data
    }); //send the data immediately if there isn't already data being transmitted, unless
    //startLongPoll hasn't been called yet.

    if (this.alive) {
      this.newRequest_();
    }
  }
  /**
   * Add a script tag for a regular long-poll request.
   * @param url - The URL of the script tag.
   * @param serial - The serial number of the request.
   */


  addLongPollTag_(url, serial) {
    //remember that we sent this request.
    this.outstandingRequests.add(serial);

    const doNewRequest = () => {
      this.outstandingRequests.delete(serial);
      this.newRequest_();
    }; // If this request doesn't return on its own accord (by the server sending us some data), we'll
    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.


    const keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));

    const readyStateCB = () => {
      // Request completed.  Cancel the keepalive.
      clearTimeout(keepaliveTimeout); // Trigger a new request so we can continue receiving data.

      doNewRequest();
    };

    this.addTag(url, readyStateCB);
  }
  /**
   * Add an arbitrary script tag to the iframe.
   * @param url - The URL for the script tag source.
   * @param loadCB - A callback to be triggered once the script has loaded.
   */


  addTag(url, loadCB) {
    if ((0, _util.isNodeSdk)()) {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      this.doNodeLongPoll(url, loadCB);
    } else {
      setTimeout(() => {
        try {
          // if we're already closed, don't add this poll
          if (!this.sendNewPolls) {
            return;
          }

          const newScript = this.myIFrame.doc.createElement('script');
          newScript.type = 'text/javascript';
          newScript.async = true;
          newScript.src = url; // eslint-disable-next-line @typescript-eslint/no-explicit-any

          newScript.onload = newScript.onreadystatechange = function () {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const rstate = newScript.readyState;

            if (!rstate || rstate === 'loaded' || rstate === 'complete') {
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              newScript.onload = newScript.onreadystatechange = null;

              if (newScript.parentNode) {
                newScript.parentNode.removeChild(newScript);
              }

              loadCB();
            }
          };

          newScript.onerror = () => {
            log('Long-poll script failed to load: ' + url);
            this.sendNewPolls = false;
            this.close();
          };

          this.myIFrame.doc.body.appendChild(newScript);
        } catch (e) {// TODO: we should make this error visible somehow
        }
      }, Math.floor(1));
    }
  }

}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const WEBSOCKET_MAX_FRAME_SIZE = 16384;
const WEBSOCKET_KEEPALIVE_INTERVAL = 45000;
let WebSocketImpl = null;

if (typeof MozWebSocket !== 'undefined') {
  WebSocketImpl = MozWebSocket;
} else if (typeof WebSocket !== 'undefined') {
  WebSocketImpl = WebSocket;
}
/**
 * Create a new websocket connection with the given callbacks.
 */


class WebSocketConnection {
  /**
   * @param connId identifier for this transport
   * @param repoInfo The info for the websocket endpoint.
   * @param applicationId The Firebase App ID for this project.
   * @param appCheckToken The App Check Token for this client.
   * @param authToken The Auth Token for this client.
   * @param transportSessionId Optional transportSessionId if this is connecting
   * to an existing transport session
   * @param lastSessionId Optional lastSessionId if there was a previous
   * connection
   */
  constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {
    this.connId = connId;
    this.applicationId = applicationId;
    this.appCheckToken = appCheckToken;
    this.authToken = authToken;
    this.keepaliveTimer = null;
    this.frames = null;
    this.totalFrames = 0;
    this.bytesSent = 0;
    this.bytesReceived = 0;
    this.log_ = logWrapper(this.connId);
    this.stats_ = statsManagerGetCollection(repoInfo);
    this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken);
    this.nodeAdmin = repoInfo.nodeAdmin;
  }
  /**
   * @param repoInfo - The info for the websocket endpoint.
   * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport
   *                                         session
   * @param lastSessionId - Optional lastSessionId if there was a previous connection
   * @returns connection url
   */


  static connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken) {
    const urlParams = {};
    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;

    if (!(0, _util.isNodeSdk)() && typeof location !== 'undefined' && location.hostname && FORGE_DOMAIN_RE.test(location.hostname)) {
      urlParams[REFERER_PARAM] = FORGE_REF;
    }

    if (transportSessionId) {
      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;
    }

    if (lastSessionId) {
      urlParams[LAST_SESSION_PARAM] = lastSessionId;
    }

    if (appCheckToken) {
      urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;
    }

    return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);
  }
  /**
   * @param onMessage - Callback when messages arrive
   * @param onDisconnect - Callback with connection lost.
   */


  open(onMessage, onDisconnect) {
    this.onDisconnect = onDisconnect;
    this.onMessage = onMessage;
    this.log_('Websocket connecting to ' + this.connURL);
    this.everConnected_ = false; // Assume failure until proven otherwise.

    PersistentStorage.set('previous_websocket_failure', true);

    try {
      if ((0, _util.isNodeSdk)()) {
        const device = this.nodeAdmin ? 'AdminNode' : 'Node'; // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>

        const options = {
          headers: {
            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,
            'X-Firebase-GMPID': this.applicationId || ''
          }
        }; // If using Node with admin creds, AppCheck-related checks are unnecessary.
        // Note that we send the credentials here even if they aren't admin credentials, which is
        // not a problem.
        // Note that this header is just used to bypass appcheck, and the token should still be sent
        // through the websocket connection once it is established.

        if (this.authToken) {
          options.headers['Authorization'] = `Bearer ${this.authToken}`;
        }

        if (this.appCheckToken) {
          options.headers['X-Firebase-AppCheck'] = this.appCheckToken;
        } // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.


        const env = process['env'];
        const proxy = this.connURL.indexOf('wss://') === 0 ? env['HTTPS_PROXY'] || env['https_proxy'] : env['HTTP_PROXY'] || env['http_proxy'];

        if (proxy) {
          options['proxy'] = {
            origin: proxy
          };
        }

        this.mySock = new WebSocketImpl(this.connURL, [], options);
      } else {
        const options = {
          headers: {
            'X-Firebase-GMPID': this.applicationId || '',
            'X-Firebase-AppCheck': this.appCheckToken || ''
          }
        };
        this.mySock = new WebSocketImpl(this.connURL, [], options);
      }
    } catch (e) {
      this.log_('Error instantiating WebSocket.');
      const error = e.message || e.data;

      if (error) {
        this.log_(error);
      }

      this.onClosed_();
      return;
    }

    this.mySock.onopen = () => {
      this.log_('Websocket connected.');
      this.everConnected_ = true;
    };

    this.mySock.onclose = () => {
      this.log_('Websocket connection was disconnected.');
      this.mySock = null;
      this.onClosed_();
    };

    this.mySock.onmessage = m => {
      this.handleIncomingFrame(m);
    };

    this.mySock.onerror = e => {
      this.log_('WebSocket error.  Closing connection.'); // eslint-disable-next-line @typescript-eslint/no-explicit-any

      const error = e.message || e.data;

      if (error) {
        this.log_(error);
      }

      this.onClosed_();
    };
  }
  /**
   * No-op for websockets, we don't need to do anything once the connection is confirmed as open
   */


  start() {}

  static forceDisallow() {
    WebSocketConnection.forceDisallow_ = true;
  }

  static isAvailable() {
    let isOldAndroid = false;

    if (typeof navigator !== 'undefined' && navigator.userAgent) {
      const oldAndroidRegex = /Android ([0-9]{0,}\.[0-9]{0,})/;
      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);

      if (oldAndroidMatch && oldAndroidMatch.length > 1) {
        if (parseFloat(oldAndroidMatch[1]) < 4.4) {
          isOldAndroid = true;
        }
      }
    }

    return !isOldAndroid && WebSocketImpl !== null && !WebSocketConnection.forceDisallow_;
  }
  /**
   * Returns true if we previously failed to connect with this transport.
   */


  static previouslyFailed() {
    // If our persistent storage is actually only in-memory storage,
    // we default to assuming that it previously failed to be safe.
    return PersistentStorage.isInMemoryStorage || PersistentStorage.get('previous_websocket_failure') === true;
  }

  markConnectionHealthy() {
    PersistentStorage.remove('previous_websocket_failure');
  }

  appendFrame_(data) {
    this.frames.push(data);

    if (this.frames.length === this.totalFrames) {
      const fullMess = this.frames.join('');
      this.frames = null;
      const jsonMess = (0, _util.jsonEval)(fullMess); //handle the message

      this.onMessage(jsonMess);
    }
  }
  /**
   * @param frameCount - The number of frames we are expecting from the server
   */


  handleNewFrameCount_(frameCount) {
    this.totalFrames = frameCount;
    this.frames = [];
  }
  /**
   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1
   * @returns Any remaining data to be process, or null if there is none
   */


  extractFrameCount_(data) {
    (0, _util.assert)(this.frames === null, 'We already have a frame buffer'); // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced
    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508

    if (data.length <= 6) {
      const frameCount = Number(data);

      if (!isNaN(frameCount)) {
        this.handleNewFrameCount_(frameCount);
        return null;
      }
    }

    this.handleNewFrameCount_(1);
    return data;
  }
  /**
   * Process a websocket frame that has arrived from the server.
   * @param mess - The frame data
   */


  handleIncomingFrame(mess) {
    if (this.mySock === null) {
      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.
    }

    const data = mess['data'];
    this.bytesReceived += data.length;
    this.stats_.incrementCounter('bytes_received', data.length);
    this.resetKeepAlive();

    if (this.frames !== null) {
      // we're buffering
      this.appendFrame_(data);
    } else {
      // try to parse out a frame count, otherwise, assume 1 and process it
      const remainingData = this.extractFrameCount_(data);

      if (remainingData !== null) {
        this.appendFrame_(remainingData);
      }
    }
  }
  /**
   * Send a message to the server
   * @param data - The JSON object to transmit
   */


  send(data) {
    this.resetKeepAlive();
    const dataStr = (0, _util.stringify)(data);
    this.bytesSent += dataStr.length;
    this.stats_.incrementCounter('bytes_sent', dataStr.length); //We can only fit a certain amount in each websocket frame, so we need to split this request
    //up into multiple pieces if it doesn't fit in one request.

    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE); //Send the length header

    if (dataSegs.length > 1) {
      this.sendString_(String(dataSegs.length));
    } //Send the actual data in segments.


    for (let i = 0; i < dataSegs.length; i++) {
      this.sendString_(dataSegs[i]);
    }
  }

  shutdown_() {
    this.isClosed_ = true;

    if (this.keepaliveTimer) {
      clearInterval(this.keepaliveTimer);
      this.keepaliveTimer = null;
    }

    if (this.mySock) {
      this.mySock.close();
      this.mySock = null;
    }
  }

  onClosed_() {
    if (!this.isClosed_) {
      this.log_('WebSocket is closing itself');
      this.shutdown_(); // since this is an internal close, trigger the close listener

      if (this.onDisconnect) {
        this.onDisconnect(this.everConnected_);
        this.onDisconnect = null;
      }
    }
  }
  /**
   * External-facing close handler.
   * Close the websocket and kill the connection.
   */


  close() {
    if (!this.isClosed_) {
      this.log_('WebSocket is being closed');
      this.shutdown_();
    }
  }
  /**
   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after
   * the last activity.
   */


  resetKeepAlive() {
    clearInterval(this.keepaliveTimer);
    this.keepaliveTimer = setInterval(() => {
      //If there has been no websocket activity for a while, send a no-op
      if (this.mySock) {
        this.sendString_('0');
      }

      this.resetKeepAlive(); // eslint-disable-next-line @typescript-eslint/no-explicit-any
    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));
  }
  /**
   * Send a string over the websocket.
   *
   * @param str - String to send.
   */


  sendString_(str) {
    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()
    // calls for some unknown reason.  We treat these as an error and disconnect.
    // See https://app.asana.com/0/58926111402292/68021340250410
    try {
      this.mySock.send(str);
    } catch (e) {
      this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');
      setTimeout(this.onClosed_.bind(this), 0);
    }
  }

}
/**
 * Number of response before we consider the connection "healthy."
 */


WebSocketConnection.responsesRequiredToBeHealthy = 2;
/**
 * Time to wait for the connection te become healthy before giving up.
 */

WebSocketConnection.healthyTimeout = 30000;
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Currently simplistic, this class manages what transport a Connection should use at various stages of its
 * lifecycle.
 *
 * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if
 * they are available.
 */

class TransportManager {
  /**
   * @param repoInfo - Metadata around the namespace we're connecting to
   */
  constructor(repoInfo) {
    this.initTransports_(repoInfo);
  }

  static get ALL_TRANSPORTS() {
    return [BrowserPollConnection, WebSocketConnection];
  }

  initTransports_(repoInfo) {
    const isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();
    let isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();

    if (repoInfo.webSocketOnly) {
      if (!isWebSocketsAvailable) {
        warn("wss:// URL used, but browser isn't known to support websockets.  Trying anyway.");
      }

      isSkipPollConnection = true;
    }

    if (isSkipPollConnection) {
      this.transports_ = [WebSocketConnection];
    } else {
      const transports = this.transports_ = [];

      for (const transport of TransportManager.ALL_TRANSPORTS) {
        if (transport && transport['isAvailable']()) {
          transports.push(transport);
        }
      }
    }
  }
  /**
   * @returns The constructor for the initial transport to use
   */


  initialTransport() {
    if (this.transports_.length > 0) {
      return this.transports_[0];
    } else {
      throw new Error('No transports available');
    }
  }
  /**
   * @returns The constructor for the next transport, or null
   */


  upgradeTransport() {
    if (this.transports_.length > 1) {
      return this.transports_[1];
    } else {
      return null;
    }
  }

}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Abort upgrade attempt if it takes longer than 60s.


const UPGRADE_TIMEOUT = 60000; // For some transports (WebSockets), we need to "validate" the transport by exchanging a few requests and responses.
// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.

const DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000; // If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)
// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout
// but we've sent/received enough bytes, we don't cancel the connection.

const BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;
const BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;
const MESSAGE_TYPE = 't';
const MESSAGE_DATA = 'd';
const CONTROL_SHUTDOWN = 's';
const CONTROL_RESET = 'r';
const CONTROL_ERROR = 'e';
const CONTROL_PONG = 'o';
const SWITCH_ACK = 'a';
const END_TRANSMISSION = 'n';
const PING = 'p';
const SERVER_HELLO = 'h';
/**
 * Creates a new real-time connection to the server using whichever method works
 * best in the current browser.
 */

class Connection {
  /**
   * @param id - an id for this connection
   * @param repoInfo_ - the info for the endpoint to connect to
   * @param applicationId_ - the Firebase App ID for this project
   * @param appCheckToken_ - The App Check Token for this device.
   * @param authToken_ - The auth token for this session.
   * @param onMessage_ - the callback to be triggered when a server-push message arrives
   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.
   * @param onDisconnect_ - the callback to be triggered when a connection was lost
   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.
   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server
   */
  constructor(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {
    this.id = id;
    this.repoInfo_ = repoInfo_;
    this.applicationId_ = applicationId_;
    this.appCheckToken_ = appCheckToken_;
    this.authToken_ = authToken_;
    this.onMessage_ = onMessage_;
    this.onReady_ = onReady_;
    this.onDisconnect_ = onDisconnect_;
    this.onKill_ = onKill_;
    this.lastSessionId = lastSessionId;
    this.connectionCount = 0;
    this.pendingDataMessages = [];
    this.state_ = 0
    /* CONNECTING */
    ;
    this.log_ = logWrapper('c:' + this.id + ':');
    this.transportManager_ = new TransportManager(repoInfo_);
    this.log_('Connection created');
    this.start_();
  }
  /**
   * Starts a connection attempt
   */


  start_() {
    const conn = this.transportManager_.initialTransport();
    this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId); // For certain transports (WebSockets), we need to send and receive several messages back and forth before we
    // can consider the transport healthy.

    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;
    const onMessageReceived = this.connReceiver_(this.conn_);
    const onConnectionLost = this.disconnReceiver_(this.conn_);
    this.tx_ = this.conn_;
    this.rx_ = this.conn_;
    this.secondaryConn_ = null;
    this.isHealthy_ = false;
    /*
     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.
     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.
     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should
     * still have the context of your originating frame.
     */

    setTimeout(() => {
      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it
      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);
    }, Math.floor(0));
    const healthyTimeoutMS = conn['healthyTimeout'] || 0;

    if (healthyTimeoutMS > 0) {
      this.healthyTimeout_ = setTimeoutNonBlocking(() => {
        this.healthyTimeout_ = null;

        if (!this.isHealthy_) {
          if (this.conn_ && this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {
            this.log_('Connection exceeded healthy timeout but has received ' + this.conn_.bytesReceived + ' bytes.  Marking connection healthy.');
            this.isHealthy_ = true;
            this.conn_.markConnectionHealthy();
          } else if (this.conn_ && this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {
            this.log_('Connection exceeded healthy timeout but has sent ' + this.conn_.bytesSent + ' bytes.  Leaving connection alive.'); // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to
            // the server.
          } else {
            this.log_('Closing unhealthy connection after timeout.');
            this.close();
          }
        } // eslint-disable-next-line @typescript-eslint/no-explicit-any

      }, Math.floor(healthyTimeoutMS));
    }
  }

  nextTransportId_() {
    return 'c:' + this.id + ':' + this.connectionCount++;
  }

  disconnReceiver_(conn) {
    return everConnected => {
      if (conn === this.conn_) {
        this.onConnectionLost_(everConnected);
      } else if (conn === this.secondaryConn_) {
        this.log_('Secondary connection lost.');
        this.onSecondaryConnectionLost_();
      } else {
        this.log_('closing an old connection');
      }
    };
  }

  connReceiver_(conn) {
    return message => {
      if (this.state_ !== 2
      /* DISCONNECTED */
      ) {
        if (conn === this.rx_) {
          this.onPrimaryMessageReceived_(message);
        } else if (conn === this.secondaryConn_) {
          this.onSecondaryMessageReceived_(message);
        } else {
          this.log_('message on old connection');
        }
      }
    };
  }
  /**
   * @param dataMsg - An arbitrary data message to be sent to the server
   */


  sendRequest(dataMsg) {
    // wrap in a data message envelope and send it on
    const msg = {
      t: 'd',
      d: dataMsg
    };
    this.sendData_(msg);
  }

  tryCleanupConnection() {
    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {
      this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);
      this.conn_ = this.secondaryConn_;
      this.secondaryConn_ = null; // the server will shutdown the old connection
    }
  }

  onSecondaryControl_(controlData) {
    if (MESSAGE_TYPE in controlData) {
      const cmd = controlData[MESSAGE_TYPE];

      if (cmd === SWITCH_ACK) {
        this.upgradeIfSecondaryHealthy_();
      } else if (cmd === CONTROL_RESET) {
        // Most likely the session wasn't valid. Abandon the switch attempt
        this.log_('Got a reset on secondary, closing it');
        this.secondaryConn_.close(); // If we were already using this connection for something, than we need to fully close

        if (this.tx_ === this.secondaryConn_ || this.rx_ === this.secondaryConn_) {
          this.close();
        }
      } else if (cmd === CONTROL_PONG) {
        this.log_('got pong on secondary.');
        this.secondaryResponsesRequired_--;
        this.upgradeIfSecondaryHealthy_();
      }
    }
  }

  onSecondaryMessageReceived_(parsedData) {
    const layer = requireKey('t', parsedData);
    const data = requireKey('d', parsedData);

    if (layer === 'c') {
      this.onSecondaryControl_(data);
    } else if (layer === 'd') {
      // got a data message, but we're still second connection. Need to buffer it up
      this.pendingDataMessages.push(data);
    } else {
      throw new Error('Unknown protocol layer: ' + layer);
    }
  }

  upgradeIfSecondaryHealthy_() {
    if (this.secondaryResponsesRequired_ <= 0) {
      this.log_('Secondary connection is healthy.');
      this.isHealthy_ = true;
      this.secondaryConn_.markConnectionHealthy();
      this.proceedWithUpgrade_();
    } else {
      // Send a ping to make sure the connection is healthy.
      this.log_('sending ping on secondary.');
      this.secondaryConn_.send({
        t: 'c',
        d: {
          t: PING,
          d: {}
        }
      });
    }
  }

  proceedWithUpgrade_() {
    // tell this connection to consider itself open
    this.secondaryConn_.start(); // send ack

    this.log_('sending client ack on secondary');
    this.secondaryConn_.send({
      t: 'c',
      d: {
        t: SWITCH_ACK,
        d: {}
      }
    }); // send end packet on primary transport, switch to sending on this one
    // can receive on this one, buffer responses until end received on primary transport

    this.log_('Ending transmission on primary');
    this.conn_.send({
      t: 'c',
      d: {
        t: END_TRANSMISSION,
        d: {}
      }
    });
    this.tx_ = this.secondaryConn_;
    this.tryCleanupConnection();
  }

  onPrimaryMessageReceived_(parsedData) {
    // Must refer to parsedData properties in quotes, so closure doesn't touch them.
    const layer = requireKey('t', parsedData);
    const data = requireKey('d', parsedData);

    if (layer === 'c') {
      this.onControl_(data);
    } else if (layer === 'd') {
      this.onDataMessage_(data);
    }
  }

  onDataMessage_(message) {
    this.onPrimaryResponse_(); // We don't do anything with data messages, just kick them up a level

    this.onMessage_(message);
  }

  onPrimaryResponse_() {
    if (!this.isHealthy_) {
      this.primaryResponsesRequired_--;

      if (this.primaryResponsesRequired_ <= 0) {
        this.log_('Primary connection is healthy.');
        this.isHealthy_ = true;
        this.conn_.markConnectionHealthy();
      }
    }
  }

  onControl_(controlData) {
    const cmd = requireKey(MESSAGE_TYPE, controlData);

    if (MESSAGE_DATA in controlData) {
      const payload = controlData[MESSAGE_DATA];

      if (cmd === SERVER_HELLO) {
        this.onHandshake_(payload);
      } else if (cmd === END_TRANSMISSION) {
        this.log_('recvd end transmission on primary');
        this.rx_ = this.secondaryConn_;

        for (let i = 0; i < this.pendingDataMessages.length; ++i) {
          this.onDataMessage_(this.pendingDataMessages[i]);
        }

        this.pendingDataMessages = [];
        this.tryCleanupConnection();
      } else if (cmd === CONTROL_SHUTDOWN) {
        // This was previously the 'onKill' callback passed to the lower-level connection
        // payload in this case is the reason for the shutdown. Generally a human-readable error
        this.onConnectionShutdown_(payload);
      } else if (cmd === CONTROL_RESET) {
        // payload in this case is the host we should contact
        this.onReset_(payload);
      } else if (cmd === CONTROL_ERROR) {
        error('Server Error: ' + payload);
      } else if (cmd === CONTROL_PONG) {
        this.log_('got pong on primary.');
        this.onPrimaryResponse_();
        this.sendPingOnPrimaryIfNecessary_();
      } else {
        error('Unknown control packet command: ' + cmd);
      }
    }
  }
  /**
   * @param handshake - The handshake data returned from the server
   */


  onHandshake_(handshake) {
    const timestamp = handshake.ts;
    const version = handshake.v;
    const host = handshake.h;
    this.sessionId = handshake.s;
    this.repoInfo_.host = host; // if we've already closed the connection, then don't bother trying to progress further

    if (this.state_ === 0
    /* CONNECTING */
    ) {
      this.conn_.start();
      this.onConnectionEstablished_(this.conn_, timestamp);

      if (PROTOCOL_VERSION !== version) {
        warn('Protocol version mismatch detected');
      } // TODO: do we want to upgrade? when? maybe a delay?


      this.tryStartUpgrade_();
    }
  }

  tryStartUpgrade_() {
    const conn = this.transportManager_.upgradeTransport();

    if (conn) {
      this.startUpgrade_(conn);
    }
  }

  startUpgrade_(conn) {
    this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId); // For certain transports (WebSockets), we need to send and receive several messages back and forth before we
    // can consider the transport healthy.

    this.secondaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;
    const onMessage = this.connReceiver_(this.secondaryConn_);
    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);
    this.secondaryConn_.open(onMessage, onDisconnect); // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.

    setTimeoutNonBlocking(() => {
      if (this.secondaryConn_) {
        this.log_('Timed out trying to upgrade.');
        this.secondaryConn_.close();
      }
    }, Math.floor(UPGRADE_TIMEOUT));
  }

  onReset_(host) {
    this.log_('Reset packet received.  New host: ' + host);
    this.repoInfo_.host = host; // TODO: if we're already "connected", we need to trigger a disconnect at the next layer up.
    // We don't currently support resets after the connection has already been established

    if (this.state_ === 1
    /* CONNECTED */
    ) {
      this.close();
    } else {
      // Close whatever connections we have open and start again.
      this.closeConnections_();
      this.start_();
    }
  }

  onConnectionEstablished_(conn, timestamp) {
    this.log_('Realtime connection established.');
    this.conn_ = conn;
    this.state_ = 1
    /* CONNECTED */
    ;

    if (this.onReady_) {
      this.onReady_(timestamp, this.sessionId);
      this.onReady_ = null;
    } // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,
    // send some pings.


    if (this.primaryResponsesRequired_ === 0) {
      this.log_('Primary connection is healthy.');
      this.isHealthy_ = true;
    } else {
      setTimeoutNonBlocking(() => {
        this.sendPingOnPrimaryIfNecessary_();
      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));
    }
  }

  sendPingOnPrimaryIfNecessary_() {
    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.
    if (!this.isHealthy_ && this.state_ === 1
    /* CONNECTED */
    ) {
      this.log_('sending ping on primary.');
      this.sendData_({
        t: 'c',
        d: {
          t: PING,
          d: {}
        }
      });
    }
  }

  onSecondaryConnectionLost_() {
    const conn = this.secondaryConn_;
    this.secondaryConn_ = null;

    if (this.tx_ === conn || this.rx_ === conn) {
      // we are relying on this connection already in some capacity. Therefore, a failure is real
      this.close();
    }
  }
  /**
   * @param everConnected - Whether or not the connection ever reached a server. Used to determine if
   * we should flush the host cache
   */


  onConnectionLost_(everConnected) {
    this.conn_ = null; // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting
    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.

    if (!everConnected && this.state_ === 0
    /* CONNECTING */
    ) {
      this.log_('Realtime connection failed.'); // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away

      if (this.repoInfo_.isCacheableHost()) {
        PersistentStorage.remove('host:' + this.repoInfo_.host); // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com

        this.repoInfo_.internalHost = this.repoInfo_.host;
      }
    } else if (this.state_ === 1
    /* CONNECTED */
    ) {
      this.log_('Realtime connection lost.');
    }

    this.close();
  }

  onConnectionShutdown_(reason) {
    this.log_('Connection shutdown command received. Shutting down...');

    if (this.onKill_) {
      this.onKill_(reason);
      this.onKill_ = null;
    } // We intentionally don't want to fire onDisconnect (kill is a different case),
    // so clear the callback.


    this.onDisconnect_ = null;
    this.close();
  }

  sendData_(data) {
    if (this.state_ !== 1
    /* CONNECTED */
    ) {
      throw 'Connection is not connected';
    } else {
      this.tx_.send(data);
    }
  }
  /**
   * Cleans up this connection, calling the appropriate callbacks
   */


  close() {
    if (this.state_ !== 2
    /* DISCONNECTED */
    ) {
      this.log_('Closing realtime connection.');
      this.state_ = 2
      /* DISCONNECTED */
      ;
      this.closeConnections_();

      if (this.onDisconnect_) {
        this.onDisconnect_();
        this.onDisconnect_ = null;
      }
    }
  }

  closeConnections_() {
    this.log_('Shutting down all connections');

    if (this.conn_) {
      this.conn_.close();
      this.conn_ = null;
    }

    if (this.secondaryConn_) {
      this.secondaryConn_.close();
      this.secondaryConn_ = null;
    }

    if (this.healthyTimeout_) {
      clearTimeout(this.healthyTimeout_);
      this.healthyTimeout_ = null;
    }
  }

}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Interface defining the set of actions that can be performed against the Firebase server
 * (basically corresponds to our wire protocol).
 *
 * @interface
 */


class ServerActions {
  put(pathString, data, onComplete, hash) {}

  merge(pathString, data, onComplete, hash) {}
  /**
   * Refreshes the auth token for the current connection.
   * @param token - The authentication token
   */


  refreshAuthToken(token) {}
  /**
   * Refreshes the app check token for the current connection.
   * @param token The app check token
   */


  refreshAppCheckToken(token) {}

  onDisconnectPut(pathString, data, onComplete) {}

  onDisconnectMerge(pathString, data, onComplete) {}

  onDisconnectCancel(pathString, onComplete) {}

  reportStats(stats) {}

}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Base class to be used if you want to emit events. Call the constructor with
 * the set of allowed event names.
 */


class EventEmitter {
  constructor(allowedEvents_) {
    this.allowedEvents_ = allowedEvents_;
    this.listeners_ = {};
    (0, _util.assert)(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');
  }
  /**
   * To be called by derived classes to trigger events.
   */


  trigger(eventType, ...varArgs) {
    if (Array.isArray(this.listeners_[eventType])) {
      // Clone the list, since callbacks could add/remove listeners.
      const listeners = [...this.listeners_[eventType]];

      for (let i = 0; i < listeners.length; i++) {
        listeners[i].callback.apply(listeners[i].context, varArgs);
      }
    }
  }

  on(eventType, callback, context) {
    this.validateEventType_(eventType);
    this.listeners_[eventType] = this.listeners_[eventType] || [];
    this.listeners_[eventType].push({
      callback,
      context
    });
    const eventData = this.getInitialEvent(eventType);

    if (eventData) {
      callback.apply(context, eventData);
    }
  }

  off(eventType, callback, context) {
    this.validateEventType_(eventType);
    const listeners = this.listeners_[eventType] || [];

    for (let i = 0; i < listeners.length; i++) {
      if (listeners[i].callback === callback && (!context || context === listeners[i].context)) {
        listeners.splice(i, 1);
        return;
      }
    }
  }

  validateEventType_(eventType) {
    (0, _util.assert)(this.allowedEvents_.find(et => {
      return et === eventType;
    }), 'Unknown event: ' + eventType);
  }

}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Monitors online state (as reported by window.online/offline events).
 *
 * The expectation is that this could have many false positives (thinks we are online
 * when we're not), but no false negatives.  So we can safely use it to determine when
 * we definitely cannot reach the internet.
 */


class OnlineMonitor extends EventEmitter {
  constructor() {
    super(['online']);
    this.online_ = true; // We've had repeated complaints that Cordova apps can get stuck "offline", e.g.
    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810
    // It would seem that the 'online' event does not always fire consistently. So we disable it
    // for Cordova.

    if (typeof window !== 'undefined' && typeof window.addEventListener !== 'undefined' && !(0, _util.isMobileCordova)()) {
      window.addEventListener('online', () => {
        if (!this.online_) {
          this.online_ = true;
          this.trigger('online', true);
        }
      }, false);
      window.addEventListener('offline', () => {
        if (this.online_) {
          this.online_ = false;
          this.trigger('online', false);
        }
      }, false);
    }
  }

  static getInstance() {
    return new OnlineMonitor();
  }

  getInitialEvent(eventType) {
    (0, _util.assert)(eventType === 'online', 'Unknown event type: ' + eventType);
    return [this.online_];
  }

  currentlyOnline() {
    return this.online_;
  }

}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Maximum key depth. */


const MAX_PATH_DEPTH = 32;
/** Maximum number of (UTF8) bytes in a Firebase path. */

const MAX_PATH_LENGTH_BYTES = 768;
/**
 * An immutable object representing a parsed path.  It's immutable so that you
 * can pass them around to other functions without worrying about them changing
 * it.
 */

class Path {
  /**
   * @param pathOrString - Path string to parse, or another path, or the raw
   * tokens array
   */
  constructor(pathOrString, pieceNum) {
    if (pieceNum === void 0) {
      this.pieces_ = pathOrString.split('/'); // Remove empty pieces.

      let copyTo = 0;

      for (let i = 0; i < this.pieces_.length; i++) {
        if (this.pieces_[i].length > 0) {
          this.pieces_[copyTo] = this.pieces_[i];
          copyTo++;
        }
      }

      this.pieces_.length = copyTo;
      this.pieceNum_ = 0;
    } else {
      this.pieces_ = pathOrString;
      this.pieceNum_ = pieceNum;
    }
  }

  toString() {
    let pathString = '';

    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {
      if (this.pieces_[i] !== '') {
        pathString += '/' + this.pieces_[i];
      }
    }

    return pathString || '/';
  }

}

function newEmptyPath() {
  return new Path('');
}

function pathGetFront(path) {
  if (path.pieceNum_ >= path.pieces_.length) {
    return null;
  }

  return path.pieces_[path.pieceNum_];
}
/**
 * @returns The number of segments in this path
 */


function pathGetLength(path) {
  return path.pieces_.length - path.pieceNum_;
}

function pathPopFront(path) {
  let pieceNum = path.pieceNum_;

  if (pieceNum < path.pieces_.length) {
    pieceNum++;
  }

  return new Path(path.pieces_, pieceNum);
}

function pathGetBack(path) {
  if (path.pieceNum_ < path.pieces_.length) {
    return path.pieces_[path.pieces_.length - 1];
  }

  return null;
}

function pathToUrlEncodedString(path) {
  let pathString = '';

  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {
    if (path.pieces_[i] !== '') {
      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));
    }
  }

  return pathString || '/';
}
/**
 * Shallow copy of the parts of the path.
 *
 */


function pathSlice(path, begin = 0) {
  return path.pieces_.slice(path.pieceNum_ + begin);
}

function pathParent(path) {
  if (path.pieceNum_ >= path.pieces_.length) {
    return null;
  }

  const pieces = [];

  for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {
    pieces.push(path.pieces_[i]);
  }

  return new Path(pieces, 0);
}

function pathChild(path, childPathObj) {
  const pieces = [];

  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {
    pieces.push(path.pieces_[i]);
  }

  if (childPathObj instanceof Path) {
    for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {
      pieces.push(childPathObj.pieces_[i]);
    }
  } else {
    const childPieces = childPathObj.split('/');

    for (let i = 0; i < childPieces.length; i++) {
      if (childPieces[i].length > 0) {
        pieces.push(childPieces[i]);
      }
    }
  }

  return new Path(pieces, 0);
}
/**
 * @returns True if there are no segments in this path
 */


function pathIsEmpty(path) {
  return path.pieceNum_ >= path.pieces_.length;
}
/**
 * @returns The path from outerPath to innerPath
 */


function newRelativePath(outerPath, innerPath) {
  const outer = pathGetFront(outerPath),
        inner = pathGetFront(innerPath);

  if (outer === null) {
    return innerPath;
  } else if (outer === inner) {
    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));
  } else {
    throw new Error('INTERNAL ERROR: innerPath (' + innerPath + ') is not within ' + 'outerPath (' + outerPath + ')');
  }
}
/**
 * @returns -1, 0, 1 if left is less, equal, or greater than the right.
 */


function pathCompare(left, right) {
  const leftKeys = pathSlice(left, 0);
  const rightKeys = pathSlice(right, 0);

  for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {
    const cmp = nameCompare(leftKeys[i], rightKeys[i]);

    if (cmp !== 0) {
      return cmp;
    }
  }

  if (leftKeys.length === rightKeys.length) {
    return 0;
  }

  return leftKeys.length < rightKeys.length ? -1 : 1;
}
/**
 * @returns true if paths are the same.
 */


function pathEquals(path, other) {
  if (pathGetLength(path) !== pathGetLength(other)) {
    return false;
  }

  for (let i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {
    if (path.pieces_[i] !== other.pieces_[j]) {
      return false;
    }
  }

  return true;
}
/**
 * @returns True if this path is a parent (or the same as) other
 */


function pathContains(path, other) {
  let i = path.pieceNum_;
  let j = other.pieceNum_;

  if (pathGetLength(path) > pathGetLength(other)) {
    return false;
  }

  while (i < path.pieces_.length) {
    if (path.pieces_[i] !== other.pieces_[j]) {
      return false;
    }

    ++i;
    ++j;
  }

  return true;
}
/**
 * Dynamic (mutable) path used to count path lengths.
 *
 * This class is used to efficiently check paths for valid
 * length (in UTF8 bytes) and depth (used in path validation).
 *
 * Throws Error exception if path is ever invalid.
 *
 * The definition of a path always begins with '/'.
 */


class ValidationPath {
  /**
   * @param path - Initial Path.
   * @param errorPrefix_ - Prefix for any error messages.
   */
  constructor(path, errorPrefix_) {
    this.errorPrefix_ = errorPrefix_;
    this.parts_ = pathSlice(path, 0);
    /** Initialize to number of '/' chars needed in path. */

    this.byteLength_ = Math.max(1, this.parts_.length);

    for (let i = 0; i < this.parts_.length; i++) {
      this.byteLength_ += (0, _util.stringLength)(this.parts_[i]);
    }

    validationPathCheckValid(this);
  }

}

function validationPathPush(validationPath, child) {
  // Count the needed '/'
  if (validationPath.parts_.length > 0) {
    validationPath.byteLength_ += 1;
  }

  validationPath.parts_.push(child);
  validationPath.byteLength_ += (0, _util.stringLength)(child);
  validationPathCheckValid(validationPath);
}

function validationPathPop(validationPath) {
  const last = validationPath.parts_.pop();
  validationPath.byteLength_ -= (0, _util.stringLength)(last); // Un-count the previous '/'

  if (validationPath.parts_.length > 0) {
    validationPath.byteLength_ -= 1;
  }
}

function validationPathCheckValid(validationPath) {
  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {
    throw new Error(validationPath.errorPrefix_ + 'has a key path longer than ' + MAX_PATH_LENGTH_BYTES + ' bytes (' + validationPath.byteLength_ + ').');
  }

  if (validationPath.parts_.length > MAX_PATH_DEPTH) {
    throw new Error(validationPath.errorPrefix_ + 'path specified exceeds the maximum depth that can be written (' + MAX_PATH_DEPTH + ') or object contains a cycle ' + validationPathToErrorString(validationPath));
  }
}
/**
 * String for use in error messages - uses '.' notation for path.
 */


function validationPathToErrorString(validationPath) {
  if (validationPath.parts_.length === 0) {
    return '';
  }

  return "in property '" + validationPath.parts_.join('.') + "'";
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


class VisibilityMonitor extends EventEmitter {
  constructor() {
    super(['visible']);
    let hidden;
    let visibilityChange;

    if (typeof document !== 'undefined' && typeof document.addEventListener !== 'undefined') {
      if (typeof document['hidden'] !== 'undefined') {
        // Opera 12.10 and Firefox 18 and later support
        visibilityChange = 'visibilitychange';
        hidden = 'hidden';
      } else if (typeof document['mozHidden'] !== 'undefined') {
        visibilityChange = 'mozvisibilitychange';
        hidden = 'mozHidden';
      } else if (typeof document['msHidden'] !== 'undefined') {
        visibilityChange = 'msvisibilitychange';
        hidden = 'msHidden';
      } else if (typeof document['webkitHidden'] !== 'undefined') {
        visibilityChange = 'webkitvisibilitychange';
        hidden = 'webkitHidden';
      }
    } // Initially, we always assume we are visible. This ensures that in browsers
    // without page visibility support or in cases where we are never visible
    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay
    // reconnects


    this.visible_ = true;

    if (visibilityChange) {
      document.addEventListener(visibilityChange, () => {
        const visible = !document[hidden];

        if (visible !== this.visible_) {
          this.visible_ = visible;
          this.trigger('visible', visible);
        }
      }, false);
    }
  }

  static getInstance() {
    return new VisibilityMonitor();
  }

  getInitialEvent(eventType) {
    (0, _util.assert)(eventType === 'visible', 'Unknown event type: ' + eventType);
    return [this.visible_];
  }

}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const RECONNECT_MIN_DELAY = 1000;
const RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)

const GET_CONNECT_TIMEOUT = 3 * 1000;
const RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)

const RECONNECT_DELAY_MULTIPLIER = 1.3;
const RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.

const SERVER_KILL_INTERRUPT_REASON = 'server_kill'; // If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.

const INVALID_TOKEN_THRESHOLD = 3;
/**
 * Firebase connection.  Abstracts wire protocol and handles reconnecting.
 *
 * NOTE: All JSON objects sent to the realtime connection must have property names enclosed
 * in quotes to make sure the closure compiler does not minify them.
 */

class PersistentConnection extends ServerActions {
  /**
   * @param repoInfo_ - Data about the namespace we are connecting to
   * @param applicationId_ - The Firebase App ID for this project
   * @param onDataUpdate_ - A callback for new data from the server
   */
  constructor(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {
    super();
    this.repoInfo_ = repoInfo_;
    this.applicationId_ = applicationId_;
    this.onDataUpdate_ = onDataUpdate_;
    this.onConnectStatus_ = onConnectStatus_;
    this.onServerInfoUpdate_ = onServerInfoUpdate_;
    this.authTokenProvider_ = authTokenProvider_;
    this.appCheckTokenProvider_ = appCheckTokenProvider_;
    this.authOverride_ = authOverride_; // Used for diagnostic logging.

    this.id = PersistentConnection.nextPersistentConnectionId_++;
    this.log_ = logWrapper('p:' + this.id + ':');
    this.interruptReasons_ = {};
    this.listens = new Map();
    this.outstandingPuts_ = [];
    this.outstandingGets_ = [];
    this.outstandingPutCount_ = 0;
    this.outstandingGetCount_ = 0;
    this.onDisconnectRequestQueue_ = [];
    this.connected_ = false;
    this.reconnectDelay_ = RECONNECT_MIN_DELAY;
    this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;
    this.securityDebugCallback_ = null;
    this.lastSessionId = null;
    this.establishConnectionTimer_ = null;
    this.visible_ = false; // Before we get connected, we keep a queue of pending messages to send.

    this.requestCBHash_ = {};
    this.requestNumber_ = 0;
    this.realtime_ = null;
    this.authToken_ = null;
    this.appCheckToken_ = null;
    this.forceTokenRefresh_ = false;
    this.invalidAuthTokenCount_ = 0;
    this.invalidAppCheckTokenCount_ = 0;
    this.firstConnection_ = true;
    this.lastConnectionAttemptTime_ = null;
    this.lastConnectionEstablishedTime_ = null;

    if (authOverride_ && !(0, _util.isNodeSdk)()) {
      throw new Error('Auth override specified in options, but not supported on non Node.js platforms');
    }

    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);

    if (repoInfo_.host.indexOf('fblocal') === -1) {
      OnlineMonitor.getInstance().on('online', this.onOnline_, this);
    }
  }

  sendRequest(action, body, onResponse) {
    const curReqNum = ++this.requestNumber_;
    const msg = {
      r: curReqNum,
      a: action,
      b: body
    };
    this.log_((0, _util.stringify)(msg));
    (0, _util.assert)(this.connected_, "sendRequest call when we're not connected not allowed.");
    this.realtime_.sendRequest(msg);

    if (onResponse) {
      this.requestCBHash_[curReqNum] = onResponse;
    }
  }

  get(query) {
    this.initConnection_();
    const deferred = new _util.Deferred();
    const request = {
      p: query._path.toString(),
      q: query._queryObject
    };
    const outstandingGet = {
      action: 'g',
      request,
      onComplete: message => {
        const payload = message['d'];

        if (message['s'] === 'ok') {
          this.onDataUpdate_(request['p'], payload,
          /*isMerge*/
          false,
          /*tag*/
          null);
          deferred.resolve(payload);
        } else {
          deferred.reject(payload);
        }
      }
    };
    this.outstandingGets_.push(outstandingGet);
    this.outstandingGetCount_++;
    const index = this.outstandingGets_.length - 1;

    if (!this.connected_) {
      setTimeout(() => {
        const get = this.outstandingGets_[index];

        if (get === undefined || outstandingGet !== get) {
          return;
        }

        delete this.outstandingGets_[index];
        this.outstandingGetCount_--;

        if (this.outstandingGetCount_ === 0) {
          this.outstandingGets_ = [];
        }

        this.log_('get ' + index + ' timed out on connection');
        deferred.reject(new Error('Client is offline.'));
      }, GET_CONNECT_TIMEOUT);
    }

    if (this.connected_) {
      this.sendGet_(index);
    }

    return deferred.promise;
  }

  listen(query, currentHashFn, tag, onComplete) {
    this.initConnection_();
    const queryId = query._queryIdentifier;

    const pathString = query._path.toString();

    this.log_('Listen called for ' + pathString + ' ' + queryId);

    if (!this.listens.has(pathString)) {
      this.listens.set(pathString, new Map());
    }

    (0, _util.assert)(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');
    (0, _util.assert)(!this.listens.get(pathString).has(queryId), 'listen() called twice for same path/queryId.');
    const listenSpec = {
      onComplete,
      hashFn: currentHashFn,
      query,
      tag
    };
    this.listens.get(pathString).set(queryId, listenSpec);

    if (this.connected_) {
      this.sendListen_(listenSpec);
    }
  }

  sendGet_(index) {
    const get = this.outstandingGets_[index];
    this.sendRequest('g', get.request, message => {
      delete this.outstandingGets_[index];
      this.outstandingGetCount_--;

      if (this.outstandingGetCount_ === 0) {
        this.outstandingGets_ = [];
      }

      if (get.onComplete) {
        get.onComplete(message);
      }
    });
  }

  sendListen_(listenSpec) {
    const query = listenSpec.query;

    const pathString = query._path.toString();

    const queryId = query._queryIdentifier;
    this.log_('Listen on ' + pathString + ' for ' + queryId);
    const req = {
      /*path*/
      p: pathString
    };
    const action = 'q'; // Only bother to send query if it's non-default.

    if (listenSpec.tag) {
      req['q'] = query._queryObject;
      req['t'] = listenSpec.tag;
    }

    req[
    /*hash*/
    'h'] = listenSpec.hashFn();
    this.sendRequest(action, req, message => {
      const payload = message[
      /*data*/
      'd'];
      const status = message[
      /*status*/
      's']; // print warnings in any case...

      PersistentConnection.warnOnListenWarnings_(payload, query);
      const currentListenSpec = this.listens.get(pathString) && this.listens.get(pathString).get(queryId); // only trigger actions if the listen hasn't been removed and readded

      if (currentListenSpec === listenSpec) {
        this.log_('listen response', message);

        if (status !== 'ok') {
          this.removeListen_(pathString, queryId);
        }

        if (listenSpec.onComplete) {
          listenSpec.onComplete(status, payload);
        }
      }
    });
  }

  static warnOnListenWarnings_(payload, query) {
    if (payload && typeof payload === 'object' && (0, _util.contains)(payload, 'w')) {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const warnings = (0, _util.safeGet)(payload, 'w');

      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {
        const indexSpec = '".indexOn": "' + query._queryParams.getIndex().toString() + '"';

        const indexPath = query._path.toString();

        warn(`Using an unspecified index. Your data will be downloaded and ` + `filtered on the client. Consider adding ${indexSpec} at ` + `${indexPath} to your security rules for better performance.`);
      }
    }
  }

  refreshAuthToken(token) {
    this.authToken_ = token;
    this.log_('Auth token refreshed');

    if (this.authToken_) {
      this.tryAuth();
    } else {
      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete
      //the credential so we dont become authenticated next time we connect.
      if (this.connected_) {
        this.sendRequest('unauth', {}, () => {});
      }
    }

    this.reduceReconnectDelayIfAdminCredential_(token);
  }

  reduceReconnectDelayIfAdminCredential_(credential) {
    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).
    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.
    const isFirebaseSecret = credential && credential.length === 40;

    if (isFirebaseSecret || (0, _util.isAdmin)(credential)) {
      this.log_('Admin auth credential detected.  Reducing max reconnect time.');
      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;
    }
  }

  refreshAppCheckToken(token) {
    this.appCheckToken_ = token;
    this.log_('App check token refreshed');

    if (this.appCheckToken_) {
      this.tryAppCheck();
    } else {
      //If we're connected we want to let the server know to unauthenticate us.
      //If we're not connected, simply delete the credential so we dont become
      // authenticated next time we connect.
      if (this.connected_) {
        this.sendRequest('unappeck', {}, () => {});
      }
    }
  }
  /**
   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like
   * a auth revoked (the connection is closed).
   */


  tryAuth() {
    if (this.connected_ && this.authToken_) {
      const token = this.authToken_;
      const authMethod = (0, _util.isValidFormat)(token) ? 'auth' : 'gauth';
      const requestData = {
        cred: token
      };

      if (this.authOverride_ === null) {
        requestData['noauth'] = true;
      } else if (typeof this.authOverride_ === 'object') {
        requestData['authvar'] = this.authOverride_;
      }

      this.sendRequest(authMethod, requestData, res => {
        const status = res[
        /*status*/
        's'];
        const data = res[
        /*data*/
        'd'] || 'error';

        if (this.authToken_ === token) {
          if (status === 'ok') {
            this.invalidAuthTokenCount_ = 0;
          } else {
            // Triggers reconnect and force refresh for auth token
            this.onAuthRevoked_(status, data);
          }
        }
      });
    }
  }
  /**
   * Attempts to authenticate with the given token. If the authentication
   * attempt fails, it's triggered like the token was revoked (the connection is
   * closed).
   */


  tryAppCheck() {
    if (this.connected_ && this.appCheckToken_) {
      this.sendRequest('appcheck', {
        'token': this.appCheckToken_
      }, res => {
        const status = res[
        /*status*/
        's'];
        const data = res[
        /*data*/
        'd'] || 'error';

        if (status === 'ok') {
          this.invalidAppCheckTokenCount_ = 0;
        } else {
          this.onAppCheckRevoked_(status, data);
        }
      });
    }
  }
  /**
   * @inheritDoc
   */


  unlisten(query, tag) {
    const pathString = query._path.toString();

    const queryId = query._queryIdentifier;
    this.log_('Unlisten called for ' + pathString + ' ' + queryId);
    (0, _util.assert)(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');
    const listen = this.removeListen_(pathString, queryId);

    if (listen && this.connected_) {
      this.sendUnlisten_(pathString, queryId, query._queryObject, tag);
    }
  }

  sendUnlisten_(pathString, queryId, queryObj, tag) {
    this.log_('Unlisten on ' + pathString + ' for ' + queryId);
    const req = {
      /*path*/
      p: pathString
    };
    const action = 'n'; // Only bother sending queryId if it's non-default.

    if (tag) {
      req['q'] = queryObj;
      req['t'] = tag;
    }

    this.sendRequest(action, req);
  }

  onDisconnectPut(pathString, data, onComplete) {
    this.initConnection_();

    if (this.connected_) {
      this.sendOnDisconnect_('o', pathString, data, onComplete);
    } else {
      this.onDisconnectRequestQueue_.push({
        pathString,
        action: 'o',
        data,
        onComplete
      });
    }
  }

  onDisconnectMerge(pathString, data, onComplete) {
    this.initConnection_();

    if (this.connected_) {
      this.sendOnDisconnect_('om', pathString, data, onComplete);
    } else {
      this.onDisconnectRequestQueue_.push({
        pathString,
        action: 'om',
        data,
        onComplete
      });
    }
  }

  onDisconnectCancel(pathString, onComplete) {
    this.initConnection_();

    if (this.connected_) {
      this.sendOnDisconnect_('oc', pathString, null, onComplete);
    } else {
      this.onDisconnectRequestQueue_.push({
        pathString,
        action: 'oc',
        data: null,
        onComplete
      });
    }
  }

  sendOnDisconnect_(action, pathString, data, onComplete) {
    const request = {
      /*path*/
      p: pathString,

      /*data*/
      d: data
    };
    this.log_('onDisconnect ' + action, request);
    this.sendRequest(action, request, response => {
      if (onComplete) {
        setTimeout(() => {
          onComplete(response[
          /*status*/
          's'], response[
          /* data */
          'd']);
        }, Math.floor(0));
      }
    });
  }

  put(pathString, data, onComplete, hash) {
    this.putInternal('p', pathString, data, onComplete, hash);
  }

  merge(pathString, data, onComplete, hash) {
    this.putInternal('m', pathString, data, onComplete, hash);
  }

  putInternal(action, pathString, data, onComplete, hash) {
    this.initConnection_();
    const request = {
      /*path*/
      p: pathString,

      /*data*/
      d: data
    };

    if (hash !== undefined) {
      request[
      /*hash*/
      'h'] = hash;
    } // TODO: Only keep track of the most recent put for a given path?


    this.outstandingPuts_.push({
      action,
      request,
      onComplete
    });
    this.outstandingPutCount_++;
    const index = this.outstandingPuts_.length - 1;

    if (this.connected_) {
      this.sendPut_(index);
    } else {
      this.log_('Buffering put: ' + pathString);
    }
  }

  sendPut_(index) {
    const action = this.outstandingPuts_[index].action;
    const request = this.outstandingPuts_[index].request;
    const onComplete = this.outstandingPuts_[index].onComplete;
    this.outstandingPuts_[index].queued = this.connected_;
    this.sendRequest(action, request, message => {
      this.log_(action + ' response', message);
      delete this.outstandingPuts_[index];
      this.outstandingPutCount_--; // Clean up array occasionally.

      if (this.outstandingPutCount_ === 0) {
        this.outstandingPuts_ = [];
      }

      if (onComplete) {
        onComplete(message[
        /*status*/
        's'], message[
        /* data */
        'd']);
      }
    });
  }

  reportStats(stats) {
    // If we're not connected, we just drop the stats.
    if (this.connected_) {
      const request = {
        /*counters*/
        c: stats
      };
      this.log_('reportStats', request);
      this.sendRequest(
      /*stats*/
      's', request, result => {
        const status = result[
        /*status*/
        's'];

        if (status !== 'ok') {
          const errorReason = result[
          /* data */
          'd'];
          this.log_('reportStats', 'Error sending stats: ' + errorReason);
        }
      });
    }
  }

  onDataMessage_(message) {
    if ('r' in message) {
      // this is a response
      this.log_('from server: ' + (0, _util.stringify)(message));
      const reqNum = message['r'];
      const onResponse = this.requestCBHash_[reqNum];

      if (onResponse) {
        delete this.requestCBHash_[reqNum];
        onResponse(message[
        /*body*/
        'b']);
      }
    } else if ('error' in message) {
      throw 'A server-side error has occurred: ' + message['error'];
    } else if ('a' in message) {
      // a and b are action and body, respectively
      this.onDataPush_(message['a'], message['b']);
    }
  }

  onDataPush_(action, body) {
    this.log_('handleServerMessage', action, body);

    if (action === 'd') {
      this.onDataUpdate_(body[
      /*path*/
      'p'], body[
      /*data*/
      'd'],
      /*isMerge*/
      false, body['t']);
    } else if (action === 'm') {
      this.onDataUpdate_(body[
      /*path*/
      'p'], body[
      /*data*/
      'd'],
      /*isMerge=*/
      true, body['t']);
    } else if (action === 'c') {
      this.onListenRevoked_(body[
      /*path*/
      'p'], body[
      /*query*/
      'q']);
    } else if (action === 'ac') {
      this.onAuthRevoked_(body[
      /*status code*/
      's'], body[
      /* explanation */
      'd']);
    } else if (action === 'apc') {
      this.onAppCheckRevoked_(body[
      /*status code*/
      's'], body[
      /* explanation */
      'd']);
    } else if (action === 'sd') {
      this.onSecurityDebugPacket_(body);
    } else {
      error('Unrecognized action received from server: ' + (0, _util.stringify)(action) + '\nAre you using the latest client?');
    }
  }

  onReady_(timestamp, sessionId) {
    this.log_('connection ready');
    this.connected_ = true;
    this.lastConnectionEstablishedTime_ = new Date().getTime();
    this.handleTimestamp_(timestamp);
    this.lastSessionId = sessionId;

    if (this.firstConnection_) {
      this.sendConnectStats_();
    }

    this.restoreState_();
    this.firstConnection_ = false;
    this.onConnectStatus_(true);
  }

  scheduleConnect_(timeout) {
    (0, _util.assert)(!this.realtime_, "Scheduling a connect when we're already connected/ing?");

    if (this.establishConnectionTimer_) {
      clearTimeout(this.establishConnectionTimer_);
    } // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating "Security Error" in
    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).


    this.establishConnectionTimer_ = setTimeout(() => {
      this.establishConnectionTimer_ = null;
      this.establishConnection_(); // eslint-disable-next-line @typescript-eslint/no-explicit-any
    }, Math.floor(timeout));
  }

  initConnection_() {
    if (!this.realtime_ && this.firstConnection_) {
      this.scheduleConnect_(0);
    }
  }

  onVisible_(visible) {
    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.
    if (visible && !this.visible_ && this.reconnectDelay_ === this.maxReconnectDelay_) {
      this.log_('Window became visible.  Reducing delay.');
      this.reconnectDelay_ = RECONNECT_MIN_DELAY;

      if (!this.realtime_) {
        this.scheduleConnect_(0);
      }
    }

    this.visible_ = visible;
  }

  onOnline_(online) {
    if (online) {
      this.log_('Browser went online.');
      this.reconnectDelay_ = RECONNECT_MIN_DELAY;

      if (!this.realtime_) {
        this.scheduleConnect_(0);
      }
    } else {
      this.log_('Browser went offline.  Killing connection.');

      if (this.realtime_) {
        this.realtime_.close();
      }
    }
  }

  onRealtimeDisconnect_() {
    this.log_('data client disconnected');
    this.connected_ = false;
    this.realtime_ = null; // Since we don't know if our sent transactions succeeded or not, we need to cancel them.

    this.cancelSentTransactions_(); // Clear out the pending requests.

    this.requestCBHash_ = {};

    if (this.shouldReconnect_()) {
      if (!this.visible_) {
        this.log_("Window isn't visible.  Delaying reconnect.");
        this.reconnectDelay_ = this.maxReconnectDelay_;
        this.lastConnectionAttemptTime_ = new Date().getTime();
      } else if (this.lastConnectionEstablishedTime_) {
        // If we've been connected long enough, reset reconnect delay to minimum.
        const timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;

        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {
          this.reconnectDelay_ = RECONNECT_MIN_DELAY;
        }

        this.lastConnectionEstablishedTime_ = null;
      }

      const timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;
      let reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);
      reconnectDelay = Math.random() * reconnectDelay;
      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');
      this.scheduleConnect_(reconnectDelay); // Adjust reconnect delay for next time.

      this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);
    }

    this.onConnectStatus_(false);
  }

  async establishConnection_() {
    if (this.shouldReconnect_()) {
      this.log_('Making a connection attempt');
      this.lastConnectionAttemptTime_ = new Date().getTime();
      this.lastConnectionEstablishedTime_ = null;
      const onDataMessage = this.onDataMessage_.bind(this);
      const onReady = this.onReady_.bind(this);
      const onDisconnect = this.onRealtimeDisconnect_.bind(this);
      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;
      const lastSessionId = this.lastSessionId;
      let canceled = false;
      let connection = null;

      const closeFn = function () {
        if (connection) {
          connection.close();
        } else {
          canceled = true;
          onDisconnect();
        }
      };

      const sendRequestFn = function (msg) {
        (0, _util.assert)(connection, "sendRequest call when we're not connected not allowed.");
        connection.sendRequest(msg);
      };

      this.realtime_ = {
        close: closeFn,
        sendRequest: sendRequestFn
      };
      const forceRefresh = this.forceTokenRefresh_;
      this.forceTokenRefresh_ = false;

      try {
        // First fetch auth and app check token, and establish connection after
        // fetching the token was successful
        const [authToken, appCheckToken] = await Promise.all([this.authTokenProvider_.getToken(forceRefresh), this.appCheckTokenProvider_.getToken(forceRefresh)]);

        if (!canceled) {
          log('getToken() completed. Creating connection.');
          this.authToken_ = authToken && authToken.accessToken;
          this.appCheckToken_ = appCheckToken && appCheckToken.token;
          connection = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect,
          /* onKill= */
          reason => {
            warn(reason + ' (' + this.repoInfo_.toString() + ')');
            this.interrupt(SERVER_KILL_INTERRUPT_REASON);
          }, lastSessionId);
        } else {
          log('getToken() completed but was canceled');
        }
      } catch (error) {
        this.log_('Failed to get token: ' + error);

        if (!canceled) {
          if (this.repoInfo_.nodeAdmin) {
            // This may be a critical error for the Admin Node.js SDK, so log a warning.
            // But getToken() may also just have temporarily failed, so we still want to
            // continue retrying.
            warn(error);
          }

          closeFn();
        }
      }
    }
  }

  interrupt(reason) {
    log('Interrupting connection for reason: ' + reason);
    this.interruptReasons_[reason] = true;

    if (this.realtime_) {
      this.realtime_.close();
    } else {
      if (this.establishConnectionTimer_) {
        clearTimeout(this.establishConnectionTimer_);
        this.establishConnectionTimer_ = null;
      }

      if (this.connected_) {
        this.onRealtimeDisconnect_();
      }
    }
  }

  resume(reason) {
    log('Resuming connection for reason: ' + reason);
    delete this.interruptReasons_[reason];

    if ((0, _util.isEmpty)(this.interruptReasons_)) {
      this.reconnectDelay_ = RECONNECT_MIN_DELAY;

      if (!this.realtime_) {
        this.scheduleConnect_(0);
      }
    }
  }

  handleTimestamp_(timestamp) {
    const delta = timestamp - new Date().getTime();
    this.onServerInfoUpdate_({
      serverTimeOffset: delta
    });
  }

  cancelSentTransactions_() {
    for (let i = 0; i < this.outstandingPuts_.length; i++) {
      const put = this.outstandingPuts_[i];

      if (put &&
      /*hash*/
      'h' in put.request && put.queued) {
        if (put.onComplete) {
          put.onComplete('disconnect');
        }

        delete this.outstandingPuts_[i];
        this.outstandingPutCount_--;
      }
    } // Clean up array occasionally.


    if (this.outstandingPutCount_ === 0) {
      this.outstandingPuts_ = [];
    }
  }

  onListenRevoked_(pathString, query) {
    // Remove the listen and manufacture a "permission_denied" error for the failed listen.
    let queryId;

    if (!query) {
      queryId = 'default';
    } else {
      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');
    }

    const listen = this.removeListen_(pathString, queryId);

    if (listen && listen.onComplete) {
      listen.onComplete('permission_denied');
    }
  }

  removeListen_(pathString, queryId) {
    const normalizedPathString = new Path(pathString).toString(); // normalize path.

    let listen;

    if (this.listens.has(normalizedPathString)) {
      const map = this.listens.get(normalizedPathString);
      listen = map.get(queryId);
      map.delete(queryId);

      if (map.size === 0) {
        this.listens.delete(normalizedPathString);
      }
    } else {
      // all listens for this path has already been removed
      listen = undefined;
    }

    return listen;
  }

  onAuthRevoked_(statusCode, explanation) {
    log('Auth token revoked: ' + statusCode + '/' + explanation);
    this.authToken_ = null;
    this.forceTokenRefresh_ = true;
    this.realtime_.close();

    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {
      // We'll wait a couple times before logging the warning / increasing the
      // retry period since oauth tokens will report as "invalid" if they're
      // just expired. Plus there may be transient issues that resolve themselves.
      this.invalidAuthTokenCount_++;

      if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {
        // Set a long reconnect delay because recovery is unlikely
        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS; // Notify the auth token provider that the token is invalid, which will log
        // a warning

        this.authTokenProvider_.notifyForInvalidToken();
      }
    }
  }

  onAppCheckRevoked_(statusCode, explanation) {
    log('App check token revoked: ' + statusCode + '/' + explanation);
    this.appCheckToken_ = null;
    this.forceTokenRefresh_ = true; // Note: We don't close the connection as the developer may not have
    // enforcement enabled. The backend closes connections with enforcements.

    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {
      // We'll wait a couple times before logging the warning / increasing the
      // retry period since oauth tokens will report as "invalid" if they're
      // just expired. Plus there may be transient issues that resolve themselves.
      this.invalidAppCheckTokenCount_++;

      if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {
        this.appCheckTokenProvider_.notifyForInvalidToken();
      }
    }
  }

  onSecurityDebugPacket_(body) {
    if (this.securityDebugCallback_) {
      this.securityDebugCallback_(body);
    } else {
      if ('msg' in body) {
        console.log('FIREBASE: ' + body['msg'].replace('\n', '\nFIREBASE: '));
      }
    }
  }

  restoreState_() {
    //Re-authenticate ourselves if we have a credential stored.
    this.tryAuth();
    this.tryAppCheck(); // Puts depend on having received the corresponding data update from the server before they complete, so we must
    // make sure to send listens before puts.

    for (const queries of this.listens.values()) {
      for (const listenSpec of queries.values()) {
        this.sendListen_(listenSpec);
      }
    }

    for (let i = 0; i < this.outstandingPuts_.length; i++) {
      if (this.outstandingPuts_[i]) {
        this.sendPut_(i);
      }
    }

    while (this.onDisconnectRequestQueue_.length) {
      const request = this.onDisconnectRequestQueue_.shift();
      this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);
    }

    for (let i = 0; i < this.outstandingGets_.length; i++) {
      if (this.outstandingGets_[i]) {
        this.sendGet_(i);
      }
    }
  }
  /**
   * Sends client stats for first connection
   */


  sendConnectStats_() {
    const stats = {};
    let clientName = 'js';

    if ((0, _util.isNodeSdk)()) {
      if (this.repoInfo_.nodeAdmin) {
        clientName = 'admin_node';
      } else {
        clientName = 'node';
      }
    }

    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\./g, '-')] = 1;

    if ((0, _util.isMobileCordova)()) {
      stats['framework.cordova'] = 1;
    } else if ((0, _util.isReactNative)()) {
      stats['framework.reactnative'] = 1;
    }

    this.reportStats(stats);
  }

  shouldReconnect_() {
    const online = OnlineMonitor.getInstance().currentlyOnline();
    return (0, _util.isEmpty)(this.interruptReasons_) && online;
  }

}

PersistentConnection.nextPersistentConnectionId_ = 0;
/**
 * Counter for number of connections created. Mainly used for tagging in the logs
 */

PersistentConnection.nextConnectionId_ = 0;
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

class NamedNode {
  constructor(name, node) {
    this.name = name;
    this.node = node;
  }

  static Wrap(name, node) {
    return new NamedNode(name, node);
  }

}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


class Index {
  /**
   * @returns A standalone comparison function for
   * this index
   */
  getCompare() {
    return this.compare.bind(this);
  }
  /**
   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,
   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.
   *
   *
   * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode
   */


  indexedValueChanged(oldNode, newNode) {
    const oldWrapped = new NamedNode(MIN_NAME, oldNode);
    const newWrapped = new NamedNode(MIN_NAME, newNode);
    return this.compare(oldWrapped, newWrapped) !== 0;
  }
  /**
   * @returns a node wrapper that will sort equal to or less than
   * any other node wrapper, using this index
   */


  minPost() {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return NamedNode.MIN;
  }

}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


let __EMPTY_NODE;

class KeyIndex extends Index {
  static get __EMPTY_NODE() {
    return __EMPTY_NODE;
  }

  static set __EMPTY_NODE(val) {
    __EMPTY_NODE = val;
  }

  compare(a, b) {
    return nameCompare(a.name, b.name);
  }

  isDefinedOn(node) {
    // We could probably return true here (since every node has a key), but it's never called
    // so just leaving unimplemented for now.
    throw (0, _util.assertionError)('KeyIndex.isDefinedOn not expected to be called.');
  }

  indexedValueChanged(oldNode, newNode) {
    return false; // The key for a node never changes.
  }

  minPost() {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return NamedNode.MIN;
  }

  maxPost() {
    // TODO: This should really be created once and cached in a static property, but
    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.
    return new NamedNode(MAX_NAME, __EMPTY_NODE);
  }

  makePost(indexValue, name) {
    (0, _util.assert)(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.'); // We just use empty node, but it'll never be compared, since our comparator only looks at name.

    return new NamedNode(indexValue, __EMPTY_NODE);
  }
  /**
   * @returns String representation for inclusion in a query spec
   */


  toString() {
    return '.key';
  }

}

const KEY_INDEX = new KeyIndex();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An iterator over an LLRBNode.
 */

class SortedMapIterator {
  /**
   * @param node - Node to iterate.
   * @param isReverse_ - Whether or not to iterate in reverse
   */
  constructor(node, startKey, comparator, isReverse_, resultGenerator_ = null) {
    this.isReverse_ = isReverse_;
    this.resultGenerator_ = resultGenerator_;
    this.nodeStack_ = [];
    let cmp = 1;

    while (!node.isEmpty()) {
      node = node;
      cmp = startKey ? comparator(node.key, startKey) : 1; // flip the comparison if we're going in reverse

      if (isReverse_) {
        cmp *= -1;
      }

      if (cmp < 0) {
        // This node is less than our start key. ignore it
        if (this.isReverse_) {
          node = node.left;
        } else {
          node = node.right;
        }
      } else if (cmp === 0) {
        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;
        this.nodeStack_.push(node);
        break;
      } else {
        // This node is greater than our start key, add it to the stack and move to the next one
        this.nodeStack_.push(node);

        if (this.isReverse_) {
          node = node.right;
        } else {
          node = node.left;
        }
      }
    }
  }

  getNext() {
    if (this.nodeStack_.length === 0) {
      return null;
    }

    let node = this.nodeStack_.pop();
    let result;

    if (this.resultGenerator_) {
      result = this.resultGenerator_(node.key, node.value);
    } else {
      result = {
        key: node.key,
        value: node.value
      };
    }

    if (this.isReverse_) {
      node = node.left;

      while (!node.isEmpty()) {
        this.nodeStack_.push(node);
        node = node.right;
      }
    } else {
      node = node.right;

      while (!node.isEmpty()) {
        this.nodeStack_.push(node);
        node = node.left;
      }
    }

    return result;
  }

  hasNext() {
    return this.nodeStack_.length > 0;
  }

  peek() {
    if (this.nodeStack_.length === 0) {
      return null;
    }

    const node = this.nodeStack_[this.nodeStack_.length - 1];

    if (this.resultGenerator_) {
      return this.resultGenerator_(node.key, node.value);
    } else {
      return {
        key: node.key,
        value: node.value
      };
    }
  }

}
/**
 * Represents a node in a Left-leaning Red-Black tree.
 */


class LLRBNode {
  /**
   * @param key - Key associated with this node.
   * @param value - Value associated with this node.
   * @param color - Whether this node is red.
   * @param left - Left child.
   * @param right - Right child.
   */
  constructor(key, value, color, left, right) {
    this.key = key;
    this.value = value;
    this.color = color != null ? color : LLRBNode.RED;
    this.left = left != null ? left : SortedMap.EMPTY_NODE;
    this.right = right != null ? right : SortedMap.EMPTY_NODE;
  }
  /**
   * Returns a copy of the current node, optionally replacing pieces of it.
   *
   * @param key - New key for the node, or null.
   * @param value - New value for the node, or null.
   * @param color - New color for the node, or null.
   * @param left - New left child for the node, or null.
   * @param right - New right child for the node, or null.
   * @returns The node copy.
   */


  copy(key, value, color, left, right) {
    return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);
  }
  /**
   * @returns The total number of nodes in the tree.
   */


  count() {
    return this.left.count() + 1 + this.right.count();
  }
  /**
   * @returns True if the tree is empty.
   */


  isEmpty() {
    return false;
  }
  /**
   * Traverses the tree in key order and calls the specified action function
   * for each node.
   *
   * @param action - Callback function to be called for each
   *   node.  If it returns true, traversal is aborted.
   * @returns The first truthy value returned by action, or the last falsey
   *   value returned by action
   */


  inorderTraversal(action) {
    return this.left.inorderTraversal(action) || !!action(this.key, this.value) || this.right.inorderTraversal(action);
  }
  /**
   * Traverses the tree in reverse key order and calls the specified action function
   * for each node.
   *
   * @param action - Callback function to be called for each
   * node.  If it returns true, traversal is aborted.
   * @returns True if traversal was aborted.
   */


  reverseTraversal(action) {
    return this.right.reverseTraversal(action) || action(this.key, this.value) || this.left.reverseTraversal(action);
  }
  /**
   * @returns The minimum node in the tree.
   */


  min_() {
    if (this.left.isEmpty()) {
      return this;
    } else {
      return this.left.min_();
    }
  }
  /**
   * @returns The maximum key in the tree.
   */


  minKey() {
    return this.min_().key;
  }
  /**
   * @returns The maximum key in the tree.
   */


  maxKey() {
    if (this.right.isEmpty()) {
      return this.key;
    } else {
      return this.right.maxKey();
    }
  }
  /**
   * @param key - Key to insert.
   * @param value - Value to insert.
   * @param comparator - Comparator.
   * @returns New tree, with the key/value added.
   */


  insert(key, value, comparator) {
    let n = this;
    const cmp = comparator(key, n.key);

    if (cmp < 0) {
      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);
    } else if (cmp === 0) {
      n = n.copy(null, value, null, null, null);
    } else {
      n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));
    }

    return n.fixUp_();
  }
  /**
   * @returns New tree, with the minimum key removed.
   */


  removeMin_() {
    if (this.left.isEmpty()) {
      return SortedMap.EMPTY_NODE;
    }

    let n = this;

    if (!n.left.isRed_() && !n.left.left.isRed_()) {
      n = n.moveRedLeft_();
    }

    n = n.copy(null, null, null, n.left.removeMin_(), null);
    return n.fixUp_();
  }
  /**
   * @param key - The key of the item to remove.
   * @param comparator - Comparator.
   * @returns New tree, with the specified item removed.
   */


  remove(key, comparator) {
    let n, smallest;
    n = this;

    if (comparator(key, n.key) < 0) {
      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {
        n = n.moveRedLeft_();
      }

      n = n.copy(null, null, null, n.left.remove(key, comparator), null);
    } else {
      if (n.left.isRed_()) {
        n = n.rotateRight_();
      }

      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {
        n = n.moveRedRight_();
      }

      if (comparator(key, n.key) === 0) {
        if (n.right.isEmpty()) {
          return SortedMap.EMPTY_NODE;
        } else {
          smallest = n.right.min_();
          n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());
        }
      }

      n = n.copy(null, null, null, null, n.right.remove(key, comparator));
    }

    return n.fixUp_();
  }
  /**
   * @returns Whether this is a RED node.
   */


  isRed_() {
    return this.color;
  }
  /**
   * @returns New tree after performing any needed rotations.
   */


  fixUp_() {
    let n = this;

    if (n.right.isRed_() && !n.left.isRed_()) {
      n = n.rotateLeft_();
    }

    if (n.left.isRed_() && n.left.left.isRed_()) {
      n = n.rotateRight_();
    }

    if (n.left.isRed_() && n.right.isRed_()) {
      n = n.colorFlip_();
    }

    return n;
  }
  /**
   * @returns New tree, after moveRedLeft.
   */


  moveRedLeft_() {
    let n = this.colorFlip_();

    if (n.right.left.isRed_()) {
      n = n.copy(null, null, null, null, n.right.rotateRight_());
      n = n.rotateLeft_();
      n = n.colorFlip_();
    }

    return n;
  }
  /**
   * @returns New tree, after moveRedRight.
   */


  moveRedRight_() {
    let n = this.colorFlip_();

    if (n.left.left.isRed_()) {
      n = n.rotateRight_();
      n = n.colorFlip_();
    }

    return n;
  }
  /**
   * @returns New tree, after rotateLeft.
   */


  rotateLeft_() {
    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);
    return this.right.copy(null, null, this.color, nl, null);
  }
  /**
   * @returns New tree, after rotateRight.
   */


  rotateRight_() {
    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);
    return this.left.copy(null, null, this.color, null, nr);
  }
  /**
   * @returns Newt ree, after colorFlip.
   */


  colorFlip_() {
    const left = this.left.copy(null, null, !this.left.color, null, null);
    const right = this.right.copy(null, null, !this.right.color, null, null);
    return this.copy(null, null, !this.color, left, right);
  }
  /**
   * For testing.
   *
   * @returns True if all is well.
   */


  checkMaxDepth_() {
    const blackDepth = this.check_();
    return Math.pow(2.0, blackDepth) <= this.count() + 1;
  }

  check_() {
    if (this.isRed_() && this.left.isRed_()) {
      throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');
    }

    if (this.right.isRed_()) {
      throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');
    }

    const blackDepth = this.left.check_();

    if (blackDepth !== this.right.check_()) {
      throw new Error('Black depths differ');
    } else {
      return blackDepth + (this.isRed_() ? 0 : 1);
    }
  }

}

LLRBNode.RED = true;
LLRBNode.BLACK = false;
/**
 * Represents an empty node (a leaf node in the Red-Black Tree).
 */

class LLRBEmptyNode {
  /**
   * Returns a copy of the current node.
   *
   * @returns The node copy.
   */
  copy(key, value, color, left, right) {
    return this;
  }
  /**
   * Returns a copy of the tree, with the specified key/value added.
   *
   * @param key - Key to be added.
   * @param value - Value to be added.
   * @param comparator - Comparator.
   * @returns New tree, with item added.
   */


  insert(key, value, comparator) {
    return new LLRBNode(key, value, null);
  }
  /**
   * Returns a copy of the tree, with the specified key removed.
   *
   * @param key - The key to remove.
   * @param comparator - Comparator.
   * @returns New tree, with item removed.
   */


  remove(key, comparator) {
    return this;
  }
  /**
   * @returns The total number of nodes in the tree.
   */


  count() {
    return 0;
  }
  /**
   * @returns True if the tree is empty.
   */


  isEmpty() {
    return true;
  }
  /**
   * Traverses the tree in key order and calls the specified action function
   * for each node.
   *
   * @param action - Callback function to be called for each
   * node.  If it returns true, traversal is aborted.
   * @returns True if traversal was aborted.
   */


  inorderTraversal(action) {
    return false;
  }
  /**
   * Traverses the tree in reverse key order and calls the specified action function
   * for each node.
   *
   * @param action - Callback function to be called for each
   * node.  If it returns true, traversal is aborted.
   * @returns True if traversal was aborted.
   */


  reverseTraversal(action) {
    return false;
  }

  minKey() {
    return null;
  }

  maxKey() {
    return null;
  }

  check_() {
    return 0;
  }
  /**
   * @returns Whether this node is red.
   */


  isRed_() {
    return false;
  }

}
/**
 * An immutable sorted map implementation, based on a Left-leaning Red-Black
 * tree.
 */


class SortedMap {
  /**
   * @param comparator_ - Key comparator.
   * @param root_ - Optional root node for the map.
   */
  constructor(comparator_, root_ = SortedMap.EMPTY_NODE) {
    this.comparator_ = comparator_;
    this.root_ = root_;
  }
  /**
   * Returns a copy of the map, with the specified key/value added or replaced.
   * (TODO: We should perhaps rename this method to 'put')
   *
   * @param key - Key to be added.
   * @param value - Value to be added.
   * @returns New map, with item added.
   */


  insert(key, value) {
    return new SortedMap(this.comparator_, this.root_.insert(key, value, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));
  }
  /**
   * Returns a copy of the map, with the specified key removed.
   *
   * @param key - The key to remove.
   * @returns New map, with item removed.
   */


  remove(key) {
    return new SortedMap(this.comparator_, this.root_.remove(key, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));
  }
  /**
   * Returns the value of the node with the given key, or null.
   *
   * @param key - The key to look up.
   * @returns The value of the node with the given key, or null if the
   * key doesn't exist.
   */


  get(key) {
    let cmp;
    let node = this.root_;

    while (!node.isEmpty()) {
      cmp = this.comparator_(key, node.key);

      if (cmp === 0) {
        return node.value;
      } else if (cmp < 0) {
        node = node.left;
      } else if (cmp > 0) {
        node = node.right;
      }
    }

    return null;
  }
  /**
   * Returns the key of the item *before* the specified key, or null if key is the first item.
   * @param key - The key to find the predecessor of
   * @returns The predecessor key.
   */


  getPredecessorKey(key) {
    let cmp,
        node = this.root_,
        rightParent = null;

    while (!node.isEmpty()) {
      cmp = this.comparator_(key, node.key);

      if (cmp === 0) {
        if (!node.left.isEmpty()) {
          node = node.left;

          while (!node.right.isEmpty()) {
            node = node.right;
          }

          return node.key;
        } else if (rightParent) {
          return rightParent.key;
        } else {
          return null; // first item.
        }
      } else if (cmp < 0) {
        node = node.left;
      } else if (cmp > 0) {
        rightParent = node;
        node = node.right;
      }
    }

    throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');
  }
  /**
   * @returns True if the map is empty.
   */


  isEmpty() {
    return this.root_.isEmpty();
  }
  /**
   * @returns The total number of nodes in the map.
   */


  count() {
    return this.root_.count();
  }
  /**
   * @returns The minimum key in the map.
   */


  minKey() {
    return this.root_.minKey();
  }
  /**
   * @returns The maximum key in the map.
   */


  maxKey() {
    return this.root_.maxKey();
  }
  /**
   * Traverses the map in key order and calls the specified action function
   * for each key/value pair.
   *
   * @param action - Callback function to be called
   * for each key/value pair.  If action returns true, traversal is aborted.
   * @returns The first truthy value returned by action, or the last falsey
   *   value returned by action
   */


  inorderTraversal(action) {
    return this.root_.inorderTraversal(action);
  }
  /**
   * Traverses the map in reverse key order and calls the specified action function
   * for each key/value pair.
   *
   * @param action - Callback function to be called
   * for each key/value pair.  If action returns true, traversal is aborted.
   * @returns True if the traversal was aborted.
   */


  reverseTraversal(action) {
    return this.root_.reverseTraversal(action);
  }
  /**
   * Returns an iterator over the SortedMap.
   * @returns The iterator.
   */


  getIterator(resultGenerator) {
    return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);
  }

  getIteratorFrom(key, resultGenerator) {
    return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);
  }

  getReverseIteratorFrom(key, resultGenerator) {
    return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);
  }

  getReverseIterator(resultGenerator) {
    return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);
  }

}
/**
 * Always use the same empty node, to reduce memory.
 */


SortedMap.EMPTY_NODE = new LLRBEmptyNode();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function NAME_ONLY_COMPARATOR(left, right) {
  return nameCompare(left.name, right.name);
}

function NAME_COMPARATOR(left, right) {
  return nameCompare(left, right);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


let MAX_NODE$2;

function setMaxNode$1(val) {
  MAX_NODE$2 = val;
}

const priorityHashText = function (priority) {
  if (typeof priority === 'number') {
    return 'number:' + doubleToIEEE754String(priority);
  } else {
    return 'string:' + priority;
  }
};
/**
 * Validates that a priority snapshot Node is valid.
 */


const validatePriorityNode = function (priorityNode) {
  if (priorityNode.isLeafNode()) {
    const val = priorityNode.val();
    (0, _util.assert)(typeof val === 'string' || typeof val === 'number' || typeof val === 'object' && (0, _util.contains)(val, '.sv'), 'Priority must be a string or number.');
  } else {
    (0, _util.assert)(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');
  } // Don't call getPriority() on MAX_NODE to avoid hitting assertion.


  (0, _util.assert)(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), "Priority nodes can't have a priority of their own.");
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


let __childrenNodeConstructor;
/**
 * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It
 * implements Node and stores the value of the node (a string,
 * number, or boolean) accessible via getValue().
 */


class LeafNode {
  /**
   * @param value_ - The value to store in this leaf node. The object type is
   * possible in the event of a deferred value
   * @param priorityNode_ - The priority of this node.
   */
  constructor(value_, priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE) {
    this.value_ = value_;
    this.priorityNode_ = priorityNode_;
    this.lazyHash_ = null;
    (0, _util.assert)(this.value_ !== undefined && this.value_ !== null, "LeafNode shouldn't be created with null/undefined value.");
    validatePriorityNode(this.priorityNode_);
  }

  static set __childrenNodeConstructor(val) {
    __childrenNodeConstructor = val;
  }

  static get __childrenNodeConstructor() {
    return __childrenNodeConstructor;
  }
  /** @inheritDoc */


  isLeafNode() {
    return true;
  }
  /** @inheritDoc */


  getPriority() {
    return this.priorityNode_;
  }
  /** @inheritDoc */


  updatePriority(newPriorityNode) {
    return new LeafNode(this.value_, newPriorityNode);
  }
  /** @inheritDoc */


  getImmediateChild(childName) {
    // Hack to treat priority as a regular child
    if (childName === '.priority') {
      return this.priorityNode_;
    } else {
      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;
    }
  }
  /** @inheritDoc */


  getChild(path) {
    if (pathIsEmpty(path)) {
      return this;
    } else if (pathGetFront(path) === '.priority') {
      return this.priorityNode_;
    } else {
      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;
    }
  }

  hasChild() {
    return false;
  }
  /** @inheritDoc */


  getPredecessorChildName(childName, childNode) {
    return null;
  }
  /** @inheritDoc */


  updateImmediateChild(childName, newChildNode) {
    if (childName === '.priority') {
      return this.updatePriority(newChildNode);
    } else if (newChildNode.isEmpty() && childName !== '.priority') {
      return this;
    } else {
      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);
    }
  }
  /** @inheritDoc */


  updateChild(path, newChildNode) {
    const front = pathGetFront(path);

    if (front === null) {
      return newChildNode;
    } else if (newChildNode.isEmpty() && front !== '.priority') {
      return this;
    } else {
      (0, _util.assert)(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');
      return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));
    }
  }
  /** @inheritDoc */


  isEmpty() {
    return false;
  }
  /** @inheritDoc */


  numChildren() {
    return 0;
  }
  /** @inheritDoc */


  forEachChild(index, action) {
    return false;
  }

  val(exportFormat) {
    if (exportFormat && !this.getPriority().isEmpty()) {
      return {
        '.value': this.getValue(),
        '.priority': this.getPriority().val()
      };
    } else {
      return this.getValue();
    }
  }
  /** @inheritDoc */


  hash() {
    if (this.lazyHash_ === null) {
      let toHash = '';

      if (!this.priorityNode_.isEmpty()) {
        toHash += 'priority:' + priorityHashText(this.priorityNode_.val()) + ':';
      }

      const type = typeof this.value_;
      toHash += type + ':';

      if (type === 'number') {
        toHash += doubleToIEEE754String(this.value_);
      } else {
        toHash += this.value_;
      }

      this.lazyHash_ = sha1(toHash);
    }

    return this.lazyHash_;
  }
  /**
   * Returns the value of the leaf node.
   * @returns The value of the node.
   */


  getValue() {
    return this.value_;
  }

  compareTo(other) {
    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {
      return 1;
    } else if (other instanceof LeafNode.__childrenNodeConstructor) {
      return -1;
    } else {
      (0, _util.assert)(other.isLeafNode(), 'Unknown node type');
      return this.compareToLeafNode_(other);
    }
  }
  /**
   * Comparison specifically for two leaf nodes
   */


  compareToLeafNode_(otherLeaf) {
    const otherLeafType = typeof otherLeaf.value_;
    const thisLeafType = typeof this.value_;
    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);
    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);
    (0, _util.assert)(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);
    (0, _util.assert)(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);

    if (otherIndex === thisIndex) {
      // Same type, compare values
      if (thisLeafType === 'object') {
        // Deferred value nodes are all equal, but we should also never get to this point...
        return 0;
      } else {
        // Note that this works because true > false, all others are number or string comparisons
        if (this.value_ < otherLeaf.value_) {
          return -1;
        } else if (this.value_ === otherLeaf.value_) {
          return 0;
        } else {
          return 1;
        }
      }
    } else {
      return thisIndex - otherIndex;
    }
  }

  withIndex() {
    return this;
  }

  isIndexed() {
    return true;
  }

  equals(other) {
    if (other === this) {
      return true;
    } else if (other.isLeafNode()) {
      const otherLeaf = other;
      return this.value_ === otherLeaf.value_ && this.priorityNode_.equals(otherLeaf.priorityNode_);
    } else {
      return false;
    }
  }

}
/**
 * The sort order for comparing leaf nodes of different types. If two leaf nodes have
 * the same type, the comparison falls back to their value
 */


LeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

let nodeFromJSON$1;
let MAX_NODE$1;

function setNodeFromJSON(val) {
  nodeFromJSON$1 = val;
}

function setMaxNode(val) {
  MAX_NODE$1 = val;
}

class PriorityIndex extends Index {
  compare(a, b) {
    const aPriority = a.node.getPriority();
    const bPriority = b.node.getPriority();
    const indexCmp = aPriority.compareTo(bPriority);

    if (indexCmp === 0) {
      return nameCompare(a.name, b.name);
    } else {
      return indexCmp;
    }
  }

  isDefinedOn(node) {
    return !node.getPriority().isEmpty();
  }

  indexedValueChanged(oldNode, newNode) {
    return !oldNode.getPriority().equals(newNode.getPriority());
  }

  minPost() {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return NamedNode.MIN;
  }

  maxPost() {
    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));
  }

  makePost(indexValue, name) {
    const priorityNode = nodeFromJSON$1(indexValue);
    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));
  }
  /**
   * @returns String representation for inclusion in a query spec
   */


  toString() {
    return '.priority';
  }

}

const PRIORITY_INDEX = new PriorityIndex();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const LOG_2 = Math.log(2);

class Base12Num {
  constructor(length) {
    const logBase2 = num => // eslint-disable-next-line @typescript-eslint/no-explicit-any
    parseInt(Math.log(num) / LOG_2, 10);

    const bitMask = bits => parseInt(Array(bits + 1).join('1'), 2);

    this.count = logBase2(length + 1);
    this.current_ = this.count - 1;
    const mask = bitMask(this.count);
    this.bits_ = length + 1 & mask;
  }

  nextBitIsOne() {
    //noinspection JSBitwiseOperatorUsage
    const result = !(this.bits_ & 0x1 << this.current_);
    this.current_--;
    return result;
  }

}
/**
 * Takes a list of child nodes and constructs a SortedSet using the given comparison
 * function
 *
 * Uses the algorithm described in the paper linked here:
 * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458
 *
 * @param childList - Unsorted list of children
 * @param cmp - The comparison method to be used
 * @param keyFn - An optional function to extract K from a node wrapper, if K's
 * type is not NamedNode
 * @param mapSortFn - An optional override for comparator used by the generated sorted map
 */


const buildChildSet = function (childList, cmp, keyFn, mapSortFn) {
  childList.sort(cmp);

  const buildBalancedTree = function (low, high) {
    const length = high - low;
    let namedNode;
    let key;

    if (length === 0) {
      return null;
    } else if (length === 1) {
      namedNode = childList[low];
      key = keyFn ? keyFn(namedNode) : namedNode;
      return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);
    } else {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const middle = parseInt(length / 2, 10) + low;
      const left = buildBalancedTree(low, middle);
      const right = buildBalancedTree(middle + 1, high);
      namedNode = childList[middle];
      key = keyFn ? keyFn(namedNode) : namedNode;
      return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);
    }
  };

  const buildFrom12Array = function (base12) {
    let node = null;
    let root = null;
    let index = childList.length;

    const buildPennant = function (chunkSize, color) {
      const low = index - chunkSize;
      const high = index;
      index -= chunkSize;
      const childTree = buildBalancedTree(low + 1, high);
      const namedNode = childList[low];
      const key = keyFn ? keyFn(namedNode) : namedNode;
      attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));
    };

    const attachPennant = function (pennant) {
      if (node) {
        node.left = pennant;
        node = pennant;
      } else {
        root = pennant;
        node = pennant;
      }
    };

    for (let i = 0; i < base12.count; ++i) {
      const isOne = base12.nextBitIsOne(); // The number of nodes taken in each slice is 2^(arr.length - (i + 1))

      const chunkSize = Math.pow(2, base12.count - (i + 1));

      if (isOne) {
        buildPennant(chunkSize, LLRBNode.BLACK);
      } else {
        // current == 2
        buildPennant(chunkSize, LLRBNode.BLACK);
        buildPennant(chunkSize, LLRBNode.RED);
      }
    }

    return root;
  };

  const base12 = new Base12Num(childList.length);
  const root = buildFrom12Array(base12); // eslint-disable-next-line @typescript-eslint/no-explicit-any

  return new SortedMap(mapSortFn || cmp, root);
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


let _defaultIndexMap;

const fallbackObject = {};

class IndexMap {
  constructor(indexes_, indexSet_) {
    this.indexes_ = indexes_;
    this.indexSet_ = indexSet_;
  }
  /**
   * The default IndexMap for nodes without a priority
   */


  static get Default() {
    (0, _util.assert)(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');
    _defaultIndexMap = _defaultIndexMap || new IndexMap({
      '.priority': fallbackObject
    }, {
      '.priority': PRIORITY_INDEX
    });
    return _defaultIndexMap;
  }

  get(indexKey) {
    const sortedMap = (0, _util.safeGet)(this.indexes_, indexKey);

    if (!sortedMap) {
      throw new Error('No index defined for ' + indexKey);
    }

    if (sortedMap instanceof SortedMap) {
      return sortedMap;
    } else {
      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the
      // regular child map
      return null;
    }
  }

  hasIndex(indexDefinition) {
    return (0, _util.contains)(this.indexSet_, indexDefinition.toString());
  }

  addIndex(indexDefinition, existingChildren) {
    (0, _util.assert)(indexDefinition !== KEY_INDEX, "KeyIndex always exists and isn't meant to be added to the IndexMap.");
    const childList = [];
    let sawIndexedValue = false;
    const iter = existingChildren.getIterator(NamedNode.Wrap);
    let next = iter.getNext();

    while (next) {
      sawIndexedValue = sawIndexedValue || indexDefinition.isDefinedOn(next.node);
      childList.push(next);
      next = iter.getNext();
    }

    let newIndex;

    if (sawIndexedValue) {
      newIndex = buildChildSet(childList, indexDefinition.getCompare());
    } else {
      newIndex = fallbackObject;
    }

    const indexName = indexDefinition.toString();
    const newIndexSet = Object.assign({}, this.indexSet_);
    newIndexSet[indexName] = indexDefinition;
    const newIndexes = Object.assign({}, this.indexes_);
    newIndexes[indexName] = newIndex;
    return new IndexMap(newIndexes, newIndexSet);
  }
  /**
   * Ensure that this node is properly tracked in any indexes that we're maintaining
   */


  addToIndexes(namedNode, existingChildren) {
    const newIndexes = (0, _util.map)(this.indexes_, (indexedChildren, indexName) => {
      const index = (0, _util.safeGet)(this.indexSet_, indexName);
      (0, _util.assert)(index, 'Missing index implementation for ' + indexName);

      if (indexedChildren === fallbackObject) {
        // Check to see if we need to index everything
        if (index.isDefinedOn(namedNode.node)) {
          // We need to build this index
          const childList = [];
          const iter = existingChildren.getIterator(NamedNode.Wrap);
          let next = iter.getNext();

          while (next) {
            if (next.name !== namedNode.name) {
              childList.push(next);
            }

            next = iter.getNext();
          }

          childList.push(namedNode);
          return buildChildSet(childList, index.getCompare());
        } else {
          // No change, this remains a fallback
          return fallbackObject;
        }
      } else {
        const existingSnap = existingChildren.get(namedNode.name);
        let newChildren = indexedChildren;

        if (existingSnap) {
          newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));
        }

        return newChildren.insert(namedNode, namedNode.node);
      }
    });
    return new IndexMap(newIndexes, this.indexSet_);
  }
  /**
   * Create a new IndexMap instance with the given value removed
   */


  removeFromIndexes(namedNode, existingChildren) {
    const newIndexes = (0, _util.map)(this.indexes_, indexedChildren => {
      if (indexedChildren === fallbackObject) {
        // This is the fallback. Just return it, nothing to do in this case
        return indexedChildren;
      } else {
        const existingSnap = existingChildren.get(namedNode.name);

        if (existingSnap) {
          return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));
        } else {
          // No record of this child
          return indexedChildren;
        }
      }
    });
    return new IndexMap(newIndexes, this.indexSet_);
  }

}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// TODO: For memory savings, don't store priorityNode_ if it's empty.


let EMPTY_NODE;
/**
 * ChildrenNode is a class for storing internal nodes in a DataSnapshot
 * (i.e. nodes with children).  It implements Node and stores the
 * list of children in the children property, sorted by child name.
 */

class ChildrenNode {
  /**
   * @param children_ - List of children of this node..
   * @param priorityNode_ - The priority of this node (as a snapshot node).
   */
  constructor(children_, priorityNode_, indexMap_) {
    this.children_ = children_;
    this.priorityNode_ = priorityNode_;
    this.indexMap_ = indexMap_;
    this.lazyHash_ = null;
    /**
     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use
     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own
     * class instead of an empty ChildrenNode.
     */

    if (this.priorityNode_) {
      validatePriorityNode(this.priorityNode_);
    }

    if (this.children_.isEmpty()) {
      (0, _util.assert)(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');
    }
  }

  static get EMPTY_NODE() {
    return EMPTY_NODE || (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default));
  }
  /** @inheritDoc */


  isLeafNode() {
    return false;
  }
  /** @inheritDoc */


  getPriority() {
    return this.priorityNode_ || EMPTY_NODE;
  }
  /** @inheritDoc */


  updatePriority(newPriorityNode) {
    if (this.children_.isEmpty()) {
      // Don't allow priorities on empty nodes
      return this;
    } else {
      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);
    }
  }
  /** @inheritDoc */


  getImmediateChild(childName) {
    // Hack to treat priority as a regular child
    if (childName === '.priority') {
      return this.getPriority();
    } else {
      const child = this.children_.get(childName);
      return child === null ? EMPTY_NODE : child;
    }
  }
  /** @inheritDoc */


  getChild(path) {
    const front = pathGetFront(path);

    if (front === null) {
      return this;
    }

    return this.getImmediateChild(front).getChild(pathPopFront(path));
  }
  /** @inheritDoc */


  hasChild(childName) {
    return this.children_.get(childName) !== null;
  }
  /** @inheritDoc */


  updateImmediateChild(childName, newChildNode) {
    (0, _util.assert)(newChildNode, 'We should always be passing snapshot nodes');

    if (childName === '.priority') {
      return this.updatePriority(newChildNode);
    } else {
      const namedNode = new NamedNode(childName, newChildNode);
      let newChildren, newIndexMap;

      if (newChildNode.isEmpty()) {
        newChildren = this.children_.remove(childName);
        newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);
      } else {
        newChildren = this.children_.insert(childName, newChildNode);
        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);
      }

      const newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;
      return new ChildrenNode(newChildren, newPriority, newIndexMap);
    }
  }
  /** @inheritDoc */


  updateChild(path, newChildNode) {
    const front = pathGetFront(path);

    if (front === null) {
      return newChildNode;
    } else {
      (0, _util.assert)(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');
      const newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);
      return this.updateImmediateChild(front, newImmediateChild);
    }
  }
  /** @inheritDoc */


  isEmpty() {
    return this.children_.isEmpty();
  }
  /** @inheritDoc */


  numChildren() {
    return this.children_.count();
  }
  /** @inheritDoc */


  val(exportFormat) {
    if (this.isEmpty()) {
      return null;
    }

    const obj = {};
    let numKeys = 0,
        maxKey = 0,
        allIntegerKeys = true;
    this.forEachChild(PRIORITY_INDEX, (key, childNode) => {
      obj[key] = childNode.val(exportFormat);
      numKeys++;

      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {
        maxKey = Math.max(maxKey, Number(key));
      } else {
        allIntegerKeys = false;
      }
    });

    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {
      // convert to array.
      const array = []; // eslint-disable-next-line guard-for-in

      for (const key in obj) {
        array[key] = obj[key];
      }

      return array;
    } else {
      if (exportFormat && !this.getPriority().isEmpty()) {
        obj['.priority'] = this.getPriority().val();
      }

      return obj;
    }
  }
  /** @inheritDoc */


  hash() {
    if (this.lazyHash_ === null) {
      let toHash = '';

      if (!this.getPriority().isEmpty()) {
        toHash += 'priority:' + priorityHashText(this.getPriority().val()) + ':';
      }

      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {
        const childHash = childNode.hash();

        if (childHash !== '') {
          toHash += ':' + key + ':' + childHash;
        }
      });
      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);
    }

    return this.lazyHash_;
  }
  /** @inheritDoc */


  getPredecessorChildName(childName, childNode, index) {
    const idx = this.resolveIndex_(index);

    if (idx) {
      const predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));
      return predecessor ? predecessor.name : null;
    } else {
      return this.children_.getPredecessorKey(childName);
    }
  }

  getFirstChildName(indexDefinition) {
    const idx = this.resolveIndex_(indexDefinition);

    if (idx) {
      const minKey = idx.minKey();
      return minKey && minKey.name;
    } else {
      return this.children_.minKey();
    }
  }

  getFirstChild(indexDefinition) {
    const minKey = this.getFirstChildName(indexDefinition);

    if (minKey) {
      return new NamedNode(minKey, this.children_.get(minKey));
    } else {
      return null;
    }
  }
  /**
   * Given an index, return the key name of the largest value we have, according to that index
   */


  getLastChildName(indexDefinition) {
    const idx = this.resolveIndex_(indexDefinition);

    if (idx) {
      const maxKey = idx.maxKey();
      return maxKey && maxKey.name;
    } else {
      return this.children_.maxKey();
    }
  }

  getLastChild(indexDefinition) {
    const maxKey = this.getLastChildName(indexDefinition);

    if (maxKey) {
      return new NamedNode(maxKey, this.children_.get(maxKey));
    } else {
      return null;
    }
  }

  forEachChild(index, action) {
    const idx = this.resolveIndex_(index);

    if (idx) {
      return idx.inorderTraversal(wrappedNode => {
        return action(wrappedNode.name, wrappedNode.node);
      });
    } else {
      return this.children_.inorderTraversal(action);
    }
  }

  getIterator(indexDefinition) {
    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);
  }

  getIteratorFrom(startPost, indexDefinition) {
    const idx = this.resolveIndex_(indexDefinition);

    if (idx) {
      return idx.getIteratorFrom(startPost, key => key);
    } else {
      const iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);
      let next = iterator.peek();

      while (next != null && indexDefinition.compare(next, startPost) < 0) {
        iterator.getNext();
        next = iterator.peek();
      }

      return iterator;
    }
  }

  getReverseIterator(indexDefinition) {
    return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);
  }

  getReverseIteratorFrom(endPost, indexDefinition) {
    const idx = this.resolveIndex_(indexDefinition);

    if (idx) {
      return idx.getReverseIteratorFrom(endPost, key => {
        return key;
      });
    } else {
      const iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);
      let next = iterator.peek();

      while (next != null && indexDefinition.compare(next, endPost) > 0) {
        iterator.getNext();
        next = iterator.peek();
      }

      return iterator;
    }
  }

  compareTo(other) {
    if (this.isEmpty()) {
      if (other.isEmpty()) {
        return 0;
      } else {
        return -1;
      }
    } else if (other.isLeafNode() || other.isEmpty()) {
      return 1;
    } else if (other === MAX_NODE) {
      return -1;
    } else {
      // Must be another node with children.
      return 0;
    }
  }

  withIndex(indexDefinition) {
    if (indexDefinition === KEY_INDEX || this.indexMap_.hasIndex(indexDefinition)) {
      return this;
    } else {
      const newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);
      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);
    }
  }

  isIndexed(index) {
    return index === KEY_INDEX || this.indexMap_.hasIndex(index);
  }

  equals(other) {
    if (other === this) {
      return true;
    } else if (other.isLeafNode()) {
      return false;
    } else {
      const otherChildrenNode = other;

      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {
        return false;
      } else if (this.children_.count() === otherChildrenNode.children_.count()) {
        const thisIter = this.getIterator(PRIORITY_INDEX);
        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);
        let thisCurrent = thisIter.getNext();
        let otherCurrent = otherIter.getNext();

        while (thisCurrent && otherCurrent) {
          if (thisCurrent.name !== otherCurrent.name || !thisCurrent.node.equals(otherCurrent.node)) {
            return false;
          }

          thisCurrent = thisIter.getNext();
          otherCurrent = otherIter.getNext();
        }

        return thisCurrent === null && otherCurrent === null;
      } else {
        return false;
      }
    }
  }
  /**
   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used
   * instead.
   *
   */


  resolveIndex_(indexDefinition) {
    if (indexDefinition === KEY_INDEX) {
      return null;
    } else {
      return this.indexMap_.get(indexDefinition.toString());
    }
  }

}

ChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\d*)$/;

class MaxNode extends ChildrenNode {
  constructor() {
    super(new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default);
  }

  compareTo(other) {
    if (other === this) {
      return 0;
    } else {
      return 1;
    }
  }

  equals(other) {
    // Not that we every compare it, but MAX_NODE is only ever equal to itself
    return other === this;
  }

  getPriority() {
    return this;
  }

  getImmediateChild(childName) {
    return ChildrenNode.EMPTY_NODE;
  }

  isEmpty() {
    return false;
  }

}
/**
 * Marker that will sort higher than any other snapshot.
 */


const MAX_NODE = new MaxNode();
Object.defineProperties(NamedNode, {
  MIN: {
    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)
  },
  MAX: {
    value: new NamedNode(MAX_NAME, MAX_NODE)
  }
});
/**
 * Reference Extensions
 */

KeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;
LeafNode.__childrenNodeConstructor = ChildrenNode;
setMaxNode$1(MAX_NODE);
setMaxNode(MAX_NODE);
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const USE_HINZE = true;
/**
 * Constructs a snapshot node representing the passed JSON and returns it.
 * @param json - JSON to create a node for.
 * @param priority - Optional priority to use.  This will be ignored if the
 * passed JSON contains a .priority property.
 */

function nodeFromJSON(json, priority = null) {
  if (json === null) {
    return ChildrenNode.EMPTY_NODE;
  }

  if (typeof json === 'object' && '.priority' in json) {
    priority = json['.priority'];
  }

  (0, _util.assert)(priority === null || typeof priority === 'string' || typeof priority === 'number' || typeof priority === 'object' && '.sv' in priority, 'Invalid priority type found: ' + typeof priority);

  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {
    json = json['.value'];
  } // Valid leaf nodes include non-objects or server-value wrapper objects


  if (typeof json !== 'object' || '.sv' in json) {
    const jsonLeaf = json;
    return new LeafNode(jsonLeaf, nodeFromJSON(priority));
  }

  if (!(json instanceof Array) && USE_HINZE) {
    const children = [];
    let childrenHavePriority = false;
    const hinzeJsonObj = json;
    each(hinzeJsonObj, (key, child) => {
      if (key.substring(0, 1) !== '.') {
        // Ignore metadata nodes
        const childNode = nodeFromJSON(child);

        if (!childNode.isEmpty()) {
          childrenHavePriority = childrenHavePriority || !childNode.getPriority().isEmpty();
          children.push(new NamedNode(key, childNode));
        }
      }
    });

    if (children.length === 0) {
      return ChildrenNode.EMPTY_NODE;
    }

    const childSet = buildChildSet(children, NAME_ONLY_COMPARATOR, namedNode => namedNode.name, NAME_COMPARATOR);

    if (childrenHavePriority) {
      const sortedChildSet = buildChildSet(children, PRIORITY_INDEX.getCompare());
      return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({
        '.priority': sortedChildSet
      }, {
        '.priority': PRIORITY_INDEX
      }));
    } else {
      return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);
    }
  } else {
    let node = ChildrenNode.EMPTY_NODE;
    each(json, (key, childData) => {
      if ((0, _util.contains)(json, key)) {
        if (key.substring(0, 1) !== '.') {
          // ignore metadata nodes.
          const childNode = nodeFromJSON(childData);

          if (childNode.isLeafNode() || !childNode.isEmpty()) {
            node = node.updateImmediateChild(key, childNode);
          }
        }
      }
    });
    return node.updatePriority(nodeFromJSON(priority));
  }
}

setNodeFromJSON(nodeFromJSON);
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

class PathIndex extends Index {
  constructor(indexPath_) {
    super();
    this.indexPath_ = indexPath_;
    (0, _util.assert)(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', "Can't create PathIndex with empty path or .priority key");
  }

  extractChild(snap) {
    return snap.getChild(this.indexPath_);
  }

  isDefinedOn(node) {
    return !node.getChild(this.indexPath_).isEmpty();
  }

  compare(a, b) {
    const aChild = this.extractChild(a.node);
    const bChild = this.extractChild(b.node);
    const indexCmp = aChild.compareTo(bChild);

    if (indexCmp === 0) {
      return nameCompare(a.name, b.name);
    } else {
      return indexCmp;
    }
  }

  makePost(indexValue, name) {
    const valueNode = nodeFromJSON(indexValue);
    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);
    return new NamedNode(name, node);
  }

  maxPost() {
    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);
    return new NamedNode(MAX_NAME, node);
  }

  toString() {
    return pathSlice(this.indexPath_, 0).join('/');
  }

}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


class ValueIndex extends Index {
  compare(a, b) {
    const indexCmp = a.node.compareTo(b.node);

    if (indexCmp === 0) {
      return nameCompare(a.name, b.name);
    } else {
      return indexCmp;
    }
  }

  isDefinedOn(node) {
    return true;
  }

  indexedValueChanged(oldNode, newNode) {
    return !oldNode.equals(newNode);
  }

  minPost() {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return NamedNode.MIN;
  }

  maxPost() {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return NamedNode.MAX;
  }

  makePost(indexValue, name) {
    const valueNode = nodeFromJSON(indexValue);
    return new NamedNode(name, valueNode);
  }
  /**
   * @returns String representation for inclusion in a query spec
   */


  toString() {
    return '.value';
  }

}

const VALUE_INDEX = new ValueIndex();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Modeled after base64 web-safe chars, but ordered by ASCII.

const PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';
const MIN_PUSH_CHAR = '-';
const MAX_PUSH_CHAR = 'z';
const MAX_KEY_LEN = 786;
/**
 * Fancy ID generator that creates 20-character string identifiers with the
 * following properties:
 *
 * 1. They're based on timestamp so that they sort *after* any existing ids.
 * 2. They contain 72-bits of random data after the timestamp so that IDs won't
 *    collide with other clients' IDs.
 * 3. They sort *lexicographically* (so the timestamp is converted to characters
 *    that will sort properly).
 * 4. They're monotonically increasing. Even if you generate more than one in
 *    the same timestamp, the latter ones will sort after the former ones. We do
 *    this by using the previous random bits but "incrementing" them by 1 (only
 *    in the case of a timestamp collision).
 */

const nextPushId = function () {
  // Timestamp of last push, used to prevent local collisions if you push twice
  // in one ms.
  let lastPushTime = 0; // We generate 72-bits of randomness which get turned into 12 characters and
  // appended to the timestamp to prevent collisions with other clients. We
  // store the last characters we generated because in the event of a collision,
  // we'll use those same characters except "incremented" by one.

  const lastRandChars = [];
  return function (now) {
    const duplicateTime = now === lastPushTime;
    lastPushTime = now;
    let i;
    const timeStampChars = new Array(8);

    for (i = 7; i >= 0; i--) {
      timeStampChars[i] = PUSH_CHARS.charAt(now % 64); // NOTE: Can't use << here because javascript will convert to int and lose
      // the upper bits.

      now = Math.floor(now / 64);
    }

    (0, _util.assert)(now === 0, 'Cannot push at time == 0');
    let id = timeStampChars.join('');

    if (!duplicateTime) {
      for (i = 0; i < 12; i++) {
        lastRandChars[i] = Math.floor(Math.random() * 64);
      }
    } else {
      // If the timestamp hasn't changed since last push, use the same random
      // number, except incremented by 1.
      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {
        lastRandChars[i] = 0;
      }

      lastRandChars[i]++;
    }

    for (i = 0; i < 12; i++) {
      id += PUSH_CHARS.charAt(lastRandChars[i]);
    }

    (0, _util.assert)(id.length === 20, 'nextPushId: Length should be 20.');
    return id;
  };
}();

const successor = function (key) {
  if (key === '' + INTEGER_32_MAX) {
    // See https://firebase.google.com/docs/database/web/lists-of-data#data-order
    return MIN_PUSH_CHAR;
  }

  const keyAsInt = tryParseInt(key);

  if (keyAsInt != null) {
    return '' + (keyAsInt + 1);
  }

  const next = new Array(key.length);

  for (let i = 0; i < next.length; i++) {
    next[i] = key.charAt(i);
  }

  if (next.length < MAX_KEY_LEN) {
    next.push(MIN_PUSH_CHAR);
    return next.join('');
  }

  let i = next.length - 1;

  while (i >= 0 && next[i] === MAX_PUSH_CHAR) {
    i--;
  } // `successor` was called on the largest possible key, so return the
  // MAX_NAME, which sorts larger than all keys.


  if (i === -1) {
    return MAX_NAME;
  }

  const source = next[i];
  const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);
  next[i] = sourcePlusOne;
  return next.slice(0, i + 1).join('');
}; // `key` is assumed to be non-empty.


const predecessor = function (key) {
  if (key === '' + INTEGER_32_MIN) {
    return MIN_NAME;
  }

  const keyAsInt = tryParseInt(key);

  if (keyAsInt != null) {
    return '' + (keyAsInt - 1);
  }

  const next = new Array(key.length);

  for (let i = 0; i < next.length; i++) {
    next[i] = key.charAt(i);
  } // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically
  // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller
  // than that, `predecessor(predecessor(key))`, is
  //
  // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \
  //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }
  //
  // analogous to increment/decrement for base-10 integers.
  //
  // This works because lexigographic comparison works character-by-character,
  // using length as a tie-breaker if one key is a prefix of the other.


  if (next[next.length - 1] === MIN_PUSH_CHAR) {
    if (next.length === 1) {
      // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey
      return '' + INTEGER_32_MAX;
    }

    delete next[next.length - 1];
    return next.join('');
  } // Replace the last character with it's immediate predecessor, and
  // fill the suffix of the key with MAX_PUSH_CHAR. This is the
  // lexicographically largest possible key smaller than `key`.


  next[next.length - 1] = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(next[next.length - 1]) - 1);
  return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function changeValue(snapshotNode) {
  return {
    type: "value"
    /* VALUE */
    ,
    snapshotNode
  };
}

function changeChildAdded(childName, snapshotNode) {
  return {
    type: "child_added"
    /* CHILD_ADDED */
    ,
    snapshotNode,
    childName
  };
}

function changeChildRemoved(childName, snapshotNode) {
  return {
    type: "child_removed"
    /* CHILD_REMOVED */
    ,
    snapshotNode,
    childName
  };
}

function changeChildChanged(childName, snapshotNode, oldSnap) {
  return {
    type: "child_changed"
    /* CHILD_CHANGED */
    ,
    snapshotNode,
    childName,
    oldSnap
  };
}

function changeChildMoved(childName, snapshotNode) {
  return {
    type: "child_moved"
    /* CHILD_MOVED */
    ,
    snapshotNode,
    childName
  };
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Doesn't really filter nodes but applies an index to the node and keeps track of any changes
 */


class IndexedFilter {
  constructor(index_) {
    this.index_ = index_;
  }

  updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {
    (0, _util.assert)(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');
    const oldChild = snap.getImmediateChild(key); // Check if anything actually changed.

    if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {
      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.
      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need
      // to avoid treating these cases as "nothing changed."
      if (oldChild.isEmpty() === newChild.isEmpty()) {
        // Nothing changed.
        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.
        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');
        return snap;
      }
    }

    if (optChangeAccumulator != null) {
      if (newChild.isEmpty()) {
        if (snap.hasChild(key)) {
          optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));
        } else {
          (0, _util.assert)(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');
        }
      } else if (oldChild.isEmpty()) {
        optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));
      } else {
        optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));
      }
    }

    if (snap.isLeafNode() && newChild.isEmpty()) {
      return snap;
    } else {
      // Make sure the node is indexed
      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);
    }
  }

  updateFullNode(oldSnap, newSnap, optChangeAccumulator) {
    if (optChangeAccumulator != null) {
      if (!oldSnap.isLeafNode()) {
        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {
          if (!newSnap.hasChild(key)) {
            optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));
          }
        });
      }

      if (!newSnap.isLeafNode()) {
        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {
          if (oldSnap.hasChild(key)) {
            const oldChild = oldSnap.getImmediateChild(key);

            if (!oldChild.equals(childNode)) {
              optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));
            }
          } else {
            optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));
          }
        });
      }
    }

    return newSnap.withIndex(this.index_);
  }

  updatePriority(oldSnap, newPriority) {
    if (oldSnap.isEmpty()) {
      return ChildrenNode.EMPTY_NODE;
    } else {
      return oldSnap.updatePriority(newPriority);
    }
  }

  filtersNodes() {
    return false;
  }

  getIndexedFilter() {
    return this;
  }

  getIndex() {
    return this.index_;
  }

}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node
 */


class RangedFilter {
  constructor(params) {
    this.indexedFilter_ = new IndexedFilter(params.getIndex());
    this.index_ = params.getIndex();
    this.startPost_ = RangedFilter.getStartPost_(params);
    this.endPost_ = RangedFilter.getEndPost_(params);
  }

  getStartPost() {
    return this.startPost_;
  }

  getEndPost() {
    return this.endPost_;
  }

  matches(node) {
    return this.index_.compare(this.getStartPost(), node) <= 0 && this.index_.compare(node, this.getEndPost()) <= 0;
  }

  updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {
    if (!this.matches(new NamedNode(key, newChild))) {
      newChild = ChildrenNode.EMPTY_NODE;
    }

    return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);
  }

  updateFullNode(oldSnap, newSnap, optChangeAccumulator) {
    if (newSnap.isLeafNode()) {
      // Make sure we have a children node with the correct index, not a leaf node;
      newSnap = ChildrenNode.EMPTY_NODE;
    }

    let filtered = newSnap.withIndex(this.index_); // Don't support priorities on queries

    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);
    const self = this;
    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {
      if (!self.matches(new NamedNode(key, childNode))) {
        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);
      }
    });
    return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);
  }

  updatePriority(oldSnap, newPriority) {
    // Don't support priorities on queries
    return oldSnap;
  }

  filtersNodes() {
    return true;
  }

  getIndexedFilter() {
    return this.indexedFilter_;
  }

  getIndex() {
    return this.index_;
  }

  static getStartPost_(params) {
    if (params.hasStart()) {
      const startName = params.getIndexStartName();
      return params.getIndex().makePost(params.getIndexStartValue(), startName);
    } else {
      return params.getIndex().minPost();
    }
  }

  static getEndPost_(params) {
    if (params.hasEnd()) {
      const endName = params.getIndexEndName();
      return params.getIndex().makePost(params.getIndexEndValue(), endName);
    } else {
      return params.getIndex().maxPost();
    }
  }

}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible
 */


class LimitedFilter {
  constructor(params) {
    this.rangedFilter_ = new RangedFilter(params);
    this.index_ = params.getIndex();
    this.limit_ = params.getLimit();
    this.reverse_ = !params.isViewFromLeft();
  }

  updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {
    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {
      newChild = ChildrenNode.EMPTY_NODE;
    }

    if (snap.getImmediateChild(key).equals(newChild)) {
      // No change
      return snap;
    } else if (snap.numChildren() < this.limit_) {
      return this.rangedFilter_.getIndexedFilter().updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);
    } else {
      return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);
    }
  }

  updateFullNode(oldSnap, newSnap, optChangeAccumulator) {
    let filtered;

    if (newSnap.isLeafNode() || newSnap.isEmpty()) {
      // Make sure we have a children node with the correct index, not a leaf node;
      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);
    } else {
      if (this.limit_ * 2 < newSnap.numChildren() && newSnap.isIndexed(this.index_)) {
        // Easier to build up a snapshot, since what we're given has more than twice the elements we want
        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_); // anchor to the startPost, endPost, or last element as appropriate

        let iterator;

        if (this.reverse_) {
          iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);
        } else {
          iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);
        }

        let count = 0;

        while (iterator.hasNext() && count < this.limit_) {
          const next = iterator.getNext();
          let inRange;

          if (this.reverse_) {
            inRange = this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;
          } else {
            inRange = this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;
          }

          if (inRange) {
            filtered = filtered.updateImmediateChild(next.name, next.node);
            count++;
          } else {
            // if we have reached the end post, we cannot keep adding elemments
            break;
          }
        }
      } else {
        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one
        filtered = newSnap.withIndex(this.index_); // Don't support priorities on queries

        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);
        let startPost;
        let endPost;
        let cmp;
        let iterator;

        if (this.reverse_) {
          iterator = filtered.getReverseIterator(this.index_);
          startPost = this.rangedFilter_.getEndPost();
          endPost = this.rangedFilter_.getStartPost();
          const indexCompare = this.index_.getCompare();

          cmp = (a, b) => indexCompare(b, a);
        } else {
          iterator = filtered.getIterator(this.index_);
          startPost = this.rangedFilter_.getStartPost();
          endPost = this.rangedFilter_.getEndPost();
          cmp = this.index_.getCompare();
        }

        let count = 0;
        let foundStartPost = false;

        while (iterator.hasNext()) {
          const next = iterator.getNext();

          if (!foundStartPost && cmp(startPost, next) <= 0) {
            // start adding
            foundStartPost = true;
          }

          const inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;

          if (inRange) {
            count++;
          } else {
            filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);
          }
        }
      }
    }

    return this.rangedFilter_.getIndexedFilter().updateFullNode(oldSnap, filtered, optChangeAccumulator);
  }

  updatePriority(oldSnap, newPriority) {
    // Don't support priorities on queries
    return oldSnap;
  }

  filtersNodes() {
    return true;
  }

  getIndexedFilter() {
    return this.rangedFilter_.getIndexedFilter();
  }

  getIndex() {
    return this.index_;
  }

  fullLimitUpdateChild_(snap, childKey, childSnap, source, changeAccumulator) {
    // TODO: rename all cache stuff etc to general snap terminology
    let cmp;

    if (this.reverse_) {
      const indexCmp = this.index_.getCompare();

      cmp = (a, b) => indexCmp(b, a);
    } else {
      cmp = this.index_.getCompare();
    }

    const oldEventCache = snap;
    (0, _util.assert)(oldEventCache.numChildren() === this.limit_, '');
    const newChildNamedNode = new NamedNode(childKey, childSnap);
    const windowBoundary = this.reverse_ ? oldEventCache.getFirstChild(this.index_) : oldEventCache.getLastChild(this.index_);
    const inRange = this.rangedFilter_.matches(newChildNamedNode);

    if (oldEventCache.hasChild(childKey)) {
      const oldChildSnap = oldEventCache.getImmediateChild(childKey);
      let nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);

      while (nextChild != null && (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {
        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't
        // been applied to the limited filter yet. Ignore this next child which will be updated later in
        // the limited filter...
        nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);
      }

      const compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);
      const remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;

      if (remainsInWindow) {
        if (changeAccumulator != null) {
          changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));
        }

        return oldEventCache.updateImmediateChild(childKey, childSnap);
      } else {
        if (changeAccumulator != null) {
          changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));
        }

        const newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);
        const nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);

        if (nextChildInRange) {
          if (changeAccumulator != null) {
            changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));
          }

          return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);
        } else {
          return newEventCache;
        }
      }
    } else if (childSnap.isEmpty()) {
      // we're deleting a node, but it was not in the window, so ignore it
      return snap;
    } else if (inRange) {
      if (cmp(windowBoundary, newChildNamedNode) >= 0) {
        if (changeAccumulator != null) {
          changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));
          changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));
        }

        return oldEventCache.updateImmediateChild(childKey, childSnap).updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);
      } else {
        return snap;
      }
    } else {
      return snap;
    }
  }

}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a
 * range to be returned for a particular location. It is assumed that validation of parameters is done at the
 * user-facing API level, so it is not done here.
 *
 * @internal
 */


class QueryParams {
  constructor() {
    this.limitSet_ = false;
    this.startSet_ = false;
    this.startNameSet_ = false;
    this.startAfterSet_ = false;
    this.endSet_ = false;
    this.endNameSet_ = false;
    this.endBeforeSet_ = false;
    this.limit_ = 0;
    this.viewFrom_ = '';
    this.indexStartValue_ = null;
    this.indexStartName_ = '';
    this.indexEndValue_ = null;
    this.indexEndName_ = '';
    this.index_ = PRIORITY_INDEX;
  }

  hasStart() {
    return this.startSet_;
  }

  hasStartAfter() {
    return this.startAfterSet_;
  }

  hasEndBefore() {
    return this.endBeforeSet_;
  }
  /**
   * @returns True if it would return from left.
   */


  isViewFromLeft() {
    if (this.viewFrom_ === '') {
      // limit(), rather than limitToFirst or limitToLast was called.
      // This means that only one of startSet_ and endSet_ is true. Use them
      // to calculate which side of the view to anchor to. If neither is set,
      // anchor to the end.
      return this.startSet_;
    } else {
      return this.viewFrom_ === "l"
      /* VIEW_FROM_LEFT */
      ;
    }
  }
  /**
   * Only valid to call if hasStart() returns true
   */


  getIndexStartValue() {
    (0, _util.assert)(this.startSet_, 'Only valid if start has been set');
    return this.indexStartValue_;
  }
  /**
   * Only valid to call if hasStart() returns true.
   * Returns the starting key name for the range defined by these query parameters
   */


  getIndexStartName() {
    (0, _util.assert)(this.startSet_, 'Only valid if start has been set');

    if (this.startNameSet_) {
      return this.indexStartName_;
    } else {
      return MIN_NAME;
    }
  }

  hasEnd() {
    return this.endSet_;
  }
  /**
   * Only valid to call if hasEnd() returns true.
   */


  getIndexEndValue() {
    (0, _util.assert)(this.endSet_, 'Only valid if end has been set');
    return this.indexEndValue_;
  }
  /**
   * Only valid to call if hasEnd() returns true.
   * Returns the end key name for the range defined by these query parameters
   */


  getIndexEndName() {
    (0, _util.assert)(this.endSet_, 'Only valid if end has been set');

    if (this.endNameSet_) {
      return this.indexEndName_;
    } else {
      return MAX_NAME;
    }
  }

  hasLimit() {
    return this.limitSet_;
  }
  /**
   * @returns True if a limit has been set and it has been explicitly anchored
   */


  hasAnchoredLimit() {
    return this.limitSet_ && this.viewFrom_ !== '';
  }
  /**
   * Only valid to call if hasLimit() returns true
   */


  getLimit() {
    (0, _util.assert)(this.limitSet_, 'Only valid if limit has been set');
    return this.limit_;
  }

  getIndex() {
    return this.index_;
  }

  loadsAllData() {
    return !(this.startSet_ || this.endSet_ || this.limitSet_);
  }

  isDefault() {
    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;
  }

  copy() {
    const copy = new QueryParams();
    copy.limitSet_ = this.limitSet_;
    copy.limit_ = this.limit_;
    copy.startSet_ = this.startSet_;
    copy.indexStartValue_ = this.indexStartValue_;
    copy.startNameSet_ = this.startNameSet_;
    copy.indexStartName_ = this.indexStartName_;
    copy.endSet_ = this.endSet_;
    copy.indexEndValue_ = this.indexEndValue_;
    copy.endNameSet_ = this.endNameSet_;
    copy.indexEndName_ = this.indexEndName_;
    copy.index_ = this.index_;
    copy.viewFrom_ = this.viewFrom_;
    return copy;
  }

}

exports._QueryParams = QueryParams;

function queryParamsGetNodeFilter(queryParams) {
  if (queryParams.loadsAllData()) {
    return new IndexedFilter(queryParams.getIndex());
  } else if (queryParams.hasLimit()) {
    return new LimitedFilter(queryParams);
  } else {
    return new RangedFilter(queryParams);
  }
}

function queryParamsLimitToFirst(queryParams, newLimit) {
  const newParams = queryParams.copy();
  newParams.limitSet_ = true;
  newParams.limit_ = newLimit;
  newParams.viewFrom_ = "l"
  /* VIEW_FROM_LEFT */
  ;
  return newParams;
}

function queryParamsLimitToLast(queryParams, newLimit) {
  const newParams = queryParams.copy();
  newParams.limitSet_ = true;
  newParams.limit_ = newLimit;
  newParams.viewFrom_ = "r"
  /* VIEW_FROM_RIGHT */
  ;
  return newParams;
}

function queryParamsStartAt(queryParams, indexValue, key) {
  const newParams = queryParams.copy();
  newParams.startSet_ = true;

  if (indexValue === undefined) {
    indexValue = null;
  }

  newParams.indexStartValue_ = indexValue;

  if (key != null) {
    newParams.startNameSet_ = true;
    newParams.indexStartName_ = key;
  } else {
    newParams.startNameSet_ = false;
    newParams.indexStartName_ = '';
  }

  return newParams;
}

function queryParamsStartAfter(queryParams, indexValue, key) {
  let params;

  if (queryParams.index_ === KEY_INDEX) {
    if (typeof indexValue === 'string') {
      indexValue = successor(indexValue);
    }

    params = queryParamsStartAt(queryParams, indexValue, key);
  } else {
    let childKey;

    if (key == null) {
      childKey = MAX_NAME;
    } else {
      childKey = successor(key);
    }

    params = queryParamsStartAt(queryParams, indexValue, childKey);
  }

  params.startAfterSet_ = true;
  return params;
}

function queryParamsEndAt(queryParams, indexValue, key) {
  const newParams = queryParams.copy();
  newParams.endSet_ = true;

  if (indexValue === undefined) {
    indexValue = null;
  }

  newParams.indexEndValue_ = indexValue;

  if (key !== undefined) {
    newParams.endNameSet_ = true;
    newParams.indexEndName_ = key;
  } else {
    newParams.endNameSet_ = false;
    newParams.indexEndName_ = '';
  }

  return newParams;
}

function queryParamsEndBefore(queryParams, indexValue, key) {
  let childKey;
  let params;

  if (queryParams.index_ === KEY_INDEX) {
    if (typeof indexValue === 'string') {
      indexValue = predecessor(indexValue);
    }

    params = queryParamsEndAt(queryParams, indexValue, key);
  } else {
    if (key == null) {
      childKey = MIN_NAME;
    } else {
      childKey = predecessor(key);
    }

    params = queryParamsEndAt(queryParams, indexValue, childKey);
  }

  params.endBeforeSet_ = true;
  return params;
}

function queryParamsOrderBy(queryParams, index) {
  const newParams = queryParams.copy();
  newParams.index_ = index;
  return newParams;
}
/**
 * Returns a set of REST query string parameters representing this query.
 *
 * @returns query string parameters
 */


function queryParamsToRestQueryStringParameters(queryParams) {
  const qs = {};

  if (queryParams.isDefault()) {
    return qs;
  }

  let orderBy;

  if (queryParams.index_ === PRIORITY_INDEX) {
    orderBy = "$priority"
    /* PRIORITY_INDEX */
    ;
  } else if (queryParams.index_ === VALUE_INDEX) {
    orderBy = "$value"
    /* VALUE_INDEX */
    ;
  } else if (queryParams.index_ === KEY_INDEX) {
    orderBy = "$key"
    /* KEY_INDEX */
    ;
  } else {
    (0, _util.assert)(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');
    orderBy = queryParams.index_.toString();
  }

  qs["orderBy"
  /* ORDER_BY */
  ] = (0, _util.stringify)(orderBy);

  if (queryParams.startSet_) {
    qs["startAt"
    /* START_AT */
    ] = (0, _util.stringify)(queryParams.indexStartValue_);

    if (queryParams.startNameSet_) {
      qs["startAt"
      /* START_AT */
      ] += ',' + (0, _util.stringify)(queryParams.indexStartName_);
    }
  }

  if (queryParams.endSet_) {
    qs["endAt"
    /* END_AT */
    ] = (0, _util.stringify)(queryParams.indexEndValue_);

    if (queryParams.endNameSet_) {
      qs["endAt"
      /* END_AT */
      ] += ',' + (0, _util.stringify)(queryParams.indexEndName_);
    }
  }

  if (queryParams.limitSet_) {
    if (queryParams.isViewFromLeft()) {
      qs["limitToFirst"
      /* LIMIT_TO_FIRST */
      ] = queryParams.limit_;
    } else {
      qs["limitToLast"
      /* LIMIT_TO_LAST */
      ] = queryParams.limit_;
    }
  }

  return qs;
}

function queryParamsGetQueryObject(queryParams) {
  const obj = {};

  if (queryParams.startSet_) {
    obj["sp"
    /* INDEX_START_VALUE */
    ] = queryParams.indexStartValue_;

    if (queryParams.startNameSet_) {
      obj["sn"
      /* INDEX_START_NAME */
      ] = queryParams.indexStartName_;
    }
  }

  if (queryParams.endSet_) {
    obj["ep"
    /* INDEX_END_VALUE */
    ] = queryParams.indexEndValue_;

    if (queryParams.endNameSet_) {
      obj["en"
      /* INDEX_END_NAME */
      ] = queryParams.indexEndName_;
    }
  }

  if (queryParams.limitSet_) {
    obj["l"
    /* LIMIT */
    ] = queryParams.limit_;
    let viewFrom = queryParams.viewFrom_;

    if (viewFrom === '') {
      if (queryParams.isViewFromLeft()) {
        viewFrom = "l"
        /* VIEW_FROM_LEFT */
        ;
      } else {
        viewFrom = "r"
        /* VIEW_FROM_RIGHT */
        ;
      }
    }

    obj["vf"
    /* VIEW_FROM */
    ] = viewFrom;
  } // For now, priority index is the default, so we only specify if it's some other index


  if (queryParams.index_ !== PRIORITY_INDEX) {
    obj["i"
    /* INDEX */
    ] = queryParams.index_.toString();
  }

  return obj;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An implementation of ServerActions that communicates with the server via REST requests.
 * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full
 * persistent connection (using WebSockets or long-polling)
 */


class ReadonlyRestClient extends ServerActions {
  /**
   * @param repoInfo_ - Data about the namespace we are connecting to
   * @param onDataUpdate_ - A callback for new data from the server
   */
  constructor(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {
    super();
    this.repoInfo_ = repoInfo_;
    this.onDataUpdate_ = onDataUpdate_;
    this.authTokenProvider_ = authTokenProvider_;
    this.appCheckTokenProvider_ = appCheckTokenProvider_;
    /** @private {function(...[*])} */

    this.log_ = logWrapper('p:rest:');
    /**
     * We don't actually need to track listens, except to prevent us calling an onComplete for a listen
     * that's been removed. :-/
     */

    this.listens_ = {};
  }

  reportStats(stats) {
    throw new Error('Method not implemented.');
  }

  static getListenId_(query, tag) {
    if (tag !== undefined) {
      return 'tag$' + tag;
    } else {
      (0, _util.assert)(query._queryParams.isDefault(), "should have a tag if it's not a default query.");
      return query._path.toString();
    }
  }
  /** @inheritDoc */


  listen(query, currentHashFn, tag, onComplete) {
    const pathString = query._path.toString();

    this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier); // Mark this listener so we can tell if it's removed.

    const listenId = ReadonlyRestClient.getListenId_(query, tag);
    const thisListen = {};
    this.listens_[listenId] = thisListen;
    const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);
    this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {
      let data = result;

      if (error === 404) {
        data = null;
        error = null;
      }

      if (error === null) {
        this.onDataUpdate_(pathString, data,
        /*isMerge=*/
        false, tag);
      }

      if ((0, _util.safeGet)(this.listens_, listenId) === thisListen) {
        let status;

        if (!error) {
          status = 'ok';
        } else if (error === 401) {
          status = 'permission_denied';
        } else {
          status = 'rest_error:' + error;
        }

        onComplete(status, null);
      }
    });
  }
  /** @inheritDoc */


  unlisten(query, tag) {
    const listenId = ReadonlyRestClient.getListenId_(query, tag);
    delete this.listens_[listenId];
  }

  get(query) {
    const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);

    const pathString = query._path.toString();

    const deferred = new _util.Deferred();
    this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {
      let data = result;

      if (error === 404) {
        data = null;
        error = null;
      }

      if (error === null) {
        this.onDataUpdate_(pathString, data,
        /*isMerge=*/
        false,
        /*tag=*/
        null);
        deferred.resolve(data);
      } else {
        deferred.reject(new Error(data));
      }
    });
    return deferred.promise;
  }
  /** @inheritDoc */


  refreshAuthToken(token) {// no-op since we just always call getToken.
  }
  /**
   * Performs a REST request to the given path, with the provided query string parameters,
   * and any auth credentials we have.
   */


  restRequest_(pathString, queryStringParameters = {}, callback) {
    queryStringParameters['format'] = 'export';
    return Promise.all([this.authTokenProvider_.getToken(
    /*forceRefresh=*/
    false), this.appCheckTokenProvider_.getToken(
    /*forceRefresh=*/
    false)]).then(([authToken, appCheckToken]) => {
      if (authToken && authToken.accessToken) {
        queryStringParameters['auth'] = authToken.accessToken;
      }

      if (appCheckToken && appCheckToken.token) {
        queryStringParameters['ac'] = appCheckToken.token;
      }

      const url = (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host + pathString + '?' + 'ns=' + this.repoInfo_.namespace + (0, _util.querystring)(queryStringParameters);
      this.log_('Sending REST request for ' + url);
      const xhr = new XMLHttpRequest();

      xhr.onreadystatechange = () => {
        if (callback && xhr.readyState === 4) {
          this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);
          let res = null;

          if (xhr.status >= 200 && xhr.status < 300) {
            try {
              res = (0, _util.jsonEval)(xhr.responseText);
            } catch (e) {
              warn('Failed to parse JSON response for ' + url + ': ' + xhr.responseText);
            }

            callback(null, res);
          } else {
            // 401 and 404 are expected.
            if (xhr.status !== 401 && xhr.status !== 404) {
              warn('Got unsuccessful REST response for ' + url + ' Status: ' + xhr.status);
            }

            callback(xhr.status);
          }

          callback = null;
        }
      };

      xhr.open('GET', url,
      /*asynchronous=*/
      true);
      xhr.send();
    });
  }

}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Mutable object which basically just stores a reference to the "latest" immutable snapshot.
 */


class SnapshotHolder {
  constructor() {
    this.rootNode_ = ChildrenNode.EMPTY_NODE;
  }

  getNode(path) {
    return this.rootNode_.getChild(path);
  }

  updateSnapshot(path, newSnapshotNode) {
    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);
  }

}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function newSparseSnapshotTree() {
  return {
    value: null,
    children: new Map()
  };
}
/**
 * Stores the given node at the specified path. If there is already a node
 * at a shallower path, it merges the new data into that snapshot node.
 *
 * @param path - Path to look up snapshot for.
 * @param data - The new data, or null.
 */


function sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {
  if (pathIsEmpty(path)) {
    sparseSnapshotTree.value = data;
    sparseSnapshotTree.children.clear();
  } else if (sparseSnapshotTree.value !== null) {
    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);
  } else {
    const childKey = pathGetFront(path);

    if (!sparseSnapshotTree.children.has(childKey)) {
      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());
    }

    const child = sparseSnapshotTree.children.get(childKey);
    path = pathPopFront(path);
    sparseSnapshotTreeRemember(child, path, data);
  }
}
/**
 * Purge the data at path from the cache.
 *
 * @param path - Path to look up snapshot for.
 * @returns True if this node should now be removed.
 */


function sparseSnapshotTreeForget(sparseSnapshotTree, path) {
  if (pathIsEmpty(path)) {
    sparseSnapshotTree.value = null;
    sparseSnapshotTree.children.clear();
    return true;
  } else {
    if (sparseSnapshotTree.value !== null) {
      if (sparseSnapshotTree.value.isLeafNode()) {
        // We're trying to forget a node that doesn't exist
        return false;
      } else {
        const value = sparseSnapshotTree.value;
        sparseSnapshotTree.value = null;
        value.forEachChild(PRIORITY_INDEX, (key, tree) => {
          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);
        });
        return sparseSnapshotTreeForget(sparseSnapshotTree, path);
      }
    } else if (sparseSnapshotTree.children.size > 0) {
      const childKey = pathGetFront(path);
      path = pathPopFront(path);

      if (sparseSnapshotTree.children.has(childKey)) {
        const safeToRemove = sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);

        if (safeToRemove) {
          sparseSnapshotTree.children.delete(childKey);
        }
      }

      return sparseSnapshotTree.children.size === 0;
    } else {
      return true;
    }
  }
}
/**
 * Recursively iterates through all of the stored tree and calls the
 * callback on each one.
 *
 * @param prefixPath - Path to look up node for.
 * @param func - The function to invoke for each tree.
 */


function sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {
  if (sparseSnapshotTree.value !== null) {
    func(prefixPath, sparseSnapshotTree.value);
  } else {
    sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {
      const path = new Path(prefixPath.toString() + '/' + key);
      sparseSnapshotTreeForEachTree(tree, path, func);
    });
  }
}
/**
 * Iterates through each immediate child and triggers the callback.
 * Only seems to be used in tests.
 *
 * @param func - The function to invoke for each child.
 */


function sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {
  sparseSnapshotTree.children.forEach((tree, key) => {
    func(key, tree);
  });
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns the delta from the previous call to get stats.
 *
 * @param collection_ - The collection to "listen" to.
 */


class StatsListener {
  constructor(collection_) {
    this.collection_ = collection_;
    this.last_ = null;
  }

  get() {
    const newStats = this.collection_.get();
    const delta = Object.assign({}, newStats);

    if (this.last_) {
      each(this.last_, (stat, value) => {
        delta[stat] = delta[stat] - value;
      });
    }

    this.last_ = newStats;
    return delta;
  }

}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably
// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10
// seconds to try to ensure the Firebase connection is established / settled.


const FIRST_STATS_MIN_TIME = 10 * 1000;
const FIRST_STATS_MAX_TIME = 30 * 1000; // We'll continue to report stats on average every 5 minutes.

const REPORT_STATS_INTERVAL = 5 * 60 * 1000;

class StatsReporter {
  constructor(collection, server_) {
    this.server_ = server_;
    this.statsToReport_ = {};
    this.statsListener_ = new StatsListener(collection);
    const timeout = FIRST_STATS_MIN_TIME + (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();
    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));
  }

  reportStats_() {
    const stats = this.statsListener_.get();
    const reportedStats = {};
    let haveStatsToReport = false;
    each(stats, (stat, value) => {
      if (value > 0 && (0, _util.contains)(this.statsToReport_, stat)) {
        reportedStats[stat] = value;
        haveStatsToReport = true;
      }
    });

    if (haveStatsToReport) {
      this.server_.reportStats(reportedStats);
    } // queue our next run.


    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));
  }

}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 *
 * @enum
 */


var OperationType;

(function (OperationType) {
  OperationType[OperationType["OVERWRITE"] = 0] = "OVERWRITE";
  OperationType[OperationType["MERGE"] = 1] = "MERGE";
  OperationType[OperationType["ACK_USER_WRITE"] = 2] = "ACK_USER_WRITE";
  OperationType[OperationType["LISTEN_COMPLETE"] = 3] = "LISTEN_COMPLETE";
})(OperationType || (OperationType = {}));

function newOperationSourceUser() {
  return {
    fromUser: true,
    fromServer: false,
    queryId: null,
    tagged: false
  };
}

function newOperationSourceServer() {
  return {
    fromUser: false,
    fromServer: true,
    queryId: null,
    tagged: false
  };
}

function newOperationSourceServerTaggedQuery(queryId) {
  return {
    fromUser: false,
    fromServer: true,
    queryId,
    tagged: true
  };
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


class AckUserWrite {
  /**
   * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.
   */
  constructor(
  /** @inheritDoc */
  path,
  /** @inheritDoc */
  affectedTree,
  /** @inheritDoc */
  revert) {
    this.path = path;
    this.affectedTree = affectedTree;
    this.revert = revert;
    /** @inheritDoc */

    this.type = OperationType.ACK_USER_WRITE;
    /** @inheritDoc */

    this.source = newOperationSourceUser();
  }

  operationForChild(childName) {
    if (!pathIsEmpty(this.path)) {
      (0, _util.assert)(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');
      return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);
    } else if (this.affectedTree.value != null) {
      (0, _util.assert)(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.'); // All child locations are affected as well; just return same operation.

      return this;
    } else {
      const childTree = this.affectedTree.subtree(new Path(childName));
      return new AckUserWrite(newEmptyPath(), childTree, this.revert);
    }
  }

}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


class ListenComplete {
  constructor(source, path) {
    this.source = source;
    this.path = path;
    /** @inheritDoc */

    this.type = OperationType.LISTEN_COMPLETE;
  }

  operationForChild(childName) {
    if (pathIsEmpty(this.path)) {
      return new ListenComplete(this.source, newEmptyPath());
    } else {
      return new ListenComplete(this.source, pathPopFront(this.path));
    }
  }

}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


class Overwrite {
  constructor(source, path, snap) {
    this.source = source;
    this.path = path;
    this.snap = snap;
    /** @inheritDoc */

    this.type = OperationType.OVERWRITE;
  }

  operationForChild(childName) {
    if (pathIsEmpty(this.path)) {
      return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));
    } else {
      return new Overwrite(this.source, pathPopFront(this.path), this.snap);
    }
  }

}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


class Merge {
  constructor(
  /** @inheritDoc */
  source,
  /** @inheritDoc */
  path,
  /** @inheritDoc */
  children) {
    this.source = source;
    this.path = path;
    this.children = children;
    /** @inheritDoc */

    this.type = OperationType.MERGE;
  }

  operationForChild(childName) {
    if (pathIsEmpty(this.path)) {
      const childTree = this.children.subtree(new Path(childName));

      if (childTree.isEmpty()) {
        // This child is unaffected
        return null;
      } else if (childTree.value) {
        // We have a snapshot for the child in question.  This becomes an overwrite of the child.
        return new Overwrite(this.source, newEmptyPath(), childTree.value);
      } else {
        // This is a merge at a deeper level
        return new Merge(this.source, newEmptyPath(), childTree);
      }
    } else {
      (0, _util.assert)(pathGetFront(this.path) === childName, "Can't get a merge for a child not on the path of the operation");
      return new Merge(this.source, pathPopFront(this.path), this.children);
    }
  }

  toString() {
    return 'Operation(' + this.path + ': ' + this.source.toString() + ' merge: ' + this.children.toString() + ')';
  }

}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully
 * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.
 * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks
 * whether a node potentially had children removed due to a filter.
 */


class CacheNode {
  constructor(node_, fullyInitialized_, filtered_) {
    this.node_ = node_;
    this.fullyInitialized_ = fullyInitialized_;
    this.filtered_ = filtered_;
  }
  /**
   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client
   */


  isFullyInitialized() {
    return this.fullyInitialized_;
  }
  /**
   * Returns whether this node is potentially missing children due to a filter applied to the node
   */


  isFiltered() {
    return this.filtered_;
  }

  isCompleteForPath(path) {
    if (pathIsEmpty(path)) {
      return this.isFullyInitialized() && !this.filtered_;
    }

    const childKey = pathGetFront(path);
    return this.isCompleteForChild(childKey);
  }

  isCompleteForChild(key) {
    return this.isFullyInitialized() && !this.filtered_ || this.node_.hasChild(key);
  }

  getNode() {
    return this.node_;
  }

}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An EventGenerator is used to convert "raw" changes (Change) as computed by the
 * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()
 * for details.
 *
 */


class EventGenerator {
  constructor(query_) {
    this.query_ = query_;
    this.index_ = this.query_._queryParams.getIndex();
  }

}
/**
 * Given a set of raw changes (no moved events and prevName not specified yet), and a set of
 * EventRegistrations that should be notified of these changes, generate the actual events to be raised.
 *
 * Notes:
 *  - child_moved events will be synthesized at this time for any child_changed events that affect
 *    our index.
 *  - prevName will be calculated based on the index ordering.
 */


function eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {
  const events = [];
  const moves = [];
  changes.forEach(change => {
    if (change.type === "child_changed"
    /* CHILD_CHANGED */
    && eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {
      moves.push(changeChildMoved(change.childName, change.snapshotNode));
    }
  });
  eventGeneratorGenerateEventsForType(eventGenerator, events, "child_removed"
  /* CHILD_REMOVED */
  , changes, eventRegistrations, eventCache);
  eventGeneratorGenerateEventsForType(eventGenerator, events, "child_added"
  /* CHILD_ADDED */
  , changes, eventRegistrations, eventCache);
  eventGeneratorGenerateEventsForType(eventGenerator, events, "child_moved"
  /* CHILD_MOVED */
  , moves, eventRegistrations, eventCache);
  eventGeneratorGenerateEventsForType(eventGenerator, events, "child_changed"
  /* CHILD_CHANGED */
  , changes, eventRegistrations, eventCache);
  eventGeneratorGenerateEventsForType(eventGenerator, events, "value"
  /* VALUE */
  , changes, eventRegistrations, eventCache);
  return events;
}
/**
 * Given changes of a single change type, generate the corresponding events.
 */


function eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {
  const filteredChanges = changes.filter(change => change.type === eventType);
  filteredChanges.sort((a, b) => eventGeneratorCompareChanges(eventGenerator, a, b));
  filteredChanges.forEach(change => {
    const materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);
    registrations.forEach(registration => {
      if (registration.respondsTo(change.type)) {
        events.push(registration.createEvent(materializedChange, eventGenerator.query_));
      }
    });
  });
}

function eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {
  if (change.type === 'value' || change.type === 'child_removed') {
    return change;
  } else {
    change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);
    return change;
  }
}

function eventGeneratorCompareChanges(eventGenerator, a, b) {
  if (a.childName == null || b.childName == null) {
    throw (0, _util.assertionError)('Should only compare child_ events.');
  }

  const aWrapped = new NamedNode(a.childName, a.snapshotNode);
  const bWrapped = new NamedNode(b.childName, b.snapshotNode);
  return eventGenerator.index_.compare(aWrapped, bWrapped);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function newViewCache(eventCache, serverCache) {
  return {
    eventCache,
    serverCache
  };
}

function viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {
  return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);
}

function viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {
  return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));
}

function viewCacheGetCompleteEventSnap(viewCache) {
  return viewCache.eventCache.isFullyInitialized() ? viewCache.eventCache.getNode() : null;
}

function viewCacheGetCompleteServerSnap(viewCache) {
  return viewCache.serverCache.isFullyInitialized() ? viewCache.serverCache.getNode() : null;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


let emptyChildrenSingleton;
/**
 * Singleton empty children collection.
 *
 */

const EmptyChildren = () => {
  if (!emptyChildrenSingleton) {
    emptyChildrenSingleton = new SortedMap(stringCompare);
  }

  return emptyChildrenSingleton;
};
/**
 * A tree with immutable elements.
 */


class ImmutableTree {
  constructor(value, children = EmptyChildren()) {
    this.value = value;
    this.children = children;
  }

  static fromObject(obj) {
    let tree = new ImmutableTree(null);
    each(obj, (childPath, childSnap) => {
      tree = tree.set(new Path(childPath), childSnap);
    });
    return tree;
  }
  /**
   * True if the value is empty and there are no children
   */


  isEmpty() {
    return this.value === null && this.children.isEmpty();
  }
  /**
   * Given a path and predicate, return the first node and the path to that node
   * where the predicate returns true.
   *
   * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`
   * objects on the way back out, it may be better to pass down a pathSoFar obj.
   *
   * @param relativePath - The remainder of the path
   * @param predicate - The predicate to satisfy to return a node
   */


  findRootMostMatchingPathAndValue(relativePath, predicate) {
    if (this.value != null && predicate(this.value)) {
      return {
        path: newEmptyPath(),
        value: this.value
      };
    } else {
      if (pathIsEmpty(relativePath)) {
        return null;
      } else {
        const front = pathGetFront(relativePath);
        const child = this.children.get(front);

        if (child !== null) {
          const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);

          if (childExistingPathAndValue != null) {
            const fullPath = pathChild(new Path(front), childExistingPathAndValue.path);
            return {
              path: fullPath,
              value: childExistingPathAndValue.value
            };
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  }
  /**
   * Find, if it exists, the shortest subpath of the given path that points a defined
   * value in the tree
   */


  findRootMostValueAndPath(relativePath) {
    return this.findRootMostMatchingPathAndValue(relativePath, () => true);
  }
  /**
   * @returns The subtree at the given path
   */


  subtree(relativePath) {
    if (pathIsEmpty(relativePath)) {
      return this;
    } else {
      const front = pathGetFront(relativePath);
      const childTree = this.children.get(front);

      if (childTree !== null) {
        return childTree.subtree(pathPopFront(relativePath));
      } else {
        return new ImmutableTree(null);
      }
    }
  }
  /**
   * Sets a value at the specified path.
   *
   * @param relativePath - Path to set value at.
   * @param toSet - Value to set.
   * @returns Resulting tree.
   */


  set(relativePath, toSet) {
    if (pathIsEmpty(relativePath)) {
      return new ImmutableTree(toSet, this.children);
    } else {
      const front = pathGetFront(relativePath);
      const child = this.children.get(front) || new ImmutableTree(null);
      const newChild = child.set(pathPopFront(relativePath), toSet);
      const newChildren = this.children.insert(front, newChild);
      return new ImmutableTree(this.value, newChildren);
    }
  }
  /**
   * Removes the value at the specified path.
   *
   * @param relativePath - Path to value to remove.
   * @returns Resulting tree.
   */


  remove(relativePath) {
    if (pathIsEmpty(relativePath)) {
      if (this.children.isEmpty()) {
        return new ImmutableTree(null);
      } else {
        return new ImmutableTree(null, this.children);
      }
    } else {
      const front = pathGetFront(relativePath);
      const child = this.children.get(front);

      if (child) {
        const newChild = child.remove(pathPopFront(relativePath));
        let newChildren;

        if (newChild.isEmpty()) {
          newChildren = this.children.remove(front);
        } else {
          newChildren = this.children.insert(front, newChild);
        }

        if (this.value === null && newChildren.isEmpty()) {
          return new ImmutableTree(null);
        } else {
          return new ImmutableTree(this.value, newChildren);
        }
      } else {
        return this;
      }
    }
  }
  /**
   * Gets a value from the tree.
   *
   * @param relativePath - Path to get value for.
   * @returns Value at path, or null.
   */


  get(relativePath) {
    if (pathIsEmpty(relativePath)) {
      return this.value;
    } else {
      const front = pathGetFront(relativePath);
      const child = this.children.get(front);

      if (child) {
        return child.get(pathPopFront(relativePath));
      } else {
        return null;
      }
    }
  }
  /**
   * Replace the subtree at the specified path with the given new tree.
   *
   * @param relativePath - Path to replace subtree for.
   * @param newTree - New tree.
   * @returns Resulting tree.
   */


  setTree(relativePath, newTree) {
    if (pathIsEmpty(relativePath)) {
      return newTree;
    } else {
      const front = pathGetFront(relativePath);
      const child = this.children.get(front) || new ImmutableTree(null);
      const newChild = child.setTree(pathPopFront(relativePath), newTree);
      let newChildren;

      if (newChild.isEmpty()) {
        newChildren = this.children.remove(front);
      } else {
        newChildren = this.children.insert(front, newChild);
      }

      return new ImmutableTree(this.value, newChildren);
    }
  }
  /**
   * Performs a depth first fold on this tree. Transforms a tree into a single
   * value, given a function that operates on the path to a node, an optional
   * current value, and a map of child names to folded subtrees
   */


  fold(fn) {
    return this.fold_(newEmptyPath(), fn);
  }
  /**
   * Recursive helper for public-facing fold() method
   */


  fold_(pathSoFar, fn) {
    const accum = {};
    this.children.inorderTraversal((childKey, childTree) => {
      accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);
    });
    return fn(pathSoFar, this.value, accum);
  }
  /**
   * Find the first matching value on the given path. Return the result of applying f to it.
   */


  findOnPath(path, f) {
    return this.findOnPath_(path, newEmptyPath(), f);
  }

  findOnPath_(pathToFollow, pathSoFar, f) {
    const result = this.value ? f(pathSoFar, this.value) : false;

    if (result) {
      return result;
    } else {
      if (pathIsEmpty(pathToFollow)) {
        return null;
      } else {
        const front = pathGetFront(pathToFollow);
        const nextChild = this.children.get(front);

        if (nextChild) {
          return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);
        } else {
          return null;
        }
      }
    }
  }

  foreachOnPath(path, f) {
    return this.foreachOnPath_(path, newEmptyPath(), f);
  }

  foreachOnPath_(pathToFollow, currentRelativePath, f) {
    if (pathIsEmpty(pathToFollow)) {
      return this;
    } else {
      if (this.value) {
        f(currentRelativePath, this.value);
      }

      const front = pathGetFront(pathToFollow);
      const nextChild = this.children.get(front);

      if (nextChild) {
        return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);
      } else {
        return new ImmutableTree(null);
      }
    }
  }
  /**
   * Calls the given function for each node in the tree that has a value.
   *
   * @param f - A function to be called with the path from the root of the tree to
   * a node, and the value at that node. Called in depth-first order.
   */


  foreach(f) {
    this.foreach_(newEmptyPath(), f);
  }

  foreach_(currentRelativePath, f) {
    this.children.inorderTraversal((childName, childTree) => {
      childTree.foreach_(pathChild(currentRelativePath, childName), f);
    });

    if (this.value) {
      f(currentRelativePath, this.value);
    }
  }

  foreachChild(f) {
    this.children.inorderTraversal((childName, childTree) => {
      if (childTree.value) {
        f(childName, childTree.value);
      }
    });
  }

}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with
 * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write
 * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write
 * to reflect the write added.
 */


class CompoundWrite {
  constructor(writeTree_) {
    this.writeTree_ = writeTree_;
  }

  static empty() {
    return new CompoundWrite(new ImmutableTree(null));
  }

}

function compoundWriteAddWrite(compoundWrite, path, node) {
  if (pathIsEmpty(path)) {
    return new CompoundWrite(new ImmutableTree(node));
  } else {
    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);

    if (rootmost != null) {
      const rootMostPath = rootmost.path;
      let value = rootmost.value;
      const relativePath = newRelativePath(rootMostPath, path);
      value = value.updateChild(relativePath, node);
      return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));
    } else {
      const subtree = new ImmutableTree(node);
      const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);
      return new CompoundWrite(newWriteTree);
    }
  }
}

function compoundWriteAddWrites(compoundWrite, path, updates) {
  let newWrite = compoundWrite;
  each(updates, (childKey, node) => {
    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);
  });
  return newWrite;
}
/**
 * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher
 * location, which must be removed by calling this method with that path.
 *
 * @param compoundWrite - The CompoundWrite to remove.
 * @param path - The path at which a write and all deeper writes should be removed
 * @returns The new CompoundWrite with the removed path
 */


function compoundWriteRemoveWrite(compoundWrite, path) {
  if (pathIsEmpty(path)) {
    return CompoundWrite.empty();
  } else {
    const newWriteTree = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));
    return new CompoundWrite(newWriteTree);
  }
}
/**
 * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be
 * considered "complete".
 *
 * @param compoundWrite - The CompoundWrite to check.
 * @param path - The path to check for
 * @returns Whether there is a complete write at that path
 */


function compoundWriteHasCompleteWrite(compoundWrite, path) {
  return compoundWriteGetCompleteNode(compoundWrite, path) != null;
}
/**
 * Returns a node for a path if and only if the node is a "complete" overwrite at that path. This will not aggregate
 * writes from deeper paths, but will return child nodes from a more shallow path.
 *
 * @param compoundWrite - The CompoundWrite to get the node from.
 * @param path - The path to get a complete write
 * @returns The node if complete at that path, or null otherwise.
 */


function compoundWriteGetCompleteNode(compoundWrite, path) {
  const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);

  if (rootmost != null) {
    return compoundWrite.writeTree_.get(rootmost.path).getChild(newRelativePath(rootmost.path, path));
  } else {
    return null;
  }
}
/**
 * Returns all children that are guaranteed to be a complete overwrite.
 *
 * @param compoundWrite - The CompoundWrite to get children from.
 * @returns A list of all complete children.
 */


function compoundWriteGetCompleteChildren(compoundWrite) {
  const children = [];
  const node = compoundWrite.writeTree_.value;

  if (node != null) {
    // If it's a leaf node, it has no children; so nothing to do.
    if (!node.isLeafNode()) {
      node.forEachChild(PRIORITY_INDEX, (childName, childNode) => {
        children.push(new NamedNode(childName, childNode));
      });
    }
  } else {
    compoundWrite.writeTree_.children.inorderTraversal((childName, childTree) => {
      if (childTree.value != null) {
        children.push(new NamedNode(childName, childTree.value));
      }
    });
  }

  return children;
}

function compoundWriteChildCompoundWrite(compoundWrite, path) {
  if (pathIsEmpty(path)) {
    return compoundWrite;
  } else {
    const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);

    if (shadowingNode != null) {
      return new CompoundWrite(new ImmutableTree(shadowingNode));
    } else {
      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));
    }
  }
}
/**
 * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.
 * @returns Whether this CompoundWrite is empty
 */


function compoundWriteIsEmpty(compoundWrite) {
  return compoundWrite.writeTree_.isEmpty();
}
/**
 * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the
 * node
 * @param node - The node to apply this CompoundWrite to
 * @returns The node with all writes applied
 */


function compoundWriteApply(compoundWrite, node) {
  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);
}

function applySubtreeWrite(relativePath, writeTree, node) {
  if (writeTree.value != null) {
    // Since there a write is always a leaf, we're done here
    return node.updateChild(relativePath, writeTree.value);
  } else {
    let priorityWrite = null;
    writeTree.children.inorderTraversal((childKey, childTree) => {
      if (childKey === '.priority') {
        // Apply priorities at the end so we don't update priorities for either empty nodes or forget
        // to apply priorities to empty nodes that are later filled
        (0, _util.assert)(childTree.value !== null, 'Priority writes must always be leaf nodes');
        priorityWrite = childTree.value;
      } else {
        node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);
      }
    }); // If there was a priority write, we only apply it if the node is not empty

    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {
      node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite);
    }

    return node;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.
 *
 */


function writeTreeChildWrites(writeTree, path) {
  return newWriteTreeRef(path, writeTree);
}
/**
 * Record a new overwrite from user code.
 *
 * @param visible - This is set to false by some transactions. It should be excluded from event caches
 */


function writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {
  (0, _util.assert)(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');

  if (visible === undefined) {
    visible = true;
  }

  writeTree.allWrites.push({
    path,
    snap,
    writeId,
    visible
  });

  if (visible) {
    writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);
  }

  writeTree.lastWriteId = writeId;
}
/**
 * Record a new merge from user code.
 */


function writeTreeAddMerge(writeTree, path, changedChildren, writeId) {
  (0, _util.assert)(writeId > writeTree.lastWriteId, 'Stacking an older merge on top of newer ones');
  writeTree.allWrites.push({
    path,
    children: changedChildren,
    writeId,
    visible: true
  });
  writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);
  writeTree.lastWriteId = writeId;
}

function writeTreeGetWrite(writeTree, writeId) {
  for (let i = 0; i < writeTree.allWrites.length; i++) {
    const record = writeTree.allWrites[i];

    if (record.writeId === writeId) {
      return record;
    }
  }

  return null;
}
/**
 * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates
 * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.
 *
 * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise
 * events as a result).
 */


function writeTreeRemoveWrite(writeTree, writeId) {
  // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied
  // out of order.
  //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;
  //assert(validClear, "Either we don't have this write, or it's the first one in the queue");
  const idx = writeTree.allWrites.findIndex(s => {
    return s.writeId === writeId;
  });
  (0, _util.assert)(idx >= 0, 'removeWrite called with nonexistent writeId.');
  const writeToRemove = writeTree.allWrites[idx];
  writeTree.allWrites.splice(idx, 1);
  let removedWriteWasVisible = writeToRemove.visible;
  let removedWriteOverlapsWithOtherWrites = false;
  let i = writeTree.allWrites.length - 1;

  while (removedWriteWasVisible && i >= 0) {
    const currentWrite = writeTree.allWrites[i];

    if (currentWrite.visible) {
      if (i >= idx && writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {
        // The removed write was completely shadowed by a subsequent write.
        removedWriteWasVisible = false;
      } else if (pathContains(writeToRemove.path, currentWrite.path)) {
        // Either we're covering some writes or they're covering part of us (depending on which came first).
        removedWriteOverlapsWithOtherWrites = true;
      }
    }

    i--;
  }

  if (!removedWriteWasVisible) {
    return false;
  } else if (removedWriteOverlapsWithOtherWrites) {
    // There's some shadowing going on. Just rebuild the visible writes from scratch.
    writeTreeResetTree_(writeTree);
    return true;
  } else {
    // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.
    if (writeToRemove.snap) {
      writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);
    } else {
      const children = writeToRemove.children;
      each(children, childName => {
        writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));
      });
    }

    return true;
  }
}

function writeTreeRecordContainsPath_(writeRecord, path) {
  if (writeRecord.snap) {
    return pathContains(writeRecord.path, path);
  } else {
    for (const childName in writeRecord.children) {
      if (writeRecord.children.hasOwnProperty(childName) && pathContains(pathChild(writeRecord.path, childName), path)) {
        return true;
      }
    }

    return false;
  }
}
/**
 * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots
 */


function writeTreeResetTree_(writeTree) {
  writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());

  if (writeTree.allWrites.length > 0) {
    writeTree.lastWriteId = writeTree.allWrites[writeTree.allWrites.length - 1].writeId;
  } else {
    writeTree.lastWriteId = -1;
  }
}
/**
 * The default filter used when constructing the tree. Keep everything that's visible.
 */


function writeTreeDefaultFilter_(write) {
  return write.visible;
}
/**
 * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of
 * event data at that path.
 */


function writeTreeLayerTree_(writes, filter, treeRoot) {
  let compoundWrite = CompoundWrite.empty();

  for (let i = 0; i < writes.length; ++i) {
    const write = writes[i]; // Theory, a later set will either:
    // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction
    // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction

    if (filter(write)) {
      const writePath = write.path;
      let relativePath;

      if (write.snap) {
        if (pathContains(treeRoot, writePath)) {
          relativePath = newRelativePath(treeRoot, writePath);
          compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);
        } else if (pathContains(writePath, treeRoot)) {
          relativePath = newRelativePath(writePath, treeRoot);
          compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));
        } else ;
      } else if (write.children) {
        if (pathContains(treeRoot, writePath)) {
          relativePath = newRelativePath(treeRoot, writePath);
          compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);
        } else if (pathContains(writePath, treeRoot)) {
          relativePath = newRelativePath(writePath, treeRoot);

          if (pathIsEmpty(relativePath)) {
            compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);
          } else {
            const child = (0, _util.safeGet)(write.children, pathGetFront(relativePath));

            if (child) {
              // There exists a child in this node that matches the root path
              const deepNode = child.getChild(pathPopFront(relativePath));
              compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);
            }
          }
        } else ;
      } else {
        throw (0, _util.assertionError)('WriteRecord should have .snap or .children');
      }
    }
  }

  return compoundWrite;
}
/**
 * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden
 * writes), attempt to calculate a complete snapshot for the given path
 *
 * @param writeIdsToExclude - An optional set to be excluded
 * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false
 */


function writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {
  if (!writeIdsToExclude && !includeHiddenWrites) {
    const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);

    if (shadowingNode != null) {
      return shadowingNode;
    } else {
      const subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);

      if (compoundWriteIsEmpty(subMerge)) {
        return completeServerCache;
      } else if (completeServerCache == null && !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {
        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow
        return null;
      } else {
        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;
        return compoundWriteApply(subMerge, layeredCache);
      }
    }
  } else {
    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);

    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {
      return completeServerCache;
    } else {
      // If the server cache is null, and we don't have a complete cache, we need to return null
      if (!includeHiddenWrites && completeServerCache == null && !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {
        return null;
      } else {
        const filter = function (write) {
          return (write.visible || includeHiddenWrites) && (!writeIdsToExclude || !~writeIdsToExclude.indexOf(write.writeId)) && (pathContains(write.path, treePath) || pathContains(treePath, write.path));
        };

        const mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);
        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;
        return compoundWriteApply(mergeAtPath, layeredCache);
      }
    }
  }
}
/**
 * With optional, underlying server data, attempt to return a children node of children that we have complete data for.
 * Used when creating new views, to pre-fill their complete event children snapshot.
 */


function writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {
  let completeChildren = ChildrenNode.EMPTY_NODE;
  const topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);

  if (topLevelSet) {
    if (!topLevelSet.isLeafNode()) {
      // we're shadowing everything. Return the children.
      topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {
        completeChildren = completeChildren.updateImmediateChild(childName, childSnap);
      });
    }

    return completeChildren;
  } else if (completeServerChildren) {
    // Layer any children we have on top of this
    // We know we don't have a top-level set, so just enumerate existing children
    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);
    completeServerChildren.forEachChild(PRIORITY_INDEX, (childName, childNode) => {
      const node = compoundWriteApply(compoundWriteChildCompoundWrite(merge, new Path(childName)), childNode);
      completeChildren = completeChildren.updateImmediateChild(childName, node);
    }); // Add any complete children we have from the set

    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {
      completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);
    });
    return completeChildren;
  } else {
    // We don't have anything to layer on top of. Layer on any children we have
    // Note that we can return an empty snap if we have a defined delete
    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);
    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {
      completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);
    });
    return completeChildren;
  }
}
/**
 * Given that the underlying server data has updated, determine what, if anything, needs to be
 * applied to the event cache.
 *
 * Possibilities:
 *
 * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data
 *
 * 2. Some write is completely shadowing. No events to be raised
 *
 * 3. Is partially shadowed. Events
 *
 * Either existingEventSnap or existingServerSnap must exist
 */


function writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {
  (0, _util.assert)(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');
  const path = pathChild(treePath, childPath);

  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {
    // At this point we can probably guarantee that we're in case 2, meaning no events
    // May need to check visibility while doing the findRootMostValueAndPath call
    return null;
  } else {
    // No complete shadowing. We're either partially shadowing or not shadowing at all.
    const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);

    if (compoundWriteIsEmpty(childMerge)) {
      // We're not shadowing at all. Case 1
      return existingServerSnap.getChild(childPath);
    } else {
      // This could be more efficient if the serverNode + updates doesn't change the eventSnap
      // However this is tricky to find out, since user updates don't necessary change the server
      // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server
      // adds nodes, but doesn't change any existing writes. It is therefore not enough to
      // only check if the updates change the serverNode.
      // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?
      return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));
    }
  }
}
/**
 * Returns a complete child for a given server snap after applying all user writes or null if there is no
 * complete child for this ChildKey.
 */


function writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {
  const path = pathChild(treePath, childKey);
  const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);

  if (shadowingNode != null) {
    return shadowingNode;
  } else {
    if (existingServerSnap.isCompleteForChild(childKey)) {
      const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);
      return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));
    } else {
      return null;
    }
  }
}
/**
 * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at
 * a higher path, this will return the child of that write relative to the write and this path.
 * Returns null if there is no write at this path.
 */


function writeTreeShadowingWrite(writeTree, path) {
  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);
}
/**
 * This method is used when processing child remove events on a query. If we can, we pull in children that were outside
 * the window, but may now be in the window.
 */


function writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {
  let toIterate;
  const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);
  const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());

  if (shadowingNode != null) {
    toIterate = shadowingNode;
  } else if (completeServerData != null) {
    toIterate = compoundWriteApply(merge, completeServerData);
  } else {
    // no children to iterate on
    return [];
  }

  toIterate = toIterate.withIndex(index);

  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {
    const nodes = [];
    const cmp = index.getCompare();
    const iter = reverse ? toIterate.getReverseIteratorFrom(startPost, index) : toIterate.getIteratorFrom(startPost, index);
    let next = iter.getNext();

    while (next && nodes.length < count) {
      if (cmp(next, startPost) !== 0) {
        nodes.push(next);
      }

      next = iter.getNext();
    }

    return nodes;
  } else {
    return [];
  }
}

function newWriteTree() {
  return {
    visibleWrites: CompoundWrite.empty(),
    allWrites: [],
    lastWriteId: -1
  };
}
/**
 * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used
 * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node
 * can lead to a more expensive calculation.
 *
 * @param writeIdsToExclude - Optional writes to exclude.
 * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false
 */


function writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {
  return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);
}
/**
 * If possible, returns a children node containing all of the complete children we have data for. The returned data is a
 * mix of the given server data and write data.
 *
 */


function writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {
  return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);
}
/**
 * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,
 * if anything, needs to be applied to the event cache.
 *
 * Possibilities:
 *
 * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data
 *
 * 2. Some write is completely shadowing. No events to be raised
 *
 * 3. Is partially shadowed. Events should be raised
 *
 * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert
 *
 *
 */


function writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {
  return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);
}
/**
 * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at
 * a higher path, this will return the child of that write relative to the write and this path.
 * Returns null if there is no write at this path.
 *
 */


function writeTreeRefShadowingWrite(writeTreeRef, path) {
  return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));
}
/**
 * This method is used when processing child remove events on a query. If we can, we pull in children that were outside
 * the window, but may now be in the window
 */


function writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {
  return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);
}
/**
 * Returns a complete child for a given server snap after applying all user writes or null if there is no
 * complete child for this ChildKey.
 */


function writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {
  return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);
}
/**
 * Return a WriteTreeRef for a child.
 */


function writeTreeRefChild(writeTreeRef, childName) {
  return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);
}

function newWriteTreeRef(path, writeTree) {
  return {
    treePath: path,
    writeTree
  };
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


class ChildChangeAccumulator {
  constructor() {
    this.changeMap = new Map();
  }

  trackChildChange(change) {
    const type = change.type;
    const childKey = change.childName;
    (0, _util.assert)(type === "child_added"
    /* CHILD_ADDED */
    || type === "child_changed"
    /* CHILD_CHANGED */
    || type === "child_removed"
    /* CHILD_REMOVED */
    , 'Only child changes supported for tracking');
    (0, _util.assert)(childKey !== '.priority', 'Only non-priority child changes can be tracked.');
    const oldChange = this.changeMap.get(childKey);

    if (oldChange) {
      const oldType = oldChange.type;

      if (type === "child_added"
      /* CHILD_ADDED */
      && oldType === "child_removed"
      /* CHILD_REMOVED */
      ) {
        this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));
      } else if (type === "child_removed"
      /* CHILD_REMOVED */
      && oldType === "child_added"
      /* CHILD_ADDED */
      ) {
        this.changeMap.delete(childKey);
      } else if (type === "child_removed"
      /* CHILD_REMOVED */
      && oldType === "child_changed"
      /* CHILD_CHANGED */
      ) {
        this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));
      } else if (type === "child_changed"
      /* CHILD_CHANGED */
      && oldType === "child_added"
      /* CHILD_ADDED */
      ) {
        this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));
      } else if (type === "child_changed"
      /* CHILD_CHANGED */
      && oldType === "child_changed"
      /* CHILD_CHANGED */
      ) {
        this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));
      } else {
        throw (0, _util.assertionError)('Illegal combination of changes: ' + change + ' occurred after ' + oldChange);
      }
    } else {
      this.changeMap.set(childKey, change);
    }
  }

  getChanges() {
    return Array.from(this.changeMap.values());
  }

}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An implementation of CompleteChildSource that never returns any additional children
 */
// eslint-disable-next-line @typescript-eslint/naming-convention


class NoCompleteChildSource_ {
  getCompleteChild(childKey) {
    return null;
  }

  getChildAfterChild(index, child, reverse) {
    return null;
  }

}
/**
 * Singleton instance.
 */


const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();
/**
 * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or
 * old event caches available to calculate complete children.
 */

class WriteTreeCompleteChildSource {
  constructor(writes_, viewCache_, optCompleteServerCache_ = null) {
    this.writes_ = writes_;
    this.viewCache_ = viewCache_;
    this.optCompleteServerCache_ = optCompleteServerCache_;
  }

  getCompleteChild(childKey) {
    const node = this.viewCache_.eventCache;

    if (node.isCompleteForChild(childKey)) {
      return node.getNode().getImmediateChild(childKey);
    } else {
      const serverNode = this.optCompleteServerCache_ != null ? new CacheNode(this.optCompleteServerCache_, true, false) : this.viewCache_.serverCache;
      return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);
    }
  }

  getChildAfterChild(index, child, reverse) {
    const completeServerData = this.optCompleteServerCache_ != null ? this.optCompleteServerCache_ : viewCacheGetCompleteServerSnap(this.viewCache_);
    const nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);

    if (nodes.length === 0) {
      return null;
    } else {
      return nodes[0];
    }
  }

}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function newViewProcessor(filter) {
  return {
    filter
  };
}

function viewProcessorAssertIndexed(viewProcessor, viewCache) {
  (0, _util.assert)(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');
  (0, _util.assert)(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');
}

function viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {
  const accumulator = new ChildChangeAccumulator();
  let newViewCache, filterServerNode;

  if (operation.type === OperationType.OVERWRITE) {
    const overwrite = operation;

    if (overwrite.source.fromUser) {
      newViewCache = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);
    } else {
      (0, _util.assert)(overwrite.source.fromServer, 'Unknown source.'); // We filter the node if it's a tagged update or the node has been previously filtered  and the
      // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered
      // again

      filterServerNode = overwrite.source.tagged || oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path);
      newViewCache = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);
    }
  } else if (operation.type === OperationType.MERGE) {
    const merge = operation;

    if (merge.source.fromUser) {
      newViewCache = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);
    } else {
      (0, _util.assert)(merge.source.fromServer, 'Unknown source.'); // We filter the node if it's a tagged update or the node has been previously filtered

      filterServerNode = merge.source.tagged || oldViewCache.serverCache.isFiltered();
      newViewCache = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);
    }
  } else if (operation.type === OperationType.ACK_USER_WRITE) {
    const ackUserWrite = operation;

    if (!ackUserWrite.revert) {
      newViewCache = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);
    } else {
      newViewCache = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);
    }
  } else if (operation.type === OperationType.LISTEN_COMPLETE) {
    newViewCache = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);
  } else {
    throw (0, _util.assertionError)('Unknown operation type: ' + operation.type);
  }

  const changes = accumulator.getChanges();
  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);
  return {
    viewCache: newViewCache,
    changes
  };
}

function viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, accumulator) {
  const eventSnap = newViewCache.eventCache;

  if (eventSnap.isFullyInitialized()) {
    const isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();
    const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);

    if (accumulator.length > 0 || !oldViewCache.eventCache.isFullyInitialized() || isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap) || !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {
      accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));
    }
  }
}

function viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {
  const oldEventSnap = viewCache.eventCache;

  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {
    // we have a shadowing write, ignore changes
    return viewCache;
  } else {
    let newEventCache, serverNode;

    if (pathIsEmpty(changePath)) {
      // TODO: figure out how this plays with "sliding ack windows"
      (0, _util.assert)(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');

      if (viewCache.serverCache.isFiltered()) {
        // We need to special case this, because we need to only apply writes to complete children, or
        // we might end up raising events for incomplete children. If the server data is filtered deep
        // writes cannot be guaranteed to be complete
        const serverCache = viewCacheGetCompleteServerSnap(viewCache);
        const completeChildren = serverCache instanceof ChildrenNode ? serverCache : ChildrenNode.EMPTY_NODE;
        const completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);
        newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);
      } else {
        const completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));
        newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);
      }
    } else {
      const childKey = pathGetFront(changePath);

      if (childKey === '.priority') {
        (0, _util.assert)(pathGetLength(changePath) === 1, "Can't have a priority with additional path components");
        const oldEventNode = oldEventSnap.getNode();
        serverNode = viewCache.serverCache.getNode(); // we might have overwrites for this priority

        const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);

        if (updatedPriority != null) {
          newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);
        } else {
          // priority didn't change, keep old node
          newEventCache = oldEventSnap.getNode();
        }
      } else {
        const childChangePath = pathPopFront(changePath); // update child

        let newEventChild;

        if (oldEventSnap.isCompleteForChild(childKey)) {
          serverNode = viewCache.serverCache.getNode();
          const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);

          if (eventChildUpdate != null) {
            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey).updateChild(childChangePath, eventChildUpdate);
          } else {
            // Nothing changed, just keep the old child
            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);
          }
        } else {
          newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);
        }

        if (newEventChild != null) {
          newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);
        } else {
          // no complete child available or no change
          newEventCache = oldEventSnap.getNode();
        }
      }
    }

    return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());
  }
}

function viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {
  const oldServerSnap = oldViewCache.serverCache;
  let newServerCache;
  const serverFilter = filterServerNode ? viewProcessor.filter : viewProcessor.filter.getIndexedFilter();

  if (pathIsEmpty(changePath)) {
    newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);
  } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {
    // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update
    const newServerNode = oldServerSnap.getNode().updateChild(changePath, changedSnap);
    newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);
  } else {
    const childKey = pathGetFront(changePath);

    if (!oldServerSnap.isCompleteForPath(changePath) && pathGetLength(changePath) > 1) {
      // We don't update incomplete nodes with updates intended for other listeners
      return oldViewCache;
    }

    const childChangePath = pathPopFront(changePath);
    const childNode = oldServerSnap.getNode().getImmediateChild(childKey);
    const newChildNode = childNode.updateChild(childChangePath, changedSnap);

    if (childKey === '.priority') {
      newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);
    } else {
      newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);
    }
  }

  const newViewCache = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());
  const source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);
  return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, changePath, writesCache, source, accumulator);
}

function viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {
  const oldEventSnap = oldViewCache.eventCache;
  let newViewCache, newEventCache;
  const source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);

  if (pathIsEmpty(changePath)) {
    newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);
    newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());
  } else {
    const childKey = pathGetFront(changePath);

    if (childKey === '.priority') {
      newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);
      newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());
    } else {
      const childChangePath = pathPopFront(changePath);
      const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);
      let newChild;

      if (pathIsEmpty(childChangePath)) {
        // Child overwrite, we can replace the child
        newChild = changedSnap;
      } else {
        const childNode = source.getCompleteChild(childKey);

        if (childNode != null) {
          if (pathGetBack(childChangePath) === '.priority' && childNode.getChild(pathParent(childChangePath)).isEmpty()) {
            // This is a priority update on an empty node. If this node exists on the server, the
            // server will send down the priority in the update, so ignore for now
            newChild = childNode;
          } else {
            newChild = childNode.updateChild(childChangePath, changedSnap);
          }
        } else {
          // There is no complete child node available
          newChild = ChildrenNode.EMPTY_NODE;
        }
      }

      if (!oldChild.equals(newChild)) {
        const newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);
        newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());
      } else {
        newViewCache = oldViewCache;
      }
    }
  }

  return newViewCache;
}

function viewProcessorCacheHasChild(viewCache, childKey) {
  return viewCache.eventCache.isCompleteForChild(childKey);
}

function viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {
  // HACK: In the case of a limit query, there may be some changes that bump things out of the
  // window leaving room for new items.  It's important we process these changes first, so we
  // iterate the changes twice, first processing any that affect items currently in view.
  // TODO: I consider an item "in view" if cacheHasChild is true, which checks both the server
  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but
  // not the other.
  let curViewCache = viewCache;
  changedChildren.foreach((relativePath, childNode) => {
    const writePath = pathChild(path, relativePath);

    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {
      curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);
    }
  });
  changedChildren.foreach((relativePath, childNode) => {
    const writePath = pathChild(path, relativePath);

    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {
      curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);
    }
  });
  return curViewCache;
}

function viewProcessorApplyMerge(viewProcessor, node, merge) {
  merge.foreach((relativePath, childNode) => {
    node = node.updateChild(relativePath, childNode);
  });
  return node;
}

function viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {
  // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and
  // wait for the complete data update coming soon.
  if (viewCache.serverCache.getNode().isEmpty() && !viewCache.serverCache.isFullyInitialized()) {
    return viewCache;
  } // HACK: In the case of a limit query, there may be some changes that bump things out of the
  // window leaving room for new items.  It's important we process these changes first, so we
  // iterate the changes twice, first processing any that affect items currently in view.
  // TODO: I consider an item "in view" if cacheHasChild is true, which checks both the server
  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but
  // not the other.


  let curViewCache = viewCache;
  let viewMergeTree;

  if (pathIsEmpty(path)) {
    viewMergeTree = changedChildren;
  } else {
    viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);
  }

  const serverNode = viewCache.serverCache.getNode();
  viewMergeTree.children.inorderTraversal((childKey, childTree) => {
    if (serverNode.hasChild(childKey)) {
      const serverChild = viewCache.serverCache.getNode().getImmediateChild(childKey);
      const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);
      curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);
    }
  });
  viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {
    const isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) && childMergeTree.value === undefined;

    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {
      const serverChild = viewCache.serverCache.getNode().getImmediateChild(childKey);
      const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);
      curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);
    }
  });
  return curViewCache;
}

function viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {
  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {
    return viewCache;
  } // Only filter server node if it is currently filtered


  const filterServerNode = viewCache.serverCache.isFiltered(); // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update
  // now that it won't be shadowed.

  const serverCache = viewCache.serverCache;

  if (affectedTree.value != null) {
    // This is an overwrite.
    if (pathIsEmpty(ackPath) && serverCache.isFullyInitialized() || serverCache.isCompleteForPath(ackPath)) {
      return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);
    } else if (pathIsEmpty(ackPath)) {
      // This is a goofy edge case where we are acking data at this location but don't have full data.  We
      // should just re-apply whatever we have in our cache as a merge.
      let changedChildren = new ImmutableTree(null);
      serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {
        changedChildren = changedChildren.set(new Path(name), node);
      });
      return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);
    } else {
      return viewCache;
    }
  } else {
    // This is a merge.
    let changedChildren = new ImmutableTree(null);
    affectedTree.foreach((mergePath, value) => {
      const serverCachePath = pathChild(ackPath, mergePath);

      if (serverCache.isCompleteForPath(serverCachePath)) {
        changedChildren = changedChildren.set(mergePath, serverCache.getNode().getChild(serverCachePath));
      }
    });
    return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);
  }
}

function viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {
  const oldServerNode = viewCache.serverCache;
  const newViewCache = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());
  return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);
}

function viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {
  let complete;

  if (writeTreeRefShadowingWrite(writesCache, path) != null) {
    return viewCache;
  } else {
    const source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);
    const oldEventCache = viewCache.eventCache.getNode();
    let newEventCache;

    if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {
      let newNode;

      if (viewCache.serverCache.isFullyInitialized()) {
        newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));
      } else {
        const serverChildren = viewCache.serverCache.getNode();
        (0, _util.assert)(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');
        newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);
      }

      newNode = newNode;
      newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);
    } else {
      const childKey = pathGetFront(path);
      let newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);

      if (newChild == null && viewCache.serverCache.isCompleteForChild(childKey)) {
        newChild = oldEventCache.getImmediateChild(childKey);
      }

      if (newChild != null) {
        newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);
      } else if (viewCache.eventCache.getNode().hasChild(childKey)) {
        // No complete child available, delete the existing one, if any
        newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);
      } else {
        newEventCache = oldEventCache;
      }

      if (newEventCache.isEmpty() && viewCache.serverCache.isFullyInitialized()) {
        // We might have reverted all child writes. Maybe the old event was a leaf node
        complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));

        if (complete.isLeafNode()) {
          newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);
        }
      }
    }

    complete = viewCache.serverCache.isFullyInitialized() || writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;
    return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A view represents a specific location and query that has 1 or more event registrations.
 *
 * It does several things:
 *  - Maintains the list of event registrations for this location/query.
 *  - Maintains a cache of the data visible for this location/query.
 *  - Applies new operations (via applyOperation), updates the cache, and based on the event
 *    registrations returns the set of events to be raised.
 */


class View {
  constructor(query_, initialViewCache) {
    this.query_ = query_;
    this.eventRegistrations_ = [];
    const params = this.query_._queryParams;
    const indexFilter = new IndexedFilter(params.getIndex());
    const filter = queryParamsGetNodeFilter(params);
    this.processor_ = newViewProcessor(filter);
    const initialServerCache = initialViewCache.serverCache;
    const initialEventCache = initialViewCache.eventCache; // Don't filter server node with other filter than index, wait for tagged listen

    const serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);
    const eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);
    const newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());
    const newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());
    this.viewCache_ = newViewCache(newEventCache, newServerCache);
    this.eventGenerator_ = new EventGenerator(this.query_);
  }

  get query() {
    return this.query_;
  }

}

function viewGetServerCache(view) {
  return view.viewCache_.serverCache.getNode();
}

function viewGetCompleteNode(view) {
  return viewCacheGetCompleteEventSnap(view.viewCache_);
}

function viewGetCompleteServerCache(view, path) {
  const cache = viewCacheGetCompleteServerSnap(view.viewCache_);

  if (cache) {
    // If this isn't a "loadsAllData" view, then cache isn't actually a complete cache and
    // we need to see if it contains the child we're interested in.
    if (view.query._queryParams.loadsAllData() || !pathIsEmpty(path) && !cache.getImmediateChild(pathGetFront(path)).isEmpty()) {
      return cache.getChild(path);
    }
  }

  return null;
}

function viewIsEmpty(view) {
  return view.eventRegistrations_.length === 0;
}

function viewAddEventRegistration(view, eventRegistration) {
  view.eventRegistrations_.push(eventRegistration);
}
/**
 * @param eventRegistration - If null, remove all callbacks.
 * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.
 * @returns Cancel events, if cancelError was provided.
 */


function viewRemoveEventRegistration(view, eventRegistration, cancelError) {
  const cancelEvents = [];

  if (cancelError) {
    (0, _util.assert)(eventRegistration == null, 'A cancel should cancel all event registrations.');
    const path = view.query._path;
    view.eventRegistrations_.forEach(registration => {
      const maybeEvent = registration.createCancelEvent(cancelError, path);

      if (maybeEvent) {
        cancelEvents.push(maybeEvent);
      }
    });
  }

  if (eventRegistration) {
    let remaining = [];

    for (let i = 0; i < view.eventRegistrations_.length; ++i) {
      const existing = view.eventRegistrations_[i];

      if (!existing.matches(eventRegistration)) {
        remaining.push(existing);
      } else if (eventRegistration.hasAnyCallback()) {
        // We're removing just this one
        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));
        break;
      }
    }

    view.eventRegistrations_ = remaining;
  } else {
    view.eventRegistrations_ = [];
  }

  return cancelEvents;
}
/**
 * Applies the given Operation, updates our cache, and returns the appropriate events.
 */


function viewApplyOperation(view, operation, writesCache, completeServerCache) {
  if (operation.type === OperationType.MERGE && operation.source.queryId !== null) {
    (0, _util.assert)(viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');
    (0, _util.assert)(viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');
  }

  const oldViewCache = view.viewCache_;
  const result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);
  viewProcessorAssertIndexed(view.processor_, result.viewCache);
  (0, _util.assert)(result.viewCache.serverCache.isFullyInitialized() || !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');
  view.viewCache_ = result.viewCache;
  return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);
}

function viewGetInitialEvents(view, registration) {
  const eventSnap = view.viewCache_.eventCache;
  const initialChanges = [];

  if (!eventSnap.getNode().isLeafNode()) {
    const eventNode = eventSnap.getNode();
    eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {
      initialChanges.push(changeChildAdded(key, childNode));
    });
  }

  if (eventSnap.isFullyInitialized()) {
    initialChanges.push(changeValue(eventSnap.getNode()));
  }

  return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);
}

function viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {
  const registrations = eventRegistration ? [eventRegistration] : view.eventRegistrations_;
  return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


let referenceConstructor$1;
/**
 * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to
 * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes
 * and user writes (set, transaction, update).
 *
 * It's responsible for:
 *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).
 *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,
 *    applyUserOverwrite, etc.)
 */

class SyncPoint {
  constructor() {
    /**
     * The Views being tracked at this location in the tree, stored as a map where the key is a
     * queryId and the value is the View for that query.
     *
     * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).
     */
    this.views = new Map();
  }

}

function syncPointSetReferenceConstructor(val) {
  (0, _util.assert)(!referenceConstructor$1, '__referenceConstructor has already been defined');
  referenceConstructor$1 = val;
}

function syncPointGetReferenceConstructor() {
  (0, _util.assert)(referenceConstructor$1, 'Reference.ts has not been loaded');
  return referenceConstructor$1;
}

function syncPointIsEmpty(syncPoint) {
  return syncPoint.views.size === 0;
}

function syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {
  const queryId = operation.source.queryId;

  if (queryId !== null) {
    const view = syncPoint.views.get(queryId);
    (0, _util.assert)(view != null, 'SyncTree gave us an op for an invalid query.');
    return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);
  } else {
    let events = [];

    for (const view of syncPoint.views.values()) {
      events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));
    }

    return events;
  }
}
/**
 * Get a view for the specified query.
 *
 * @param query - The query to return a view for
 * @param writesCache
 * @param serverCache
 * @param serverCacheComplete
 * @returns Events to raise.
 */


function syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {
  const queryId = query._queryIdentifier;
  const view = syncPoint.views.get(queryId);

  if (!view) {
    // TODO: make writesCache take flag for complete server node
    let eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);
    let eventCacheComplete = false;

    if (eventCache) {
      eventCacheComplete = true;
    } else if (serverCache instanceof ChildrenNode) {
      eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);
      eventCacheComplete = false;
    } else {
      eventCache = ChildrenNode.EMPTY_NODE;
      eventCacheComplete = false;
    }

    const viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));
    return new View(query, viewCache);
  }

  return view;
}
/**
 * Add an event callback for the specified query.
 *
 * @param query
 * @param eventRegistration
 * @param writesCache
 * @param serverCache - Complete server cache, if we have it.
 * @param serverCacheComplete
 * @returns Events to raise.
 */


function syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {
  const view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);

  if (!syncPoint.views.has(query._queryIdentifier)) {
    syncPoint.views.set(query._queryIdentifier, view);
  } // This is guaranteed to exist now, we just created anything that was missing


  viewAddEventRegistration(view, eventRegistration);
  return viewGetInitialEvents(view, eventRegistration);
}
/**
 * Remove event callback(s).  Return cancelEvents if a cancelError is specified.
 *
 * If query is the default query, we'll check all views for the specified eventRegistration.
 * If eventRegistration is null, we'll remove all callbacks for the specified view(s).
 *
 * @param eventRegistration - If null, remove all callbacks.
 * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.
 * @returns removed queries and any cancel events
 */


function syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {
  const queryId = query._queryIdentifier;
  const removed = [];
  let cancelEvents = [];
  const hadCompleteView = syncPointHasCompleteView(syncPoint);

  if (queryId === 'default') {
    // When you do ref.off(...), we search all views for the registration to remove.
    for (const [viewQueryId, view] of syncPoint.views.entries()) {
      cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));

      if (viewIsEmpty(view)) {
        syncPoint.views.delete(viewQueryId); // We'll deal with complete views later.

        if (!view.query._queryParams.loadsAllData()) {
          removed.push(view.query);
        }
      }
    }
  } else {
    // remove the callback from the specific view.
    const view = syncPoint.views.get(queryId);

    if (view) {
      cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));

      if (viewIsEmpty(view)) {
        syncPoint.views.delete(queryId); // We'll deal with complete views later.

        if (!view.query._queryParams.loadsAllData()) {
          removed.push(view.query);
        }
      }
    }
  }

  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {
    // We removed our last complete view.
    removed.push(new (syncPointGetReferenceConstructor())(query._repo, query._path));
  }

  return {
    removed,
    events: cancelEvents
  };
}

function syncPointGetQueryViews(syncPoint) {
  const result = [];

  for (const view of syncPoint.views.values()) {
    if (!view.query._queryParams.loadsAllData()) {
      result.push(view);
    }
  }

  return result;
}
/**
 * @param path - The path to the desired complete snapshot
 * @returns A complete cache, if it exists
 */


function syncPointGetCompleteServerCache(syncPoint, path) {
  let serverCache = null;

  for (const view of syncPoint.views.values()) {
    serverCache = serverCache || viewGetCompleteServerCache(view, path);
  }

  return serverCache;
}

function syncPointViewForQuery(syncPoint, query) {
  const params = query._queryParams;

  if (params.loadsAllData()) {
    return syncPointGetCompleteView(syncPoint);
  } else {
    const queryId = query._queryIdentifier;
    return syncPoint.views.get(queryId);
  }
}

function syncPointViewExistsForQuery(syncPoint, query) {
  return syncPointViewForQuery(syncPoint, query) != null;
}

function syncPointHasCompleteView(syncPoint) {
  return syncPointGetCompleteView(syncPoint) != null;
}

function syncPointGetCompleteView(syncPoint) {
  for (const view of syncPoint.views.values()) {
    if (view.query._queryParams.loadsAllData()) {
      return view;
    }
  }

  return null;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


let referenceConstructor;

function syncTreeSetReferenceConstructor(val) {
  (0, _util.assert)(!referenceConstructor, '__referenceConstructor has already been defined');
  referenceConstructor = val;
}

function syncTreeGetReferenceConstructor() {
  (0, _util.assert)(referenceConstructor, 'Reference.ts has not been loaded');
  return referenceConstructor;
}
/**
 * Static tracker for next query tag.
 */


let syncTreeNextQueryTag_ = 1;
/**
 * SyncTree is the central class for managing event callback registration, data caching, views
 * (query processing), and event generation.  There are typically two SyncTree instances for
 * each Repo, one for the normal Firebase data, and one for the .info data.
 *
 * It has a number of responsibilities, including:
 *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).
 *  - Applying and caching data changes for user set(), transaction(), and update() calls
 *    (applyUserOverwrite(), applyUserMerge()).
 *  - Applying and caching data changes for server data changes (applyServerOverwrite(),
 *    applyServerMerge()).
 *  - Generating user-facing events for server and user changes (all of the apply* methods
 *    return the set of events that need to be raised as a result).
 *  - Maintaining the appropriate set of server listens to ensure we are always subscribed
 *    to the correct set of paths and queries to satisfy the current set of user event
 *    callbacks (listens are started/stopped using the provided listenProvider).
 *
 * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual
 * events are returned to the caller rather than raised synchronously.
 *
 */

class SyncTree {
  /**
   * @param listenProvider_ - Used by SyncTree to start / stop listening
   *   to server data.
   */
  constructor(listenProvider_) {
    this.listenProvider_ = listenProvider_;
    /**
     * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.
     */

    this.syncPointTree_ = new ImmutableTree(null);
    /**
     * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).
     */

    this.pendingWriteTree_ = newWriteTree();
    this.tagToQueryMap = new Map();
    this.queryToTagMap = new Map();
  }

}
/**
 * Apply the data changes for a user-generated set() or transaction() call.
 *
 * @returns Events to raise.
 */


function syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {
  // Record pending write.
  writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);

  if (!visible) {
    return [];
  } else {
    return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));
  }
}
/**
 * Apply the data from a user-generated update() call
 *
 * @returns Events to raise.
 */


function syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {
  // Record pending merge.
  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);
  const changeTree = ImmutableTree.fromObject(changedChildren);
  return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));
}
/**
 * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().
 *
 * @param revert - True if the given write failed and needs to be reverted
 * @returns Events to raise.
 */


function syncTreeAckUserWrite(syncTree, writeId, revert = false) {
  const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);
  const needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);

  if (!needToReevaluate) {
    return [];
  } else {
    let affectedTree = new ImmutableTree(null);

    if (write.snap != null) {
      // overwrite
      affectedTree = affectedTree.set(newEmptyPath(), true);
    } else {
      each(write.children, pathString => {
        affectedTree = affectedTree.set(new Path(pathString), true);
      });
    }

    return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree, revert));
  }
}
/**
 * Apply new server data for the specified path..
 *
 * @returns Events to raise.
 */


function syncTreeApplyServerOverwrite(syncTree, path, newData) {
  return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));
}
/**
 * Apply new server data to be merged in at the specified path.
 *
 * @returns Events to raise.
 */


function syncTreeApplyServerMerge(syncTree, path, changedChildren) {
  const changeTree = ImmutableTree.fromObject(changedChildren);
  return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));
}
/**
 * Apply a listen complete for a query
 *
 * @returns Events to raise.
 */


function syncTreeApplyListenComplete(syncTree, path) {
  return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));
}
/**
 * Apply a listen complete for a tagged query
 *
 * @returns Events to raise.
 */


function syncTreeApplyTaggedListenComplete(syncTree, path, tag) {
  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);

  if (queryKey) {
    const r = syncTreeParseQueryKey_(queryKey);
    const queryPath = r.path,
          queryId = r.queryId;
    const relativePath = newRelativePath(queryPath, path);
    const op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);
    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);
  } else {
    // We've already removed the query. No big deal, ignore the update
    return [];
  }
}
/**
 * Remove event callback(s).
 *
 * If query is the default query, we'll check all queries for the specified eventRegistration.
 * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.
 *
 * @param eventRegistration - If null, all callbacks are removed.
 * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.
 * @returns Cancel events, if cancelError was provided.
 */


function syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError) {
  // Find the syncPoint first. Then deal with whether or not it has matching listeners
  const path = query._path;
  const maybeSyncPoint = syncTree.syncPointTree_.get(path);
  let cancelEvents = []; // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without
  // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and
  // not loadsAllData().

  if (maybeSyncPoint && (query._queryIdentifier === 'default' || syncPointViewExistsForQuery(maybeSyncPoint, query))) {
    const removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);

    if (syncPointIsEmpty(maybeSyncPoint)) {
      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);
    }

    const removed = removedAndEvents.removed;
    cancelEvents = removedAndEvents.events; // We may have just removed one of many listeners and can short-circuit this whole process
    // We may also not have removed a default listener, in which case all of the descendant listeners should already be
    // properly set up.
    //
    // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of
    // queryId === 'default'

    const removingDefault = -1 !== removed.findIndex(query => {
      return query._queryParams.loadsAllData();
    });
    const covered = syncTree.syncPointTree_.findOnPath(path, (relativePath, parentSyncPoint) => syncPointHasCompleteView(parentSyncPoint));

    if (removingDefault && !covered) {
      const subtree = syncTree.syncPointTree_.subtree(path); // There are potentially child listeners. Determine what if any listens we need to send before executing the
      // removal

      if (!subtree.isEmpty()) {
        // We need to fold over our subtree and collect the listeners to send
        const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree); // Ok, we've collected all the listens we need. Set them up.

        for (let i = 0; i < newViews.length; ++i) {
          const view = newViews[i],
                newQuery = view.query;
          const listener = syncTreeCreateListenerForView_(syncTree, view);
          syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery_(syncTree, newQuery), listener.hashFn, listener.onComplete);
        }
      }
    } // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query
    // The above block has us covered in terms of making sure we're set up on listens lower in the tree.
    // Also, note that if we have a cancelError, it's already been removed at the provider level.


    if (!covered && removed.length > 0 && !cancelError) {
      // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one
      // default. Otherwise, we need to iterate through and cancel each individual query
      if (removingDefault) {
        // We don't tag default listeners
        const defaultTag = null;
        syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query), defaultTag);
      } else {
        removed.forEach(queryToRemove => {
          const tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));
          syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);
        });
      }
    } // Now, clear all of the tags we're tracking for the removed listens


    syncTreeRemoveTags_(syncTree, removed);
  }

  return cancelEvents;
}
/**
 * Apply new server data for the specified tagged query.
 *
 * @returns Events to raise.
 */


function syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {
  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);

  if (queryKey != null) {
    const r = syncTreeParseQueryKey_(queryKey);
    const queryPath = r.path,
          queryId = r.queryId;
    const relativePath = newRelativePath(queryPath, path);
    const op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);
    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);
  } else {
    // Query must have been removed already
    return [];
  }
}
/**
 * Apply server data to be merged in for the specified tagged query.
 *
 * @returns Events to raise.
 */


function syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {
  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);

  if (queryKey) {
    const r = syncTreeParseQueryKey_(queryKey);
    const queryPath = r.path,
          queryId = r.queryId;
    const relativePath = newRelativePath(queryPath, path);
    const changeTree = ImmutableTree.fromObject(changedChildren);
    const op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);
    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);
  } else {
    // We've already removed the query. No big deal, ignore the update
    return [];
  }
}
/**
 * Add an event callback for the specified query.
 *
 * @returns Events to raise.
 */


function syncTreeAddEventRegistration(syncTree, query, eventRegistration) {
  const path = query._path;
  let serverCache = null;
  let foundAncestorDefaultView = false; // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.
  // Consider optimizing this once there's a better understanding of what actual behavior will be.

  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {
    const relativePath = newRelativePath(pathToSyncPoint, path);
    serverCache = serverCache || syncPointGetCompleteServerCache(sp, relativePath);
    foundAncestorDefaultView = foundAncestorDefaultView || syncPointHasCompleteView(sp);
  });
  let syncPoint = syncTree.syncPointTree_.get(path);

  if (!syncPoint) {
    syncPoint = new SyncPoint();
    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);
  } else {
    foundAncestorDefaultView = foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);
    serverCache = serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());
  }

  let serverCacheComplete;

  if (serverCache != null) {
    serverCacheComplete = true;
  } else {
    serverCacheComplete = false;
    serverCache = ChildrenNode.EMPTY_NODE;
    const subtree = syncTree.syncPointTree_.subtree(path);
    subtree.foreachChild((childName, childSyncPoint) => {
      const completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());

      if (completeCache) {
        serverCache = serverCache.updateImmediateChild(childName, completeCache);
      }
    });
  }

  const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);

  if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {
    // We need to track a tag for this query
    const queryKey = syncTreeMakeQueryKey_(query);
    (0, _util.assert)(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');
    const tag = syncTreeGetNextQueryTag_();
    syncTree.queryToTagMap.set(queryKey, tag);
    syncTree.tagToQueryMap.set(tag, queryKey);
  }

  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);
  let events = syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);

  if (!viewAlreadyExists && !foundAncestorDefaultView) {
    const view = syncPointViewForQuery(syncPoint, query);
    events = events.concat(syncTreeSetupListener_(syncTree, query, view));
  }

  return events;
}
/**
 * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a
 * listener above it, we will get a false "null". This shouldn't be a problem because transactions will always
 * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->
 *     <incremented total> as the write is applied locally and then acknowledged at the server.
 *
 * Note: this method will *include* hidden writes from transaction with applyLocally set to false.
 *
 * @param path - The path to the data we want
 * @param writeIdsToExclude - A specific set to be excluded
 */


function syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {
  const includeHiddenSets = true;
  const writeTree = syncTree.pendingWriteTree_;
  const serverCache = syncTree.syncPointTree_.findOnPath(path, (pathSoFar, syncPoint) => {
    const relativePath = newRelativePath(pathSoFar, path);
    const serverCache = syncPointGetCompleteServerCache(syncPoint, relativePath);

    if (serverCache) {
      return serverCache;
    }
  });
  return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);
}

function syncTreeGetServerValue(syncTree, query) {
  const path = query._path;
  let serverCache = null; // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.
  // Consider optimizing this once there's a better understanding of what actual behavior will be.

  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {
    const relativePath = newRelativePath(pathToSyncPoint, path);
    serverCache = serverCache || syncPointGetCompleteServerCache(sp, relativePath);
  });
  let syncPoint = syncTree.syncPointTree_.get(path);

  if (!syncPoint) {
    syncPoint = new SyncPoint();
    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);
  } else {
    serverCache = serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());
  }

  const serverCacheComplete = serverCache != null;
  const serverCacheNode = serverCacheComplete ? new CacheNode(serverCache, true, false) : null;
  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);
  const view = syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);
  return viewGetCompleteNode(view);
}
/**
 * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.
 *
 * NOTES:
 * - Descendant SyncPoints will be visited first (since we raise events depth-first).
 *
 * - We call applyOperation() on each SyncPoint passing three things:
 *   1. A version of the Operation that has been made relative to the SyncPoint location.
 *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.
 *   3. A snapshot Node with cached server data, if we have it.
 *
 * - We concatenate all of the events returned by each SyncPoint and return the result.
 */


function syncTreeApplyOperationToSyncPoints_(syncTree, operation) {
  return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_,
  /*serverCache=*/
  null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));
}
/**
 * Recursive helper for applyOperationToSyncPoints_
 */


function syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {
  if (pathIsEmpty(operation.path)) {
    return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);
  } else {
    const syncPoint = syncPointTree.get(newEmptyPath()); // If we don't have cached server data, see if we can get it from this SyncPoint.

    if (serverCache == null && syncPoint != null) {
      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());
    }

    let events = [];
    const childName = pathGetFront(operation.path);
    const childOperation = operation.operationForChild(childName);
    const childTree = syncPointTree.children.get(childName);

    if (childTree && childOperation) {
      const childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;
      const childWritesCache = writeTreeRefChild(writesCache, childName);
      events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));
    }

    if (syncPoint) {
      events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));
    }

    return events;
  }
}
/**
 * Recursive helper for applyOperationToSyncPoints_
 */


function syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {
  const syncPoint = syncPointTree.get(newEmptyPath()); // If we don't have cached server data, see if we can get it from this SyncPoint.

  if (serverCache == null && syncPoint != null) {
    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());
  }

  let events = [];
  syncPointTree.children.inorderTraversal((childName, childTree) => {
    const childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;
    const childWritesCache = writeTreeRefChild(writesCache, childName);
    const childOperation = operation.operationForChild(childName);

    if (childOperation) {
      events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));
    }
  });

  if (syncPoint) {
    events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));
  }

  return events;
}

function syncTreeCreateListenerForView_(syncTree, view) {
  const query = view.query;
  const tag = syncTreeTagForQuery_(syncTree, query);
  return {
    hashFn: () => {
      const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;
      return cache.hash();
    },
    onComplete: status => {
      if (status === 'ok') {
        if (tag) {
          return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);
        } else {
          return syncTreeApplyListenComplete(syncTree, query._path);
        }
      } else {
        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.
        // Note that this may need to be scoped to just this listener if we change permissions on filtered children
        const error = errorForServerCode(status, query);
        return syncTreeRemoveEventRegistration(syncTree, query,
        /*eventRegistration*/
        null, error);
      }
    }
  };
}
/**
 * Return the tag associated with the given query.
 */


function syncTreeTagForQuery_(syncTree, query) {
  const queryKey = syncTreeMakeQueryKey_(query);
  return syncTree.queryToTagMap.get(queryKey);
}
/**
 * Given a query, computes a "queryKey" suitable for use in our queryToTagMap_.
 */


function syncTreeMakeQueryKey_(query) {
  return query._path.toString() + '$' + query._queryIdentifier;
}
/**
 * Return the query associated with the given tag, if we have one
 */


function syncTreeQueryKeyForTag_(syncTree, tag) {
  return syncTree.tagToQueryMap.get(tag);
}
/**
 * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.
 */


function syncTreeParseQueryKey_(queryKey) {
  const splitIndex = queryKey.indexOf('$');
  (0, _util.assert)(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');
  return {
    queryId: queryKey.substr(splitIndex + 1),
    path: new Path(queryKey.substr(0, splitIndex))
  };
}
/**
 * A helper method to apply tagged operations
 */


function syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {
  const syncPoint = syncTree.syncPointTree_.get(queryPath);
  (0, _util.assert)(syncPoint, "Missing sync point for query tag that we're tracking");
  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);
  return syncPointApplyOperation(syncPoint, operation, writesCache, null);
}
/**
 * This collapses multiple unfiltered views into a single view, since we only need a single
 * listener for them.
 */


function syncTreeCollectDistinctViewsForSubTree_(subtree) {
  return subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {
    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {
      const completeView = syncPointGetCompleteView(maybeChildSyncPoint);
      return [completeView];
    } else {
      // No complete view here, flatten any deeper listens into an array
      let views = [];

      if (maybeChildSyncPoint) {
        views = syncPointGetQueryViews(maybeChildSyncPoint);
      }

      each(childMap, (_key, childViews) => {
        views = views.concat(childViews);
      });
      return views;
    }
  });
}
/**
 * Normalizes a query to a query we send the server for listening
 *
 * @returns The normalized query
 */


function syncTreeQueryForListening_(query) {
  if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {
    // We treat queries that load all data as default queries
    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits
    // from Query
    return new (syncTreeGetReferenceConstructor())(query._repo, query._path);
  } else {
    return query;
  }
}

function syncTreeRemoveTags_(syncTree, queries) {
  for (let j = 0; j < queries.length; ++j) {
    const removedQuery = queries[j];

    if (!removedQuery._queryParams.loadsAllData()) {
      // We should have a tag for this
      const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);
      const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);
      syncTree.queryToTagMap.delete(removedQueryKey);
      syncTree.tagToQueryMap.delete(removedQueryTag);
    }
  }
}
/**
 * Static accessor for query tags.
 */


function syncTreeGetNextQueryTag_() {
  return syncTreeNextQueryTag_++;
}
/**
 * For a given new listen, manage the de-duplication of outstanding subscriptions.
 *
 * @returns This method can return events to support synchronous data sources
 */


function syncTreeSetupListener_(syncTree, query, view) {
  const path = query._path;
  const tag = syncTreeTagForQuery_(syncTree, query);
  const listener = syncTreeCreateListenerForView_(syncTree, view);
  const events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);
  const subtree = syncTree.syncPointTree_.subtree(path); // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we
  // may need to shadow other listens as well.

  if (tag) {
    (0, _util.assert)(!syncPointHasCompleteView(subtree.value), "If we're adding a query, it shouldn't be shadowed");
  } else {
    // Shadow everything at or below this location, this is a default listener.
    const queriesToStop = subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {
      if (!pathIsEmpty(relativePath) && maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {
        return [syncPointGetCompleteView(maybeChildSyncPoint).query];
      } else {
        // No default listener here, flatten any deeper queries into an array
        let queries = [];

        if (maybeChildSyncPoint) {
          queries = queries.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(view => view.query));
        }

        each(childMap, (_key, childQueries) => {
          queries = queries.concat(childQueries);
        });
        return queries;
      }
    });

    for (let i = 0; i < queriesToStop.length; ++i) {
      const queryToStop = queriesToStop[i];
      syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery_(syncTree, queryToStop));
    }
  }

  return events;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


class ExistingValueProvider {
  constructor(node_) {
    this.node_ = node_;
  }

  getImmediateChild(childName) {
    const child = this.node_.getImmediateChild(childName);
    return new ExistingValueProvider(child);
  }

  node() {
    return this.node_;
  }

}

class DeferredValueProvider {
  constructor(syncTree, path) {
    this.syncTree_ = syncTree;
    this.path_ = path;
  }

  getImmediateChild(childName) {
    const childPath = pathChild(this.path_, childName);
    return new DeferredValueProvider(this.syncTree_, childPath);
  }

  node() {
    return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);
  }

}
/**
 * Generate placeholders for deferred values.
 */


const generateWithValues = function (values) {
  values = values || {};
  values['timestamp'] = values['timestamp'] || new Date().getTime();
  return values;
};
/**
 * Value to use when firing local events. When writing server values, fire
 * local events with an approximate value, otherwise return value as-is.
 */


const resolveDeferredLeafValue = function (value, existingVal, serverValues) {
  if (!value || typeof value !== 'object') {
    return value;
  }

  (0, _util.assert)('.sv' in value, 'Unexpected leaf node or priority contents');

  if (typeof value['.sv'] === 'string') {
    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);
  } else if (typeof value['.sv'] === 'object') {
    return resolveComplexDeferredValue(value['.sv'], existingVal);
  } else {
    (0, _util.assert)(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));
  }
};

const resolveScalarDeferredValue = function (op, existing, serverValues) {
  switch (op) {
    case 'timestamp':
      return serverValues['timestamp'];

    default:
      (0, _util.assert)(false, 'Unexpected server value: ' + op);
  }
};

const resolveComplexDeferredValue = function (op, existing, unused) {
  if (!op.hasOwnProperty('increment')) {
    (0, _util.assert)(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));
  }

  const delta = op['increment'];

  if (typeof delta !== 'number') {
    (0, _util.assert)(false, 'Unexpected increment value: ' + delta);
  }

  const existingNode = existing.node();
  (0, _util.assert)(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls'); // Incrementing a non-number sets the value to the incremented amount

  if (!existingNode.isLeafNode()) {
    return delta;
  }

  const leaf = existingNode;
  const existingVal = leaf.getValue();

  if (typeof existingVal !== 'number') {
    return delta;
  } // No need to do over/underflow arithmetic here because JS only handles floats under the covers


  return existingVal + delta;
};
/**
 * Recursively replace all deferred values and priorities in the tree with the
 * specified generated replacement values.
 * @param path - path to which write is relative
 * @param node - new data written at path
 * @param syncTree - current data
 */


const resolveDeferredValueTree = function (path, node, syncTree, serverValues) {
  return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);
};
/**
 * Recursively replace all deferred values and priorities in the node with the
 * specified generated replacement values.  If there are no server values in the node,
 * it'll be returned as-is.
 */


const resolveDeferredValueSnapshot = function (node, existing, serverValues) {
  return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);
};

function resolveDeferredValue(node, existingVal, serverValues) {
  const rawPri = node.getPriority().val();
  const priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);
  let newNode;

  if (node.isLeafNode()) {
    const leafNode = node;
    const value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);

    if (value !== leafNode.getValue() || priority !== leafNode.getPriority().val()) {
      return new LeafNode(value, nodeFromJSON(priority));
    } else {
      return node;
    }
  } else {
    const childrenNode = node;
    newNode = childrenNode;

    if (priority !== childrenNode.getPriority().val()) {
      newNode = newNode.updatePriority(new LeafNode(priority));
    }

    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {
      const newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);

      if (newChildNode !== childNode) {
        newNode = newNode.updateImmediateChild(childName, newChildNode);
      }
    });
    return newNode;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A light-weight tree, traversable by path.  Nodes can have both values and children.
 * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty
 * children.
 */


class Tree {
  /**
   * @param name - Optional name of the node.
   * @param parent - Optional parent node.
   * @param node - Optional node to wrap.
   */
  constructor(name = '', parent = null, node = {
    children: {},
    childCount: 0
  }) {
    this.name = name;
    this.parent = parent;
    this.node = node;
  }

}
/**
 * Returns a sub-Tree for the given path.
 *
 * @param pathObj - Path to look up.
 * @returns Tree for path.
 */


function treeSubTree(tree, pathObj) {
  // TODO: Require pathObj to be Path?
  let path = pathObj instanceof Path ? pathObj : new Path(pathObj);
  let child = tree,
      next = pathGetFront(path);

  while (next !== null) {
    const childNode = (0, _util.safeGet)(child.node.children, next) || {
      children: {},
      childCount: 0
    };
    child = new Tree(next, child, childNode);
    path = pathPopFront(path);
    next = pathGetFront(path);
  }

  return child;
}
/**
 * Returns the data associated with this tree node.
 *
 * @returns The data or null if no data exists.
 */


function treeGetValue(tree) {
  return tree.node.value;
}
/**
 * Sets data to this tree node.
 *
 * @param value - Value to set.
 */


function treeSetValue(tree, value) {
  tree.node.value = value;
  treeUpdateParents(tree);
}
/**
 * @returns Whether the tree has any children.
 */


function treeHasChildren(tree) {
  return tree.node.childCount > 0;
}
/**
 * @returns Whethe rthe tree is empty (no value or children).
 */


function treeIsEmpty(tree) {
  return treeGetValue(tree) === undefined && !treeHasChildren(tree);
}
/**
 * Calls action for each child of this tree node.
 *
 * @param action - Action to be called for each child.
 */


function treeForEachChild(tree, action) {
  each(tree.node.children, (child, childTree) => {
    action(new Tree(child, tree, childTree));
  });
}
/**
 * Does a depth-first traversal of this node's descendants, calling action for each one.
 *
 * @param action - Action to be called for each child.
 * @param includeSelf - Whether to call action on this node as well. Defaults to
 *   false.
 * @param childrenFirst - Whether to call action on children before calling it on
 *   parent.
 */


function treeForEachDescendant(tree, action, includeSelf, childrenFirst) {
  if (includeSelf && !childrenFirst) {
    action(tree);
  }

  treeForEachChild(tree, child => {
    treeForEachDescendant(child, action, true, childrenFirst);
  });

  if (includeSelf && childrenFirst) {
    action(tree);
  }
}
/**
 * Calls action on each ancestor node.
 *
 * @param action - Action to be called on each parent; return
 *   true to abort.
 * @param includeSelf - Whether to call action on this node as well.
 * @returns true if the action callback returned true.
 */


function treeForEachAncestor(tree, action, includeSelf) {
  let node = includeSelf ? tree : tree.parent;

  while (node !== null) {
    if (action(node)) {
      return true;
    }

    node = node.parent;
  }

  return false;
}
/**
 * @returns The path of this tree node, as a Path.
 */


function treeGetPath(tree) {
  return new Path(tree.parent === null ? tree.name : treeGetPath(tree.parent) + '/' + tree.name);
}
/**
 * Adds or removes this child from its parent based on whether it's empty or not.
 */


function treeUpdateParents(tree) {
  if (tree.parent !== null) {
    treeUpdateChild(tree.parent, tree.name, tree);
  }
}
/**
 * Adds or removes the passed child to this tree node, depending on whether it's empty.
 *
 * @param childName - The name of the child to update.
 * @param child - The child to update.
 */


function treeUpdateChild(tree, childName, child) {
  const childEmpty = treeIsEmpty(child);
  const childExists = (0, _util.contains)(tree.node.children, childName);

  if (childEmpty && childExists) {
    delete tree.node.children[childName];
    tree.node.childCount--;
    treeUpdateParents(tree);
  } else if (!childEmpty && !childExists) {
    tree.node.children[childName] = child.node;
    tree.node.childCount++;
    treeUpdateParents(tree);
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * True for invalid Firebase keys
 */


const INVALID_KEY_REGEX_ = /[\[\].#$\/\u0000-\u001F\u007F]/;
/**
 * True for invalid Firebase paths.
 * Allows '/' in paths.
 */

const INVALID_PATH_REGEX_ = /[\[\].#$\u0000-\u001F\u007F]/;
/**
 * Maximum number of characters to allow in leaf value
 */

const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;

const isValidKey = function (key) {
  return typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key);
};

const isValidPathString = function (pathString) {
  return typeof pathString === 'string' && pathString.length !== 0 && !INVALID_PATH_REGEX_.test(pathString);
};

const isValidRootPathString = function (pathString) {
  if (pathString) {
    // Allow '/.info/' at the beginning.
    pathString = pathString.replace(/^\/*\.info(\/|$)/, '/');
  }

  return isValidPathString(pathString);
};

const isValidPriority = function (priority) {
  return priority === null || typeof priority === 'string' || typeof priority === 'number' && !isInvalidJSONNumber(priority) || priority && typeof priority === 'object' && // eslint-disable-next-line @typescript-eslint/no-explicit-any
  (0, _util.contains)(priority, '.sv');
};
/**
 * Pre-validate a datum passed as an argument to Firebase function.
 */


const validateFirebaseDataArg = function (fnName, value, path, optional) {
  if (optional && value === undefined) {
    return;
  }

  validateFirebaseData((0, _util.errorPrefix)(fnName, 'value'), value, path);
};
/**
 * Validate a data object client-side before sending to server.
 */


const validateFirebaseData = function (errorPrefix, data, path_) {
  const path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;

  if (data === undefined) {
    throw new Error(errorPrefix + 'contains undefined ' + validationPathToErrorString(path));
  }

  if (typeof data === 'function') {
    throw new Error(errorPrefix + 'contains a function ' + validationPathToErrorString(path) + ' with contents = ' + data.toString());
  }

  if (isInvalidJSONNumber(data)) {
    throw new Error(errorPrefix + 'contains ' + data.toString() + ' ' + validationPathToErrorString(path));
  } // Check max leaf size, but try to avoid the utf8 conversion if we can.


  if (typeof data === 'string' && data.length > MAX_LEAF_SIZE_ / 3 && (0, _util.stringLength)(data) > MAX_LEAF_SIZE_) {
    throw new Error(errorPrefix + 'contains a string greater than ' + MAX_LEAF_SIZE_ + ' utf8 bytes ' + validationPathToErrorString(path) + " ('" + data.substring(0, 50) + "...')");
  } // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON
  // to save extra walking of large objects.


  if (data && typeof data === 'object') {
    let hasDotValue = false;
    let hasActualChild = false;
    each(data, (key, value) => {
      if (key === '.value') {
        hasDotValue = true;
      } else if (key !== '.priority' && key !== '.sv') {
        hasActualChild = true;

        if (!isValidKey(key)) {
          throw new Error(errorPrefix + ' contains an invalid key (' + key + ') ' + validationPathToErrorString(path) + '.  Keys must be non-empty strings ' + 'and can\'t contain ".", "#", "$", "/", "[", or "]"');
        }
      }

      validationPathPush(path, key);
      validateFirebaseData(errorPrefix, value, path);
      validationPathPop(path);
    });

    if (hasDotValue && hasActualChild) {
      throw new Error(errorPrefix + ' contains ".value" child ' + validationPathToErrorString(path) + ' in addition to actual children.');
    }
  }
};
/**
 * Pre-validate paths passed in the firebase function.
 */


const validateFirebaseMergePaths = function (errorPrefix, mergePaths) {
  let i, curPath;

  for (i = 0; i < mergePaths.length; i++) {
    curPath = mergePaths[i];
    const keys = pathSlice(curPath);

    for (let j = 0; j < keys.length; j++) {
      if (keys[j] === '.priority' && j === keys.length - 1) ;else if (!isValidKey(keys[j])) {
        throw new Error(errorPrefix + 'contains an invalid key (' + keys[j] + ') in path ' + curPath.toString() + '. Keys must be non-empty strings ' + 'and can\'t contain ".", "#", "$", "/", "[", or "]"');
      }
    }
  } // Check that update keys are not descendants of each other.
  // We rely on the property that sorting guarantees that ancestors come
  // right before descendants.


  mergePaths.sort(pathCompare);
  let prevPath = null;

  for (i = 0; i < mergePaths.length; i++) {
    curPath = mergePaths[i];

    if (prevPath !== null && pathContains(prevPath, curPath)) {
      throw new Error(errorPrefix + 'contains a path ' + prevPath.toString() + ' that is ancestor of another path ' + curPath.toString());
    }

    prevPath = curPath;
  }
};
/**
 * pre-validate an object passed as an argument to firebase function (
 * must be an object - e.g. for firebase.update()).
 */


const validateFirebaseMergeDataArg = function (fnName, data, path, optional) {
  if (optional && data === undefined) {
    return;
  }

  const errorPrefix$1 = (0, _util.errorPrefix)(fnName, 'values');

  if (!(data && typeof data === 'object') || Array.isArray(data)) {
    throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');
  }

  const mergePaths = [];
  each(data, (key, value) => {
    const curPath = new Path(key);
    validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));

    if (pathGetBack(curPath) === '.priority') {
      if (!isValidPriority(value)) {
        throw new Error(errorPrefix$1 + "contains an invalid value for '" + curPath.toString() + "', which must be a valid " + 'Firebase priority (a string, finite number, server value, or null).');
      }
    }

    mergePaths.push(curPath);
  });
  validateFirebaseMergePaths(errorPrefix$1, mergePaths);
};

const validatePriority = function (fnName, priority, optional) {
  if (optional && priority === undefined) {
    return;
  }

  if (isInvalidJSONNumber(priority)) {
    throw new Error((0, _util.errorPrefix)(fnName, 'priority') + 'is ' + priority.toString() + ', but must be a valid Firebase priority (a string, finite number, ' + 'server value, or null).');
  } // Special case to allow importing data with a .sv.


  if (!isValidPriority(priority)) {
    throw new Error((0, _util.errorPrefix)(fnName, 'priority') + 'must be a valid Firebase priority ' + '(a string, finite number, server value, or null).');
  }
};

const validateKey = function (fnName, argumentName, key, optional) {
  if (optional && key === undefined) {
    return;
  }

  if (!isValidKey(key)) {
    throw new Error((0, _util.errorPrefix)(fnName, argumentName) + 'was an invalid key = "' + key + '".  Firebase keys must be non-empty strings and ' + 'can\'t contain ".", "#", "$", "/", "[", or "]").');
  }
};
/**
 * @internal
 */


const validatePathString = function (fnName, argumentName, pathString, optional) {
  if (optional && pathString === undefined) {
    return;
  }

  if (!isValidPathString(pathString)) {
    throw new Error((0, _util.errorPrefix)(fnName, argumentName) + 'was an invalid path = "' + pathString + '". Paths must be non-empty strings and ' + 'can\'t contain ".", "#", "$", "[", or "]"');
  }
};

exports._validatePathString = validatePathString;

const validateRootPathString = function (fnName, argumentName, pathString, optional) {
  if (pathString) {
    // Allow '/.info/' at the beginning.
    pathString = pathString.replace(/^\/*\.info(\/|$)/, '/');
  }

  validatePathString(fnName, argumentName, pathString, optional);
};
/**
 * @internal
 */


const validateWritablePath = function (fnName, path) {
  if (pathGetFront(path) === '.info') {
    throw new Error(fnName + " failed = Can't modify data under /.info/");
  }
};

exports._validateWritablePath = validateWritablePath;

const validateUrl = function (fnName, parsedUrl) {
  // TODO = Validate server better.
  const pathString = parsedUrl.path.toString();

  if (!(typeof parsedUrl.repoInfo.host === 'string') || parsedUrl.repoInfo.host.length === 0 || !isValidKey(parsedUrl.repoInfo.namespace) && parsedUrl.repoInfo.host.split(':')[0] !== 'localhost' || pathString.length !== 0 && !isValidRootPathString(pathString)) {
    throw new Error((0, _util.errorPrefix)(fnName, 'url') + 'must be a valid firebase URL and ' + 'the path can\'t contain ".", "#", "$", "[", or "]".');
  }
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The event queue serves a few purposes:
 * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more
 *    events being queued.
 * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,
 *    raiseQueuedEvents() is called again, the "inner" call will pick up raising events where the "outer" call
 *    left off, ensuring that the events are still raised synchronously and in order.
 * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued
 *    events are raised synchronously.
 *
 * NOTE: This can all go away if/when we move to async events.
 *
 */


class EventQueue {
  constructor() {
    this.eventLists_ = [];
    /**
     * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.
     */

    this.recursionDepth_ = 0;
  }

}
/**
 * @param eventDataList - The new events to queue.
 */


function eventQueueQueueEvents(eventQueue, eventDataList) {
  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.
  let currList = null;

  for (let i = 0; i < eventDataList.length; i++) {
    const data = eventDataList[i];
    const path = data.getPath();

    if (currList !== null && !pathEquals(path, currList.path)) {
      eventQueue.eventLists_.push(currList);
      currList = null;
    }

    if (currList === null) {
      currList = {
        events: [],
        path
      };
    }

    currList.events.push(data);
  }

  if (currList) {
    eventQueue.eventLists_.push(currList);
  }
}
/**
 * Queues the specified events and synchronously raises all events (including previously queued ones)
 * for the specified path.
 *
 * It is assumed that the new events are all for the specified path.
 *
 * @param path - The path to raise events for.
 * @param eventDataList - The new events to raise.
 */


function eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {
  eventQueueQueueEvents(eventQueue, eventDataList);
  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathEquals(eventPath, path));
}
/**
 * Queues the specified events and synchronously raises all events (including previously queued ones) for
 * locations related to the specified change path (i.e. all ancestors and descendants).
 *
 * It is assumed that the new events are all related (ancestor or descendant) to the specified path.
 *
 * @param changedPath - The path to raise events for.
 * @param eventDataList - The events to raise
 */


function eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {
  eventQueueQueueEvents(eventQueue, eventDataList);
  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathContains(eventPath, changedPath) || pathContains(changedPath, eventPath));
}

function eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {
  eventQueue.recursionDepth_++;
  let sentAll = true;

  for (let i = 0; i < eventQueue.eventLists_.length; i++) {
    const eventList = eventQueue.eventLists_[i];

    if (eventList) {
      const eventPath = eventList.path;

      if (predicate(eventPath)) {
        eventListRaise(eventQueue.eventLists_[i]);
        eventQueue.eventLists_[i] = null;
      } else {
        sentAll = false;
      }
    }
  }

  if (sentAll) {
    eventQueue.eventLists_ = [];
  }

  eventQueue.recursionDepth_--;
}
/**
 * Iterates through the list and raises each event
 */


function eventListRaise(eventList) {
  for (let i = 0; i < eventList.events.length; i++) {
    const eventData = eventList.events[i];

    if (eventData !== null) {
      eventList.events[i] = null;
      const eventFn = eventData.getEventRunner();

      if (logger) {
        log('event: ' + eventData.toString());
      }

      exceptionGuard(eventFn);
    }
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const INTERRUPT_REASON = 'repo_interrupt';
/**
 * If a transaction does not succeed after 25 retries, we abort it. Among other
 * things this ensure that if there's ever a bug causing a mismatch between
 * client / server hashes for some data, we won't retry indefinitely.
 */

const MAX_TRANSACTION_RETRIES = 25;
/**
 * A connection to a single data repository.
 */

class Repo {
  constructor(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {
    this.repoInfo_ = repoInfo_;
    this.forceRestClient_ = forceRestClient_;
    this.authTokenProvider_ = authTokenProvider_;
    this.appCheckProvider_ = appCheckProvider_;
    this.dataUpdateCount = 0;
    this.statsListener_ = null;
    this.eventQueue_ = new EventQueue();
    this.nextWriteId_ = 1;
    this.interceptServerDataCallback_ = null;
    /** A list of data pieces and paths to be set when this client disconnects. */

    this.onDisconnect_ = newSparseSnapshotTree();
    /** Stores queues of outstanding transactions for Firebase locations. */

    this.transactionQueueTree_ = new Tree(); // TODO: This should be @private but it's used by test_access.js and internal.js

    this.persistentConnection_ = null; // This key is intentionally not updated if RepoInfo is later changed or replaced

    this.key = this.repoInfo_.toURLString();
  }
  /**
   * @returns The URL corresponding to the root of this Firebase.
   */


  toString() {
    return (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host;
  }

}

function repoStart(repo, appId, authOverride) {
  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);

  if (repo.forceRestClient_ || beingCrawled()) {
    repo.server_ = new ReadonlyRestClient(repo.repoInfo_, (pathString, data, isMerge, tag) => {
      repoOnDataUpdate(repo, pathString, data, isMerge, tag);
    }, repo.authTokenProvider_, repo.appCheckProvider_); // Minor hack: Fire onConnect immediately, since there's no actual connection.

    setTimeout(() => repoOnConnectStatus(repo,
    /* connectStatus= */
    true), 0);
  } else {
    // Validate authOverride
    if (typeof authOverride !== 'undefined' && authOverride !== null) {
      if (typeof authOverride !== 'object') {
        throw new Error('Only objects are supported for option databaseAuthVariableOverride');
      }

      try {
        (0, _util.stringify)(authOverride);
      } catch (e) {
        throw new Error('Invalid authOverride provided: ' + e);
      }
    }

    repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, (pathString, data, isMerge, tag) => {
      repoOnDataUpdate(repo, pathString, data, isMerge, tag);
    }, connectStatus => {
      repoOnConnectStatus(repo, connectStatus);
    }, updates => {
      repoOnServerInfoUpdate(repo, updates);
    }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);
    repo.server_ = repo.persistentConnection_;
  }

  repo.authTokenProvider_.addTokenChangeListener(token => {
    repo.server_.refreshAuthToken(token);
  });
  repo.appCheckProvider_.addTokenChangeListener(result => {
    repo.server_.refreshAppCheckToken(result.token);
  }); // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),
  // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.

  repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, () => new StatsReporter(repo.stats_, repo.server_)); // Used for .info.

  repo.infoData_ = new SnapshotHolder();
  repo.infoSyncTree_ = new SyncTree({
    startListening: (query, tag, currentHashFn, onComplete) => {
      let infoEvents = [];
      const node = repo.infoData_.getNode(query._path); // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events
      // on initial data...

      if (!node.isEmpty()) {
        infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);
        setTimeout(() => {
          onComplete('ok');
        }, 0);
      }

      return infoEvents;
    },
    stopListening: () => {}
  });
  repoUpdateInfo(repo, 'connected', false);
  repo.serverSyncTree_ = new SyncTree({
    startListening: (query, tag, currentHashFn, onComplete) => {
      repo.server_.listen(query, currentHashFn, tag, (status, data) => {
        const events = onComplete(status, data);
        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);
      }); // No synchronous events for network-backed sync trees

      return [];
    },
    stopListening: (query, tag) => {
      repo.server_.unlisten(query, tag);
    }
  });
}
/**
 * @returns The time in milliseconds, taking the server offset into account if we have one.
 */


function repoServerTime(repo) {
  const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));
  const offset = offsetNode.val() || 0;
  return new Date().getTime() + offset;
}
/**
 * Generate ServerValues using some variables from the repo object.
 */


function repoGenerateServerValues(repo) {
  return generateWithValues({
    timestamp: repoServerTime(repo)
  });
}
/**
 * Called by realtime when we get new messages from the server.
 */


function repoOnDataUpdate(repo, pathString, data, isMerge, tag) {
  // For testing.
  repo.dataUpdateCount++;
  const path = new Path(pathString);
  data = repo.interceptServerDataCallback_ ? repo.interceptServerDataCallback_(pathString, data) : data;
  let events = [];

  if (tag) {
    if (isMerge) {
      const taggedChildren = (0, _util.map)(data, raw => nodeFromJSON(raw));
      events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);
    } else {
      const taggedSnap = nodeFromJSON(data);
      events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);
    }
  } else if (isMerge) {
    const changedChildren = (0, _util.map)(data, raw => nodeFromJSON(raw));
    events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);
  } else {
    const snap = nodeFromJSON(data);
    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);
  }

  let affectedPath = path;

  if (events.length > 0) {
    // Since we have a listener outstanding for each transaction, receiving any events
    // is a proxy for some change having occurred.
    affectedPath = repoRerunTransactions(repo, path);
  }

  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);
}

function repoOnConnectStatus(repo, connectStatus) {
  repoUpdateInfo(repo, 'connected', connectStatus);

  if (connectStatus === false) {
    repoRunOnDisconnectEvents(repo);
  }
}

function repoOnServerInfoUpdate(repo, updates) {
  each(updates, (key, value) => {
    repoUpdateInfo(repo, key, value);
  });
}

function repoUpdateInfo(repo, pathString, value) {
  const path = new Path('/.info/' + pathString);
  const newNode = nodeFromJSON(value);
  repo.infoData_.updateSnapshot(path, newNode);
  const events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);
  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);
}

function repoGetNextWriteId(repo) {
  return repo.nextWriteId_++;
}
/**
 * The purpose of `getValue` is to return the latest known value
 * satisfying `query`.
 *
 * This method will first check for in-memory cached values
 * belonging to active listeners. If they are found, such values
 * are considered to be the most up-to-date.
 *
 * If the client is not connected, this method will try to
 * establish a connection and request the value for `query`. If
 * the client is not able to retrieve the query result, it reports
 * an error.
 *
 * @param query - The query to surface a value for.
 */


function repoGetValue(repo, query) {
  // Only active queries are cached. There is no persisted cache.
  const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);

  if (cached != null) {
    return Promise.resolve(cached);
  }

  return repo.server_.get(query).then(payload => {
    const node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());
    const events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);
    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);
    return Promise.resolve(node);
  }, err => {
    repoLog(repo, 'get for query ' + (0, _util.stringify)(query) + ' failed: ' + err);
    return Promise.reject(new Error(err));
  });
}

function repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {
  repoLog(repo, 'set', {
    path: path.toString(),
    value: newVal,
    priority: newPriority
  }); // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or
  // (b) store unresolved paths on JSON parse

  const serverValues = repoGenerateServerValues(repo);
  const newNodeUnresolved = nodeFromJSON(newVal, newPriority);
  const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);
  const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);
  const writeId = repoGetNextWriteId(repo);
  const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);
  eventQueueQueueEvents(repo.eventQueue_, events);
  repo.server_.put(path.toString(), newNodeUnresolved.val(
  /*export=*/
  true), (status, errorReason) => {
    const success = status === 'ok';

    if (!success) {
      warn('set at ' + path + ' failed: ' + status);
    }

    const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);
    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);
    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
  });
  const affectedPath = repoAbortTransactions(repo, path);
  repoRerunTransactions(repo, affectedPath); // We queued the events above, so just flush the queue here

  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);
}

function repoUpdate(repo, path, childrenToMerge, onComplete) {
  repoLog(repo, 'update', {
    path: path.toString(),
    value: childrenToMerge
  }); // Start with our existing data and merge each child into it.

  let empty = true;
  const serverValues = repoGenerateServerValues(repo);
  const changedChildren = {};
  each(childrenToMerge, (changedKey, changedValue) => {
    empty = false;
    changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);
  });

  if (!empty) {
    const writeId = repoGetNextWriteId(repo);
    const events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId);
    eventQueueQueueEvents(repo.eventQueue_, events);
    repo.server_.merge(path.toString(), childrenToMerge, (status, errorReason) => {
      const success = status === 'ok';

      if (!success) {
        warn('update at ' + path + ' failed: ' + status);
      }

      const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);
      const affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;
      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);
      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
    });
    each(childrenToMerge, changedPath => {
      const affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));
      repoRerunTransactions(repo, affectedPath);
    }); // We queued the events above, so just flush the queue here

    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);
  } else {
    log("update() called with empty data.  Don't do anything.");
    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);
  }
}
/**
 * Applies all of the changes stored up in the onDisconnect_ tree.
 */


function repoRunOnDisconnectEvents(repo) {
  repoLog(repo, 'onDisconnectEvents');
  const serverValues = repoGenerateServerValues(repo);
  const resolvedOnDisconnectTree = newSparseSnapshotTree();
  sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), (path, node) => {
    const resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);
    sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);
  });
  let events = [];
  sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), (path, snap) => {
    events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));
    const affectedPath = repoAbortTransactions(repo, path);
    repoRerunTransactions(repo, affectedPath);
  });
  repo.onDisconnect_ = newSparseSnapshotTree();
  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);
}

function repoOnDisconnectCancel(repo, path, onComplete) {
  repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {
    if (status === 'ok') {
      sparseSnapshotTreeForget(repo.onDisconnect_, path);
    }

    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
  });
}

function repoOnDisconnectSet(repo, path, value, onComplete) {
  const newNode = nodeFromJSON(value);
  repo.server_.onDisconnectPut(path.toString(), newNode.val(
  /*export=*/
  true), (status, errorReason) => {
    if (status === 'ok') {
      sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);
    }

    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
  });
}

function repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {
  const newNode = nodeFromJSON(value, priority);
  repo.server_.onDisconnectPut(path.toString(), newNode.val(
  /*export=*/
  true), (status, errorReason) => {
    if (status === 'ok') {
      sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);
    }

    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
  });
}

function repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {
  if ((0, _util.isEmpty)(childrenToMerge)) {
    log("onDisconnect().update() called with empty data.  Don't do anything.");
    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);
    return;
  }

  repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, (status, errorReason) => {
    if (status === 'ok') {
      each(childrenToMerge, (childName, childNode) => {
        const newChildNode = nodeFromJSON(childNode);
        sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);
      });
    }

    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
  });
}

function repoAddEventCallbackForQuery(repo, query, eventRegistration) {
  let events;

  if (pathGetFront(query._path) === '.info') {
    events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);
  } else {
    events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);
  }

  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);
}

function repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {
  // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof
  // a little bit by handling the return values anyways.
  let events;

  if (pathGetFront(query._path) === '.info') {
    events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);
  } else {
    events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);
  }

  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);
}

function repoInterrupt(repo) {
  if (repo.persistentConnection_) {
    repo.persistentConnection_.interrupt(INTERRUPT_REASON);
  }
}

function repoResume(repo) {
  if (repo.persistentConnection_) {
    repo.persistentConnection_.resume(INTERRUPT_REASON);
  }
}

function repoLog(repo, ...varArgs) {
  let prefix = '';

  if (repo.persistentConnection_) {
    prefix = repo.persistentConnection_.id + ':';
  }

  log(prefix, ...varArgs);
}

function repoCallOnCompleteCallback(repo, callback, status, errorReason) {
  if (callback) {
    exceptionGuard(() => {
      if (status === 'ok') {
        callback(null);
      } else {
        const code = (status || 'error').toUpperCase();
        let message = code;

        if (errorReason) {
          message += ': ' + errorReason;
        }

        const error = new Error(message); // eslint-disable-next-line @typescript-eslint/no-explicit-any

        error.code = code;
        callback(error);
      }
    });
  }
}
/**
 * Creates a new transaction, adds it to the transactions we're tracking, and
 * sends it to the server if possible.
 *
 * @param path - Path at which to do transaction.
 * @param transactionUpdate - Update callback.
 * @param onComplete - Completion callback.
 * @param unwatcher - Function that will be called when the transaction no longer
 * need data updates for `path`.
 * @param applyLocally - Whether or not to make intermediate results visible
 */


function repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {
  repoLog(repo, 'transaction on ' + path); // Initialize transaction.

  const transaction = {
    path,
    update: transactionUpdate,
    onComplete,
    // One of TransactionStatus enums.
    status: null,
    // Used when combining transactions at different locations to figure out
    // which one goes first.
    order: LUIDGenerator(),
    // Whether to raise local events for this transaction.
    applyLocally,
    // Count of how many times we've retried the transaction.
    retryCount: 0,
    // Function to call to clean up our .on() listener.
    unwatcher,
    // Stores why a transaction was aborted.
    abortReason: null,
    currentWriteId: null,
    currentInputSnapshot: null,
    currentOutputSnapshotRaw: null,
    currentOutputSnapshotResolved: null
  }; // Run transaction initially.

  const currentState = repoGetLatestState(repo, path, undefined);
  transaction.currentInputSnapshot = currentState;
  const newVal = transaction.update(currentState.val());

  if (newVal === undefined) {
    // Abort transaction.
    transaction.unwatcher();
    transaction.currentOutputSnapshotRaw = null;
    transaction.currentOutputSnapshotResolved = null;

    if (transaction.onComplete) {
      transaction.onComplete(null, false, transaction.currentInputSnapshot);
    }
  } else {
    validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path); // Mark as run and add to our queue.

    transaction.status = 0
    /* RUN */
    ;
    const queueNode = treeSubTree(repo.transactionQueueTree_, path);
    const nodeQueue = treeGetValue(queueNode) || [];
    nodeQueue.push(transaction);
    treeSetValue(queueNode, nodeQueue); // Update visibleData and raise events
    // Note: We intentionally raise events after updating all of our
    // transaction state, since the user could start new transactions from the
    // event callbacks.

    let priorityForNode;

    if (typeof newVal === 'object' && newVal !== null && (0, _util.contains)(newVal, '.priority')) {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      priorityForNode = (0, _util.safeGet)(newVal, '.priority');
      (0, _util.assert)(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' + 'Priority must be a valid string, finite number, server value, or null.');
    } else {
      const currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) || ChildrenNode.EMPTY_NODE;
      priorityForNode = currentNode.getPriority().val();
    }

    const serverValues = repoGenerateServerValues(repo);
    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);
    const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);
    transaction.currentOutputSnapshotRaw = newNodeUnresolved;
    transaction.currentOutputSnapshotResolved = newNode;
    transaction.currentWriteId = repoGetNextWriteId(repo);
    const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);
    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);
    repoSendReadyTransactions(repo, repo.transactionQueueTree_);
  }
}
/**
 * @param excludeSets - A specific set to exclude
 */


function repoGetLatestState(repo, path, excludeSets) {
  return syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) || ChildrenNode.EMPTY_NODE;
}
/**
 * Sends any already-run transactions that aren't waiting for outstanding
 * transactions to complete.
 *
 * Externally it's called with no arguments, but it calls itself recursively
 * with a particular transactionQueueTree node to recurse through the tree.
 *
 * @param node - transactionQueueTree node to start at.
 */


function repoSendReadyTransactions(repo, node = repo.transactionQueueTree_) {
  // Before recursing, make sure any completed transactions are removed.
  if (!node) {
    repoPruneCompletedTransactionsBelowNode(repo, node);
  }

  if (treeGetValue(node)) {
    const queue = repoBuildTransactionQueue(repo, node);
    (0, _util.assert)(queue.length > 0, 'Sending zero length transaction queue');
    const allRun = queue.every(transaction => transaction.status === 0
    /* RUN */
    ); // If they're all run (and not sent), we can send them.  Else, we must wait.

    if (allRun) {
      repoSendTransactionQueue(repo, treeGetPath(node), queue);
    }
  } else if (treeHasChildren(node)) {
    treeForEachChild(node, childNode => {
      repoSendReadyTransactions(repo, childNode);
    });
  }
}
/**
 * Given a list of run transactions, send them to the server and then handle
 * the result (success or failure).
 *
 * @param path - The location of the queue.
 * @param queue - Queue of transactions under the specified location.
 */


function repoSendTransactionQueue(repo, path, queue) {
  // Mark transactions as sent and increment retry count!
  const setsToIgnore = queue.map(txn => {
    return txn.currentWriteId;
  });
  const latestState = repoGetLatestState(repo, path, setsToIgnore);
  let snapToSend = latestState;
  const latestHash = latestState.hash();

  for (let i = 0; i < queue.length; i++) {
    const txn = queue[i];
    (0, _util.assert)(txn.status === 0
    /* RUN */
    , 'tryToSendTransactionQueue_: items in queue should all be run.');
    txn.status = 1
    /* SENT */
    ;
    txn.retryCount++;
    const relativePath = newRelativePath(path, txn.path); // If we've gotten to this point, the output snapshot must be defined.

    snapToSend = snapToSend.updateChild(relativePath
    /** @type {!Node} */
    , txn.currentOutputSnapshotRaw);
  }

  const dataToSend = snapToSend.val(true);
  const pathToSend = path; // Send the put.

  repo.server_.put(pathToSend.toString(), dataToSend, status => {
    repoLog(repo, 'transaction put response', {
      path: pathToSend.toString(),
      status
    });
    let events = [];

    if (status === 'ok') {
      // Queue up the callbacks and fire them after cleaning up all of our
      // transaction state, since the callback could trigger more
      // transactions or sets.
      const callbacks = [];

      for (let i = 0; i < queue.length; i++) {
        queue[i].status = 2
        /* COMPLETED */
        ;
        events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));

        if (queue[i].onComplete) {
          // We never unset the output snapshot, and given that this
          // transaction is complete, it should be set
          callbacks.push(() => queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved));
        }

        queue[i].unwatcher();
      } // Now remove the completed transactions.


      repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path)); // There may be pending transactions that we can now send.

      repoSendReadyTransactions(repo, repo.transactionQueueTree_);
      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events); // Finally, trigger onComplete callbacks.

      for (let i = 0; i < callbacks.length; i++) {
        exceptionGuard(callbacks[i]);
      }
    } else {
      // transactions are no longer sent.  Update their status appropriately.
      if (status === 'datastale') {
        for (let i = 0; i < queue.length; i++) {
          if (queue[i].status === 3
          /* SENT_NEEDS_ABORT */
          ) {
            queue[i].status = 4
            /* NEEDS_ABORT */
            ;
          } else {
            queue[i].status = 0
            /* RUN */
            ;
          }
        }
      } else {
        warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);

        for (let i = 0; i < queue.length; i++) {
          queue[i].status = 4
          /* NEEDS_ABORT */
          ;
          queue[i].abortReason = status;
        }
      }

      repoRerunTransactions(repo, path);
    }
  }, latestHash);
}
/**
 * Finds all transactions dependent on the data at changedPath and reruns them.
 *
 * Should be called any time cached data changes.
 *
 * Return the highest path that was affected by rerunning transactions. This
 * is the path at which events need to be raised for.
 *
 * @param changedPath - The path in mergedData that changed.
 * @returns The rootmost path that was affected by rerunning transactions.
 */


function repoRerunTransactions(repo, changedPath) {
  const rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);
  const path = treeGetPath(rootMostTransactionNode);
  const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);
  repoRerunTransactionQueue(repo, queue, path);
  return path;
}
/**
 * Does all the work of rerunning transactions (as well as cleans up aborted
 * transactions and whatnot).
 *
 * @param queue - The queue of transactions to run.
 * @param path - The path the queue is for.
 */


function repoRerunTransactionQueue(repo, queue, path) {
  if (queue.length === 0) {
    return; // Nothing to do!
  } // Queue up the callbacks and fire them after cleaning up all of our
  // transaction state, since the callback could trigger more transactions or
  // sets.


  const callbacks = [];
  let events = []; // Ignore all of the sets we're going to re-run.

  const txnsToRerun = queue.filter(q => {
    return q.status === 0
    /* RUN */
    ;
  });
  const setsToIgnore = txnsToRerun.map(q => {
    return q.currentWriteId;
  });

  for (let i = 0; i < queue.length; i++) {
    const transaction = queue[i];
    const relativePath = newRelativePath(path, transaction.path);
    let abortTransaction = false,
        abortReason;
    (0, _util.assert)(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');

    if (transaction.status === 4
    /* NEEDS_ABORT */
    ) {
      abortTransaction = true;
      abortReason = transaction.abortReason;
      events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));
    } else if (transaction.status === 0
    /* RUN */
    ) {
      if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {
        abortTransaction = true;
        abortReason = 'maxretry';
        events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));
      } else {
        // This code reruns a transaction
        const currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);
        transaction.currentInputSnapshot = currentNode;
        const newData = queue[i].update(currentNode.val());

        if (newData !== undefined) {
          validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);
          let newDataNode = nodeFromJSON(newData);
          const hasExplicitPriority = typeof newData === 'object' && newData != null && (0, _util.contains)(newData, '.priority');

          if (!hasExplicitPriority) {
            // Keep the old priority if there wasn't a priority explicitly specified.
            newDataNode = newDataNode.updatePriority(currentNode.getPriority());
          }

          const oldWriteId = transaction.currentWriteId;
          const serverValues = repoGenerateServerValues(repo);
          const newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);
          transaction.currentOutputSnapshotRaw = newDataNode;
          transaction.currentOutputSnapshotResolved = newNodeResolved;
          transaction.currentWriteId = repoGetNextWriteId(repo); // Mutates setsToIgnore in place

          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);
          events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));
          events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));
        } else {
          abortTransaction = true;
          abortReason = 'nodata';
          events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));
        }
      }
    }

    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);
    events = [];

    if (abortTransaction) {
      // Abort.
      queue[i].status = 2
      /* COMPLETED */
      ; // Removing a listener can trigger pruning which can muck with
      // mergedData/visibleData (as it prunes data). So defer the unwatcher
      // until we're done.

      (function (unwatcher) {
        setTimeout(unwatcher, Math.floor(0));
      })(queue[i].unwatcher);

      if (queue[i].onComplete) {
        if (abortReason === 'nodata') {
          callbacks.push(() => queue[i].onComplete(null, false, queue[i].currentInputSnapshot));
        } else {
          callbacks.push(() => queue[i].onComplete(new Error(abortReason), false, null));
        }
      }
    }
  } // Clean up completed transactions.


  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_); // Now fire callbacks, now that we're in a good, known state.

  for (let i = 0; i < callbacks.length; i++) {
    exceptionGuard(callbacks[i]);
  } // Try to send the transaction result to the server.


  repoSendReadyTransactions(repo, repo.transactionQueueTree_);
}
/**
 * Returns the rootmost ancestor node of the specified path that has a pending
 * transaction on it, or just returns the node for the given path if there are
 * no pending transactions on any ancestor.
 *
 * @param path - The location to start at.
 * @returns The rootmost node with a transaction.
 */


function repoGetAncestorTransactionNode(repo, path) {
  let front; // Start at the root and walk deeper into the tree towards path until we
  // find a node with pending transactions.

  let transactionNode = repo.transactionQueueTree_;
  front = pathGetFront(path);

  while (front !== null && treeGetValue(transactionNode) === undefined) {
    transactionNode = treeSubTree(transactionNode, front);
    path = pathPopFront(path);
    front = pathGetFront(path);
  }

  return transactionNode;
}
/**
 * Builds the queue of all transactions at or below the specified
 * transactionNode.
 *
 * @param transactionNode
 * @returns The generated queue.
 */


function repoBuildTransactionQueue(repo, transactionNode) {
  // Walk any child transaction queues and aggregate them into a single queue.
  const transactionQueue = [];
  repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue); // Sort them by the order the transactions were created.

  transactionQueue.sort((a, b) => a.order - b.order);
  return transactionQueue;
}

function repoAggregateTransactionQueuesForNode(repo, node, queue) {
  const nodeQueue = treeGetValue(node);

  if (nodeQueue) {
    for (let i = 0; i < nodeQueue.length; i++) {
      queue.push(nodeQueue[i]);
    }
  }

  treeForEachChild(node, child => {
    repoAggregateTransactionQueuesForNode(repo, child, queue);
  });
}
/**
 * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.
 */


function repoPruneCompletedTransactionsBelowNode(repo, node) {
  const queue = treeGetValue(node);

  if (queue) {
    let to = 0;

    for (let from = 0; from < queue.length; from++) {
      if (queue[from].status !== 2
      /* COMPLETED */
      ) {
        queue[to] = queue[from];
        to++;
      }
    }

    queue.length = to;
    treeSetValue(node, queue.length > 0 ? queue : undefined);
  }

  treeForEachChild(node, childNode => {
    repoPruneCompletedTransactionsBelowNode(repo, childNode);
  });
}
/**
 * Aborts all transactions on ancestors or descendants of the specified path.
 * Called when doing a set() or update() since we consider them incompatible
 * with transactions.
 *
 * @param path - Path for which we want to abort related transactions.
 */


function repoAbortTransactions(repo, path) {
  const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));
  const transactionNode = treeSubTree(repo.transactionQueueTree_, path);
  treeForEachAncestor(transactionNode, node => {
    repoAbortTransactionsOnNode(repo, node);
  });
  repoAbortTransactionsOnNode(repo, transactionNode);
  treeForEachDescendant(transactionNode, node => {
    repoAbortTransactionsOnNode(repo, node);
  });
  return affectedPath;
}
/**
 * Abort transactions stored in this transaction queue node.
 *
 * @param node - Node to abort transactions for.
 */


function repoAbortTransactionsOnNode(repo, node) {
  const queue = treeGetValue(node);

  if (queue) {
    // Queue up the callbacks and fire them after cleaning up all of our
    // transaction state, since the callback could trigger more transactions
    // or sets.
    const callbacks = []; // Go through queue.  Any already-sent transactions must be marked for
    // abort, while the unsent ones can be immediately aborted and removed.

    let events = [];
    let lastSent = -1;

    for (let i = 0; i < queue.length; i++) {
      if (queue[i].status === 3
      /* SENT_NEEDS_ABORT */
      ) ;else if (queue[i].status === 1
      /* SENT */
      ) {
        (0, _util.assert)(lastSent === i - 1, 'All SENT items should be at beginning of queue.');
        lastSent = i; // Mark transaction for abort when it comes back.

        queue[i].status = 3
        /* SENT_NEEDS_ABORT */
        ;
        queue[i].abortReason = 'set';
      } else {
        (0, _util.assert)(queue[i].status === 0
        /* RUN */
        , 'Unexpected transaction status in abort'); // We can abort it immediately.

        queue[i].unwatcher();
        events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));

        if (queue[i].onComplete) {
          callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));
        }
      }
    }

    if (lastSent === -1) {
      // We're not waiting for any sent transactions.  We can clear the queue.
      treeSetValue(node, undefined);
    } else {
      // Remove the transactions we aborted.
      queue.length = lastSent + 1;
    } // Now fire the callbacks.


    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);

    for (let i = 0; i < callbacks.length; i++) {
      exceptionGuard(callbacks[i]);
    }
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function decodePath(pathString) {
  let pathStringDecoded = '';
  const pieces = pathString.split('/');

  for (let i = 0; i < pieces.length; i++) {
    if (pieces[i].length > 0) {
      let piece = pieces[i];

      try {
        piece = decodeURIComponent(piece.replace(/\+/g, ' '));
      } catch (e) {}

      pathStringDecoded += '/' + piece;
    }
  }

  return pathStringDecoded;
}
/**
 * @returns key value hash
 */


function decodeQuery(queryString) {
  const results = {};

  if (queryString.charAt(0) === '?') {
    queryString = queryString.substring(1);
  }

  for (const segment of queryString.split('&')) {
    if (segment.length === 0) {
      continue;
    }

    const kv = segment.split('=');

    if (kv.length === 2) {
      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);
    } else {
      warn(`Invalid query segment '${segment}' in query '${queryString}'`);
    }
  }

  return results;
}

const parseRepoInfo = function (dataURL, nodeAdmin) {
  const parsedUrl = parseDatabaseURL(dataURL),
        namespace = parsedUrl.namespace;

  if (parsedUrl.domain === 'firebase.com') {
    fatal(parsedUrl.host + ' is no longer supported. ' + 'Please use <YOUR FIREBASE>.firebaseio.com instead');
  } // Catch common error of uninitialized namespace value.


  if ((!namespace || namespace === 'undefined') && parsedUrl.domain !== 'localhost') {
    fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');
  }

  if (!parsedUrl.secure) {
    warnIfPageIsSecure();
  }

  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';
  return {
    repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, nodeAdmin, webSocketOnly,
    /*persistenceKey=*/
    '',
    /*includeNamespaceInQueryParams=*/
    namespace !== parsedUrl.subdomain),
    path: new Path(parsedUrl.pathString)
  };
};

const parseDatabaseURL = function (dataURL) {
  // Default to empty strings in the event of a malformed string.
  let host = '',
      domain = '',
      subdomain = '',
      pathString = '',
      namespace = ''; // Always default to SSL, unless otherwise specified.

  let secure = true,
      scheme = 'https',
      port = 443; // Don't do any validation here. The caller is responsible for validating the result of parsing.

  if (typeof dataURL === 'string') {
    // Parse scheme.
    let colonInd = dataURL.indexOf('//');

    if (colonInd >= 0) {
      scheme = dataURL.substring(0, colonInd - 1);
      dataURL = dataURL.substring(colonInd + 2);
    } // Parse host, path, and query string.


    let slashInd = dataURL.indexOf('/');

    if (slashInd === -1) {
      slashInd = dataURL.length;
    }

    let questionMarkInd = dataURL.indexOf('?');

    if (questionMarkInd === -1) {
      questionMarkInd = dataURL.length;
    }

    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));

    if (slashInd < questionMarkInd) {
      // For pathString, questionMarkInd will always come after slashInd
      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));
    }

    const queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd))); // If we have a port, use scheme for determining if it's secure.

    colonInd = host.indexOf(':');

    if (colonInd >= 0) {
      secure = scheme === 'https' || scheme === 'wss';
      port = parseInt(host.substring(colonInd + 1), 10);
    } else {
      colonInd = host.length;
    }

    const hostWithoutPort = host.slice(0, colonInd);

    if (hostWithoutPort.toLowerCase() === 'localhost') {
      domain = 'localhost';
    } else if (hostWithoutPort.split('.').length <= 2) {
      domain = hostWithoutPort;
    } else {
      // Interpret the subdomain of a 3 or more component URL as the namespace name.
      const dotInd = host.indexOf('.');
      subdomain = host.substring(0, dotInd).toLowerCase();
      domain = host.substring(dotInd + 1); // Normalize namespaces to lowercase to share storage / connection.

      namespace = subdomain;
    } // Always treat the value of the `ns` as the namespace name if it is present.


    if ('ns' in queryParams) {
      namespace = queryParams['ns'];
    }
  }

  return {
    host,
    port,
    domain,
    subdomain,
    secure,
    scheme,
    pathString,
    namespace
  };
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Encapsulates the data needed to raise an event
 */


class DataEvent {
  /**
   * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed
   * @param eventRegistration - The function to call to with the event data. User provided
   * @param snapshot - The data backing the event
   * @param prevName - Optional, the name of the previous child for child_* events.
   */
  constructor(eventType, eventRegistration, snapshot, prevName) {
    this.eventType = eventType;
    this.eventRegistration = eventRegistration;
    this.snapshot = snapshot;
    this.prevName = prevName;
  }

  getPath() {
    const ref = this.snapshot.ref;

    if (this.eventType === 'value') {
      return ref._path;
    } else {
      return ref.parent._path;
    }
  }

  getEventType() {
    return this.eventType;
  }

  getEventRunner() {
    return this.eventRegistration.getEventRunner(this);
  }

  toString() {
    return this.getPath().toString() + ':' + this.eventType + ':' + (0, _util.stringify)(this.snapshot.exportVal());
  }

}

class CancelEvent {
  constructor(eventRegistration, error, path) {
    this.eventRegistration = eventRegistration;
    this.error = error;
    this.path = path;
  }

  getPath() {
    return this.path;
  }

  getEventType() {
    return 'cancel';
  }

  getEventRunner() {
    return this.eventRegistration.getEventRunner(this);
  }

  toString() {
    return this.path.toString() + ':cancel';
  }

}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A wrapper class that converts events from the database@exp SDK to the legacy
 * Database SDK. Events are not converted directly as event registration relies
 * on reference comparison of the original user callback (see `matches()`) and
 * relies on equality of the legacy SDK's `context` object.
 */


class CallbackContext {
  constructor(snapshotCallback, cancelCallback) {
    this.snapshotCallback = snapshotCallback;
    this.cancelCallback = cancelCallback;
  }

  onValue(expDataSnapshot, previousChildName) {
    this.snapshotCallback.call(null, expDataSnapshot, previousChildName);
  }

  onCancel(error) {
    (0, _util.assert)(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');
    return this.cancelCallback.call(null, error);
  }

  get hasCancelCallback() {
    return !!this.cancelCallback;
  }

  matches(other) {
    return this.snapshotCallback === other.snapshotCallback || this.snapshotCallback.userCallback !== undefined && this.snapshotCallback.userCallback === other.snapshotCallback.userCallback && this.snapshotCallback.context === other.snapshotCallback.context;
  }

}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The `onDisconnect` class allows you to write or clear data when your client
 * disconnects from the Database server. These updates occur whether your
 * client disconnects cleanly or not, so you can rely on them to clean up data
 * even if a connection is dropped or a client crashes.
 *
 * The `onDisconnect` class is most commonly used to manage presence in
 * applications where it is useful to detect how many clients are connected and
 * when other clients disconnect. See
 * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}
 * for more information.
 *
 * To avoid problems when a connection is dropped before the requests can be
 * transferred to the Database server, these functions should be called before
 * writing any data.
 *
 * Note that `onDisconnect` operations are only triggered once. If you want an
 * operation to occur each time a disconnect occurs, you'll need to re-establish
 * the `onDisconnect` operations each time you reconnect.
 */


class OnDisconnect {
  /** @hideconstructor */
  constructor(_repo, _path) {
    this._repo = _repo;
    this._path = _path;
  }
  /**
   * Cancels all previously queued `onDisconnect()` set or update events for this
   * location and all children.
   *
   * If a write has been queued for this location via a `set()` or `update()` at a
   * parent location, the write at this location will be canceled, though writes
   * to sibling locations will still occur.
   *
   * @returns Resolves when synchronization to the server is complete.
   */


  cancel() {
    const deferred = new _util.Deferred();
    repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(() => {}));
    return deferred.promise;
  }
  /**
   * Ensures the data at this location is deleted when the client is disconnected
   * (due to closing the browser, navigating to a new page, or network issues).
   *
   * @returns Resolves when synchronization to the server is complete.
   */


  remove() {
    validateWritablePath('OnDisconnect.remove', this._path);
    const deferred = new _util.Deferred();
    repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(() => {}));
    return deferred.promise;
  }
  /**
   * Ensures the data at this location is set to the specified value when the
   * client is disconnected (due to closing the browser, navigating to a new page,
   * or network issues).
   *
   * `set()` is especially useful for implementing "presence" systems, where a
   * value should be changed or cleared when a user disconnects so that they
   * appear "offline" to other users. See
   * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}
   * for more information.
   *
   * Note that `onDisconnect` operations are only triggered once. If you want an
   * operation to occur each time a disconnect occurs, you'll need to re-establish
   * the `onDisconnect` operations each time.
   *
   * @param value - The value to be written to this location on disconnect (can
   * be an object, array, string, number, boolean, or null).
   * @returns Resolves when synchronization to the Database is complete.
   */


  set(value) {
    validateWritablePath('OnDisconnect.set', this._path);
    validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);
    const deferred = new _util.Deferred();
    repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(() => {}));
    return deferred.promise;
  }
  /**
   * Ensures the data at this location is set to the specified value and priority
   * when the client is disconnected (due to closing the browser, navigating to a
   * new page, or network issues).
   *
   * @param value - The value to be written to this location on disconnect (can
   * be an object, array, string, number, boolean, or null).
   * @param priority - The priority to be written (string, number, or null).
   * @returns Resolves when synchronization to the Database is complete.
   */


  setWithPriority(value, priority) {
    validateWritablePath('OnDisconnect.setWithPriority', this._path);
    validateFirebaseDataArg('OnDisconnect.setWithPriority', value, this._path, false);
    validatePriority('OnDisconnect.setWithPriority', priority, false);
    const deferred = new _util.Deferred();
    repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(() => {}));
    return deferred.promise;
  }
  /**
   * Writes multiple values at this location when the client is disconnected (due
   * to closing the browser, navigating to a new page, or network issues).
   *
   * The `values` argument contains multiple property-value pairs that will be
   * written to the Database together. Each child property can either be a simple
   * property (for example, "name") or a relative path (for example, "name/first")
   * from the current location to the data to update.
   *
   * As opposed to the `set()` method, `update()` can be use to selectively update
   * only the referenced properties at the current location (instead of replacing
   * all the child properties at the current location).
   *
   * @param values - Object containing multiple values.
   * @returns Resolves when synchronization to the Database is complete.
   */


  update(values) {
    validateWritablePath('OnDisconnect.update', this._path);
    validateFirebaseMergeDataArg('OnDisconnect.update', values, this._path, false);
    const deferred = new _util.Deferred();
    repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(() => {}));
    return deferred.promise;
  }

}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @internal
 */


exports.OnDisconnect = OnDisconnect;

class QueryImpl {
  /**
   * @hideconstructor
   */
  constructor(_repo, _path, _queryParams, _orderByCalled) {
    this._repo = _repo;
    this._path = _path;
    this._queryParams = _queryParams;
    this._orderByCalled = _orderByCalled;
  }

  get key() {
    if (pathIsEmpty(this._path)) {
      return null;
    } else {
      return pathGetBack(this._path);
    }
  }

  get ref() {
    return new ReferenceImpl(this._repo, this._path);
  }

  get _queryIdentifier() {
    const obj = queryParamsGetQueryObject(this._queryParams);
    const id = ObjectToUniqueKey(obj);
    return id === '{}' ? 'default' : id;
  }
  /**
   * An object representation of the query parameters used by this Query.
   */


  get _queryObject() {
    return queryParamsGetQueryObject(this._queryParams);
  }

  isEqual(other) {
    other = (0, _util.getModularInstance)(other);

    if (!(other instanceof QueryImpl)) {
      return false;
    }

    const sameRepo = this._repo === other._repo;
    const samePath = pathEquals(this._path, other._path);
    const sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;
    return sameRepo && samePath && sameQueryIdentifier;
  }

  toJSON() {
    return this.toString();
  }

  toString() {
    return this._repo.toString() + pathToUrlEncodedString(this._path);
  }

}
/**
 * Validates that no other order by call has been made
 */


exports._QueryImpl = QueryImpl;

function validateNoPreviousOrderByCall(query, fnName) {
  if (query._orderByCalled === true) {
    throw new Error(fnName + ": You can't combine multiple orderBy calls.");
  }
}
/**
 * Validates start/end values for queries.
 */


function validateQueryEndpoints(params) {
  let startNode = null;
  let endNode = null;

  if (params.hasStart()) {
    startNode = params.getIndexStartValue();
  }

  if (params.hasEnd()) {
    endNode = params.getIndexEndValue();
  }

  if (params.getIndex() === KEY_INDEX) {
    const tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' + 'startAt(), endAt(), or equalTo().';
    const wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' + 'endAt(), endBefore(), or equalTo() must be a string.';

    if (params.hasStart()) {
      const startName = params.getIndexStartName();

      if (startName !== MIN_NAME) {
        throw new Error(tooManyArgsError);
      } else if (typeof startNode !== 'string') {
        throw new Error(wrongArgTypeError);
      }
    }

    if (params.hasEnd()) {
      const endName = params.getIndexEndName();

      if (endName !== MAX_NAME) {
        throw new Error(tooManyArgsError);
      } else if (typeof endNode !== 'string') {
        throw new Error(wrongArgTypeError);
      }
    }
  } else if (params.getIndex() === PRIORITY_INDEX) {
    if (startNode != null && !isValidPriority(startNode) || endNode != null && !isValidPriority(endNode)) {
      throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' + 'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' + '(null, a number, or a string).');
    }
  } else {
    (0, _util.assert)(params.getIndex() instanceof PathIndex || params.getIndex() === VALUE_INDEX, 'unknown index type.');

    if (startNode != null && typeof startNode === 'object' || endNode != null && typeof endNode === 'object') {
      throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' + 'equalTo() cannot be an object.');
    }
  }
}
/**
 * Validates that limit* has been called with the correct combination of parameters
 */


function validateLimit(params) {
  if (params.hasStart() && params.hasEnd() && params.hasLimit() && !params.hasAnchoredLimit()) {
    throw new Error("Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use " + 'limitToFirst() or limitToLast() instead.');
  }
}
/**
 * @internal
 */


class ReferenceImpl extends QueryImpl {
  /** @hideconstructor */
  constructor(repo, path) {
    super(repo, path, new QueryParams(), false);
  }

  get parent() {
    const parentPath = pathParent(this._path);
    return parentPath === null ? null : new ReferenceImpl(this._repo, parentPath);
  }

  get root() {
    let ref = this;

    while (ref.parent !== null) {
      ref = ref.parent;
    }

    return ref;
  }

}
/**
 * A `DataSnapshot` contains data from a Database location.
 *
 * Any time you read data from the Database, you receive the data as a
 * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach
 * with `on()` or `once()`. You can extract the contents of the snapshot as a
 * JavaScript object by calling the `val()` method. Alternatively, you can
 * traverse into the snapshot by calling `child()` to return child snapshots
 * (which you could then call `val()` on).
 *
 * A `DataSnapshot` is an efficiently generated, immutable copy of the data at
 * a Database location. It cannot be modified and will never change (to modify
 * data, you always call the `set()` method on a `Reference` directly).
 */


exports._ReferenceImpl = ReferenceImpl;

class DataSnapshot {
  /**
   * @param _node - A SnapshotNode to wrap.
   * @param ref - The location this snapshot came from.
   * @param _index - The iteration order for this snapshot
   * @hideconstructor
   */
  constructor(_node,
  /**
   * The location of this DataSnapshot.
   */
  ref, _index) {
    this._node = _node;
    this.ref = ref;
    this._index = _index;
  }
  /**
   * Gets the priority value of the data in this `DataSnapshot`.
   *
   * Applications need not use priority but can order collections by
   * ordinary properties (see
   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}
   * ).
   */


  get priority() {
    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)
    return this._node.getPriority().val();
  }
  /**
   * The key (last part of the path) of the location of this `DataSnapshot`.
   *
   * The last token in a Database location is considered its key. For example,
   * "ada" is the key for the /users/ada/ node. Accessing the key on any
   * `DataSnapshot` will return the key for the location that generated it.
   * However, accessing the key on the root URL of a Database will return
   * `null`.
   */


  get key() {
    return this.ref.key;
  }
  /** Returns the number of child properties of this `DataSnapshot`. */


  get size() {
    return this._node.numChildren();
  }
  /**
   * Gets another `DataSnapshot` for the location at the specified relative path.
   *
   * Passing a relative path to the `child()` method of a DataSnapshot returns
   * another `DataSnapshot` for the location at the specified relative path. The
   * relative path can either be a simple child name (for example, "ada") or a
   * deeper, slash-separated path (for example, "ada/name/first"). If the child
   * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`
   * whose value is `null`) is returned.
   *
   * @param path - A relative path to the location of child data.
   */


  child(path) {
    const childPath = new Path(path);
    const childRef = child(this.ref, path);
    return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);
  }
  /**
   * Returns true if this `DataSnapshot` contains any data. It is slightly more
   * efficient than using `snapshot.val() !== null`.
   */


  exists() {
    return !this._node.isEmpty();
  }
  /**
   * Exports the entire contents of the DataSnapshot as a JavaScript object.
   *
   * The `exportVal()` method is similar to `val()`, except priority information
   * is included (if available), making it suitable for backing up your data.
   *
   * @returns The DataSnapshot's contents as a JavaScript value (Object,
   *   Array, string, number, boolean, or `null`).
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any


  exportVal() {
    return this._node.val(true);
  }
  /**
   * Enumerates the top-level children in the `DataSnapshot`.
   *
   * Because of the way JavaScript objects work, the ordering of data in the
   * JavaScript object returned by `val()` is not guaranteed to match the
   * ordering on the server nor the ordering of `onChildAdded()` events. That is
   * where `forEach()` comes in handy. It guarantees the children of a
   * `DataSnapshot` will be iterated in their query order.
   *
   * If no explicit `orderBy*()` method is used, results are returned
   * ordered by key (unless priorities are used, in which case, results are
   * returned by priority).
   *
   * @param action - A function that will be called for each child DataSnapshot.
   * The callback can return true to cancel further enumeration.
   * @returns true if enumeration was canceled due to your callback returning
   * true.
   */


  forEach(action) {
    if (this._node.isLeafNode()) {
      return false;
    }

    const childrenNode = this._node; // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...

    return !!childrenNode.forEachChild(this._index, (key, node) => {
      return action(new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX));
    });
  }
  /**
   * Returns true if the specified child path has (non-null) data.
   *
   * @param path - A relative path to the location of a potential child.
   * @returns `true` if data exists at the specified child path; else
   *  `false`.
   */


  hasChild(path) {
    const childPath = new Path(path);
    return !this._node.getChild(childPath).isEmpty();
  }
  /**
   * Returns whether or not the `DataSnapshot` has any non-`null` child
   * properties.
   *
   * You can use `hasChildren()` to determine if a `DataSnapshot` has any
   * children. If it does, you can enumerate them using `forEach()`. If it
   * doesn't, then either this snapshot contains a primitive value (which can be
   * retrieved with `val()`) or it is empty (in which case, `val()` will return
   * `null`).
   *
   * @returns true if this snapshot has any children; else false.
   */


  hasChildren() {
    if (this._node.isLeafNode()) {
      return false;
    } else {
      return !this._node.isEmpty();
    }
  }
  /**
   * Returns a JSON-serializable representation of this object.
   */


  toJSON() {
    return this.exportVal();
  }
  /**
   * Extracts a JavaScript value from a `DataSnapshot`.
   *
   * Depending on the data in a `DataSnapshot`, the `val()` method may return a
   * scalar type (string, number, or boolean), an array, or an object. It may
   * also return null, indicating that the `DataSnapshot` is empty (contains no
   * data).
   *
   * @returns The DataSnapshot's contents as a JavaScript value (Object,
   *   Array, string, number, boolean, or `null`).
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any


  val() {
    return this._node.val();
  }

}
/**
 *
 * Returns a `Reference` representing the location in the Database
 * corresponding to the provided path. If no path is provided, the `Reference`
 * will point to the root of the Database.
 *
 * @param db - The database instance to obtain a reference for.
 * @param path - Optional path representing the location the returned
 *   `Reference` will point. If not provided, the returned `Reference` will
 *   point to the root of the Database.
 * @returns If a path is provided, a `Reference`
 *   pointing to the provided path. Otherwise, a `Reference` pointing to the
 *   root of the Database.
 */


exports.DataSnapshot = DataSnapshot;

function ref(db, path) {
  db = (0, _util.getModularInstance)(db);

  db._checkNotDeleted('ref');

  return path !== undefined ? child(db._root, path) : db._root;
}
/**
 * Returns a `Reference` representing the location in the Database
 * corresponding to the provided Firebase URL.
 *
 * An exception is thrown if the URL is not a valid Firebase Database URL or it
 * has a different domain than the current `Database` instance.
 *
 * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored
 * and are not applied to the returned `Reference`.
 *
 * @param db - The database instance to obtain a reference for.
 * @param url - The Firebase URL at which the returned `Reference` will
 *   point.
 * @returns A `Reference` pointing to the provided
 *   Firebase URL.
 */


function refFromURL(db, url) {
  db = (0, _util.getModularInstance)(db);

  db._checkNotDeleted('refFromURL');

  const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);
  validateUrl('refFromURL', parsedURL);
  const repoInfo = parsedURL.repoInfo;

  if (!db._repo.repoInfo_.isCustomHost() && repoInfo.host !== db._repo.repoInfo_.host) {
    fatal('refFromURL' + ': Host name does not match the current database: ' + '(found ' + repoInfo.host + ' but expected ' + db._repo.repoInfo_.host + ')');
  }

  return ref(db, parsedURL.path.toString());
}
/**
 * Gets a `Reference` for the location at the specified relative path.
 *
 * The relative path can either be a simple child name (for example, "ada") or
 * a deeper slash-separated path (for example, "ada/name/first").
 *
 * @param parent - The parent location.
 * @param path - A relative path from this location to the desired child
 *   location.
 * @returns The specified child location.
 */


function child(parent, path) {
  parent = (0, _util.getModularInstance)(parent);

  if (pathGetFront(parent._path) === null) {
    validateRootPathString('child', 'path', path, false);
  } else {
    validatePathString('child', 'path', path, false);
  }

  return new ReferenceImpl(parent._repo, pathChild(parent._path, path));
}
/**
 * Returns an `OnDisconnect` object - see
 * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}
 * for more information on how to use it.
 *
 * @param ref - The reference to add OnDisconnect triggers for.
 */


function onDisconnect(ref) {
  ref = (0, _util.getModularInstance)(ref);
  return new OnDisconnect(ref._repo, ref._path);
}
/**
 * Generates a new child location using a unique key and returns its
 * `Reference`.
 *
 * This is the most common pattern for adding data to a collection of items.
 *
 * If you provide a value to `push()`, the value is written to the
 * generated location. If you don't pass a value, nothing is written to the
 * database and the child remains empty (but you can use the `Reference`
 * elsewhere).
 *
 * The unique keys generated by `push()` are ordered by the current time, so the
 * resulting list of items is chronologically sorted. The keys are also
 * designed to be unguessable (they contain 72 random bits of entropy).
 *
 * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}
 * </br>See {@link ttps://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}
 *
 * @param parent - The parent location.
 * @param value - Optional value to be written at the generated location.
 * @returns Combined `Promise` and `Reference`; resolves when write is complete,
 * but can be used immediately as the `Reference` to the child location.
 */


function push(parent, value) {
  parent = (0, _util.getModularInstance)(parent);
  validateWritablePath('push', parent._path);
  validateFirebaseDataArg('push', value, parent._path, true);
  const now = repoServerTime(parent._repo);
  const name = nextPushId(now); // push() returns a ThennableReference whose promise is fulfilled with a
  // regular Reference. We use child() to create handles to two different
  // references. The first is turned into a ThennableReference below by adding
  // then() and catch() methods and is used as the return value of push(). The
  // second remains a regular Reference and is used as the fulfilled value of
  // the first ThennableReference.

  const thennablePushRef = child(parent, name);
  const pushRef = child(parent, name);
  let promise;

  if (value != null) {
    promise = set(pushRef, value).then(() => pushRef);
  } else {
    promise = Promise.resolve(pushRef);
  }

  thennablePushRef.then = promise.then.bind(promise);
  thennablePushRef.catch = promise.then.bind(promise, undefined);
  return thennablePushRef;
}
/**
 * Removes the data at this Database location.
 *
 * Any data at child locations will also be deleted.
 *
 * The effect of the remove will be visible immediately and the corresponding
 * event 'value' will be triggered. Synchronization of the remove to the
 * Firebase servers will also be started, and the returned Promise will resolve
 * when complete. If provided, the onComplete callback will be called
 * asynchronously after synchronization has finished.
 *
 * @param ref - The location to remove.
 * @returns Resolves when remove on server is complete.
 */


function remove(ref) {
  validateWritablePath('remove', ref._path);
  return set(ref, null);
}
/**
 * Writes data to this Database location.
 *
 * This will overwrite any data at this location and all child locations.
 *
 * The effect of the write will be visible immediately, and the corresponding
 * events ("value", "child_added", etc.) will be triggered. Synchronization of
 * the data to the Firebase servers will also be started, and the returned
 * Promise will resolve when complete. If provided, the `onComplete` callback
 * will be called asynchronously after synchronization has finished.
 *
 * Passing `null` for the new value is equivalent to calling `remove()`; namely,
 * all data at this location and all child locations will be deleted.
 *
 * `set()` will remove any priority stored at this location, so if priority is
 * meant to be preserved, you need to use `setWithPriority()` instead.
 *
 * Note that modifying data with `set()` will cancel any pending transactions
 * at that location, so extreme care should be taken if mixing `set()` and
 * `transaction()` to modify the same data.
 *
 * A single `set()` will generate a single "value" event at the location where
 * the `set()` was performed.
 *
 * @param ref - The location to write to.
 * @param value - The value to be written (string, number, boolean, object,
 *   array, or null).
 * @returns Resolves when write to server is complete.
 */


function set(ref, value) {
  ref = (0, _util.getModularInstance)(ref);
  validateWritablePath('set', ref._path);
  validateFirebaseDataArg('set', value, ref._path, false);
  const deferred = new _util.Deferred();
  repoSetWithPriority(ref._repo, ref._path, value,
  /*priority=*/
  null, deferred.wrapCallback(() => {}));
  return deferred.promise;
}
/**
 * Sets a priority for the data at this Database location.
 *
 * Applications need not use priority but can order collections by
 * ordinary properties (see
 * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}
 * ).
 *
 * @param ref - The location to write to.
 * @param priority - The priority to be written (string, number, or null).
 * @returns Resolves when write to server is complete.
 */


function setPriority(ref, priority) {
  ref = (0, _util.getModularInstance)(ref);
  validateWritablePath('setPriority', ref._path);
  validatePriority('setPriority', priority, false);
  const deferred = new _util.Deferred();
  repoSetWithPriority(ref._repo, pathChild(ref._path, '.priority'), priority, null, deferred.wrapCallback(() => {}));
  return deferred.promise;
}
/**
 * Writes data the Database location. Like `set()` but also specifies the
 * priority for that data.
 *
 * Applications need not use priority but can order collections by
 * ordinary properties (see
 * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}
 * ).
 *
 * @param ref - The location to write to.
 * @param value - The value to be written (string, number, boolean, object,
 *   array, or null).
 * @param priority - The priority to be written (string, number, or null).
 * @returns Resolves when write to server is complete.
 */


function setWithPriority(ref, value, priority) {
  validateWritablePath('setWithPriority', ref._path);
  validateFirebaseDataArg('setWithPriority', value, ref._path, false);
  validatePriority('setWithPriority', priority, false);

  if (ref.key === '.length' || ref.key === '.keys') {
    throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';
  }

  const deferred = new _util.Deferred();
  repoSetWithPriority(ref._repo, ref._path, value, priority, deferred.wrapCallback(() => {}));
  return deferred.promise;
}
/**
 * Writes multiple values to the Database at once.
 *
 * The `values` argument contains multiple property-value pairs that will be
 * written to the Database together. Each child property can either be a simple
 * property (for example, "name") or a relative path (for example,
 * "name/first") from the current location to the data to update.
 *
 * As opposed to the `set()` method, `update()` can be use to selectively update
 * only the referenced properties at the current location (instead of replacing
 * all the child properties at the current location).
 *
 * The effect of the write will be visible immediately, and the corresponding
 * events ('value', 'child_added', etc.) will be triggered. Synchronization of
 * the data to the Firebase servers will also be started, and the returned
 * Promise will resolve when complete. If provided, the `onComplete` callback
 * will be called asynchronously after synchronization has finished.
 *
 * A single `update()` will generate a single "value" event at the location
 * where the `update()` was performed, regardless of how many children were
 * modified.
 *
 * Note that modifying data with `update()` will cancel any pending
 * transactions at that location, so extreme care should be taken if mixing
 * `update()` and `transaction()` to modify the same data.
 *
 * Passing `null` to `update()` will remove the data at this location.
 *
 * See
 * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.
 *
 * @param ref - The location to write to.
 * @param values - Object containing multiple values.
 * @returns Resolves when update on server is complete.
 */


function update(ref, values) {
  validateFirebaseMergeDataArg('update', values, ref._path, false);
  const deferred = new _util.Deferred();
  repoUpdate(ref._repo, ref._path, values, deferred.wrapCallback(() => {}));
  return deferred.promise;
}
/**
 * Gets the most up-to-date result for this query.
 *
 * @param query - The query to run.
 * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is
 * available, or rejects if the client is unable to return a value (e.g., if the
 * server is unreachable and there is nothing cached).
 */


function get(query) {
  query = (0, _util.getModularInstance)(query);
  return repoGetValue(query._repo, query).then(node => {
    return new DataSnapshot(node, new ReferenceImpl(query._repo, query._path), query._queryParams.getIndex());
  });
}
/**
 * Represents registration for 'value' events.
 */


class ValueEventRegistration {
  constructor(callbackContext) {
    this.callbackContext = callbackContext;
  }

  respondsTo(eventType) {
    return eventType === 'value';
  }

  createEvent(change, query) {
    const index = query._queryParams.getIndex();

    return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, new ReferenceImpl(query._repo, query._path), index));
  }

  getEventRunner(eventData) {
    if (eventData.getEventType() === 'cancel') {
      return () => this.callbackContext.onCancel(eventData.error);
    } else {
      return () => this.callbackContext.onValue(eventData.snapshot, null);
    }
  }

  createCancelEvent(error, path) {
    if (this.callbackContext.hasCancelCallback) {
      return new CancelEvent(this, error, path);
    } else {
      return null;
    }
  }

  matches(other) {
    if (!(other instanceof ValueEventRegistration)) {
      return false;
    } else if (!other.callbackContext || !this.callbackContext) {
      // If no callback specified, we consider it to match any callback.
      return true;
    } else {
      return other.callbackContext.matches(this.callbackContext);
    }
  }

  hasAnyCallback() {
    return this.callbackContext !== null;
  }

}
/**
 * Represents the registration of a child_x event.
 */


class ChildEventRegistration {
  constructor(eventType, callbackContext) {
    this.eventType = eventType;
    this.callbackContext = callbackContext;
  }

  respondsTo(eventType) {
    let eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;
    eventToCheck = eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;
    return this.eventType === eventToCheck;
  }

  createCancelEvent(error, path) {
    if (this.callbackContext.hasCancelCallback) {
      return new CancelEvent(this, error, path);
    } else {
      return null;
    }
  }

  createEvent(change, query) {
    (0, _util.assert)(change.childName != null, 'Child events should have a childName.');
    const childRef = child(new ReferenceImpl(query._repo, query._path), change.childName);

    const index = query._queryParams.getIndex();

    return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, childRef, index), change.prevName);
  }

  getEventRunner(eventData) {
    if (eventData.getEventType() === 'cancel') {
      return () => this.callbackContext.onCancel(eventData.error);
    } else {
      return () => this.callbackContext.onValue(eventData.snapshot, eventData.prevName);
    }
  }

  matches(other) {
    if (other instanceof ChildEventRegistration) {
      return this.eventType === other.eventType && (!this.callbackContext || !other.callbackContext || this.callbackContext.matches(other.callbackContext));
    }

    return false;
  }

  hasAnyCallback() {
    return !!this.callbackContext;
  }

}

function addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {
  let cancelCallback;

  if (typeof cancelCallbackOrListenOptions === 'object') {
    cancelCallback = undefined;
    options = cancelCallbackOrListenOptions;
  }

  if (typeof cancelCallbackOrListenOptions === 'function') {
    cancelCallback = cancelCallbackOrListenOptions;
  }

  if (options && options.onlyOnce) {
    const userCallback = callback;

    const onceCallback = (dataSnapshot, previousChildName) => {
      repoRemoveEventCallbackForQuery(query._repo, query, container);
      userCallback(dataSnapshot, previousChildName);
    };

    onceCallback.userCallback = callback.userCallback;
    onceCallback.context = callback.context;
    callback = onceCallback;
  }

  const callbackContext = new CallbackContext(callback, cancelCallback || undefined);
  const container = eventType === 'value' ? new ValueEventRegistration(callbackContext) : new ChildEventRegistration(eventType, callbackContext);
  repoAddEventCallbackForQuery(query._repo, query, container);
  return () => repoRemoveEventCallbackForQuery(query._repo, query, container);
}

function onValue(query, callback, cancelCallbackOrListenOptions, options) {
  return addEventListener(query, 'value', callback, cancelCallbackOrListenOptions, options);
}

function onChildAdded(query, callback, cancelCallbackOrListenOptions, options) {
  return addEventListener(query, 'child_added', callback, cancelCallbackOrListenOptions, options);
}

function onChildChanged(query, callback, cancelCallbackOrListenOptions, options) {
  return addEventListener(query, 'child_changed', callback, cancelCallbackOrListenOptions, options);
}

function onChildMoved(query, callback, cancelCallbackOrListenOptions, options) {
  return addEventListener(query, 'child_moved', callback, cancelCallbackOrListenOptions, options);
}

function onChildRemoved(query, callback, cancelCallbackOrListenOptions, options) {
  return addEventListener(query, 'child_removed', callback, cancelCallbackOrListenOptions, options);
}
/**
 * Detaches a callback previously attached with `on()`.
 *
 * Detach a callback previously attached with `on()`. Note that if `on()` was
 * called multiple times with the same eventType and callback, the callback
 * will be called multiple times for each event, and `off()` must be called
 * multiple times to remove the callback. Calling `off()` on a parent listener
 * will not automatically remove listeners registered on child nodes, `off()`
 * must also be called on any child listeners to remove the callback.
 *
 * If a callback is not specified, all callbacks for the specified eventType
 * will be removed. Similarly, if no eventType is specified, all callbacks
 * for the `Reference` will be removed.
 *
 * Individual listeners can also be removed by invoking their unsubscribe
 * callbacks.
 *
 * @param query - The query that the listener was registered with.
 * @param eventType - One of the following strings: "value", "child_added",
 * "child_changed", "child_removed", or "child_moved." If omitted, all callbacks
 * for the `Reference` will be removed.
 * @param callback - The callback function that was passed to `on()` or
 * `undefined` to remove all callbacks.
 */


function off(query, eventType, callback) {
  let container = null;
  const expCallback = callback ? new CallbackContext(callback) : null;

  if (eventType === 'value') {
    container = new ValueEventRegistration(expCallback);
  } else if (eventType) {
    container = new ChildEventRegistration(eventType, expCallback);
  }

  repoRemoveEventCallbackForQuery(query._repo, query, container);
}
/**
 * A `QueryConstraint` is used to narrow the set of documents returned by a
 * Database query. `QueryConstraint`s are created by invoking {@link endAt},
 * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link
 * limitToFirst}, {@link limitToLast}, {@link orderByChild},
 * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,
 * {@link orderByValue}  or {@link equalTo} and
 * can then be passed to {@link query} to create a new query instance that
 * also contains this `QueryConstraint`.
 */


class QueryConstraint {}

exports.QueryConstraint = QueryConstraint;

class QueryEndAtConstraint extends QueryConstraint {
  constructor(_value, _key) {
    super();
    this._value = _value;
    this._key = _key;
  }

  _apply(query) {
    validateFirebaseDataArg('endAt', this._value, query._path, true);
    const newParams = queryParamsEndAt(query._queryParams, this._value, this._key);
    validateLimit(newParams);
    validateQueryEndpoints(newParams);

    if (query._queryParams.hasEnd()) {
      throw new Error('endAt: Starting point was already set (by another call to endAt, ' + 'endBefore or equalTo).');
    }

    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);
  }

}
/**
 * Creates a `QueryConstraint` with the specified ending point.
 *
 * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`
 * allows you to choose arbitrary starting and ending points for your queries.
 *
 * The ending point is inclusive, so children with exactly the specified value
 * will be included in the query. The optional key argument can be used to
 * further limit the range of the query. If it is specified, then children that
 * have exactly the specified value must also have a key name less than or equal
 * to the specified key.
 *
 * You can read more about `endAt()` in
 * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.
 *
 * @param value - The value to end at. The argument type depends on which
 * `orderBy*()` function was used in this query. Specify a value that matches
 * the `orderBy*()` type. When used in combination with `orderByKey()`, the
 * value must be a string.
 * @param key - The child key to end at, among the children with the previously
 * specified priority. This argument is only allowed if ordering by child,
 * value, or priority.
 */


function endAt(value, key) {
  validateKey('endAt', 'key', key, true);
  return new QueryEndAtConstraint(value, key);
}

class QueryEndBeforeConstraint extends QueryConstraint {
  constructor(_value, _key) {
    super();
    this._value = _value;
    this._key = _key;
  }

  _apply(query) {
    validateFirebaseDataArg('endBefore', this._value, query._path, false);
    const newParams = queryParamsEndBefore(query._queryParams, this._value, this._key);
    validateLimit(newParams);
    validateQueryEndpoints(newParams);

    if (query._queryParams.hasEnd()) {
      throw new Error('endBefore: Starting point was already set (by another call to endAt, ' + 'endBefore or equalTo).');
    }

    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);
  }

}
/**
 * Creates a `QueryConstraint` with the specified ending point (exclusive).
 *
 * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`
 * allows you to choose arbitrary starting and ending points for your queries.
 *
 * The ending point is exclusive. If only a value is provided, children
 * with a value less than the specified value will be included in the query.
 * If a key is specified, then children must have a value lesss than or equal
 * to the specified value and a a key name less than the specified key.
 *
 * @param value - The value to end before. The argument type depends on which
 * `orderBy*()` function was used in this query. Specify a value that matches
 * the `orderBy*()` type. When used in combination with `orderByKey()`, the
 * value must be a string.
 * @param key - The child key to end before, among the children with the
 * previously specified priority. This argument is only allowed if ordering by
 * child, value, or priority.
 */


function endBefore(value, key) {
  validateKey('endBefore', 'key', key, true);
  return new QueryEndBeforeConstraint(value, key);
}

class QueryStartAtConstraint extends QueryConstraint {
  constructor(_value, _key) {
    super();
    this._value = _value;
    this._key = _key;
  }

  _apply(query) {
    validateFirebaseDataArg('startAt', this._value, query._path, true);
    const newParams = queryParamsStartAt(query._queryParams, this._value, this._key);
    validateLimit(newParams);
    validateQueryEndpoints(newParams);

    if (query._queryParams.hasStart()) {
      throw new Error('startAt: Starting point was already set (by another call to startAt, ' + 'startBefore or equalTo).');
    }

    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);
  }

}
/**
 * Creates a `QueryConstraint` with the specified starting point.
 *
 * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`
 * allows you to choose arbitrary starting and ending points for your queries.
 *
 * The starting point is inclusive, so children with exactly the specified value
 * will be included in the query. The optional key argument can be used to
 * further limit the range of the query. If it is specified, then children that
 * have exactly the specified value must also have a key name greater than or
 * equal to the specified key.
 *
 * You can read more about `startAt()` in
 * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.
 *
 * @param value - The value to start at. The argument type depends on which
 * `orderBy*()` function was used in this query. Specify a value that matches
 * the `orderBy*()` type. When used in combination with `orderByKey()`, the
 * value must be a string.
 * @param key - The child key to start at. This argument is only allowed if
 * ordering by child, value, or priority.
 */


function startAt(value = null, key) {
  validateKey('startAt', 'key', key, true);
  return new QueryStartAtConstraint(value, key);
}

class QueryStartAfterConstraint extends QueryConstraint {
  constructor(_value, _key) {
    super();
    this._value = _value;
    this._key = _key;
  }

  _apply(query) {
    validateFirebaseDataArg('startAfter', this._value, query._path, false);
    const newParams = queryParamsStartAfter(query._queryParams, this._value, this._key);
    validateLimit(newParams);
    validateQueryEndpoints(newParams);

    if (query._queryParams.hasStart()) {
      throw new Error('startAfter: Starting point was already set (by another call to startAt, ' + 'startAfter, or equalTo).');
    }

    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);
  }

}
/**
 * Creates a `QueryConstraint` with the specified starting point (exclusive).
 *
 * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`
 * allows you to choose arbitrary starting and ending points for your queries.
 *
 * The starting point is exclusive. If only a value is provided, children
 * with a value greater than the specified value will be included in the query.
 * If a key is specified, then children must have a value greater than or equal
 * to the specified value and a a key name greater than the specified key.
 *
 * @param value - The value to start after. The argument type depends on which
 * `orderBy*()` function was used in this query. Specify a value that matches
 * the `orderBy*()` type. When used in combination with `orderByKey()`, the
 * value must be a string.
 * @param key - The child key to start after. This argument is only allowed if
 * ordering by child, value, or priority.
 */


function startAfter(value, key) {
  validateKey('startAfter', 'key', key, true);
  return new QueryStartAfterConstraint(value, key);
}

class QueryLimitToFirstConstraint extends QueryConstraint {
  constructor(_limit) {
    super();
    this._limit = _limit;
  }

  _apply(query) {
    if (query._queryParams.hasLimit()) {
      throw new Error('limitToFirst: Limit was already set (by another call to limitToFirst ' + 'or limitToLast).');
    }

    return new QueryImpl(query._repo, query._path, queryParamsLimitToFirst(query._queryParams, this._limit), query._orderByCalled);
  }

}
/**
 * Creates a new `QueryConstraint` that if limited to the first specific number
 * of children.
 *
 * The `limitToFirst()` method is used to set a maximum number of children to be
 * synced for a given callback. If we set a limit of 100, we will initially only
 * receive up to 100 `child_added` events. If we have fewer than 100 messages
 * stored in our Database, a `child_added` event will fire for each message.
 * However, if we have over 100 messages, we will only receive a `child_added`
 * event for the first 100 ordered messages. As items change, we will receive
 * `child_removed` events for each item that drops out of the active list so
 * that the total number stays at 100.
 *
 * You can read more about `limitToFirst()` in
 * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.
 *
 * @param limit - The maximum number of nodes to include in this query.
 */


function limitToFirst(limit) {
  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {
    throw new Error('limitToFirst: First argument must be a positive integer.');
  }

  return new QueryLimitToFirstConstraint(limit);
}

class QueryLimitToLastConstraint extends QueryConstraint {
  constructor(_limit) {
    super();
    this._limit = _limit;
  }

  _apply(query) {
    if (query._queryParams.hasLimit()) {
      throw new Error('limitToLast: Limit was already set (by another call to limitToFirst ' + 'or limitToLast).');
    }

    return new QueryImpl(query._repo, query._path, queryParamsLimitToLast(query._queryParams, this._limit), query._orderByCalled);
  }

}
/**
 * Creates a new `QueryConstraint` that is limited to return only the last
 * specified number of children.
 *
 * The `limitToLast()` method is used to set a maximum number of children to be
 * synced for a given callback. If we set a limit of 100, we will initially only
 * receive up to 100 `child_added` events. If we have fewer than 100 messages
 * stored in our Database, a `child_added` event will fire for each message.
 * However, if we have over 100 messages, we will only receive a `child_added`
 * event for the last 100 ordered messages. As items change, we will receive
 * `child_removed` events for each item that drops out of the active list so
 * that the total number stays at 100.
 *
 * You can read more about `limitToLast()` in
 * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.
 *
 * @param limit - The maximum number of nodes to include in this query.
 */


function limitToLast(limit) {
  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {
    throw new Error('limitToLast: First argument must be a positive integer.');
  }

  return new QueryLimitToLastConstraint(limit);
}

class QueryOrderByChildConstraint extends QueryConstraint {
  constructor(_path) {
    super();
    this._path = _path;
  }

  _apply(query) {
    validateNoPreviousOrderByCall(query, 'orderByChild');
    const parsedPath = new Path(this._path);

    if (pathIsEmpty(parsedPath)) {
      throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');
    }

    const index = new PathIndex(parsedPath);
    const newParams = queryParamsOrderBy(query._queryParams, index);
    validateQueryEndpoints(newParams);
    return new QueryImpl(query._repo, query._path, newParams,
    /*orderByCalled=*/
    true);
  }

}
/**
 * Creates a new `QueryConstraint` that orders by the specified child key.
 *
 * Queries can only order by one key at a time. Calling `orderByChild()`
 * multiple times on the same query is an error.
 *
 * Firebase queries allow you to order your data by any child key on the fly.
 * However, if you know in advance what your indexes will be, you can define
 * them via the .indexOn rule in your Security Rules for better performance. See
 * the{@link https://firebase.google.com/docs/database/security/indexing-data}
 * rule for more information.
 *
 * You can read more about `orderByChild()` in
 * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.
 *
 * @param path - The path to order by.
 */


function orderByChild(path) {
  if (path === '$key') {
    throw new Error('orderByChild: "$key" is invalid.  Use orderByKey() instead.');
  } else if (path === '$priority') {
    throw new Error('orderByChild: "$priority" is invalid.  Use orderByPriority() instead.');
  } else if (path === '$value') {
    throw new Error('orderByChild: "$value" is invalid.  Use orderByValue() instead.');
  }

  validatePathString('orderByChild', 'path', path, false);
  return new QueryOrderByChildConstraint(path);
}

class QueryOrderByKeyConstraint extends QueryConstraint {
  _apply(query) {
    validateNoPreviousOrderByCall(query, 'orderByKey');
    const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);
    validateQueryEndpoints(newParams);
    return new QueryImpl(query._repo, query._path, newParams,
    /*orderByCalled=*/
    true);
  }

}
/**
 * Creates a new `QueryConstraint` that orders by the key.
 *
 * Sorts the results of a query by their (ascending) key values.
 *
 * You can read more about `orderByKey()` in
 * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.
 */


function orderByKey() {
  return new QueryOrderByKeyConstraint();
}

class QueryOrderByPriorityConstraint extends QueryConstraint {
  _apply(query) {
    validateNoPreviousOrderByCall(query, 'orderByPriority');
    const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);
    validateQueryEndpoints(newParams);
    return new QueryImpl(query._repo, query._path, newParams,
    /*orderByCalled=*/
    true);
  }

}
/**
 * Creates a new `QueryConstraint` that orders by priority.
 *
 * Applications need not use priority but can order collections by
 * ordinary properties (see
 * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}
 * for alternatives to priority.
 */


function orderByPriority() {
  return new QueryOrderByPriorityConstraint();
}

class QueryOrderByValueConstraint extends QueryConstraint {
  _apply(query) {
    validateNoPreviousOrderByCall(query, 'orderByValue');
    const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);
    validateQueryEndpoints(newParams);
    return new QueryImpl(query._repo, query._path, newParams,
    /*orderByCalled=*/
    true);
  }

}
/**
 * Creates a new `QueryConstraint` that orders by value.
 *
 * If the children of a query are all scalar values (string, number, or
 * boolean), you can order the results by their (ascending) values.
 *
 * You can read more about `orderByValue()` in
 * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.
 */


function orderByValue() {
  return new QueryOrderByValueConstraint();
}

class QueryEqualToValueConstraint extends QueryConstraint {
  constructor(_value, _key) {
    super();
    this._value = _value;
    this._key = _key;
  }

  _apply(query) {
    validateFirebaseDataArg('equalTo', this._value, query._path, false);

    if (query._queryParams.hasStart()) {
      throw new Error('equalTo: Starting point was already set (by another call to startAt/startAfter or ' + 'equalTo).');
    }

    if (query._queryParams.hasEnd()) {
      throw new Error('equalTo: Ending point was already set (by another call to endAt/endBefore or ' + 'equalTo).');
    }

    return new QueryEndAtConstraint(this._value, this._key)._apply(new QueryStartAtConstraint(this._value, this._key)._apply(query));
  }

}
/**
 * Creates a `QueryConstraint` that includes children that match the specified
 * value.
 *
 * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`
 * allows you to choose arbitrary starting and ending points for your queries.
 *
 * The optional key argument can be used to further limit the range of the
 * query. If it is specified, then children that have exactly the specified
 * value must also have exactly the specified key as their key name. This can be
 * used to filter result sets with many matches for the same value.
 *
 * You can read more about `equalTo()` in
 * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.
 *
 * @param value - The value to match for. The argument type depends on which
 * `orderBy*()` function was used in this query. Specify a value that matches
 * the `orderBy*()` type. When used in combination with `orderByKey()`, the
 * value must be a string.
 * @param key - The child key to start at, among the children with the
 * previously specified priority. This argument is only allowed if ordering by
 * child, value, or priority.
 */


function equalTo(value, key) {
  validateKey('equalTo', 'key', key, true);
  return new QueryEqualToValueConstraint(value, key);
}
/**
 * Creates a new immutable instance of `Query` that is extended to also include
 * additional query constraints.
 *
 * @param query - The Query instance to use as a base for the new constraints.
 * @param queryConstraints - The list of `QueryConstraint`s to apply.
 * @throws if any of the provided query constraints cannot be combined with the
 * existing or new constraints.
 */


function query(query, ...queryConstraints) {
  let queryImpl = (0, _util.getModularInstance)(query);

  for (const constraint of queryConstraints) {
    queryImpl = constraint._apply(queryImpl);
  }

  return queryImpl;
}
/**
 * Define reference constructor in various modules
 *
 * We are doing this here to avoid several circular
 * dependency issues
 */


syncPointSetReferenceConstructor(ReferenceImpl);
syncTreeSetReferenceConstructor(ReferenceImpl);
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This variable is also defined in the firebase Node.js Admin SDK. Before
 * modifying this definition, consult the definition in:
 *
 * https://github.com/firebase/firebase-admin-node
 *
 * and make sure the two are consistent.
 */

const FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';
/**
 * Creates and caches `Repo` instances.
 */

const repos = {};
/**
 * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).
 */

let useRestClient = false;
/**
 * Update an existing `Repo` in place to point to a new host/port.
 */

function repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {
  repo.repoInfo_ = new RepoInfo(`${host}:${port}`,
  /* secure= */
  false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams);

  if (tokenProvider) {
    repo.authTokenProvider_ = tokenProvider;
  }
}
/**
 * This function should only ever be called to CREATE a new database instance.
 * @internal
 */


function repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {
  let dbUrl = url || app.options.databaseURL;

  if (dbUrl === undefined) {
    if (!app.options.projectId) {
      fatal("Can't determine Firebase Database URL. Be sure to include " + ' a Project ID when calling firebase.initializeApp().');
    }

    log('Using default host for project ', app.options.projectId);
    dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;
  }

  let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);
  let repoInfo = parsedUrl.repoInfo;
  let isEmulator;
  let dbEmulatorHost = undefined;

  if (typeof process !== 'undefined') {
    dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];
  }

  if (dbEmulatorHost) {
    isEmulator = true;
    dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;
    parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);
    repoInfo = parsedUrl.repoInfo;
  } else {
    isEmulator = !parsedUrl.repoInfo.secure;
  }

  const authTokenProvider = nodeAdmin && isEmulator ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER) : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);
  validateUrl('Invalid Firebase Database URL', parsedUrl);

  if (!pathIsEmpty(parsedUrl.path)) {
    fatal('Database URL must point to the root of a Firebase Database ' + '(not including a child path).');
  }

  const repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));
  return new Database(repo, app);
}
/**
 * Remove the repo and make sure it is disconnected.
 *
 */


function repoManagerDeleteRepo(repo, appName) {
  const appRepos = repos[appName]; // This should never happen...

  if (!appRepos || appRepos[repo.key] !== repo) {
    fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);
  }

  repoInterrupt(repo);
  delete appRepos[repo.key];
}
/**
 * Ensures a repo doesn't already exist and then creates one using the
 * provided app.
 *
 * @param repoInfo - The metadata about the Repo
 * @returns The Repo object for the specified server / repoName.
 */


function repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {
  let appRepos = repos[app.name];

  if (!appRepos) {
    appRepos = {};
    repos[app.name] = appRepos;
  }

  let repo = appRepos[repoInfo.toURLString()];

  if (repo) {
    fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');
  }

  repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);
  appRepos[repoInfo.toURLString()] = repo;
  return repo;
}
/**
 * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.
 */


function repoManagerForceRestClient(forceRestClient) {
  useRestClient = forceRestClient;
}
/**
 * Class representing a Firebase Realtime Database.
 */


class Database {
  /** @hideconstructor */
  constructor(_repoInternal,
  /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */
  app) {
    this._repoInternal = _repoInternal;
    this.app = app;
    /** Represents a `Database` instance. */

    this['type'] = 'database';
    /** Track if the instance has been used (root or repo accessed) */

    this._instanceStarted = false;
  }

  get _repo() {
    if (!this._instanceStarted) {
      repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);
      this._instanceStarted = true;
    }

    return this._repoInternal;
  }

  get _root() {
    if (!this._rootInternal) {
      this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());
    }

    return this._rootInternal;
  }

  _delete() {
    if (this._rootInternal !== null) {
      repoManagerDeleteRepo(this._repo, this.app.name);
      this._repoInternal = null;
      this._rootInternal = null;
    }

    return Promise.resolve();
  }

  _checkNotDeleted(apiName) {
    if (this._rootInternal === null) {
      fatal('Cannot call ' + apiName + ' on a deleted database.');
    }
  }

}
/**
 * Returns the instance of the Realtime Database SDK that is associated
 * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with
 * with default settings if no instance exists or if the existing instance uses
 * a custom database URL.
 *
 * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime
 * Database instance is associated with.
 * @param url - The URL of the Realtime Database instance to connect to. If not
 * provided, the SDK connects to the default instance of the Firebase App.
 * @returns The `Database` instance of the provided app.
 */


exports.Database = Database;

function getDatabase(app = (0, _app.getApp)(), url) {
  return (0, _app._getProvider)(app, 'database').getImmediate({
    identifier: url
  });
}
/**
 * Modify the provided instance to communicate with the Realtime Database
 * emulator.
 *
 * <p>Note: This method must be called before performing any other operation.
 *
 * @param db - The instance to modify.
 * @param host - The emulator host (ex: localhost)
 * @param port - The emulator port (ex: 8080)
 * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules
 */


function connectDatabaseEmulator(db, host, port, options = {}) {
  db = (0, _util.getModularInstance)(db);

  db._checkNotDeleted('useEmulator');

  if (db._instanceStarted) {
    fatal('Cannot call useEmulator() after instance has already been initialized.');
  }

  const repo = db._repoInternal;
  let tokenProvider = undefined;

  if (repo.repoInfo_.nodeAdmin) {
    if (options.mockUserToken) {
      fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the "firebase" package instead of "firebase-admin".');
    }

    tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);
  } else if (options.mockUserToken) {
    const token = typeof options.mockUserToken === 'string' ? options.mockUserToken : (0, _util.createMockUserToken)(options.mockUserToken, db.app.options.projectId);
    tokenProvider = new EmulatorTokenProvider(token);
  } // Modify the repo to apply emulator settings


  repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);
}
/**
 * Disconnects from the server (all Database operations will be completed
 * offline).
 *
 * The client automatically maintains a persistent connection to the Database
 * server, which will remain active indefinitely and reconnect when
 * disconnected. However, the `goOffline()` and `goOnline()` methods may be used
 * to control the client connection in cases where a persistent connection is
 * undesirable.
 *
 * While offline, the client will no longer receive data updates from the
 * Database. However, all Database operations performed locally will continue to
 * immediately fire events, allowing your application to continue behaving
 * normally. Additionally, each operation performed locally will automatically
 * be queued and retried upon reconnection to the Database server.
 *
 * To reconnect to the Database and begin receiving remote events, see
 * `goOnline()`.
 *
 * @param db - The instance to disconnect.
 */


function goOffline(db) {
  db = (0, _util.getModularInstance)(db);

  db._checkNotDeleted('goOffline');

  repoInterrupt(db._repo);
}
/**
 * Reconnects to the server and synchronizes the offline Database state
 * with the server state.
 *
 * This method should be used after disabling the active connection with
 * `goOffline()`. Once reconnected, the client will transmit the proper data
 * and fire the appropriate events so that your client "catches up"
 * automatically.
 *
 * @param db - The instance to reconnect.
 */


function goOnline(db) {
  db = (0, _util.getModularInstance)(db);

  db._checkNotDeleted('goOnline');

  repoResume(db._repo);
}

function enableLogging(logger, persistent) {
  enableLogging$1(logger, persistent);
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function registerDatabase(variant) {
  setSDKVersion(_app.SDK_VERSION);
  (0, _app._registerComponent)(new _component.Component('database', (container, {
    instanceIdentifier: url
  }) => {
    const app = container.getProvider('app').getImmediate();
    const authProvider = container.getProvider('auth-internal');
    const appCheckProvider = container.getProvider('app-check-internal');
    return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url);
  }, "PUBLIC"
  /* PUBLIC */
  ).setMultipleInstances(true));
  (0, _app.registerVersion)(name, version, variant);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const SERVER_TIMESTAMP = {
  '.sv': 'timestamp'
};
/**
 * Returns a placeholder value for auto-populating the current timestamp (time
 * since the Unix epoch, in milliseconds) as determined by the Firebase
 * servers.
 */

function serverTimestamp() {
  return SERVER_TIMESTAMP;
}
/**
 * Returns a placeholder value that can be used to atomically increment the
 * current database value by the provided delta.
 *
 * @param delta - the amount to modify the current value atomically.
 * @returns A placeholder value for modifying data atomically server-side.
 */


function increment(delta) {
  return {
    '.sv': {
      'increment': delta
    }
  };
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A type for the resolve value of {@link runTransaction}.
 */


class TransactionResult {
  /** @hideconstructor */
  constructor(
  /** Whether the transaction was successfully committed. */
  committed,
  /** The resulting data snapshot. */
  snapshot) {
    this.committed = committed;
    this.snapshot = snapshot;
  }
  /** Returns a JSON-serializable representation of this object. */


  toJSON() {
    return {
      committed: this.committed,
      snapshot: this.snapshot.toJSON()
    };
  }

}
/**
 * Atomically modifies the data at this location.
 *
 * Atomically modify the data at this location. Unlike a normal `set()`, which
 * just overwrites the data regardless of its previous value, `runTransaction()` is
 * used to modify the existing value to a new value, ensuring there are no
 * conflicts with other clients writing to the same location at the same time.
 *
 * To accomplish this, you pass `runTransaction()` an update function which is
 * used to transform the current value into a new value. If another client
 * writes to the location before your new value is successfully written, your
 * update function will be called again with the new current value, and the
 * write will be retried. This will happen repeatedly until your write succeeds
 * without conflict or you abort the transaction by not returning a value from
 * your update function.
 *
 * Note: Modifying data with `set()` will cancel any pending transactions at
 * that location, so extreme care should be taken if mixing `set()` and
 * `runTransaction()` to update the same data.
 *
 * Note: When using transactions with Security and Firebase Rules in place, be
 * aware that a client needs `.read` access in addition to `.write` access in
 * order to perform a transaction. This is because the client-side nature of
 * transactions requires the client to read the data in order to transactionally
 * update it.
 *
 * @param ref - The location to atomically modify.
 * @param transactionUpdate - A developer-supplied function which will be passed
 * the current data stored at this location (as a JavaScript object). The
 * function should return the new value it would like written (as a JavaScript
 * object). If `undefined` is returned (i.e. you return with no arguments) the
 * transaction will be aborted and the data at this location will not be
 * modified.
 * @param options - An options object to configure transactions.
 * @returns A `Promise` that can optionally be used instead of the `onComplete`
 * callback to handle success and failure.
 */


exports.TransactionResult = TransactionResult;

function runTransaction(ref, // eslint-disable-next-line @typescript-eslint/no-explicit-any
transactionUpdate, options) {
  var _a;

  ref = (0, _util.getModularInstance)(ref);
  validateWritablePath('Reference.transaction', ref._path);

  if (ref.key === '.length' || ref.key === '.keys') {
    throw 'Reference.transaction failed: ' + ref.key + ' is a read-only object.';
  }

  const applyLocally = (_a = options === null || options === void 0 ? void 0 : options.applyLocally) !== null && _a !== void 0 ? _a : true;
  const deferred = new _util.Deferred();

  const promiseComplete = (error, committed, node) => {
    let dataSnapshot = null;

    if (error) {
      deferred.reject(error);
    } else {
      dataSnapshot = new DataSnapshot(node, new ReferenceImpl(ref._repo, ref._path), PRIORITY_INDEX);
      deferred.resolve(new TransactionResult(committed, dataSnapshot));
    }
  }; // Add a watch to make sure we get server updates.


  const unwatcher = onValue(ref, () => {});
  repoStartTransaction(ref._repo, ref._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);
  return deferred.promise;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any


PersistentConnection.prototype.simpleListen = function (pathString, onComplete) {
  this.sendRequest('q', {
    p: pathString
  }, onComplete);
}; // eslint-disable-next-line @typescript-eslint/no-explicit-any


PersistentConnection.prototype.echo = function (data, onEcho) {
  this.sendRequest('echo', {
    d: data
  }, onEcho);
};
/**
 * @internal
 */


const hijackHash = function (newHash) {
  const oldPut = PersistentConnection.prototype.put;

  PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {
    if (hash !== undefined) {
      hash = newHash();
    }

    oldPut.call(this, pathString, data, onComplete, hash);
  };

  return function () {
    PersistentConnection.prototype.put = oldPut;
  };
};
/**
 * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.
 * @internal
 */


exports._TEST_ACCESS_hijackHash = hijackHash;

const forceRestClient = function (forceRestClient) {
  repoManagerForceRestClient(forceRestClient);
};
/**
 * Firebase Realtime Database
 *
 * @packageDocumentation
 */


exports._TEST_ACCESS_forceRestClient = forceRestClient;
registerDatabase();
},{"@firebase/app":"node_modules/@firebase/app/dist/index.esm2017.js","@firebase/component":"node_modules/@firebase/component/dist/index.esm.js","@firebase/util":"node_modules/@firebase/util/dist/index.esm.js","@firebase/logger":"node_modules/@firebase/logger/dist/index.esm.js","process":"node_modules/process/browser.js"}],"node_modules/@firebase/database-compat/dist/index.esm2017.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.registerDatabase = registerDatabase;

var _appCompat = _interopRequireDefault(require("@firebase/app-compat"));

var _component = require("@firebase/component");

var _database2 = require("@firebase/database");

var _util = require("@firebase/util");

var _logger = require("@firebase/logger");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const name = "@firebase/database-compat";
const version = "0.1.0";
const logClient = new _logger.Logger('@firebase/database-compat');

const warn = function (msg) {
  const message = 'FIREBASE WARNING: ' + msg;
  logClient.warn(message);
};

const validateBoolean = function (fnName, argumentName, bool, optional) {
  if (optional && bool === undefined) {
    return;
  }

  if (typeof bool !== 'boolean') {
    throw new Error((0, _util.errorPrefix)(fnName, argumentName) + 'must be a boolean.');
  }
};

const validateEventType = function (fnName, eventType, optional) {
  if (optional && eventType === undefined) {
    return;
  }

  switch (eventType) {
    case 'value':
    case 'child_added':
    case 'child_removed':
    case 'child_changed':
    case 'child_moved':
      break;

    default:
      throw new Error((0, _util.errorPrefix)(fnName, 'eventType') + 'must be a valid event type = "value", "child_added", "child_removed", ' + '"child_changed", or "child_moved".');
  }
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


class OnDisconnect {
  constructor(_delegate) {
    this._delegate = _delegate;
  }

  cancel(onComplete) {
    (0, _util.validateArgCount)('OnDisconnect.cancel', 0, 1, arguments.length);
    (0, _util.validateCallback)('OnDisconnect.cancel', 'onComplete', onComplete, true);

    const result = this._delegate.cancel();

    if (onComplete) {
      result.then(() => onComplete(null), error => onComplete(error));
    }

    return result;
  }

  remove(onComplete) {
    (0, _util.validateArgCount)('OnDisconnect.remove', 0, 1, arguments.length);
    (0, _util.validateCallback)('OnDisconnect.remove', 'onComplete', onComplete, true);

    const result = this._delegate.remove();

    if (onComplete) {
      result.then(() => onComplete(null), error => onComplete(error));
    }

    return result;
  }

  set(value, onComplete) {
    (0, _util.validateArgCount)('OnDisconnect.set', 1, 2, arguments.length);
    (0, _util.validateCallback)('OnDisconnect.set', 'onComplete', onComplete, true);

    const result = this._delegate.set(value);

    if (onComplete) {
      result.then(() => onComplete(null), error => onComplete(error));
    }

    return result;
  }

  setWithPriority(value, priority, onComplete) {
    (0, _util.validateArgCount)('OnDisconnect.setWithPriority', 2, 3, arguments.length);
    (0, _util.validateCallback)('OnDisconnect.setWithPriority', 'onComplete', onComplete, true);

    const result = this._delegate.setWithPriority(value, priority);

    if (onComplete) {
      result.then(() => onComplete(null), error => onComplete(error));
    }

    return result;
  }

  update(objectToMerge, onComplete) {
    (0, _util.validateArgCount)('OnDisconnect.update', 1, 2, arguments.length);

    if (Array.isArray(objectToMerge)) {
      const newObjectToMerge = {};

      for (let i = 0; i < objectToMerge.length; ++i) {
        newObjectToMerge['' + i] = objectToMerge[i];
      }

      objectToMerge = newObjectToMerge;
      warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' + 'existing data, or an Object with integer keys if you really do want to only update some of the children.');
    }

    (0, _util.validateCallback)('OnDisconnect.update', 'onComplete', onComplete, true);

    const result = this._delegate.update(objectToMerge);

    if (onComplete) {
      result.then(() => onComplete(null), error => onComplete(error));
    }

    return result;
  }

}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


class TransactionResult {
  /**
   * A type for the resolve value of Firebase.transaction.
   */
  constructor(committed, snapshot) {
    this.committed = committed;
    this.snapshot = snapshot;
  } // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary
  // for end-users


  toJSON() {
    (0, _util.validateArgCount)('TransactionResult.toJSON', 0, 1, arguments.length);
    return {
      committed: this.committed,
      snapshot: this.snapshot.toJSON()
    };
  }

}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Class representing a firebase data snapshot.  It wraps a SnapshotNode and
 * surfaces the public methods (val, forEach, etc.) we want to expose.
 */


class DataSnapshot {
  constructor(_database, _delegate) {
    this._database = _database;
    this._delegate = _delegate;
  }
  /**
   * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is
   * empty.
   *
   * @returns JSON representation of the DataSnapshot contents, or null if empty.
   */


  val() {
    (0, _util.validateArgCount)('DataSnapshot.val', 0, 0, arguments.length);
    return this._delegate.val();
  }
  /**
   * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting
   * the entire node contents.
   * @returns JSON representation of the DataSnapshot contents, or null if empty.
   */


  exportVal() {
    (0, _util.validateArgCount)('DataSnapshot.exportVal', 0, 0, arguments.length);
    return this._delegate.exportVal();
  } // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary
  // for end-users


  toJSON() {
    // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content
    (0, _util.validateArgCount)('DataSnapshot.toJSON', 0, 1, arguments.length);
    return this._delegate.toJSON();
  }
  /**
   * Returns whether the snapshot contains a non-null value.
   *
   * @returns Whether the snapshot contains a non-null value, or is empty.
   */


  exists() {
    (0, _util.validateArgCount)('DataSnapshot.exists', 0, 0, arguments.length);
    return this._delegate.exists();
  }
  /**
   * Returns a DataSnapshot of the specified child node's contents.
   *
   * @param path - Path to a child.
   * @returns DataSnapshot for child node.
   */


  child(path) {
    (0, _util.validateArgCount)('DataSnapshot.child', 0, 1, arguments.length); // Ensure the childPath is a string (can be a number)

    path = String(path);
    (0, _database2._validatePathString)('DataSnapshot.child', 'path', path, false);
    return new DataSnapshot(this._database, this._delegate.child(path));
  }
  /**
   * Returns whether the snapshot contains a child at the specified path.
   *
   * @param path - Path to a child.
   * @returns Whether the child exists.
   */


  hasChild(path) {
    (0, _util.validateArgCount)('DataSnapshot.hasChild', 1, 1, arguments.length);
    (0, _database2._validatePathString)('DataSnapshot.hasChild', 'path', path, false);
    return this._delegate.hasChild(path);
  }
  /**
   * Returns the priority of the object, or null if no priority was set.
   *
   * @returns The priority.
   */


  getPriority() {
    (0, _util.validateArgCount)('DataSnapshot.getPriority', 0, 0, arguments.length);
    return this._delegate.priority;
  }
  /**
   * Iterates through child nodes and calls the specified action for each one.
   *
   * @param action - Callback function to be called
   * for each child.
   * @returns True if forEach was canceled by action returning true for
   * one of the child nodes.
   */


  forEach(action) {
    (0, _util.validateArgCount)('DataSnapshot.forEach', 1, 1, arguments.length);
    (0, _util.validateCallback)('DataSnapshot.forEach', 'action', action, false);
    return this._delegate.forEach(expDataSnapshot => action(new DataSnapshot(this._database, expDataSnapshot)));
  }
  /**
   * Returns whether this DataSnapshot has children.
   * @returns True if the DataSnapshot contains 1 or more child nodes.
   */


  hasChildren() {
    (0, _util.validateArgCount)('DataSnapshot.hasChildren', 0, 0, arguments.length);
    return this._delegate.hasChildren();
  }

  get key() {
    return this._delegate.key;
  }
  /**
   * Returns the number of children for this DataSnapshot.
   * @returns The number of children that this DataSnapshot contains.
   */


  numChildren() {
    (0, _util.validateArgCount)('DataSnapshot.numChildren', 0, 0, arguments.length);
    return this._delegate.size;
  }
  /**
   * @returns The Firebase reference for the location this snapshot's data came
   * from.
   */


  getRef() {
    (0, _util.validateArgCount)('DataSnapshot.ref', 0, 0, arguments.length);
    return new Reference(this._database, this._delegate.ref);
  }

  get ref() {
    return this.getRef();
  }

}
/**
 * A Query represents a filter to be applied to a firebase location.  This object purely represents the
 * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.
 *
 * Since every Firebase reference is a query, Firebase inherits from this object.
 */


class Query {
  constructor(database, _delegate) {
    this.database = database;
    this._delegate = _delegate;
  }

  on(eventType, callback, cancelCallbackOrContext, context) {
    var _a;

    (0, _util.validateArgCount)('Query.on', 2, 4, arguments.length);
    (0, _util.validateCallback)('Query.on', 'callback', callback, false);
    const ret = Query.getCancelAndContextArgs_('Query.on', cancelCallbackOrContext, context);

    const valueCallback = (expSnapshot, previousChildName) => {
      callback.call(ret.context, new DataSnapshot(this.database, expSnapshot), previousChildName);
    };

    valueCallback.userCallback = callback;
    valueCallback.context = ret.context;
    const cancelCallback = (_a = ret.cancel) === null || _a === void 0 ? void 0 : _a.bind(ret.context);

    switch (eventType) {
      case 'value':
        (0, _database2.onValue)(this._delegate, valueCallback, cancelCallback);
        return callback;

      case 'child_added':
        (0, _database2.onChildAdded)(this._delegate, valueCallback, cancelCallback);
        return callback;

      case 'child_removed':
        (0, _database2.onChildRemoved)(this._delegate, valueCallback, cancelCallback);
        return callback;

      case 'child_changed':
        (0, _database2.onChildChanged)(this._delegate, valueCallback, cancelCallback);
        return callback;

      case 'child_moved':
        (0, _database2.onChildMoved)(this._delegate, valueCallback, cancelCallback);
        return callback;

      default:
        throw new Error((0, _util.errorPrefix)('Query.on', 'eventType') + 'must be a valid event type = "value", "child_added", "child_removed", ' + '"child_changed", or "child_moved".');
    }
  }

  off(eventType, callback, context) {
    (0, _util.validateArgCount)('Query.off', 0, 3, arguments.length);
    validateEventType('Query.off', eventType, true);
    (0, _util.validateCallback)('Query.off', 'callback', callback, true);
    (0, _util.validateContextObject)('Query.off', 'context', context, true);

    if (callback) {
      const valueCallback = () => {};

      valueCallback.userCallback = callback;
      valueCallback.context = context;
      (0, _database2.off)(this._delegate, eventType, valueCallback);
    } else {
      (0, _database2.off)(this._delegate, eventType);
    }
  }
  /**
   * Get the server-value for this query, or return a cached value if not connected.
   */


  get() {
    return (0, _database2.get)(this._delegate).then(expSnapshot => {
      return new DataSnapshot(this.database, expSnapshot);
    });
  }
  /**
   * Attaches a listener, waits for the first event, and then removes the listener
   */


  once(eventType, callback, failureCallbackOrContext, context) {
    (0, _util.validateArgCount)('Query.once', 1, 4, arguments.length);
    (0, _util.validateCallback)('Query.once', 'callback', callback, true);
    const ret = Query.getCancelAndContextArgs_('Query.once', failureCallbackOrContext, context);
    const deferred = new _util.Deferred();

    const valueCallback = (expSnapshot, previousChildName) => {
      const result = new DataSnapshot(this.database, expSnapshot);

      if (callback) {
        callback.call(ret.context, result, previousChildName);
      }

      deferred.resolve(result);
    };

    valueCallback.userCallback = callback;
    valueCallback.context = ret.context;

    const cancelCallback = error => {
      if (ret.cancel) {
        ret.cancel.call(ret.context, error);
      }

      deferred.reject(error);
    };

    switch (eventType) {
      case 'value':
        (0, _database2.onValue)(this._delegate, valueCallback, cancelCallback, {
          onlyOnce: true
        });
        break;

      case 'child_added':
        (0, _database2.onChildAdded)(this._delegate, valueCallback, cancelCallback, {
          onlyOnce: true
        });
        break;

      case 'child_removed':
        (0, _database2.onChildRemoved)(this._delegate, valueCallback, cancelCallback, {
          onlyOnce: true
        });
        break;

      case 'child_changed':
        (0, _database2.onChildChanged)(this._delegate, valueCallback, cancelCallback, {
          onlyOnce: true
        });
        break;

      case 'child_moved':
        (0, _database2.onChildMoved)(this._delegate, valueCallback, cancelCallback, {
          onlyOnce: true
        });
        break;

      default:
        throw new Error((0, _util.errorPrefix)('Query.once', 'eventType') + 'must be a valid event type = "value", "child_added", "child_removed", ' + '"child_changed", or "child_moved".');
    }

    return deferred.promise;
  }
  /**
   * Set a limit and anchor it to the start of the window.
   */


  limitToFirst(limit) {
    (0, _util.validateArgCount)('Query.limitToFirst', 1, 1, arguments.length);
    return new Query(this.database, (0, _database2.query)(this._delegate, (0, _database2.limitToFirst)(limit)));
  }
  /**
   * Set a limit and anchor it to the end of the window.
   */


  limitToLast(limit) {
    (0, _util.validateArgCount)('Query.limitToLast', 1, 1, arguments.length);
    return new Query(this.database, (0, _database2.query)(this._delegate, (0, _database2.limitToLast)(limit)));
  }
  /**
   * Given a child path, return a new query ordered by the specified grandchild path.
   */


  orderByChild(path) {
    (0, _util.validateArgCount)('Query.orderByChild', 1, 1, arguments.length);
    return new Query(this.database, (0, _database2.query)(this._delegate, (0, _database2.orderByChild)(path)));
  }
  /**
   * Return a new query ordered by the KeyIndex
   */


  orderByKey() {
    (0, _util.validateArgCount)('Query.orderByKey', 0, 0, arguments.length);
    return new Query(this.database, (0, _database2.query)(this._delegate, (0, _database2.orderByKey)()));
  }
  /**
   * Return a new query ordered by the PriorityIndex
   */


  orderByPriority() {
    (0, _util.validateArgCount)('Query.orderByPriority', 0, 0, arguments.length);
    return new Query(this.database, (0, _database2.query)(this._delegate, (0, _database2.orderByPriority)()));
  }
  /**
   * Return a new query ordered by the ValueIndex
   */


  orderByValue() {
    (0, _util.validateArgCount)('Query.orderByValue', 0, 0, arguments.length);
    return new Query(this.database, (0, _database2.query)(this._delegate, (0, _database2.orderByValue)()));
  }

  startAt(value = null, name) {
    (0, _util.validateArgCount)('Query.startAt', 0, 2, arguments.length);
    return new Query(this.database, (0, _database2.query)(this._delegate, (0, _database2.startAt)(value, name)));
  }

  startAfter(value = null, name) {
    (0, _util.validateArgCount)('Query.startAfter', 0, 2, arguments.length);
    return new Query(this.database, (0, _database2.query)(this._delegate, (0, _database2.startAfter)(value, name)));
  }

  endAt(value = null, name) {
    (0, _util.validateArgCount)('Query.endAt', 0, 2, arguments.length);
    return new Query(this.database, (0, _database2.query)(this._delegate, (0, _database2.endAt)(value, name)));
  }

  endBefore(value = null, name) {
    (0, _util.validateArgCount)('Query.endBefore', 0, 2, arguments.length);
    return new Query(this.database, (0, _database2.query)(this._delegate, (0, _database2.endBefore)(value, name)));
  }
  /**
   * Load the selection of children with exactly the specified value, and, optionally,
   * the specified name.
   */


  equalTo(value, name) {
    (0, _util.validateArgCount)('Query.equalTo', 1, 2, arguments.length);
    return new Query(this.database, (0, _database2.query)(this._delegate, (0, _database2.equalTo)(value, name)));
  }
  /**
   * @returns URL for this location.
   */


  toString() {
    (0, _util.validateArgCount)('Query.toString', 0, 0, arguments.length);
    return this._delegate.toString();
  } // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary
  // for end-users.


  toJSON() {
    // An optional spacer argument is unnecessary for a string.
    (0, _util.validateArgCount)('Query.toJSON', 0, 1, arguments.length);
    return this._delegate.toJSON();
  }
  /**
   * Return true if this query and the provided query are equivalent; otherwise, return false.
   */


  isEqual(other) {
    (0, _util.validateArgCount)('Query.isEqual', 1, 1, arguments.length);

    if (!(other instanceof Query)) {
      const error = 'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';
      throw new Error(error);
    }

    return this._delegate.isEqual(other._delegate);
  }
  /**
   * Helper used by .on and .once to extract the context and or cancel arguments.
   * @param fnName - The function name (on or once)
   *
   */


  static getCancelAndContextArgs_(fnName, cancelOrContext, context) {
    const ret = {
      cancel: undefined,
      context: undefined
    };

    if (cancelOrContext && context) {
      ret.cancel = cancelOrContext;
      (0, _util.validateCallback)(fnName, 'cancel', ret.cancel, true);
      ret.context = context;
      (0, _util.validateContextObject)(fnName, 'context', ret.context, true);
    } else if (cancelOrContext) {
      // we have either a cancel callback or a context.
      if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {
        // it's a context!
        ret.context = cancelOrContext;
      } else if (typeof cancelOrContext === 'function') {
        ret.cancel = cancelOrContext;
      } else {
        throw new Error((0, _util.errorPrefix)(fnName, 'cancelOrContext') + ' must either be a cancel callback or a context object.');
      }
    }

    return ret;
  }

  get ref() {
    return new Reference(this.database, new _database2._ReferenceImpl(this._delegate._repo, this._delegate._path));
  }

}

class Reference extends Query {
  /**
   * Call options:
   *   new Reference(Repo, Path) or
   *   new Reference(url: string, string|RepoManager)
   *
   * Externally - this is the firebase.database.Reference type.
   */
  constructor(database, _delegate) {
    super(database, new _database2._QueryImpl(_delegate._repo, _delegate._path, new _database2._QueryParams(), false));
    this.database = database;
    this._delegate = _delegate;
  }
  /** @returns {?string} */


  getKey() {
    (0, _util.validateArgCount)('Reference.key', 0, 0, arguments.length);
    return this._delegate.key;
  }

  child(pathString) {
    (0, _util.validateArgCount)('Reference.child', 1, 1, arguments.length);

    if (typeof pathString === 'number') {
      pathString = String(pathString);
    }

    return new Reference(this.database, (0, _database2.child)(this._delegate, pathString));
  }
  /** @returns {?Reference} */


  getParent() {
    (0, _util.validateArgCount)('Reference.parent', 0, 0, arguments.length);
    const parent = this._delegate.parent;
    return parent ? new Reference(this.database, parent) : null;
  }
  /** @returns {!Reference} */


  getRoot() {
    (0, _util.validateArgCount)('Reference.root', 0, 0, arguments.length);
    return new Reference(this.database, this._delegate.root);
  }

  set(newVal, onComplete) {
    (0, _util.validateArgCount)('Reference.set', 1, 2, arguments.length);
    (0, _util.validateCallback)('Reference.set', 'onComplete', onComplete, true);
    const result = (0, _database2.set)(this._delegate, newVal);

    if (onComplete) {
      result.then(() => onComplete(null), error => onComplete(error));
    }

    return result;
  }

  update(values, onComplete) {
    (0, _util.validateArgCount)('Reference.update', 1, 2, arguments.length);

    if (Array.isArray(values)) {
      const newObjectToMerge = {};

      for (let i = 0; i < values.length; ++i) {
        newObjectToMerge['' + i] = values[i];
      }

      values = newObjectToMerge;
      warn('Passing an Array to Firebase.update() is deprecated. ' + 'Use set() if you want to overwrite the existing data, or ' + 'an Object with integer keys if you really do want to ' + 'only update some of the children.');
    }

    (0, _database2._validateWritablePath)('Reference.update', this._delegate._path);
    (0, _util.validateCallback)('Reference.update', 'onComplete', onComplete, true);
    const result = (0, _database2.update)(this._delegate, values);

    if (onComplete) {
      result.then(() => onComplete(null), error => onComplete(error));
    }

    return result;
  }

  setWithPriority(newVal, newPriority, onComplete) {
    (0, _util.validateArgCount)('Reference.setWithPriority', 2, 3, arguments.length);
    (0, _util.validateCallback)('Reference.setWithPriority', 'onComplete', onComplete, true);
    const result = (0, _database2.setWithPriority)(this._delegate, newVal, newPriority);

    if (onComplete) {
      result.then(() => onComplete(null), error => onComplete(error));
    }

    return result;
  }

  remove(onComplete) {
    (0, _util.validateArgCount)('Reference.remove', 0, 1, arguments.length);
    (0, _util.validateCallback)('Reference.remove', 'onComplete', onComplete, true);
    const result = (0, _database2.remove)(this._delegate);

    if (onComplete) {
      result.then(() => onComplete(null), error => onComplete(error));
    }

    return result;
  }

  transaction(transactionUpdate, onComplete, applyLocally) {
    (0, _util.validateArgCount)('Reference.transaction', 1, 3, arguments.length);
    (0, _util.validateCallback)('Reference.transaction', 'transactionUpdate', transactionUpdate, false);
    (0, _util.validateCallback)('Reference.transaction', 'onComplete', onComplete, true);
    validateBoolean('Reference.transaction', 'applyLocally', applyLocally, true);
    const result = (0, _database2.runTransaction)(this._delegate, transactionUpdate, {
      applyLocally
    }).then(transactionResult => new TransactionResult(transactionResult.committed, new DataSnapshot(this.database, transactionResult.snapshot)));

    if (onComplete) {
      result.then(transactionResult => onComplete(null, transactionResult.committed, transactionResult.snapshot), error => onComplete(error, false, null));
    }

    return result;
  }

  setPriority(priority, onComplete) {
    (0, _util.validateArgCount)('Reference.setPriority', 1, 2, arguments.length);
    (0, _util.validateCallback)('Reference.setPriority', 'onComplete', onComplete, true);
    const result = (0, _database2.setPriority)(this._delegate, priority);

    if (onComplete) {
      result.then(() => onComplete(null), error => onComplete(error));
    }

    return result;
  }

  push(value, onComplete) {
    (0, _util.validateArgCount)('Reference.push', 0, 2, arguments.length);
    (0, _util.validateCallback)('Reference.push', 'onComplete', onComplete, true);
    const expPromise = (0, _database2.push)(this._delegate, value);
    const promise = expPromise.then(expRef => new Reference(this.database, expRef));

    if (onComplete) {
      promise.then(() => onComplete(null), error => onComplete(error));
    }

    const result = new Reference(this.database, expPromise);
    result.then = promise.then.bind(promise);
    result.catch = promise.catch.bind(promise, undefined);
    return result;
  }

  onDisconnect() {
    (0, _database2._validateWritablePath)('Reference.onDisconnect', this._delegate._path);
    return new OnDisconnect(new _database2.OnDisconnect(this._delegate._repo, this._delegate._path));
  }

  get key() {
    return this.getKey();
  }

  get parent() {
    return this.getParent();
  }

  get root() {
    return this.getRoot();
  }

}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Class representing a firebase database.
 */


class Database {
  /**
   * The constructor should not be called by users of our public API.
   */
  constructor(_delegate, app) {
    this._delegate = _delegate;
    this.app = app;
    this.INTERNAL = {
      delete: () => this._delegate._delete()
    };
  }
  /**
   * Modify this instance to communicate with the Realtime Database emulator.
   *
   * <p>Note: This method must be called before performing any other operation.
   *
   * @param host - the emulator host (ex: localhost)
   * @param port - the emulator port (ex: 8080)
   * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules
   */


  useEmulator(host, port, options = {}) {
    (0, _database2.connectDatabaseEmulator)(this._delegate, host, port, options);
  }

  ref(path) {
    (0, _util.validateArgCount)('database.ref', 0, 1, arguments.length);

    if (path instanceof Reference) {
      const childRef = (0, _database2.refFromURL)(this._delegate, path.toString());
      return new Reference(this, childRef);
    } else {
      const childRef = (0, _database2.ref)(this._delegate, path);
      return new Reference(this, childRef);
    }
  }
  /**
   * Returns a reference to the root or the path specified in url.
   * We throw a exception if the url is not in the same domain as the
   * current repo.
   * @returns Firebase reference.
   */


  refFromURL(url) {
    const apiName = 'database.refFromURL';
    (0, _util.validateArgCount)(apiName, 1, 1, arguments.length);
    const childRef = (0, _database2.refFromURL)(this._delegate, url);
    return new Reference(this, childRef);
  } // Make individual repo go offline.


  goOffline() {
    (0, _util.validateArgCount)('database.goOffline', 0, 0, arguments.length);
    return (0, _database2.goOffline)(this._delegate);
  }

  goOnline() {
    (0, _util.validateArgCount)('database.goOnline', 0, 0, arguments.length);
    return (0, _database2.goOnline)(this._delegate);
  }

}

Database.ServerValue = {
  TIMESTAMP: (0, _database2.serverTimestamp)(),
  increment: delta => (0, _database2.increment)(delta)
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Used by console to create a database based on the app,
 * passed database URL and a custom auth implementation.
 *
 * @param app - A valid FirebaseApp-like object
 * @param url - A valid Firebase databaseURL
 * @param version - custom version e.g. firebase-admin version
 * @param customAuthImpl - custom auth implementation
 */

function initStandalone({
  app,
  url,
  version,
  customAuthImpl,
  namespace,
  nodeAdmin = false
}) {
  (0, _database2._setSDKVersion)(version);
  /**
   * ComponentContainer('database-standalone') is just a placeholder that doesn't perform
   * any actual function.
   */

  const authProvider = new _component.Provider('auth-internal', new _component.ComponentContainer('database-standalone'));
  authProvider.setComponent(new _component.Component('auth-internal', () => customAuthImpl, "PRIVATE"
  /* PRIVATE */
  ));
  return {
    instance: new Database((0, _database2._repoManagerDatabaseFromApp)(app, authProvider,
    /* appCheckProvider= */
    undefined, url, nodeAdmin), app),
    namespace
  };
}

var INTERNAL = /*#__PURE__*/Object.freeze({
  __proto__: null,
  initStandalone: initStandalone
});
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const ServerValue = Database.ServerValue;

function registerDatabase(instance) {
  // Register the Database Service with the 'firebase' namespace.
  instance.INTERNAL.registerComponent(new _component.Component('database-compat', (container, {
    instanceIdentifier: url
  }) => {
    /* Dependencies */
    // getImmediate for FirebaseApp will always succeed
    const app = container.getProvider('app-compat').getImmediate();
    const databaseExp = container.getProvider('database').getImmediate({
      identifier: url
    });
    return new Database(databaseExp, app);
  }, "PUBLIC"
  /* PUBLIC */
  ).setServiceProps( // firebase.database namespace properties
  {
    Reference,
    Query,
    Database,
    DataSnapshot,
    enableLogging: _database2.enableLogging,
    INTERNAL,
    ServerValue
  }).setMultipleInstances(true));
  instance.registerVersion(name, version);
}

registerDatabase(_appCompat.default);
},{"@firebase/app-compat":"node_modules/@firebase/app-compat/dist/index.esm2017.js","@firebase/component":"node_modules/@firebase/component/dist/index.esm.js","@firebase/database":"node_modules/@firebase/database/dist/index.esm2017.js","@firebase/util":"node_modules/@firebase/util/dist/index.esm.js","@firebase/logger":"node_modules/@firebase/logger/dist/index.esm.js"}],"node_modules/@firebase/webchannel-wrapper/dist/index.esm.js":[function(require,module,exports) {
var global = arguments[3];
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getStatEventTarget = exports.createWebChannelTransport = exports.XhrIo = exports.WebChannel = exports.Stat = exports.FetchXmlHttpFactory = exports.EventType = exports.Event = exports.ErrorCode = exports.default = void 0;

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

/* global Reflect, Promise */
var extendStatics = function (d, b) {
  extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
  };

  return extendStatics(d, b);
};

function __extends(d, b) {
  if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);

  function __() {
    this.constructor = d;
  }

  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator,
      m = s && o[s],
      i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function () {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};
var k,
    goog = goog || {},
    l = commonjsGlobal || self;

function aa() {}

function ba(a) {
  var b = typeof a;
  b = "object" != b ? b : a ? Array.isArray(a) ? "array" : b : "null";
  return "array" == b || "object" == b && "number" == typeof a.length;
}

function p(a) {
  var b = typeof a;
  return "object" == b && null != a || "function" == b;
}

function da(a) {
  return Object.prototype.hasOwnProperty.call(a, ea) && a[ea] || (a[ea] = ++fa);
}

var ea = "closure_uid_" + (1E9 * Math.random() >>> 0),
    fa = 0;

function ha(a, b, c) {
  return a.call.apply(a.bind, arguments);
}

function ia(a, b, c) {
  if (!a) throw Error();

  if (2 < arguments.length) {
    var d = Array.prototype.slice.call(arguments, 2);
    return function () {
      var e = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(e, d);
      return a.apply(b, e);
    };
  }

  return function () {
    return a.apply(b, arguments);
  };
}

function q(a, b, c) {
  Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? q = ha : q = ia;
  return q.apply(null, arguments);
}

function ja(a, b) {
  var c = Array.prototype.slice.call(arguments, 1);
  return function () {
    var d = c.slice();
    d.push.apply(d, arguments);
    return a.apply(this, d);
  };
}

function t(a, b) {
  function c() {}

  c.prototype = b.prototype;
  a.Z = b.prototype;
  a.prototype = new c();
  a.prototype.constructor = a;

  a.Vb = function (d, e, f) {
    for (var h = Array(arguments.length - 2), n = 2; n < arguments.length; n++) h[n - 2] = arguments[n];

    return b.prototype[e].apply(d, h);
  };
}

function v() {
  this.s = this.s;
  this.o = this.o;
}

var ka = 0,
    la = {};
v.prototype.s = !1;

v.prototype.na = function () {
  if (!this.s && (this.s = !0, this.M(), 0 != ka)) {
    var a = da(this);
    delete la[a];
  }
};

v.prototype.M = function () {
  if (this.o) for (; this.o.length;) this.o.shift()();
};

var ma = Array.prototype.indexOf ? function (a, b) {
  return Array.prototype.indexOf.call(a, b, void 0);
} : function (a, b) {
  if ("string" === typeof a) return "string" !== typeof b || 1 != b.length ? -1 : a.indexOf(b, 0);

  for (var c = 0; c < a.length; c++) if (c in a && a[c] === b) return c;

  return -1;
},
    na = Array.prototype.forEach ? function (a, b, c) {
  Array.prototype.forEach.call(a, b, c);
} : function (a, b, c) {
  var d = a.length,
      e = "string" === typeof a ? a.split("") : a;

  for (var f = 0; f < d; f++) f in e && b.call(c, e[f], f, a);
};

function oa(a) {
  a: {
    var b = pa;
    var c = a.length,
        d = "string" === typeof a ? a.split("") : a;

    for (var e = 0; e < c; e++) if (e in d && b.call(void 0, d[e], e, a)) {
      b = e;
      break a;
    }

    b = -1;
  }

  return 0 > b ? null : "string" === typeof a ? a.charAt(b) : a[b];
}

function qa(a) {
  return Array.prototype.concat.apply([], arguments);
}

function ra(a) {
  var b = a.length;

  if (0 < b) {
    var c = Array(b);

    for (var d = 0; d < b; d++) c[d] = a[d];

    return c;
  }

  return [];
}

function sa(a) {
  return /^[\s\xa0]*$/.test(a);
}

var ta = String.prototype.trim ? function (a) {
  return a.trim();
} : function (a) {
  return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1];
};

function w(a, b) {
  return -1 != a.indexOf(b);
}

function ua(a, b) {
  return a < b ? -1 : a > b ? 1 : 0;
}

var x;

a: {
  var va = l.navigator;

  if (va) {
    var wa = va.userAgent;

    if (wa) {
      x = wa;
      break a;
    }
  }

  x = "";
}

function xa(a, b, c) {
  for (var d in a) b.call(c, a[d], d, a);
}

function ya(a) {
  var b = {};

  for (var c in a) b[c] = a[c];

  return b;
}

var za = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");

function Aa(a, b) {
  var c, d;

  for (var e = 1; e < arguments.length; e++) {
    d = arguments[e];

    for (c in d) a[c] = d[c];

    for (var f = 0; f < za.length; f++) c = za[f], Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]);
  }
}

function Ca(a) {
  Ca[" "](a);
  return a;
}

Ca[" "] = aa;

function Fa(a) {
  var b = Ga;
  return Object.prototype.hasOwnProperty.call(b, 9) ? b[9] : b[9] = a(9);
}

var Ha = w(x, "Opera"),
    y = w(x, "Trident") || w(x, "MSIE"),
    Ia = w(x, "Edge"),
    Ja = Ia || y,
    Ka = w(x, "Gecko") && !(w(x.toLowerCase(), "webkit") && !w(x, "Edge")) && !(w(x, "Trident") || w(x, "MSIE")) && !w(x, "Edge"),
    La = w(x.toLowerCase(), "webkit") && !w(x, "Edge");

function Ma() {
  var a = l.document;
  return a ? a.documentMode : void 0;
}

var Na;

a: {
  var Oa = "",
      Pa = function () {
    var a = x;
    if (Ka) return /rv:([^\);]+)(\)|;)/.exec(a);
    if (Ia) return /Edge\/([\d\.]+)/.exec(a);
    if (y) return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);
    if (La) return /WebKit\/(\S+)/.exec(a);
    if (Ha) return /(?:Version)[ \/]?(\S+)/.exec(a);
  }();

  Pa && (Oa = Pa ? Pa[1] : "");

  if (y) {
    var Qa = Ma();

    if (null != Qa && Qa > parseFloat(Oa)) {
      Na = String(Qa);
      break a;
    }
  }

  Na = Oa;
}

var Ga = {};

function Ra() {
  return Fa(function () {
    var a = 0;
    var b = ta(String(Na)).split("."),
        c = ta("9").split("."),
        d = Math.max(b.length, c.length);

    for (var h = 0; 0 == a && h < d; h++) {
      var e = b[h] || "",
          f = c[h] || "";

      do {
        e = /(\d*)(\D*)(.*)/.exec(e) || ["", "", "", ""];
        f = /(\d*)(\D*)(.*)/.exec(f) || ["", "", "", ""];
        if (0 == e[0].length && 0 == f[0].length) break;
        a = ua(0 == e[1].length ? 0 : parseInt(e[1], 10), 0 == f[1].length ? 0 : parseInt(f[1], 10)) || ua(0 == e[2].length, 0 == f[2].length) || ua(e[2], f[2]);
        e = e[3];
        f = f[3];
      } while (0 == a);
    }

    return 0 <= a;
  });
}

var Sa;

if (l.document && y) {
  var Ta = Ma();
  Sa = Ta ? Ta : parseInt(Na, 10) || void 0;
} else Sa = void 0;

var Ua = Sa;

var Va = function () {
  if (!l.addEventListener || !Object.defineProperty) return !1;
  var a = !1,
      b = Object.defineProperty({}, "passive", {
    get: function () {
      a = !0;
    }
  });

  try {
    l.addEventListener("test", aa, b), l.removeEventListener("test", aa, b);
  } catch (c) {}

  return a;
}();

function z(a, b) {
  this.type = a;
  this.g = this.target = b;
  this.defaultPrevented = !1;
}

z.prototype.h = function () {
  this.defaultPrevented = !0;
};

function A(a, b) {
  z.call(this, a ? a.type : "");
  this.relatedTarget = this.g = this.target = null;
  this.button = this.screenY = this.screenX = this.clientY = this.clientX = 0;
  this.key = "";
  this.metaKey = this.shiftKey = this.altKey = this.ctrlKey = !1;
  this.state = null;
  this.pointerId = 0;
  this.pointerType = "";
  this.i = null;

  if (a) {
    var c = this.type = a.type,
        d = a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : null;
    this.target = a.target || a.srcElement;
    this.g = b;

    if (b = a.relatedTarget) {
      if (Ka) {
        a: {
          try {
            Ca(b.nodeName);
            var e = !0;
            break a;
          } catch (f) {}

          e = !1;
        }

        e || (b = null);
      }
    } else "mouseover" == c ? b = a.fromElement : "mouseout" == c && (b = a.toElement);

    this.relatedTarget = b;
    d ? (this.clientX = void 0 !== d.clientX ? d.clientX : d.pageX, this.clientY = void 0 !== d.clientY ? d.clientY : d.pageY, this.screenX = d.screenX || 0, this.screenY = d.screenY || 0) : (this.clientX = void 0 !== a.clientX ? a.clientX : a.pageX, this.clientY = void 0 !== a.clientY ? a.clientY : a.pageY, this.screenX = a.screenX || 0, this.screenY = a.screenY || 0);
    this.button = a.button;
    this.key = a.key || "";
    this.ctrlKey = a.ctrlKey;
    this.altKey = a.altKey;
    this.shiftKey = a.shiftKey;
    this.metaKey = a.metaKey;
    this.pointerId = a.pointerId || 0;
    this.pointerType = "string" === typeof a.pointerType ? a.pointerType : Wa[a.pointerType] || "";
    this.state = a.state;
    this.i = a;
    a.defaultPrevented && A.Z.h.call(this);
  }
}

t(A, z);
var Wa = {
  2: "touch",
  3: "pen",
  4: "mouse"
};

A.prototype.h = function () {
  A.Z.h.call(this);
  var a = this.i;
  a.preventDefault ? a.preventDefault() : a.returnValue = !1;
};

var B = "closure_listenable_" + (1E6 * Math.random() | 0);
var Xa = 0;

function Ya(a, b, c, d, e) {
  this.listener = a;
  this.proxy = null;
  this.src = b;
  this.type = c;
  this.capture = !!d;
  this.ia = e;
  this.key = ++Xa;
  this.ca = this.fa = !1;
}

function Za(a) {
  a.ca = !0;
  a.listener = null;
  a.proxy = null;
  a.src = null;
  a.ia = null;
}

function $a(a) {
  this.src = a;
  this.g = {};
  this.h = 0;
}

$a.prototype.add = function (a, b, c, d, e) {
  var f = a.toString();
  a = this.g[f];
  a || (a = this.g[f] = [], this.h++);
  var h = ab(a, b, d, e);
  -1 < h ? (b = a[h], c || (b.fa = !1)) : (b = new Ya(b, this.src, f, !!d, e), b.fa = c, a.push(b));
  return b;
};

function bb(a, b) {
  var c = b.type;

  if (c in a.g) {
    var d = a.g[c],
        e = ma(d, b),
        f;
    (f = 0 <= e) && Array.prototype.splice.call(d, e, 1);
    f && (Za(b), 0 == a.g[c].length && (delete a.g[c], a.h--));
  }
}

function ab(a, b, c, d) {
  for (var e = 0; e < a.length; ++e) {
    var f = a[e];
    if (!f.ca && f.listener == b && f.capture == !!c && f.ia == d) return e;
  }

  return -1;
}

var cb = "closure_lm_" + (1E6 * Math.random() | 0),
    db = {};

function fb(a, b, c, d, e) {
  if (d && d.once) return gb(a, b, c, d, e);

  if (Array.isArray(b)) {
    for (var f = 0; f < b.length; f++) fb(a, b[f], c, d, e);

    return null;
  }

  c = hb(c);
  return a && a[B] ? a.N(b, c, p(d) ? !!d.capture : !!d, e) : ib(a, b, c, !1, d, e);
}

function ib(a, b, c, d, e, f) {
  if (!b) throw Error("Invalid event type");
  var h = p(e) ? !!e.capture : !!e,
      n = jb(a);
  n || (a[cb] = n = new $a(a));
  c = n.add(b, c, d, h, f);
  if (c.proxy) return c;
  d = kb();
  c.proxy = d;
  d.src = a;
  d.listener = c;
  if (a.addEventListener) Va || (e = h), void 0 === e && (e = !1), a.addEventListener(b.toString(), d, e);else if (a.attachEvent) a.attachEvent(lb(b.toString()), d);else if (a.addListener && a.removeListener) a.addListener(d);else throw Error("addEventListener and attachEvent are unavailable.");
  return c;
}

function kb() {
  function a(c) {
    return b.call(a.src, a.listener, c);
  }

  var b = mb;
  return a;
}

function gb(a, b, c, d, e) {
  if (Array.isArray(b)) {
    for (var f = 0; f < b.length; f++) gb(a, b[f], c, d, e);

    return null;
  }

  c = hb(c);
  return a && a[B] ? a.O(b, c, p(d) ? !!d.capture : !!d, e) : ib(a, b, c, !0, d, e);
}

function nb(a, b, c, d, e) {
  if (Array.isArray(b)) for (var f = 0; f < b.length; f++) nb(a, b[f], c, d, e);else (d = p(d) ? !!d.capture : !!d, c = hb(c), a && a[B]) ? (a = a.i, b = String(b).toString(), b in a.g && (f = a.g[b], c = ab(f, c, d, e), -1 < c && (Za(f[c]), Array.prototype.splice.call(f, c, 1), 0 == f.length && (delete a.g[b], a.h--)))) : a && (a = jb(a)) && (b = a.g[b.toString()], a = -1, b && (a = ab(b, c, d, e)), (c = -1 < a ? b[a] : null) && ob(c));
}

function ob(a) {
  if ("number" !== typeof a && a && !a.ca) {
    var b = a.src;
    if (b && b[B]) bb(b.i, a);else {
      var c = a.type,
          d = a.proxy;
      b.removeEventListener ? b.removeEventListener(c, d, a.capture) : b.detachEvent ? b.detachEvent(lb(c), d) : b.addListener && b.removeListener && b.removeListener(d);
      (c = jb(b)) ? (bb(c, a), 0 == c.h && (c.src = null, b[cb] = null)) : Za(a);
    }
  }
}

function lb(a) {
  return a in db ? db[a] : db[a] = "on" + a;
}

function mb(a, b) {
  if (a.ca) a = !0;else {
    b = new A(b, this);
    var c = a.listener,
        d = a.ia || a.src;
    a.fa && ob(a);
    a = c.call(d, b);
  }
  return a;
}

function jb(a) {
  a = a[cb];
  return a instanceof $a ? a : null;
}

var pb = "__closure_events_fn_" + (1E9 * Math.random() >>> 0);

function hb(a) {
  if ("function" === typeof a) return a;
  a[pb] || (a[pb] = function (b) {
    return a.handleEvent(b);
  });
  return a[pb];
}

function C() {
  v.call(this);
  this.i = new $a(this);
  this.P = this;
  this.I = null;
}

t(C, v);
C.prototype[B] = !0;

C.prototype.removeEventListener = function (a, b, c, d) {
  nb(this, a, b, c, d);
};

function D(a, b) {
  var c,
      d = a.I;
  if (d) for (c = []; d; d = d.I) c.push(d);
  a = a.P;
  d = b.type || b;
  if ("string" === typeof b) b = new z(b, a);else if (b instanceof z) b.target = b.target || a;else {
    var e = b;
    b = new z(d, a);
    Aa(b, e);
  }
  e = !0;
  if (c) for (var f = c.length - 1; 0 <= f; f--) {
    var h = b.g = c[f];
    e = qb(h, d, !0, b) && e;
  }
  h = b.g = a;
  e = qb(h, d, !0, b) && e;
  e = qb(h, d, !1, b) && e;
  if (c) for (f = 0; f < c.length; f++) h = b.g = c[f], e = qb(h, d, !1, b) && e;
}

C.prototype.M = function () {
  C.Z.M.call(this);

  if (this.i) {
    var a = this.i,
        c;

    for (c in a.g) {
      for (var d = a.g[c], e = 0; e < d.length; e++) Za(d[e]);

      delete a.g[c];
      a.h--;
    }
  }

  this.I = null;
};

C.prototype.N = function (a, b, c, d) {
  return this.i.add(String(a), b, !1, c, d);
};

C.prototype.O = function (a, b, c, d) {
  return this.i.add(String(a), b, !0, c, d);
};

function qb(a, b, c, d) {
  b = a.i.g[String(b)];
  if (!b) return !0;
  b = b.concat();

  for (var e = !0, f = 0; f < b.length; ++f) {
    var h = b[f];

    if (h && !h.ca && h.capture == c) {
      var n = h.listener,
          u = h.ia || h.src;
      h.fa && bb(a.i, h);
      e = !1 !== n.call(u, d) && e;
    }
  }

  return e && !d.defaultPrevented;
}

var rb = l.JSON.stringify;

function sb() {
  var a = tb;
  var b = null;
  a.g && (b = a.g, a.g = a.g.next, a.g || (a.h = null), b.next = null);
  return b;
}

var ub = function () {
  function ub() {
    this.h = this.g = null;
  }

  ub.prototype.add = function (a, b) {
    var c = vb.get();
    c.set(a, b);
    this.h ? this.h.next = c : this.g = c;
    this.h = c;
  };

  return ub;
}();

var vb = new (function () {
  function class_2(a, b) {
    this.i = a;
    this.j = b;
    this.h = 0;
    this.g = null;
  }

  class_2.prototype.get = function () {
    var a;
    0 < this.h ? (this.h--, a = this.g, this.g = a.next, a.next = null) : a = this.i();
    return a;
  };

  return class_2;
}())(function () {
  return new wb();
}, function (a) {
  return a.reset();
});

var wb = function () {
  function wb() {
    this.next = this.g = this.h = null;
  }

  wb.prototype.set = function (a, b) {
    this.h = a;
    this.g = b;
    this.next = null;
  };

  wb.prototype.reset = function () {
    this.next = this.g = this.h = null;
  };

  return wb;
}();

function yb(a) {
  l.setTimeout(function () {
    throw a;
  }, 0);
}

function zb(a, b) {
  Ab || Bb();
  Cb || (Ab(), Cb = !0);
  tb.add(a, b);
}

var Ab;

function Bb() {
  var a = l.Promise.resolve(void 0);

  Ab = function () {
    a.then(Db);
  };
}

var Cb = !1,
    tb = new ub();

function Db() {
  for (var a; a = sb();) {
    try {
      a.h.call(a.g);
    } catch (c) {
      yb(c);
    }

    var b = vb;
    b.j(a);
    100 > b.h && (b.h++, a.next = b.g, b.g = a);
  }

  Cb = !1;
}

function Eb(a, b) {
  C.call(this);
  this.h = a || 1;
  this.g = b || l;
  this.j = q(this.kb, this);
  this.l = Date.now();
}

t(Eb, C);
k = Eb.prototype;
k.da = !1;
k.S = null;

k.kb = function () {
  if (this.da) {
    var a = Date.now() - this.l;
    0 < a && a < .8 * this.h ? this.S = this.g.setTimeout(this.j, this.h - a) : (this.S && (this.g.clearTimeout(this.S), this.S = null), D(this, "tick"), this.da && (Fb(this), this.start()));
  }
};

k.start = function () {
  this.da = !0;
  this.S || (this.S = this.g.setTimeout(this.j, this.h), this.l = Date.now());
};

function Fb(a) {
  a.da = !1;
  a.S && (a.g.clearTimeout(a.S), a.S = null);
}

k.M = function () {
  Eb.Z.M.call(this);
  Fb(this);
  delete this.g;
};

function Gb(a, b, c) {
  if ("function" === typeof a) c && (a = q(a, c));else if (a && "function" == typeof a.handleEvent) a = q(a.handleEvent, a);else throw Error("Invalid listener argument");
  return 2147483647 < Number(b) ? -1 : l.setTimeout(a, b || 0);
}

function Hb(a) {
  a.g = Gb(function () {
    a.g = null;
    a.i && (a.i = !1, Hb(a));
  }, a.j);
  var b = a.h;
  a.h = null;
  a.m.apply(null, b);
}

var Ib = function (_super) {
  __extends(Ib, _super);

  function Ib(a, b) {
    var _this = _super.call(this) || this;

    _this.m = a;
    _this.j = b;
    _this.h = null;
    _this.i = !1;
    _this.g = null;
    return _this;
  }

  Ib.prototype.l = function (a) {
    this.h = arguments;
    this.g ? this.i = !0 : Hb(this);
  };

  Ib.prototype.M = function () {
    _super.prototype.M.call(this);

    this.g && (l.clearTimeout(this.g), this.g = null, this.i = !1, this.h = null);
  };

  return Ib;
}(v);

function E(a) {
  v.call(this);
  this.h = a;
  this.g = {};
}

t(E, v);
var Jb = [];

function Kb(a, b, c, d) {
  Array.isArray(c) || (c && (Jb[0] = c.toString()), c = Jb);

  for (var e = 0; e < c.length; e++) {
    var f = fb(b, c[e], d || a.handleEvent, !1, a.h || a);
    if (!f) break;
    a.g[f.key] = f;
  }
}

function Lb(a) {
  xa(a.g, function (b, c) {
    this.g.hasOwnProperty(c) && ob(b);
  }, a);
  a.g = {};
}

E.prototype.M = function () {
  E.Z.M.call(this);
  Lb(this);
};

E.prototype.handleEvent = function () {
  throw Error("EventHandler.handleEvent not implemented");
};

function Mb() {
  this.g = !0;
}

Mb.prototype.Aa = function () {
  this.g = !1;
};

function Nb(a, b, c, d, e, f) {
  a.info(function () {
    if (a.g) {
      if (f) {
        var h = "";

        for (var n = f.split("&"), u = 0; u < n.length; u++) {
          var m = n[u].split("=");

          if (1 < m.length) {
            var r = m[0];
            m = m[1];
            var G = r.split("_");
            h = 2 <= G.length && "type" == G[1] ? h + (r + "=" + m + "&") : h + (r + "=redacted&");
          }
        }
      } else h = null;
    } else h = f;
    return "XMLHTTP REQ (" + d + ") [attempt " + e + "]: " + b + "\n" + c + "\n" + h;
  });
}

function Ob(a, b, c, d, e, f, h) {
  a.info(function () {
    return "XMLHTTP RESP (" + d + ") [ attempt " + e + "]: " + b + "\n" + c + "\n" + f + " " + h;
  });
}

function F(a, b, c, d) {
  a.info(function () {
    return "XMLHTTP TEXT (" + b + "): " + Pb(a, c) + (d ? " " + d : "");
  });
}

function Qb(a, b) {
  a.info(function () {
    return "TIMEOUT: " + b;
  });
}

Mb.prototype.info = function () {};

function Pb(a, b) {
  if (!a.g) return b;
  if (!b) return null;

  try {
    var c = JSON.parse(b);
    if (c) for (a = 0; a < c.length; a++) if (Array.isArray(c[a])) {
      var d = c[a];

      if (!(2 > d.length)) {
        var e = d[1];

        if (Array.isArray(e) && !(1 > e.length)) {
          var f = e[0];
          if ("noop" != f && "stop" != f && "close" != f) for (var h = 1; h < e.length; h++) e[h] = "";
        }
      }
    }
    return rb(c);
  } catch (n) {
    return b;
  }
}

var H = {},
    Rb = null;

function Sb() {
  return Rb = Rb || new C();
}

H.Ma = "serverreachability";

function Tb(a) {
  z.call(this, H.Ma, a);
}

t(Tb, z);

function I(a) {
  var b = Sb();
  D(b, new Tb(b, a));
}

H.STAT_EVENT = "statevent";

function Ub(a, b) {
  z.call(this, H.STAT_EVENT, a);
  this.stat = b;
}

t(Ub, z);

function J(a) {
  var b = Sb();
  D(b, new Ub(b, a));
}

H.Na = "timingevent";

function Vb(a, b) {
  z.call(this, H.Na, a);
  this.size = b;
}

t(Vb, z);

function K(a, b) {
  if ("function" !== typeof a) throw Error("Fn must not be null and must be a function");
  return l.setTimeout(function () {
    a();
  }, b);
}

var Wb = {
  NO_ERROR: 0,
  lb: 1,
  yb: 2,
  xb: 3,
  sb: 4,
  wb: 5,
  zb: 6,
  Ja: 7,
  TIMEOUT: 8,
  Cb: 9
};
var Xb = {
  qb: "complete",
  Mb: "success",
  Ka: "error",
  Ja: "abort",
  Eb: "ready",
  Fb: "readystatechange",
  TIMEOUT: "timeout",
  Ab: "incrementaldata",
  Db: "progress",
  tb: "downloadprogress",
  Ub: "uploadprogress"
};

function Yb() {}

Yb.prototype.h = null;

function Zb(a) {
  return a.h || (a.h = a.i());
}

function $b() {}

var L = {
  OPEN: "a",
  pb: "b",
  Ka: "c",
  Bb: "d"
};

function ac() {
  z.call(this, "d");
}

t(ac, z);

function bc() {
  z.call(this, "c");
}

t(bc, z);
var cc;

function dc() {}

t(dc, Yb);

dc.prototype.g = function () {
  return new XMLHttpRequest();
};

dc.prototype.i = function () {
  return {};
};

cc = new dc();

function M(a, b, c, d) {
  this.l = a;
  this.j = b;
  this.m = c;
  this.X = d || 1;
  this.V = new E(this);
  this.P = ec;
  a = Ja ? 125 : void 0;
  this.W = new Eb(a);
  this.H = null;
  this.i = !1;
  this.s = this.A = this.v = this.K = this.F = this.Y = this.B = null;
  this.D = [];
  this.g = null;
  this.C = 0;
  this.o = this.u = null;
  this.N = -1;
  this.I = !1;
  this.O = 0;
  this.L = null;
  this.aa = this.J = this.$ = this.U = !1;
  this.h = new fc();
}

function fc() {
  this.i = null;
  this.g = "";
  this.h = !1;
}

var ec = 45E3,
    gc = {},
    hc = {};
k = M.prototype;

k.setTimeout = function (a) {
  this.P = a;
};

function ic(a, b, c) {
  a.K = 1;
  a.v = jc(N(b));
  a.s = c;
  a.U = !0;
  kc(a, null);
}

function kc(a, b) {
  a.F = Date.now();
  lc(a);
  a.A = N(a.v);
  var c = a.A,
      d = a.X;
  Array.isArray(d) || (d = [String(d)]);
  mc(c.h, "t", d);
  a.C = 0;
  c = a.l.H;
  a.h = new fc();
  a.g = nc(a.l, c ? b : null, !a.s);
  0 < a.O && (a.L = new Ib(q(a.Ia, a, a.g), a.O));
  Kb(a.V, a.g, "readystatechange", a.gb);
  b = a.H ? ya(a.H) : {};
  a.s ? (a.u || (a.u = "POST"), b["Content-Type"] = "application/x-www-form-urlencoded", a.g.ea(a.A, a.u, a.s, b)) : (a.u = "GET", a.g.ea(a.A, a.u, null, b));
  I(1);
  Nb(a.j, a.u, a.A, a.m, a.X, a.s);
}

k.gb = function (a) {
  a = a.target;
  var b = this.L;
  b && 3 == O(a) ? b.l() : this.Ia(a);
};

k.Ia = function (a) {
  try {
    if (a == this.g) a: {
      var r = O(this.g);
      var b = this.g.Da();
      var G = this.g.ba();

      if (!(3 > r) && (3 != r || Ja || this.g && (this.h.h || this.g.ga() || oc(this.g)))) {
        this.I || 4 != r || 7 == b || (8 == b || 0 >= G ? I(3) : I(2));
        pc(this);
        var c = this.g.ba();
        this.N = c;

        b: if (qc(this)) {
          var d = oc(this.g);
          a = "";
          var e = d.length,
              f = 4 == O(this.g);

          if (!this.h.i) {
            if ("undefined" === typeof TextDecoder) {
              P(this);
              rc(this);
              var h = "";
              break b;
            }

            this.h.i = new l.TextDecoder();
          }

          for (b = 0; b < e; b++) this.h.h = !0, a += this.h.i.decode(d[b], {
            stream: f && b == e - 1
          });

          d.splice(0, e);
          this.h.g += a;
          this.C = 0;
          h = this.h.g;
        } else h = this.g.ga();

        this.i = 200 == c;
        Ob(this.j, this.u, this.A, this.m, this.X, r, c);

        if (this.i) {
          if (this.$ && !this.J) {
            b: {
              if (this.g) {
                var n,
                    u = this.g;

                if ((n = u.g ? u.g.getResponseHeader("X-HTTP-Initial-Response") : null) && !sa(n)) {
                  var m = n;
                  break b;
                }
              }

              m = null;
            }

            if (c = m) F(this.j, this.m, c, "Initial handshake response via X-HTTP-Initial-Response"), this.J = !0, sc(this, c);else {
              this.i = !1;
              this.o = 3;
              J(12);
              P(this);
              rc(this);
              break a;
            }
          }

          this.U ? (tc(this, r, h), Ja && this.i && 3 == r && (Kb(this.V, this.W, "tick", this.fb), this.W.start())) : (F(this.j, this.m, h, null), sc(this, h));
          4 == r && P(this);
          this.i && !this.I && (4 == r ? uc(this.l, this) : (this.i = !1, lc(this)));
        } else 400 == c && 0 < h.indexOf("Unknown SID") ? (this.o = 3, J(12)) : (this.o = 0, J(13)), P(this), rc(this);
      }
    }
  } catch (r) {} finally {}
};

function qc(a) {
  return a.g ? "GET" == a.u && 2 != a.K && a.l.Ba : !1;
}

function tc(a, b, c) {
  var d = !0,
      e;

  for (; !a.I && a.C < c.length;) if (e = vc(a, c), e == hc) {
    4 == b && (a.o = 4, J(14), d = !1);
    F(a.j, a.m, null, "[Incomplete Response]");
    break;
  } else if (e == gc) {
    a.o = 4;
    J(15);
    F(a.j, a.m, c, "[Invalid Chunk]");
    d = !1;
    break;
  } else F(a.j, a.m, e, null), sc(a, e);

  qc(a) && e != hc && e != gc && (a.h.g = "", a.C = 0);
  4 != b || 0 != c.length || a.h.h || (a.o = 1, J(16), d = !1);
  a.i = a.i && d;
  d ? 0 < c.length && !a.aa && (a.aa = !0, b = a.l, b.g == a && b.$ && !b.L && (b.h.info("Great, no buffering proxy detected. Bytes received: " + c.length), wc(b), b.L = !0, J(11))) : (F(a.j, a.m, c, "[Invalid Chunked Response]"), P(a), rc(a));
}

k.fb = function () {
  if (this.g) {
    var a = O(this.g),
        b = this.g.ga();
    this.C < b.length && (pc(this), tc(this, a, b), this.i && 4 != a && lc(this));
  }
};

function vc(a, b) {
  var c = a.C,
      d = b.indexOf("\n", c);
  if (-1 == d) return hc;
  c = Number(b.substring(c, d));
  if (isNaN(c)) return gc;
  d += 1;
  if (d + c > b.length) return hc;
  b = b.substr(d, c);
  a.C = d + c;
  return b;
}

k.cancel = function () {
  this.I = !0;
  P(this);
};

function lc(a) {
  a.Y = Date.now() + a.P;
  xc(a, a.P);
}

function xc(a, b) {
  if (null != a.B) throw Error("WatchDog timer not null");
  a.B = K(q(a.eb, a), b);
}

function pc(a) {
  a.B && (l.clearTimeout(a.B), a.B = null);
}

k.eb = function () {
  this.B = null;
  var a = Date.now();
  0 <= a - this.Y ? (Qb(this.j, this.A), 2 != this.K && (I(3), J(17)), P(this), this.o = 2, rc(this)) : xc(this, this.Y - a);
};

function rc(a) {
  0 == a.l.G || a.I || uc(a.l, a);
}

function P(a) {
  pc(a);
  var b = a.L;
  b && "function" == typeof b.na && b.na();
  a.L = null;
  Fb(a.W);
  Lb(a.V);
  a.g && (b = a.g, a.g = null, b.abort(), b.na());
}

function sc(a, b) {
  try {
    var c = a.l;
    if (0 != c.G && (c.g == a || yc(c.i, a))) if (c.I = a.N, !a.J && yc(c.i, a) && 3 == c.G) {
      try {
        var d = c.Ca.g.parse(b);
      } catch (m) {
        d = null;
      }

      if (Array.isArray(d) && 3 == d.length) {
        var e = d;
        if (0 == e[0]) a: {
          if (!c.u) {
            if (c.g) if (c.g.F + 3E3 < a.F) zc(c), Ac(c);else break a;
            Bc(c);
            J(18);
          }
        } else c.ta = e[1], 0 < c.ta - c.U && 37500 > e[2] && c.N && 0 == c.A && !c.v && (c.v = K(q(c.ab, c), 6E3));

        if (1 >= Cc(c.i) && c.ka) {
          try {
            c.ka();
          } catch (m) {}

          c.ka = void 0;
        }
      } else Q(c, 11);
    } else if ((a.J || c.g == a) && zc(c), !sa(b)) for (e = c.Ca.g.parse(b), b = 0; b < e.length; b++) {
      var m = e[b];
      c.U = m[0];
      m = m[1];
      if (2 == c.G) {
        if ("c" == m[0]) {
          c.J = m[1];
          c.la = m[2];
          var r = m[3];
          null != r && (c.ma = r, c.h.info("VER=" + c.ma));
          var G = m[4];
          null != G && (c.za = G, c.h.info("SVER=" + c.za));
          var Da = m[5];
          null != Da && "number" === typeof Da && 0 < Da && (d = 1.5 * Da, c.K = d, c.h.info("backChannelRequestTimeoutMs_=" + d));
          d = c;
          var ca = a.g;

          if (ca) {
            var Ea = ca.g ? ca.g.getResponseHeader("X-Client-Wire-Protocol") : null;

            if (Ea) {
              var f = d.i;
              !f.g && (w(Ea, "spdy") || w(Ea, "quic") || w(Ea, "h2")) && (f.j = f.l, f.g = new Set(), f.h && (Dc(f, f.h), f.h = null));
            }

            if (d.D) {
              var xb = ca.g ? ca.g.getResponseHeader("X-HTTP-Session-Id") : null;
              xb && (d.sa = xb, R(d.F, d.D, xb));
            }
          }

          c.G = 3;
          c.j && c.j.xa();
          c.$ && (c.O = Date.now() - a.F, c.h.info("Handshake RTT: " + c.O + "ms"));
          d = c;
          var h = a;
          d.oa = Ec(d, d.H ? d.la : null, d.W);

          if (h.J) {
            Fc(d.i, h);
            var n = h,
                u = d.K;
            u && n.setTimeout(u);
            n.B && (pc(n), lc(n));
            d.g = h;
          } else Gc(d);

          0 < c.l.length && Hc(c);
        } else "stop" != m[0] && "close" != m[0] || Q(c, 7);
      } else 3 == c.G && ("stop" == m[0] || "close" == m[0] ? "stop" == m[0] ? Q(c, 7) : Ic(c) : "noop" != m[0] && c.j && c.j.wa(m), c.A = 0);
    }
    I(4);
  } catch (m) {}
}

function Jc(a) {
  if (a.R && "function" == typeof a.R) return a.R();
  if ("string" === typeof a) return a.split("");

  if (ba(a)) {
    for (var b = [], c = a.length, d = 0; d < c; d++) b.push(a[d]);

    return b;
  }

  b = [];
  c = 0;

  for (d in a) b[c++] = a[d];

  return b;
}

function Kc(a, b) {
  if (a.forEach && "function" == typeof a.forEach) a.forEach(b, void 0);else if (ba(a) || "string" === typeof a) na(a, b, void 0);else {
    if (a.T && "function" == typeof a.T) var c = a.T();else if (a.R && "function" == typeof a.R) c = void 0;else if (ba(a) || "string" === typeof a) {
      c = [];

      for (var d = a.length, e = 0; e < d; e++) c.push(e);
    } else for (e in c = [], d = 0, a) c[d++] = e;
    d = Jc(a);
    e = d.length;

    for (var f = 0; f < e; f++) b.call(void 0, d[f], c && c[f], a);
  }
}

function S(a, b) {
  this.h = {};
  this.g = [];
  this.i = 0;
  var c = arguments.length;

  if (1 < c) {
    if (c % 2) throw Error("Uneven number of arguments");

    for (var d = 0; d < c; d += 2) this.set(arguments[d], arguments[d + 1]);
  } else if (a) if (a instanceof S) for (c = a.T(), d = 0; d < c.length; d++) this.set(c[d], a.get(c[d]));else for (d in a) this.set(d, a[d]);
}

k = S.prototype;

k.R = function () {
  Lc(this);

  for (var a = [], b = 0; b < this.g.length; b++) a.push(this.h[this.g[b]]);

  return a;
};

k.T = function () {
  Lc(this);
  return this.g.concat();
};

function Lc(a) {
  if (a.i != a.g.length) {
    for (var b = 0, c = 0; b < a.g.length;) {
      var d = a.g[b];
      T(a.h, d) && (a.g[c++] = d);
      b++;
    }

    a.g.length = c;
  }

  if (a.i != a.g.length) {
    var e = {};

    for (c = b = 0; b < a.g.length;) d = a.g[b], T(e, d) || (a.g[c++] = d, e[d] = 1), b++;

    a.g.length = c;
  }
}

k.get = function (a, b) {
  return T(this.h, a) ? this.h[a] : b;
};

k.set = function (a, b) {
  T(this.h, a) || (this.i++, this.g.push(a));
  this.h[a] = b;
};

k.forEach = function (a, b) {
  for (var c = this.T(), d = 0; d < c.length; d++) {
    var e = c[d],
        f = this.get(e);
    a.call(b, f, e, this);
  }
};

function T(a, b) {
  return Object.prototype.hasOwnProperty.call(a, b);
}

var Mc = /^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;

function Nc(a, b) {
  if (a) {
    a = a.split("&");

    for (var c = 0; c < a.length; c++) {
      var d = a[c].indexOf("="),
          e = null;

      if (0 <= d) {
        var f = a[c].substring(0, d);
        e = a[c].substring(d + 1);
      } else f = a[c];

      b(f, e ? decodeURIComponent(e.replace(/\+/g, " ")) : "");
    }
  }
}

function U(a, b) {
  this.i = this.s = this.j = "";
  this.m = null;
  this.o = this.l = "";
  this.g = !1;

  if (a instanceof U) {
    this.g = void 0 !== b ? b : a.g;
    Oc(this, a.j);
    this.s = a.s;
    Pc(this, a.i);
    Qc(this, a.m);
    this.l = a.l;
    b = a.h;
    var c = new Rc();
    c.i = b.i;
    b.g && (c.g = new S(b.g), c.h = b.h);
    Sc(this, c);
    this.o = a.o;
  } else a && (c = String(a).match(Mc)) ? (this.g = !!b, Oc(this, c[1] || "", !0), this.s = Tc(c[2] || ""), Pc(this, c[3] || "", !0), Qc(this, c[4]), this.l = Tc(c[5] || "", !0), Sc(this, c[6] || "", !0), this.o = Tc(c[7] || "")) : (this.g = !!b, this.h = new Rc(null, this.g));
}

U.prototype.toString = function () {
  var a = [],
      b = this.j;
  b && a.push(Uc(b, Vc, !0), ":");
  var c = this.i;
  if (c || "file" == b) a.push("//"), (b = this.s) && a.push(Uc(b, Vc, !0), "@"), a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g, "%$1")), c = this.m, null != c && a.push(":", String(c));
  if (c = this.l) this.i && "/" != c.charAt(0) && a.push("/"), a.push(Uc(c, "/" == c.charAt(0) ? Wc : Xc, !0));
  (c = this.h.toString()) && a.push("?", c);
  (c = this.o) && a.push("#", Uc(c, Yc));
  return a.join("");
};

function N(a) {
  return new U(a);
}

function Oc(a, b, c) {
  a.j = c ? Tc(b, !0) : b;
  a.j && (a.j = a.j.replace(/:$/, ""));
}

function Pc(a, b, c) {
  a.i = c ? Tc(b, !0) : b;
}

function Qc(a, b) {
  if (b) {
    b = Number(b);
    if (isNaN(b) || 0 > b) throw Error("Bad port number " + b);
    a.m = b;
  } else a.m = null;
}

function Sc(a, b, c) {
  b instanceof Rc ? (a.h = b, Zc(a.h, a.g)) : (c || (b = Uc(b, $c)), a.h = new Rc(b, a.g));
}

function R(a, b, c) {
  a.h.set(b, c);
}

function jc(a) {
  R(a, "zx", Math.floor(2147483648 * Math.random()).toString(36) + Math.abs(Math.floor(2147483648 * Math.random()) ^ Date.now()).toString(36));
  return a;
}

function ad(a) {
  return a instanceof U ? N(a) : new U(a, void 0);
}

function bd(a, b, c, d) {
  var e = new U(null, void 0);
  a && Oc(e, a);
  b && Pc(e, b);
  c && Qc(e, c);
  d && (e.l = d);
  return e;
}

function Tc(a, b) {
  return a ? b ? decodeURI(a.replace(/%25/g, "%2525")) : decodeURIComponent(a) : "";
}

function Uc(a, b, c) {
  return "string" === typeof a ? (a = encodeURI(a).replace(b, cd), c && (a = a.replace(/%25([0-9a-fA-F]{2})/g, "%$1")), a) : null;
}

function cd(a) {
  a = a.charCodeAt(0);
  return "%" + (a >> 4 & 15).toString(16) + (a & 15).toString(16);
}

var Vc = /[#\/\?@]/g,
    Xc = /[#\?:]/g,
    Wc = /[#\?]/g,
    $c = /[#\?@]/g,
    Yc = /#/g;

function Rc(a, b) {
  this.h = this.g = null;
  this.i = a || null;
  this.j = !!b;
}

function V(a) {
  a.g || (a.g = new S(), a.h = 0, a.i && Nc(a.i, function (b, c) {
    a.add(decodeURIComponent(b.replace(/\+/g, " ")), c);
  }));
}

k = Rc.prototype;

k.add = function (a, b) {
  V(this);
  this.i = null;
  a = W(this, a);
  var c = this.g.get(a);
  c || this.g.set(a, c = []);
  c.push(b);
  this.h += 1;
  return this;
};

function dd(a, b) {
  V(a);
  b = W(a, b);
  T(a.g.h, b) && (a.i = null, a.h -= a.g.get(b).length, a = a.g, T(a.h, b) && (delete a.h[b], a.i--, a.g.length > 2 * a.i && Lc(a)));
}

function ed(a, b) {
  V(a);
  b = W(a, b);
  return T(a.g.h, b);
}

k.forEach = function (a, b) {
  V(this);
  this.g.forEach(function (c, d) {
    na(c, function (e) {
      a.call(b, e, d, this);
    }, this);
  }, this);
};

k.T = function () {
  V(this);

  for (var a = this.g.R(), b = this.g.T(), c = [], d = 0; d < b.length; d++) for (var e = a[d], f = 0; f < e.length; f++) c.push(b[d]);

  return c;
};

k.R = function (a) {
  V(this);
  var b = [];
  if ("string" === typeof a) ed(this, a) && (b = qa(b, this.g.get(W(this, a))));else {
    a = this.g.R();

    for (var c = 0; c < a.length; c++) b = qa(b, a[c]);
  }
  return b;
};

k.set = function (a, b) {
  V(this);
  this.i = null;
  a = W(this, a);
  ed(this, a) && (this.h -= this.g.get(a).length);
  this.g.set(a, [b]);
  this.h += 1;
  return this;
};

k.get = function (a, b) {
  if (!a) return b;
  a = this.R(a);
  return 0 < a.length ? String(a[0]) : b;
};

function mc(a, b, c) {
  dd(a, b);
  0 < c.length && (a.i = null, a.g.set(W(a, b), ra(c)), a.h += c.length);
}

k.toString = function () {
  if (this.i) return this.i;
  if (!this.g) return "";

  for (var a = [], b = this.g.T(), c = 0; c < b.length; c++) {
    var d = b[c],
        e = encodeURIComponent(String(d));
    d = this.R(d);

    for (var f = 0; f < d.length; f++) {
      var h = e;
      "" !== d[f] && (h += "=" + encodeURIComponent(String(d[f])));
      a.push(h);
    }
  }

  return this.i = a.join("&");
};

function W(a, b) {
  b = String(b);
  a.j && (b = b.toLowerCase());
  return b;
}

function Zc(a, b) {
  b && !a.j && (V(a), a.i = null, a.g.forEach(function (c, d) {
    var e = d.toLowerCase();
    d != e && (dd(this, d), mc(this, e, c));
  }, a));
  a.j = b;
}

var fd = function () {
  function fd(a, b) {
    this.h = a;
    this.g = b;
  }

  return fd;
}();

function gd(a) {
  this.l = a || hd;
  l.PerformanceNavigationTiming ? (a = l.performance.getEntriesByType("navigation"), a = 0 < a.length && ("hq" == a[0].nextHopProtocol || "h2" == a[0].nextHopProtocol)) : a = !!(l.g && l.g.Ea && l.g.Ea() && l.g.Ea().Zb);
  this.j = a ? this.l : 1;
  this.g = null;
  1 < this.j && (this.g = new Set());
  this.h = null;
  this.i = [];
}

var hd = 10;

function id(a) {
  return a.h ? !0 : a.g ? a.g.size >= a.j : !1;
}

function Cc(a) {
  return a.h ? 1 : a.g ? a.g.size : 0;
}

function yc(a, b) {
  return a.h ? a.h == b : a.g ? a.g.has(b) : !1;
}

function Dc(a, b) {
  a.g ? a.g.add(b) : a.h = b;
}

function Fc(a, b) {
  a.h && a.h == b ? a.h = null : a.g && a.g.has(b) && a.g.delete(b);
}

gd.prototype.cancel = function () {
  var e_1, _a;

  this.i = jd(this);
  if (this.h) this.h.cancel(), this.h = null;else if (this.g && 0 !== this.g.size) {
    try {
      for (var _b = __values(this.g.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
        var a = _c.value;
        a.cancel();
      }
    } catch (e_1_1) {
      e_1 = {
        error: e_1_1
      };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
      } finally {
        if (e_1) throw e_1.error;
      }
    }

    this.g.clear();
  }
};

function jd(a) {
  var e_2, _a;

  if (null != a.h) return a.i.concat(a.h.D);

  if (null != a.g && 0 !== a.g.size) {
    var b = a.i;

    try {
      for (var _b = __values(a.g.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
        var c = _c.value;
        b = b.concat(c.D);
      }
    } catch (e_2_1) {
      e_2 = {
        error: e_2_1
      };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
      } finally {
        if (e_2) throw e_2.error;
      }
    }

    return b;
  }

  return ra(a.i);
}

function kd() {}

kd.prototype.stringify = function (a) {
  return l.JSON.stringify(a, void 0);
};

kd.prototype.parse = function (a) {
  return l.JSON.parse(a, void 0);
};

function ld() {
  this.g = new kd();
}

function md(a, b, c) {
  var d = c || "";

  try {
    Kc(a, function (e, f) {
      var h = e;
      p(e) && (h = rb(e));
      b.push(d + f + "=" + encodeURIComponent(h));
    });
  } catch (e) {
    throw b.push(d + "type=" + encodeURIComponent("_badmap")), e;
  }
}

function nd(a, b) {
  var c = new Mb();

  if (l.Image) {
    var d_1 = new Image();
    d_1.onload = ja(od, c, d_1, "TestLoadImage: loaded", !0, b);
    d_1.onerror = ja(od, c, d_1, "TestLoadImage: error", !1, b);
    d_1.onabort = ja(od, c, d_1, "TestLoadImage: abort", !1, b);
    d_1.ontimeout = ja(od, c, d_1, "TestLoadImage: timeout", !1, b);
    l.setTimeout(function () {
      if (d_1.ontimeout) d_1.ontimeout();
    }, 1E4);
    d_1.src = a;
  } else b(!1);
}

function od(a, b, c, d, e) {
  try {
    b.onload = null, b.onerror = null, b.onabort = null, b.ontimeout = null, e(d);
  } catch (f) {}
}

function pd(a) {
  this.l = a.$b || null;
  this.j = a.ib || !1;
}

t(pd, Yb);

pd.prototype.g = function () {
  return new qd(this.l, this.j);
};

pd.prototype.i = function (a) {
  return function () {
    return a;
  };
}({});

function qd(a, b) {
  C.call(this);
  this.D = a;
  this.u = b;
  this.m = void 0;
  this.readyState = rd;
  this.status = 0;
  this.responseType = this.responseText = this.response = this.statusText = "";
  this.onreadystatechange = null;
  this.v = new Headers();
  this.h = null;
  this.C = "GET";
  this.B = "";
  this.g = !1;
  this.A = this.j = this.l = null;
}

t(qd, C);
var rd = 0;
k = qd.prototype;

k.open = function (a, b) {
  if (this.readyState != rd) throw this.abort(), Error("Error reopening a connection");
  this.C = a;
  this.B = b;
  this.readyState = 1;
  sd(this);
};

k.send = function (a) {
  if (1 != this.readyState) throw this.abort(), Error("need to call open() first. ");
  this.g = !0;
  var b = {
    headers: this.v,
    method: this.C,
    credentials: this.m,
    cache: void 0
  };
  a && (b.body = a);
  (this.D || l).fetch(new Request(this.B, b)).then(this.Va.bind(this), this.ha.bind(this));
};

k.abort = function () {
  this.response = this.responseText = "";
  this.v = new Headers();
  this.status = 0;
  this.j && this.j.cancel("Request was aborted.");
  1 <= this.readyState && this.g && 4 != this.readyState && (this.g = !1, td(this));
  this.readyState = rd;
};

k.Va = function (a) {
  if (this.g && (this.l = a, this.h || (this.status = this.l.status, this.statusText = this.l.statusText, this.h = a.headers, this.readyState = 2, sd(this)), this.g && (this.readyState = 3, sd(this), this.g))) if ("arraybuffer" === this.responseType) a.arrayBuffer().then(this.Ta.bind(this), this.ha.bind(this));else if ("undefined" !== typeof l.ReadableStream && "body" in a) {
    this.j = a.body.getReader();

    if (this.u) {
      if (this.responseType) throw Error('responseType must be empty for "streamBinaryChunks" mode responses.');
      this.response = [];
    } else this.response = this.responseText = "", this.A = new TextDecoder();

    ud(this);
  } else a.text().then(this.Ua.bind(this), this.ha.bind(this));
};

function ud(a) {
  a.j.read().then(a.Sa.bind(a)).catch(a.ha.bind(a));
}

k.Sa = function (a) {
  if (this.g) {
    if (this.u && a.value) this.response.push(a.value);else if (!this.u) {
      var b = a.value ? a.value : new Uint8Array(0);
      if (b = this.A.decode(b, {
        stream: !a.done
      })) this.response = this.responseText += b;
    }
    a.done ? td(this) : sd(this);
    3 == this.readyState && ud(this);
  }
};

k.Ua = function (a) {
  this.g && (this.response = this.responseText = a, td(this));
};

k.Ta = function (a) {
  this.g && (this.response = a, td(this));
};

k.ha = function () {
  this.g && td(this);
};

function td(a) {
  a.readyState = 4;
  a.l = null;
  a.j = null;
  a.A = null;
  sd(a);
}

k.setRequestHeader = function (a, b) {
  this.v.append(a, b);
};

k.getResponseHeader = function (a) {
  return this.h ? this.h.get(a.toLowerCase()) || "" : "";
};

k.getAllResponseHeaders = function () {
  if (!this.h) return "";
  var a = [],
      b = this.h.entries();

  for (var c = b.next(); !c.done;) c = c.value, a.push(c[0] + ": " + c[1]), c = b.next();

  return a.join("\r\n");
};

function sd(a) {
  a.onreadystatechange && a.onreadystatechange.call(a);
}

Object.defineProperty(qd.prototype, "withCredentials", {
  get: function () {
    return "include" === this.m;
  },
  set: function (a) {
    this.m = a ? "include" : "same-origin";
  }
});
var vd = l.JSON.parse;

function X(a) {
  C.call(this);
  this.headers = new S();
  this.u = a || null;
  this.h = !1;
  this.C = this.g = null;
  this.H = "";
  this.m = 0;
  this.j = "";
  this.l = this.F = this.v = this.D = !1;
  this.B = 0;
  this.A = null;
  this.J = wd;
  this.K = this.L = !1;
}

t(X, C);
var wd = "",
    xd = /^https?$/i,
    yd = ["POST", "PUT"];
k = X.prototype;

k.ea = function (a, b, c, d) {
  if (this.g) throw Error("[goog.net.XhrIo] Object is active with another request=" + this.H + "; newUri=" + a);
  b = b ? b.toUpperCase() : "GET";
  this.H = a;
  this.j = "";
  this.m = 0;
  this.D = !1;
  this.h = !0;
  this.g = this.u ? this.u.g() : cc.g();
  this.C = this.u ? Zb(this.u) : Zb(cc);
  this.g.onreadystatechange = q(this.Fa, this);

  try {
    this.F = !0, this.g.open(b, String(a), !0), this.F = !1;
  } catch (f) {
    zd(this, f);
    return;
  }

  a = c || "";
  var e = new S(this.headers);
  d && Kc(d, function (f, h) {
    e.set(h, f);
  });
  d = oa(e.T());
  c = l.FormData && a instanceof l.FormData;
  !(0 <= ma(yd, b)) || d || c || e.set("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");
  e.forEach(function (f, h) {
    this.g.setRequestHeader(h, f);
  }, this);
  this.J && (this.g.responseType = this.J);
  "withCredentials" in this.g && this.g.withCredentials !== this.L && (this.g.withCredentials = this.L);

  try {
    Ad(this), 0 < this.B && ((this.K = Bd(this.g)) ? (this.g.timeout = this.B, this.g.ontimeout = q(this.pa, this)) : this.A = Gb(this.pa, this.B, this)), this.v = !0, this.g.send(a), this.v = !1;
  } catch (f) {
    zd(this, f);
  }
};

function Bd(a) {
  return y && Ra() && "number" === typeof a.timeout && void 0 !== a.ontimeout;
}

function pa(a) {
  return "content-type" == a.toLowerCase();
}

k.pa = function () {
  "undefined" != typeof goog && this.g && (this.j = "Timed out after " + this.B + "ms, aborting", this.m = 8, D(this, "timeout"), this.abort(8));
};

function zd(a, b) {
  a.h = !1;
  a.g && (a.l = !0, a.g.abort(), a.l = !1);
  a.j = b;
  a.m = 5;
  Cd(a);
  Dd(a);
}

function Cd(a) {
  a.D || (a.D = !0, D(a, "complete"), D(a, "error"));
}

k.abort = function (a) {
  this.g && this.h && (this.h = !1, this.l = !0, this.g.abort(), this.l = !1, this.m = a || 7, D(this, "complete"), D(this, "abort"), Dd(this));
};

k.M = function () {
  this.g && (this.h && (this.h = !1, this.l = !0, this.g.abort(), this.l = !1), Dd(this, !0));
  X.Z.M.call(this);
};

k.Fa = function () {
  this.s || (this.F || this.v || this.l ? Ed(this) : this.cb());
};

k.cb = function () {
  Ed(this);
};

function Ed(a) {
  if (a.h && "undefined" != typeof goog && (!a.C[1] || 4 != O(a) || 2 != a.ba())) if (a.v && 4 == O(a)) Gb(a.Fa, 0, a);else if (D(a, "readystatechange"), 4 == O(a)) {
    a.h = !1;

    try {
      var n = a.ba();

      a: switch (n) {
        case 200:
        case 201:
        case 202:
        case 204:
        case 206:
        case 304:
        case 1223:
          var b = !0;
          break a;

        default:
          b = !1;
      }

      var c;

      if (!(c = b)) {
        var d;

        if (d = 0 === n) {
          var e = String(a.H).match(Mc)[1] || null;

          if (!e && l.self && l.self.location) {
            var f = l.self.location.protocol;
            e = f.substr(0, f.length - 1);
          }

          d = !xd.test(e ? e.toLowerCase() : "");
        }

        c = d;
      }

      if (c) D(a, "complete"), D(a, "success");else {
        a.m = 6;

        try {
          var h = 2 < O(a) ? a.g.statusText : "";
        } catch (u) {
          h = "";
        }

        a.j = h + " [" + a.ba() + "]";
        Cd(a);
      }
    } finally {
      Dd(a);
    }
  }
}

function Dd(a, b) {
  if (a.g) {
    Ad(a);
    var c = a.g,
        d = a.C[0] ? aa : null;
    a.g = null;
    a.C = null;
    b || D(a, "ready");

    try {
      c.onreadystatechange = d;
    } catch (e) {}
  }
}

function Ad(a) {
  a.g && a.K && (a.g.ontimeout = null);
  a.A && (l.clearTimeout(a.A), a.A = null);
}

function O(a) {
  return a.g ? a.g.readyState : 0;
}

k.ba = function () {
  try {
    return 2 < O(this) ? this.g.status : -1;
  } catch (a) {
    return -1;
  }
};

k.ga = function () {
  try {
    return this.g ? this.g.responseText : "";
  } catch (a) {
    return "";
  }
};

k.Qa = function (a) {
  if (this.g) {
    var b = this.g.responseText;
    a && 0 == b.indexOf(a) && (b = b.substring(a.length));
    return vd(b);
  }
};

function oc(a) {
  try {
    if (!a.g) return null;
    if ("response" in a.g) return a.g.response;

    switch (a.J) {
      case wd:
      case "text":
        return a.g.responseText;

      case "arraybuffer":
        if ("mozResponseArrayBuffer" in a.g) return a.g.mozResponseArrayBuffer;
    }

    return null;
  } catch (b) {
    return null;
  }
}

k.Da = function () {
  return this.m;
};

k.La = function () {
  return "string" === typeof this.j ? this.j : String(this.j);
};

function Fd(a) {
  var b = "";
  xa(a, function (c, d) {
    b += d;
    b += ":";
    b += c;
    b += "\r\n";
  });
  return b;
}

function Gd(a, b, c) {
  a: {
    for (d in c) {
      var d = !1;
      break a;
    }

    d = !0;
  }

  d || (c = Fd(c), "string" === typeof a ? null != c && encodeURIComponent(String(c)) : R(a, b, c));
}

function Hd(a, b, c) {
  return c && c.internalChannelParams ? c.internalChannelParams[a] || b : b;
}

function Id(a) {
  this.za = 0;
  this.l = [];
  this.h = new Mb();
  this.la = this.oa = this.F = this.W = this.g = this.sa = this.D = this.aa = this.o = this.P = this.s = null;
  this.Za = this.V = 0;
  this.Xa = Hd("failFast", !1, a);
  this.N = this.v = this.u = this.m = this.j = null;
  this.X = !0;
  this.I = this.ta = this.U = -1;
  this.Y = this.A = this.C = 0;
  this.Pa = Hd("baseRetryDelayMs", 5E3, a);
  this.$a = Hd("retryDelaySeedMs", 1E4, a);
  this.Ya = Hd("forwardChannelMaxRetries", 2, a);
  this.ra = Hd("forwardChannelRequestTimeoutMs", 2E4, a);
  this.qa = a && a.xmlHttpFactory || void 0;
  this.Ba = a && a.Yb || !1;
  this.K = void 0;
  this.H = a && a.supportsCrossDomainXhr || !1;
  this.J = "";
  this.i = new gd(a && a.concurrentRequestLimit);
  this.Ca = new ld();
  this.ja = a && a.fastHandshake || !1;
  this.Ra = a && a.Wb || !1;
  a && a.Aa && this.h.Aa();
  a && a.forceLongPolling && (this.X = !1);
  this.$ = !this.ja && this.X && a && a.detectBufferingProxy || !1;
  this.ka = void 0;
  this.O = 0;
  this.L = !1;
  this.B = null;
  this.Wa = !a || !1 !== a.Xb;
}

k = Id.prototype;
k.ma = 8;
k.G = 1;

function Ic(a) {
  Jd(a);

  if (3 == a.G) {
    var b = a.V++,
        c = N(a.F);
    R(c, "SID", a.J);
    R(c, "RID", b);
    R(c, "TYPE", "terminate");
    Kd(a, c);
    b = new M(a, a.h, b, void 0);
    b.K = 2;
    b.v = jc(N(c));
    c = !1;
    l.navigator && l.navigator.sendBeacon && (c = l.navigator.sendBeacon(b.v.toString(), ""));
    !c && l.Image && (new Image().src = b.v, c = !0);
    c || (b.g = nc(b.l, null), b.g.ea(b.v));
    b.F = Date.now();
    lc(b);
  }

  Ld(a);
}

k.hb = function (a) {
  try {
    this.h.info("Origin Trials invoked: " + a);
  } catch (b) {}
};

function Ac(a) {
  a.g && (wc(a), a.g.cancel(), a.g = null);
}

function Jd(a) {
  Ac(a);
  a.u && (l.clearTimeout(a.u), a.u = null);
  zc(a);
  a.i.cancel();
  a.m && ("number" === typeof a.m && l.clearTimeout(a.m), a.m = null);
}

function Md(a, b) {
  a.l.push(new fd(a.Za++, b));
  3 == a.G && Hc(a);
}

function Hc(a) {
  id(a.i) || a.m || (a.m = !0, zb(a.Ha, a), a.C = 0);
}

function Nd(a, b) {
  if (Cc(a.i) >= a.i.j - (a.m ? 1 : 0)) return !1;
  if (a.m) return a.l = b.D.concat(a.l), !0;
  if (1 == a.G || 2 == a.G || a.C >= (a.Xa ? 0 : a.Ya)) return !1;
  a.m = K(q(a.Ha, a, b), Od(a, a.C));
  a.C++;
  return !0;
}

k.Ha = function (a) {
  if (this.m) if (this.m = null, 1 == this.G) {
    if (!a) {
      this.V = Math.floor(1E5 * Math.random());
      a = this.V++;
      var e = new M(this, this.h, a, void 0);
      var f = this.s;
      this.P && (f ? (f = ya(f), Aa(f, this.P)) : f = this.P);
      null === this.o && (e.H = f);
      if (this.ja) a: {
        var b = 0;

        for (var c = 0; c < this.l.length; c++) {
          b: {
            var d = this.l[c];

            if ("__data__" in d.g && (d = d.g.__data__, "string" === typeof d)) {
              d = d.length;
              break b;
            }

            d = void 0;
          }

          if (void 0 === d) break;
          b += d;

          if (4096 < b) {
            b = c;
            break a;
          }

          if (4096 === b || c === this.l.length - 1) {
            b = c + 1;
            break a;
          }
        }

        b = 1E3;
      } else b = 1E3;
      b = Pd(this, e, b);
      c = N(this.F);
      R(c, "RID", a);
      R(c, "CVER", 22);
      this.D && R(c, "X-HTTP-Session-Id", this.D);
      Kd(this, c);
      this.o && f && Gd(c, this.o, f);
      Dc(this.i, e);
      this.Ra && R(c, "TYPE", "init");
      this.ja ? (R(c, "$req", b), R(c, "SID", "null"), e.$ = !0, ic(e, c, null)) : ic(e, c, b);
      this.G = 2;
    }
  } else 3 == this.G && (a ? Qd(this, a) : 0 == this.l.length || id(this.i) || Qd(this));
};

function Qd(a, b) {
  var c;
  b ? c = b.m : c = a.V++;
  var d = N(a.F);
  R(d, "SID", a.J);
  R(d, "RID", c);
  R(d, "AID", a.U);
  Kd(a, d);
  a.o && a.s && Gd(d, a.o, a.s);
  c = new M(a, a.h, c, a.C + 1);
  null === a.o && (c.H = a.s);
  b && (a.l = b.D.concat(a.l));
  b = Pd(a, c, 1E3);
  c.setTimeout(Math.round(.5 * a.ra) + Math.round(.5 * a.ra * Math.random()));
  Dc(a.i, c);
  ic(c, d, b);
}

function Kd(a, b) {
  a.j && Kc({}, function (c, d) {
    R(b, d, c);
  });
}

function Pd(a, b, c) {
  c = Math.min(a.l.length, c);
  var d = a.j ? q(a.j.Oa, a.j, a) : null;

  a: {
    var e = a.l;
    var f = -1;

    for (;;) {
      var h = ["count=" + c];
      -1 == f ? 0 < c ? (f = e[0].h, h.push("ofs=" + f)) : f = 0 : h.push("ofs=" + f);
      var n = !0;

      for (var u = 0; u < c; u++) {
        var m = e[u].h;
        var r = e[u].g;
        m -= f;
        if (0 > m) f = Math.max(0, e[u].h - 100), n = !1;else try {
          md(r, h, "req" + m + "_");
        } catch (G) {
          d && d(r);
        }
      }

      if (n) {
        d = h.join("&");
        break a;
      }
    }
  }

  a = a.l.splice(0, c);
  b.D = a;
  return d;
}

function Gc(a) {
  a.g || a.u || (a.Y = 1, zb(a.Ga, a), a.A = 0);
}

function Bc(a) {
  if (a.g || a.u || 3 <= a.A) return !1;
  a.Y++;
  a.u = K(q(a.Ga, a), Od(a, a.A));
  a.A++;
  return !0;
}

k.Ga = function () {
  this.u = null;
  Rd(this);

  if (this.$ && !(this.L || null == this.g || 0 >= this.O)) {
    var a = 2 * this.O;
    this.h.info("BP detection timer enabled: " + a);
    this.B = K(q(this.bb, this), a);
  }
};

k.bb = function () {
  this.B && (this.B = null, this.h.info("BP detection timeout reached."), this.h.info("Buffering proxy detected and switch to long-polling!"), this.N = !1, this.L = !0, J(10), Ac(this), Rd(this));
};

function wc(a) {
  null != a.B && (l.clearTimeout(a.B), a.B = null);
}

function Rd(a) {
  a.g = new M(a, a.h, "rpc", a.Y);
  null === a.o && (a.g.H = a.s);
  a.g.O = 0;
  var b = N(a.oa);
  R(b, "RID", "rpc");
  R(b, "SID", a.J);
  R(b, "CI", a.N ? "0" : "1");
  R(b, "AID", a.U);
  Kd(a, b);
  R(b, "TYPE", "xmlhttp");
  a.o && a.s && Gd(b, a.o, a.s);
  a.K && a.g.setTimeout(a.K);
  var c = a.g;
  a = a.la;
  c.K = 1;
  c.v = jc(N(b));
  c.s = null;
  c.U = !0;
  kc(c, a);
}

k.ab = function () {
  null != this.v && (this.v = null, Ac(this), Bc(this), J(19));
};

function zc(a) {
  null != a.v && (l.clearTimeout(a.v), a.v = null);
}

function uc(a, b) {
  var c = null;

  if (a.g == b) {
    zc(a);
    wc(a);
    a.g = null;
    var d = 2;
  } else if (yc(a.i, b)) c = b.D, Fc(a.i, b), d = 1;else return;

  a.I = b.N;
  if (0 != a.G) if (b.i) {
    if (1 == d) {
      c = b.s ? b.s.length : 0;
      b = Date.now() - b.F;
      var e = a.C;
      d = Sb();
      D(d, new Vb(d, c, b, e));
      Hc(a);
    } else Gc(a);
  } else if (e = b.o, 3 == e || 0 == e && 0 < a.I || !(1 == d && Nd(a, b) || 2 == d && Bc(a))) switch (c && 0 < c.length && (b = a.i, b.i = b.i.concat(c)), e) {
    case 1:
      Q(a, 5);
      break;

    case 4:
      Q(a, 10);
      break;

    case 3:
      Q(a, 6);
      break;

    default:
      Q(a, 2);
  }
}

function Od(a, b) {
  var c = a.Pa + Math.floor(Math.random() * a.$a);
  a.j || (c *= 2);
  return c * b;
}

function Q(a, b) {
  a.h.info("Error code " + b);

  if (2 == b) {
    var c = null;
    a.j && (c = null);
    var d = q(a.jb, a);
    c || (c = new U("//www.google.com/images/cleardot.gif"), l.location && "http" == l.location.protocol || Oc(c, "https"), jc(c));
    nd(c.toString(), d);
  } else J(2);

  a.G = 0;
  a.j && a.j.va(b);
  Ld(a);
  Jd(a);
}

k.jb = function (a) {
  a ? (this.h.info("Successfully pinged google.com"), J(2)) : (this.h.info("Failed to ping google.com"), J(1));
};

function Ld(a) {
  a.G = 0;
  a.I = -1;

  if (a.j) {
    if (0 != jd(a.i).length || 0 != a.l.length) a.i.i.length = 0, ra(a.l), a.l.length = 0;
    a.j.ua();
  }
}

function Ec(a, b, c) {
  var d = ad(c);
  if ("" != d.i) b && Pc(d, b + "." + d.i), Qc(d, d.m);else {
    var e = l.location;
    d = bd(e.protocol, b ? b + "." + e.hostname : e.hostname, +e.port, c);
  }
  a.aa && xa(a.aa, function (e, f) {
    R(d, f, e);
  });
  b = a.D;
  c = a.sa;
  b && c && R(d, b, c);
  R(d, "VER", a.ma);
  Kd(a, d);
  return d;
}

function nc(a, b, c) {
  if (b && !a.H) throw Error("Can't create secondary domain capable XhrIo object.");
  b = c && a.Ba && !a.qa ? new X(new pd({
    ib: !0
  })) : new X(a.qa);
  b.L = a.H;
  return b;
}

function Sd() {}

k = Sd.prototype;

k.xa = function () {};

k.wa = function () {};

k.va = function () {};

k.ua = function () {};

k.Oa = function () {};

function Td() {
  if (y && !(10 <= Number(Ua))) throw Error("Environmental error: no available transport.");
}

Td.prototype.g = function (a, b) {
  return new Y(a, b);
};

function Y(a, b) {
  C.call(this);
  this.g = new Id(b);
  this.l = a;
  this.h = b && b.messageUrlParams || null;
  a = b && b.messageHeaders || null;
  b && b.clientProtocolHeaderRequired && (a ? a["X-Client-Protocol"] = "webchannel" : a = {
    "X-Client-Protocol": "webchannel"
  });
  this.g.s = a;
  a = b && b.initMessageHeaders || null;
  b && b.messageContentType && (a ? a["X-WebChannel-Content-Type"] = b.messageContentType : a = {
    "X-WebChannel-Content-Type": b.messageContentType
  });
  b && b.ya && (a ? a["X-WebChannel-Client-Profile"] = b.ya : a = {
    "X-WebChannel-Client-Profile": b.ya
  });
  this.g.P = a;
  (a = b && b.httpHeadersOverwriteParam) && !sa(a) && (this.g.o = a);
  this.A = b && b.supportsCrossDomainXhr || !1;
  this.v = b && b.sendRawJson || !1;
  (b = b && b.httpSessionIdParam) && !sa(b) && (this.g.D = b, a = this.h, null !== a && b in a && (a = this.h, b in a && delete a[b]));
  this.j = new Z(this);
}

t(Y, C);

Y.prototype.m = function () {
  this.g.j = this.j;
  this.A && (this.g.H = !0);
  var a = this.g,
      b = this.l,
      c = this.h || void 0;
  a.Wa && (a.h.info("Origin Trials enabled."), zb(q(a.hb, a, b)));
  J(0);
  a.W = b;
  a.aa = c || {};
  a.N = a.X;
  a.F = Ec(a, null, a.W);
  Hc(a);
};

Y.prototype.close = function () {
  Ic(this.g);
};

Y.prototype.u = function (a) {
  if ("string" === typeof a) {
    var b = {};
    b.__data__ = a;
    Md(this.g, b);
  } else this.v ? (b = {}, b.__data__ = rb(a), Md(this.g, b)) : Md(this.g, a);
};

Y.prototype.M = function () {
  this.g.j = null;
  delete this.j;
  Ic(this.g);
  delete this.g;
  Y.Z.M.call(this);
};

function Ud(a) {
  ac.call(this);
  var b = a.__sm__;

  if (b) {
    a: {
      for (var c in b) {
        a = c;
        break a;
      }

      a = void 0;
    }

    if (this.i = a) a = this.i, b = null !== b && a in b ? b[a] : void 0;
    this.data = b;
  } else this.data = a;
}

t(Ud, ac);

function Vd() {
  bc.call(this);
  this.status = 1;
}

t(Vd, bc);

function Z(a) {
  this.g = a;
}

t(Z, Sd);

Z.prototype.xa = function () {
  D(this.g, "a");
};

Z.prototype.wa = function (a) {
  D(this.g, new Ud(a));
};

Z.prototype.va = function (a) {
  D(this.g, new Vd(a));
};

Z.prototype.ua = function () {
  D(this.g, "b");
};
/*
Copyright 2017 Google LLC
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


Td.prototype.createWebChannel = Td.prototype.g;
Y.prototype.send = Y.prototype.u;
Y.prototype.open = Y.prototype.m;
Y.prototype.close = Y.prototype.close;
Wb.NO_ERROR = 0;
Wb.TIMEOUT = 8;
Wb.HTTP_ERROR = 6;
Xb.COMPLETE = "complete";
$b.EventType = L;
L.OPEN = "a";
L.CLOSE = "b";
L.ERROR = "c";
L.MESSAGE = "d";
C.prototype.listen = C.prototype.N;
X.prototype.listenOnce = X.prototype.O;
X.prototype.getLastError = X.prototype.La;
X.prototype.getLastErrorCode = X.prototype.Da;
X.prototype.getStatus = X.prototype.ba;
X.prototype.getResponseJson = X.prototype.Qa;
X.prototype.getResponseText = X.prototype.ga;
X.prototype.send = X.prototype.ea;

var createWebChannelTransport = function () {
  return new Td();
};

exports.createWebChannelTransport = createWebChannelTransport;

var getStatEventTarget = function () {
  return Sb();
};

exports.getStatEventTarget = getStatEventTarget;
var ErrorCode = Wb;
exports.ErrorCode = ErrorCode;
var EventType = Xb;
exports.EventType = EventType;
var Event = H;
exports.Event = Event;
var Stat = {
  rb: 0,
  ub: 1,
  vb: 2,
  Ob: 3,
  Tb: 4,
  Qb: 5,
  Rb: 6,
  Pb: 7,
  Nb: 8,
  Sb: 9,
  PROXY: 10,
  NOPROXY: 11,
  Lb: 12,
  Hb: 13,
  Ib: 14,
  Gb: 15,
  Jb: 16,
  Kb: 17,
  nb: 18,
  mb: 19,
  ob: 20
};
exports.Stat = Stat;
var FetchXmlHttpFactory = pd;
exports.FetchXmlHttpFactory = FetchXmlHttpFactory;
var WebChannel = $b;
exports.WebChannel = WebChannel;
var XhrIo = X;
exports.XhrIo = XhrIo;
var esm = {
  createWebChannelTransport: createWebChannelTransport,
  getStatEventTarget: getStatEventTarget,
  ErrorCode: ErrorCode,
  EventType: EventType,
  Event: Event,
  Stat: Stat,
  FetchXmlHttpFactory: FetchXmlHttpFactory,
  WebChannel: WebChannel,
  XhrIo: XhrIo
};
var _default = esm;
exports.default = _default;
},{}],"node_modules/@firebase/firestore/dist/index.esm2017.js":[function(require,module,exports) {
var process = require("process");
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._cast = _c;
exports._debugAssert = L;
exports._isBase64Available = ft;
exports._logWarn = $;
exports._validateIsNotUsedTogether = lc;
exports.addDoc = _h;
exports.arrayRemove = bh;
exports.arrayUnion = Rh;
exports.clearIndexedDbPersistence = Bc;
exports.collection = Ac;
exports.collectionGroup = Rc;
exports.connectFirestoreEmulator = pc;
exports.deleteDoc = wh;
exports.deleteField = Ih;
exports.disableNetwork = Kc;
exports.doc = bc;
exports.documentId = Hc;
exports.enableIndexedDbPersistence = Fc;
exports.enableMultiTabIndexedDbPersistence = Mc;
exports.enableNetwork = qc;
exports.endAt = Hu;
exports.endBefore = zu;
exports.ensureFirestoreConfigured = $c;
exports.executeWrite = yh;
exports.getDoc = rh;
exports.getDocFromCache = ah;
exports.getDocFromServer = ch;
exports.getDocs = uh;
exports.getDocsFromCache = hh;
exports.getDocsFromServer = lh;
exports.getFirestore = kc;
exports.increment = Ph;
exports.initializeFirestore = xc;
exports.limit = qu;
exports.limitToLast = Ku;
exports.loadBundle = Qc;
exports.namedQuery = Wc;
exports.onSnapshot = mh;
exports.onSnapshotsInSync = gh;
exports.orderBy = Bu;
exports.query = Ou;
exports.queryEqual = vc;
exports.refEqual = Pc;
exports.runTransaction = Th;
exports.serverTimestamp = Ah;
exports.setDoc = fh;
exports.setLogLevel = N;
exports.snapshotEqual = xu;
exports.startAfter = Wu;
exports.startAt = Qu;
exports.terminate = jc;
exports.updateDoc = dh;
exports.waitForPendingWrites = Uc;
exports.where = Mu;
exports.writeBatch = vh;
exports._FieldPath = exports._EmptyCredentialsProvider = exports._DocumentKey = exports._DatabaseId = exports.WriteBatch = exports.Transaction = exports.Timestamp = exports.SnapshotMetadata = exports.QuerySnapshot = exports.QueryDocumentSnapshot = exports.QueryConstraint = exports.Query = exports.LoadBundleTask = exports.GeoPoint = exports.FirestoreError = exports.Firestore = exports.FieldValue = exports.FieldPath = exports.DocumentSnapshot = exports.DocumentReference = exports.CollectionReference = exports.CACHE_SIZE_UNLIMITED = exports.Bytes = exports.AbstractUserDataWriter = void 0;

var _app = require("@firebase/app");

var _component = require("@firebase/component");

var _logger = require("@firebase/logger");

var _util = require("@firebase/util");

var _webchannelWrapper = require("@firebase/webchannel-wrapper");

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e86) { throw _e86; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e87) { didErr = true; err = _e87; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Simple wrapper around a nullable UID. Mostly exists to make code more
 * readable.
 */
var V = /*#__PURE__*/function () {
  function V(t) {
    _classCallCheck(this, V);

    this.uid = t;
  }

  _createClass(V, [{
    key: "isAuthenticated",
    value: function isAuthenticated() {
      return null != this.uid;
    }
    /**
     * Returns a key representing this user, suitable for inclusion in a
     * dictionary.
     */

  }, {
    key: "toKey",
    value: function toKey() {
      return this.isAuthenticated() ? "uid:" + this.uid : "anonymous-user";
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return t.uid === this.uid;
    }
  }]);

  return V;
}();
/** A user with a null UID. */


V.UNAUTHENTICATED = new V(null), // TODO(mikelehen): Look into getting a proper uid-equivalent for
// non-FirebaseAuth providers.
V.GOOGLE_CREDENTIALS = new V("google-credentials-uid"), V.FIRST_PARTY = new V("first-party-uid"), V.MOCK_USER = new V("mock-user");
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var S = "9.0.2";
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var D = new _logger.Logger("@firebase/firestore"); // Helper methods are needed because variables can't be exported as read/write

function C() {
  return D.logLevel;
}
/**
 * Sets the verbosity of Cloud Firestore logs (debug, error, or silent).
 *
 * @param logLevel - The verbosity you set for activity and error logging. Can
 *   be any of the following values:
 *
 *   <ul>
 *     <li>`debug` for the most verbose logging level, primarily for
 *     debugging.</li>
 *     <li>`error` to log errors only.</li>
 *     <li><code>`silent` to turn off logging.</li>
 *   </ul>
 */


function N(t) {
  D.setLogLevel(t);
}

function x(t) {
  if (D.logLevel <= _logger.LogLevel.DEBUG) {
    for (var _len = arguments.length, e = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      e[_key - 1] = arguments[_key];
    }

    var _n2 = e.map(O);

    D.debug.apply(D, ["Firestore (".concat(S, "): ").concat(t)].concat(_toConsumableArray(_n2)));
  }
}

function k(t) {
  if (D.logLevel <= _logger.LogLevel.ERROR) {
    for (var _len2 = arguments.length, e = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      e[_key2 - 1] = arguments[_key2];
    }

    var _n3 = e.map(O);

    D.error.apply(D, ["Firestore (".concat(S, "): ").concat(t)].concat(_toConsumableArray(_n3)));
  }
}
/**
 * @internal
 */


function $(t) {
  if (D.logLevel <= _logger.LogLevel.WARN) {
    for (var _len3 = arguments.length, e = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      e[_key3 - 1] = arguments[_key3];
    }

    var _n4 = e.map(O);

    D.warn.apply(D, ["Firestore (".concat(S, "): ").concat(t)].concat(_toConsumableArray(_n4)));
  }
}
/**
 * Converts an additional log parameter to a string representation.
 */


function O(t) {
  if ("string" == typeof t) return t;

  try {
    return e = t, JSON.stringify(e);
  } catch (e) {
    // Converting to JSON failed, just log the object directly
    return t;
  }
  /**
  * @license
  * Copyright 2020 Google LLC
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */

  /** Formats an object as a JSON string, suitable for logging. */


  var e;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Unconditionally fails, throwing an Error with the given message.
 * Messages are stripped in production builds.
 *
 * Returns `never` and can be used in expressions:
 * @example
 * let futureVar = fail('not implemented yet');
 */


function F() {
  var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "Unexpected state";
  // Log the failure in addition to throw an exception, just in case the
  // exception is swallowed.
  var e = "FIRESTORE (".concat(S, ") INTERNAL ASSERTION FAILED: ") + t; // NOTE: We don't use FirestoreError here because these are internal failures
  // that cannot be handled by the user. (Also it would create a circular
  // dependency between the error and assert modules which doesn't work.)

  throw k(e), new Error(e);
}
/**
 * Fails if the given assertion condition is false, throwing an Error with the
 * given message if it did.
 *
 * Messages are stripped in production builds.
 */


function M(t, e) {
  t || F();
}
/**
 * Fails if the given assertion condition is false, throwing an Error with the
 * given message if it did.
 *
 * The code of callsites invoking this function are stripped out in production
 * builds. Any side-effects of code within the debugAssert() invocation will not
 * happen in this case.
 *
 * @internal
 */


function L(t, e) {
  t || F();
}
/**
 * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an
 * instance of `T` before casting.
 */


function B(t, // eslint-disable-next-line @typescript-eslint/no-explicit-any
e) {
  return t;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var U = {
  // Causes are copied from:
  // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h

  /** Not an error; returned on success. */
  OK: "ok",

  /** The operation was cancelled (typically by the caller). */
  CANCELLED: "cancelled",

  /** Unknown error or an error from a different error domain. */
  UNKNOWN: "unknown",

  /**
   * Client specified an invalid argument. Note that this differs from
   * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are
   * problematic regardless of the state of the system (e.g., a malformed file
   * name).
   */
  INVALID_ARGUMENT: "invalid-argument",

  /**
   * Deadline expired before operation could complete. For operations that
   * change the state of the system, this error may be returned even if the
   * operation has completed successfully. For example, a successful response
   * from a server could have been delayed long enough for the deadline to
   * expire.
   */
  DEADLINE_EXCEEDED: "deadline-exceeded",

  /** Some requested entity (e.g., file or directory) was not found. */
  NOT_FOUND: "not-found",

  /**
   * Some entity that we attempted to create (e.g., file or directory) already
   * exists.
   */
  ALREADY_EXISTS: "already-exists",

  /**
   * The caller does not have permission to execute the specified operation.
   * PERMISSION_DENIED must not be used for rejections caused by exhausting
   * some resource (use RESOURCE_EXHAUSTED instead for those errors).
   * PERMISSION_DENIED must not be used if the caller can not be identified
   * (use UNAUTHENTICATED instead for those errors).
   */
  PERMISSION_DENIED: "permission-denied",

  /**
   * The request does not have valid authentication credentials for the
   * operation.
   */
  UNAUTHENTICATED: "unauthenticated",

  /**
   * Some resource has been exhausted, perhaps a per-user quota, or perhaps the
   * entire file system is out of space.
   */
  RESOURCE_EXHAUSTED: "resource-exhausted",

  /**
   * Operation was rejected because the system is not in a state required for
   * the operation's execution. For example, directory to be deleted may be
   * non-empty, an rmdir operation is applied to a non-directory, etc.
   *
   * A litmus test that may help a service implementor in deciding
   * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:
   *  (a) Use UNAVAILABLE if the client can retry just the failing call.
   *  (b) Use ABORTED if the client should retry at a higher-level
   *      (e.g., restarting a read-modify-write sequence).
   *  (c) Use FAILED_PRECONDITION if the client should not retry until
   *      the system state has been explicitly fixed. E.g., if an "rmdir"
   *      fails because the directory is non-empty, FAILED_PRECONDITION
   *      should be returned since the client should not retry unless
   *      they have first fixed up the directory by deleting files from it.
   *  (d) Use FAILED_PRECONDITION if the client performs conditional
   *      REST Get/Update/Delete on a resource and the resource on the
   *      server does not match the condition. E.g., conflicting
   *      read-modify-write on the same resource.
   */
  FAILED_PRECONDITION: "failed-precondition",

  /**
   * The operation was aborted, typically due to a concurrency issue like
   * sequencer check failures, transaction aborts, etc.
   *
   * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
   * and UNAVAILABLE.
   */
  ABORTED: "aborted",

  /**
   * Operation was attempted past the valid range. E.g., seeking or reading
   * past end of file.
   *
   * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed
   * if the system state changes. For example, a 32-bit file system will
   * generate INVALID_ARGUMENT if asked to read at an offset that is not in the
   * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from
   * an offset past the current file size.
   *
   * There is a fair bit of overlap between FAILED_PRECONDITION and
   * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)
   * when it applies so that callers who are iterating through a space can
   * easily look for an OUT_OF_RANGE error to detect when they are done.
   */
  OUT_OF_RANGE: "out-of-range",

  /** Operation is not implemented or not supported/enabled in this service. */
  UNIMPLEMENTED: "unimplemented",

  /**
   * Internal errors. Means some invariants expected by underlying System has
   * been broken. If you see one of these errors, Something is very broken.
   */
  INTERNAL: "internal",

  /**
   * The service is currently unavailable. This is a most likely a transient
   * condition and may be corrected by retrying with a backoff.
   *
   * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
   * and UNAVAILABLE.
   */
  UNAVAILABLE: "unavailable",

  /** Unrecoverable data loss or corruption. */
  DATA_LOSS: "data-loss"
};
/** An error returned by a Firestore operation. */

var q = /*#__PURE__*/function (_Error) {
  _inherits(q, _Error);

  var _super = _createSuper(q);

  /** @hideconstructor */
  function q(
  /**
   * The backend error code associated with this error.
   */
  t,
  /**
   * A custom error description.
   */
  e) {
    var _this;

    _classCallCheck(this, q);

    _this = _super.call(this, e), _this.code = t, _this.message = e,
    /** The custom name for all FirestoreErrors. */
    _this.name = "FirebaseError", // HACK: We write a toString property directly because Error is not a real
    // class and so inheritance does not work correctly. We could alternatively
    // do the same "back-door inheritance" trick that FirebaseError does.
    _this.toString = function () {
      return "".concat(_this.name, ": [code=").concat(_this.code, "]: ").concat(_this.message);
    };
    return _this;
  }

  return q;
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


exports.FirestoreError = q;

var K = function K() {
  var _this2 = this;

  _classCallCheck(this, K);

  this.promise = new Promise(function (t, e) {
    _this2.resolve = t, _this2.reject = e;
  });
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var j = function j(t, e) {
  _classCallCheck(this, j);

  this.user = e, this.type = "OAuth", this.authHeaders = {}, // Set the headers using Object Literal notation to avoid minification
  this.authHeaders.Authorization = "Bearer ".concat(t);
};
/**
 * A CredentialsProvider that always yields an empty token.
 * @internal
 */


var Q = /*#__PURE__*/function () {
  function Q() {
    _classCallCheck(this, Q);
  }

  _createClass(Q, [{
    key: "getToken",
    value: function getToken() {
      return Promise.resolve(null);
    }
  }, {
    key: "invalidateToken",
    value: function invalidateToken() {}
  }, {
    key: "start",
    value: function start(t, e) {
      // Fire with initial user.
      t.enqueueRetryable(function () {
        return e(V.UNAUTHENTICATED);
      });
    }
  }, {
    key: "shutdown",
    value: function shutdown() {}
  }]);

  return Q;
}();
/**
 * A CredentialsProvider that always returns a constant token. Used for
 * emulator token mocking.
 */


exports._EmptyCredentialsProvider = Q;

var W = /*#__PURE__*/function () {
  function W(t) {
    _classCallCheck(this, W);

    this.token = t,
    /**
     * Stores the listener registered with setChangeListener()
     * This isn't actually necessary since the UID never changes, but we use this
     * to verify the listen contract is adhered to in tests.
     */
    this.changeListener = null;
  }

  _createClass(W, [{
    key: "getToken",
    value: function getToken() {
      return Promise.resolve(this.token);
    }
  }, {
    key: "invalidateToken",
    value: function invalidateToken() {}
  }, {
    key: "start",
    value: function start(t, e) {
      var _this3 = this;

      this.changeListener = e, // Fire with initial user.
      t.enqueueRetryable(function () {
        return e(_this3.token.user);
      });
    }
  }, {
    key: "shutdown",
    value: function shutdown() {
      this.changeListener = null;
    }
  }]);

  return W;
}();

var G = /*#__PURE__*/function () {
  function G(t) {
    _classCallCheck(this, G);

    this.t = t,
    /** Tracks the current User. */
    this.currentUser = V.UNAUTHENTICATED,
    /**
     * Counter used to detect if the token changed while a getToken request was
     * outstanding.
     */
    this.i = 0, this.forceRefresh = !1, this.auth = null;
  }

  _createClass(G, [{
    key: "start",
    value: function start(t, e) {
      var _this4 = this;

      var n = this.i; // A change listener that prevents double-firing for the same token change.

      var s = function s(t) {
        return _this4.i !== n ? (n = _this4.i, e(t)) : Promise.resolve();
      }; // A promise that can be waited on to block on the next token change.
      // This promise is re-created after each change.


      var i = new K();

      this.o = function () {
        _this4.i++, _this4.currentUser = _this4.u(), i.resolve(), i = new K(), t.enqueueRetryable(function () {
          return s(_this4.currentUser);
        });
      };

      var r = function r() {
        var e = i;
        t.enqueueRetryable( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return e.promise;

                case 2:
                  _context.next = 4;
                  return s(_this4.currentUser);

                case 4:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        })));
      },
          o = function o(t) {
        x("FirebaseCredentialsProvider", "Auth detected"), _this4.auth = t, _this4.auth.addAuthTokenListener(_this4.o), r();
      };

      this.t.onInit(function (t) {
        return o(t);
      }), // Our users can initialize Auth right after Firestore, so we give it
      // a chance to register itself with the component framework before we
      // determine whether to start up in unauthenticated mode.
      setTimeout(function () {
        if (!_this4.auth) {
          var _t2 = _this4.t.getImmediate({
            optional: !0
          });

          _t2 ? o(_t2) : ( // If auth is still not available, proceed with `null` user
          x("FirebaseCredentialsProvider", "Auth not yet detected"), i.resolve(), i = new K());
        }
      }, 0), r();
    }
  }, {
    key: "getToken",
    value: function getToken() {
      var _this5 = this;

      // Take note of the current value of the tokenCounter so that this method
      // can fail (with an ABORTED error) if there is a token change while the
      // request is outstanding.
      var t = this.i,
          e = this.forceRefresh;
      return this.forceRefresh = !1, this.auth ? this.auth.getToken(e).then(function (e) {
        return (// Cancel the request since the token changed while the request was
          // outstanding so the response is potentially for a previous user (which
          // user, we can't be sure).
          _this5.i !== t ? (x("FirebaseCredentialsProvider", "getToken aborted due to token change."), _this5.getToken()) : e ? (M("string" == typeof e.accessToken), new j(e.accessToken, _this5.currentUser)) : null
        );
      }) : Promise.resolve(null);
    }
  }, {
    key: "invalidateToken",
    value: function invalidateToken() {
      this.forceRefresh = !0;
    }
  }, {
    key: "shutdown",
    value: function shutdown() {
      this.auth && this.auth.removeAuthTokenListener(this.o);
    } // Auth.getUid() can return null even with a user logged in. It is because
    // getUid() is synchronous, but the auth code populating Uid is asynchronous.
    // This method should only be called in the AuthTokenListener callback
    // to guarantee to get the actual user.

  }, {
    key: "u",
    value: function u() {
      var t = this.auth && this.auth.getUid();
      return M(null === t || "string" == typeof t), new V(t);
    }
  }]);

  return G;
}();
/*
 * FirstPartyToken provides a fresh token each time its value
 * is requested, because if the token is too old, requests will be rejected.
 * Technically this may no longer be necessary since the SDK should gracefully
 * recover from unauthenticated errors (see b/33147818 for context), but it's
 * safer to keep the implementation as-is.
 */


var z = /*#__PURE__*/function () {
  function z(t, e, n) {
    _classCallCheck(this, z);

    this.h = t, this.l = e, this.m = n, this.type = "FirstParty", this.user = V.FIRST_PARTY;
  }

  _createClass(z, [{
    key: "authHeaders",
    get: function get() {
      var t = {
        "X-Goog-AuthUser": this.l
      },
          e = this.h.auth.getAuthHeaderValueForFirstParty([]); // Use array notation to prevent minification

      return e && (t.Authorization = e), this.m && (t["X-Goog-Iam-Authorization-Token"] = this.m), t;
    }
  }]);

  return z;
}();
/*
 * Provides user credentials required for the Firestore JavaScript SDK
 * to authenticate the user, using technique that is only available
 * to applications hosted by Google.
 */


var H = /*#__PURE__*/function () {
  function H(t, e, n) {
    _classCallCheck(this, H);

    this.h = t, this.l = e, this.m = n;
  }

  _createClass(H, [{
    key: "getToken",
    value: function getToken() {
      return Promise.resolve(new z(this.h, this.l, this.m));
    }
  }, {
    key: "start",
    value: function start(t, e) {
      // Fire with initial uid.
      t.enqueueRetryable(function () {
        return e(V.FIRST_PARTY);
      });
    }
  }, {
    key: "shutdown",
    value: function shutdown() {}
  }, {
    key: "invalidateToken",
    value: function invalidateToken() {}
  }]);

  return H;
}();
/**
 * Builds a CredentialsProvider depending on the type of
 * the credentials passed in.
 */

/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * `ListenSequence` is a monotonic sequence. It is initialized with a minimum value to
 * exceed. All subsequent calls to next will return increasing values. If provided with a
 * `SequenceNumberSyncer`, it will additionally bump its next value when told of a new value, as
 * well as write out sequence numbers that it produces via `next()`.
 */


var J = /*#__PURE__*/function () {
  function J(t, e) {
    var _this6 = this;

    _classCallCheck(this, J);

    this.previousValue = t, e && (e.sequenceNumberHandler = function (t) {
      return _this6.g(t);
    }, this.p = function (t) {
      return e.writeSequenceNumber(t);
    });
  }

  _createClass(J, [{
    key: "g",
    value: function g(t) {
      return this.previousValue = Math.max(t, this.previousValue), this.previousValue;
    }
  }, {
    key: "next",
    value: function next() {
      var t = ++this.previousValue;
      return this.p && this.p(t), t;
    }
  }]);

  return J;
}();
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Generates `nBytes` of random bytes.
 *
 * If `nBytes < 0` , an error will be thrown.
 */


function Y(t) {
  // Polyfills for IE and WebWorker by using `self` and `msCrypto` when `crypto` is not available.
  var e = // eslint-disable-next-line @typescript-eslint/no-explicit-any
  "undefined" != typeof self && (self.crypto || self.msCrypto),
      n = new Uint8Array(t);
  if (e && "function" == typeof e.getRandomValues) e.getRandomValues(n);else // Falls back to Math.random
    for (var _e2 = 0; _e2 < t; _e2++) {
      n[_e2] = Math.floor(256 * Math.random());
    }
  return n;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


J.T = -1;

var X = /*#__PURE__*/function () {
  function X() {
    _classCallCheck(this, X);
  }

  _createClass(X, null, [{
    key: "I",
    value: function I() {
      // Alphanumeric characters
      var t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
          e = Math.floor(256 / t.length) * t.length; // The largest byte value that is a multiple of `char.length`.

      var n = "";

      for (; n.length < 20;) {
        var _s2 = Y(40);

        for (var _i2 = 0; _i2 < _s2.length; ++_i2) {
          // Only accept values that are [0, maxMultiple), this ensures they can
          // be evenly mapped to indices of `chars` via a modulo operation.
          n.length < 20 && _s2[_i2] < e && (n += t.charAt(_s2[_i2] % t.length));
        }
      }

      return n;
    }
  }]);

  return X;
}();

function Z(t, e) {
  return t < e ? -1 : t > e ? 1 : 0;
}
/** Helper to compare arrays using isEqual(). */


function tt(t, e, n) {
  return t.length === e.length && t.every(function (t, s) {
    return n(t, e[s]);
  });
}
/**
 * Returns the immediate lexicographically-following string. This is useful to
 * construct an inclusive range for indexeddb iterators.
 */


function et(t) {
  // Return the input string, with an additional NUL byte appended.
  return t + "\0";
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// The earliest date supported by Firestore timestamps (0001-01-01T00:00:00Z).

/**
 * A `Timestamp` represents a point in time independent of any time zone or
 * calendar, represented as seconds and fractions of seconds at nanosecond
 * resolution in UTC Epoch time.
 *
 * It is encoded using the Proleptic Gregorian Calendar which extends the
 * Gregorian calendar backwards to year one. It is encoded assuming all minutes
 * are 60 seconds long, i.e. leap seconds are "smeared" so that no leap second
 * table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to
 * 9999-12-31T23:59:59.999999999Z.
 *
 * For examples and further specifications, refer to the
 * {@link https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto | Timestamp definition}.
 */


var nt = /*#__PURE__*/function () {
  /**
   * Creates a new timestamp.
   *
   * @param seconds - The number of seconds of UTC time since Unix epoch
   *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
   *     9999-12-31T23:59:59Z inclusive.
   * @param nanoseconds - The non-negative fractions of a second at nanosecond
   *     resolution. Negative second values with fractions must still have
   *     non-negative nanoseconds values that count forward in time. Must be
   *     from 0 to 999,999,999 inclusive.
   */
  function nt(
  /**
   * The number of seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z.
   */
  t,
  /**
   * The fractions of a second at nanosecond resolution.*
   */
  e) {
    _classCallCheck(this, nt);

    if (this.seconds = t, this.nanoseconds = e, e < 0) throw new q(U.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + e);
    if (e >= 1e9) throw new q(U.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + e);
    if (t < -62135596800) throw new q(U.INVALID_ARGUMENT, "Timestamp seconds out of range: " + t); // This will break in the year 10,000.

    if (t >= 253402300800) throw new q(U.INVALID_ARGUMENT, "Timestamp seconds out of range: " + t);
  }
  /**
   * Creates a new timestamp with the current date, with millisecond precision.
   *
   * @returns a new timestamp representing the current date.
   */


  _createClass(nt, [{
    key: "toDate",
    value:
    /**
     * Converts a `Timestamp` to a JavaScript `Date` object. This conversion
     * causes a loss of precision since `Date` objects only support millisecond
     * precision.
     *
     * @returns JavaScript `Date` object representing the same point in time as
     *     this `Timestamp`, with millisecond precision.
     */
    function toDate() {
      return new Date(this.toMillis());
    }
    /**
     * Converts a `Timestamp` to a numeric timestamp (in milliseconds since
     * epoch). This operation causes a loss of precision.
     *
     * @returns The point in time corresponding to this timestamp, represented as
     *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.
     */

  }, {
    key: "toMillis",
    value: function toMillis() {
      return 1e3 * this.seconds + this.nanoseconds / 1e6;
    }
  }, {
    key: "_compareTo",
    value: function _compareTo(t) {
      return this.seconds === t.seconds ? Z(this.nanoseconds, t.nanoseconds) : Z(this.seconds, t.seconds);
    }
    /**
     * Returns true if this `Timestamp` is equal to the provided one.
     *
     * @param other - The `Timestamp` to compare against.
     * @returns true if this `Timestamp` is equal to the provided one.
     */

  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return t.seconds === this.seconds && t.nanoseconds === this.nanoseconds;
    }
    /** Returns a textual representation of this `Timestamp`. */

  }, {
    key: "toString",
    value: function toString() {
      return "Timestamp(seconds=" + this.seconds + ", nanoseconds=" + this.nanoseconds + ")";
    }
    /** Returns a JSON-serializable representation of this `Timestamp`. */

  }, {
    key: "toJSON",
    value: function toJSON() {
      return {
        seconds: this.seconds,
        nanoseconds: this.nanoseconds
      };
    }
    /**
     * Converts this object to a primitive string, which allows `Timestamp` objects
     * to be compared using the `>`, `<=`, `>=` and `>` operators.
     */

  }, {
    key: "valueOf",
    value: function valueOf() {
      // This method returns a string of the form <seconds>.<nanoseconds> where
      // <seconds> is translated to have a non-negative value and both <seconds>
      // and <nanoseconds> are left-padded with zeroes to be a consistent length.
      // Strings with this format then have a lexiographical ordering that matches
      // the expected ordering. The <seconds> translation is done to avoid having
      // a leading negative sign (i.e. a leading '-' character) in its string
      // representation, which would affect its lexiographical ordering.
      var t = this.seconds - -62135596800; // Note: Up to 12 decimal digits are required to represent all valid
      // 'seconds' values.

      return String(t).padStart(12, "0") + "." + String(this.nanoseconds).padStart(9, "0");
    }
  }], [{
    key: "now",
    value: function now() {
      return nt.fromMillis(Date.now());
    }
    /**
     * Creates a new timestamp from the given date.
     *
     * @param date - The date to initialize the `Timestamp` from.
     * @returns A new `Timestamp` representing the same point in time as the given
     *     date.
     */

  }, {
    key: "fromDate",
    value: function fromDate(t) {
      return nt.fromMillis(t.getTime());
    }
    /**
     * Creates a new timestamp from the given number of milliseconds.
     *
     * @param milliseconds - Number of milliseconds since Unix epoch
     *     1970-01-01T00:00:00Z.
     * @returns A new `Timestamp` representing the same point in time as the given
     *     number of milliseconds.
     */

  }, {
    key: "fromMillis",
    value: function fromMillis(t) {
      var e = Math.floor(t / 1e3),
          n = Math.floor(1e6 * (t - 1e3 * e));
      return new nt(e, n);
    }
  }]);

  return nt;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A version of a document in Firestore. This corresponds to the version
 * timestamp, such as update_time or read_time.
 */


exports.Timestamp = nt;

var st = /*#__PURE__*/function () {
  function st(t) {
    _classCallCheck(this, st);

    this.timestamp = t;
  }

  _createClass(st, [{
    key: "compareTo",
    value: function compareTo(t) {
      return this.timestamp._compareTo(t.timestamp);
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return this.timestamp.isEqual(t.timestamp);
    }
    /** Returns a number representation of the version for use in spec tests. */

  }, {
    key: "toMicroseconds",
    value: function toMicroseconds() {
      // Convert to microseconds.
      return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;
    }
  }, {
    key: "toString",
    value: function toString() {
      return "SnapshotVersion(" + this.timestamp.toString() + ")";
    }
  }, {
    key: "toTimestamp",
    value: function toTimestamp() {
      return this.timestamp;
    }
  }], [{
    key: "fromTimestamp",
    value: function fromTimestamp(t) {
      return new st(t);
    }
  }, {
    key: "min",
    value: function min() {
      return new st(new nt(0, 0));
    }
  }]);

  return st;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function it(t) {
  var e = 0;

  for (var _n5 in t) {
    Object.prototype.hasOwnProperty.call(t, _n5) && e++;
  }

  return e;
}

function rt(t, e) {
  for (var _n6 in t) {
    Object.prototype.hasOwnProperty.call(t, _n6) && e(_n6, t[_n6]);
  }
}

function ot(t) {
  for (var _e3 in t) {
    if (Object.prototype.hasOwnProperty.call(t, _e3)) return !1;
  }

  return !0;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Path represents an ordered sequence of string segments.
 */


var at = /*#__PURE__*/function () {
  function at(t, e, n) {
    _classCallCheck(this, at);

    void 0 === e ? e = 0 : e > t.length && F(), void 0 === n ? n = t.length - e : n > t.length - e && F(), this.segments = t, this.offset = e, this.len = n;
  }

  _createClass(at, [{
    key: "length",
    get: function get() {
      return this.len;
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return 0 === at.comparator(this, t);
    }
  }, {
    key: "child",
    value: function child(t) {
      var e = this.segments.slice(this.offset, this.limit());
      return t instanceof at ? t.forEach(function (t) {
        e.push(t);
      }) : e.push(t), this.construct(e);
    }
    /** The index of one past the last segment of the path. */

  }, {
    key: "limit",
    value: function limit() {
      return this.offset + this.length;
    }
  }, {
    key: "popFirst",
    value: function popFirst(t) {
      return t = void 0 === t ? 1 : t, this.construct(this.segments, this.offset + t, this.length - t);
    }
  }, {
    key: "popLast",
    value: function popLast() {
      return this.construct(this.segments, this.offset, this.length - 1);
    }
  }, {
    key: "firstSegment",
    value: function firstSegment() {
      return this.segments[this.offset];
    }
  }, {
    key: "lastSegment",
    value: function lastSegment() {
      return this.get(this.length - 1);
    }
  }, {
    key: "get",
    value: function get(t) {
      return this.segments[this.offset + t];
    }
  }, {
    key: "isEmpty",
    value: function isEmpty() {
      return 0 === this.length;
    }
  }, {
    key: "isPrefixOf",
    value: function isPrefixOf(t) {
      if (t.length < this.length) return !1;

      for (var _e4 = 0; _e4 < this.length; _e4++) {
        if (this.get(_e4) !== t.get(_e4)) return !1;
      }

      return !0;
    }
  }, {
    key: "isImmediateParentOf",
    value: function isImmediateParentOf(t) {
      if (this.length + 1 !== t.length) return !1;

      for (var _e5 = 0; _e5 < this.length; _e5++) {
        if (this.get(_e5) !== t.get(_e5)) return !1;
      }

      return !0;
    }
  }, {
    key: "forEach",
    value: function forEach(t) {
      for (var _e6 = this.offset, _n7 = this.limit(); _e6 < _n7; _e6++) {
        t(this.segments[_e6]);
      }
    }
  }, {
    key: "toArray",
    value: function toArray() {
      return this.segments.slice(this.offset, this.limit());
    }
  }], [{
    key: "comparator",
    value: function comparator(t, e) {
      var n = Math.min(t.length, e.length);

      for (var _s3 = 0; _s3 < n; _s3++) {
        var _n8 = t.get(_s3),
            _i3 = e.get(_s3);

        if (_n8 < _i3) return -1;
        if (_n8 > _i3) return 1;
      }

      return t.length < e.length ? -1 : t.length > e.length ? 1 : 0;
    }
  }]);

  return at;
}();
/**
 * A slash-separated path for navigating resources (documents and collections)
 * within Firestore.
 *
 * @internal
 */


var ct = /*#__PURE__*/function (_at) {
  _inherits(ct, _at);

  var _super2 = _createSuper(ct);

  function ct() {
    _classCallCheck(this, ct);

    return _super2.apply(this, arguments);
  }

  _createClass(ct, [{
    key: "construct",
    value: function construct(t, e, n) {
      return new ct(t, e, n);
    }
  }, {
    key: "canonicalString",
    value: function canonicalString() {
      // NOTE: The client is ignorant of any path segments containing escape
      // sequences (e.g. __id123__) and just passes them through raw (they exist
      // for legacy reasons and should not be used frequently).
      return this.toArray().join("/");
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.canonicalString();
    }
    /**
     * Creates a resource path from the given slash-delimited string. If multiple
     * arguments are provided, all components are combined. Leading and trailing
     * slashes from all components are ignored.
     */

  }], [{
    key: "fromString",
    value: function fromString() {
      // NOTE: The client is ignorant of any path segments containing escape
      // sequences (e.g. __id123__) and just passes them through raw (they exist
      // for legacy reasons and should not be used frequently).
      var e = [];

      for (var _len4 = arguments.length, t = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        t[_key4] = arguments[_key4];
      }

      for (var _i4 = 0, _t3 = t; _i4 < _t3.length; _i4++) {
        var _n9 = _t3[_i4];
        if (_n9.indexOf("//") >= 0) throw new q(U.INVALID_ARGUMENT, "Invalid segment (".concat(_n9, "). Paths must not contain // in them.")); // Strip leading and traling slashed.

        e.push.apply(e, _toConsumableArray(_n9.split("/").filter(function (t) {
          return t.length > 0;
        })));
      }

      return new ct(e);
    }
  }, {
    key: "emptyPath",
    value: function emptyPath() {
      return new ct([]);
    }
  }]);

  return ct;
}(at);

var ut = /^[_a-zA-Z][_a-zA-Z0-9]*$/;
/**
 * A dot-separated path for navigating sub-objects within a document.
 * @internal
 */

var ht = /*#__PURE__*/function (_at2) {
  _inherits(ht, _at2);

  var _super3 = _createSuper(ht);

  function ht() {
    _classCallCheck(this, ht);

    return _super3.apply(this, arguments);
  }

  _createClass(ht, [{
    key: "construct",
    value: function construct(t, e, n) {
      return new ht(t, e, n);
    }
    /**
     * Returns true if the string could be used as a segment in a field path
     * without escaping.
     */

  }, {
    key: "canonicalString",
    value: function canonicalString() {
      return this.toArray().map(function (t) {
        return t = t.replace(/\\/g, "\\\\").replace(/`/g, "\\`"), ht.isValidIdentifier(t) || (t = "`" + t + "`"), t;
      }).join(".");
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.canonicalString();
    }
    /**
     * Returns true if this field references the key of a document.
     */

  }, {
    key: "isKeyField",
    value: function isKeyField() {
      return 1 === this.length && "__name__" === this.get(0);
    }
    /**
     * The field designating the key of a document.
     */

  }], [{
    key: "isValidIdentifier",
    value: function isValidIdentifier(t) {
      return ut.test(t);
    }
  }, {
    key: "keyField",
    value: function keyField() {
      return new ht(["__name__"]);
    }
    /**
     * Parses a field string from the given server-formatted string.
     *
     * - Splitting the empty string is not allowed (for now at least).
     * - Empty segments within the string (e.g. if there are two consecutive
     *   separators) are not allowed.
     *
     * TODO(b/37244157): we should make this more strict. Right now, it allows
     * non-identifier path components, even if they aren't escaped.
     */

  }, {
    key: "fromServerFormat",
    value: function fromServerFormat(t) {
      var e = [];
      var n = "",
          s = 0;

      var i = function i() {
        if (0 === n.length) throw new q(U.INVALID_ARGUMENT, "Invalid field path (".concat(t, "). Paths must not be empty, begin with '.', end with '.', or contain '..'"));
        e.push(n), n = "";
      };

      var r = !1;

      for (; s < t.length;) {
        var _e7 = t[s];

        if ("\\" === _e7) {
          if (s + 1 === t.length) throw new q(U.INVALID_ARGUMENT, "Path has trailing escape character: " + t);
          var _e8 = t[s + 1];
          if ("\\" !== _e8 && "." !== _e8 && "`" !== _e8) throw new q(U.INVALID_ARGUMENT, "Path has invalid escape sequence: " + t);
          n += _e8, s += 2;
        } else "`" === _e7 ? (r = !r, s++) : "." !== _e7 || r ? (n += _e7, s++) : (i(), s++);
      }

      if (i(), r) throw new q(U.INVALID_ARGUMENT, "Unterminated ` in path: " + t);
      return new ht(e);
    }
  }, {
    key: "emptyPath",
    value: function emptyPath() {
      return new ht([]);
    }
  }]);

  return ht;
}(at);
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Provides a set of fields that can be used to partially patch a document.
 * FieldMask is used in conjunction with ObjectValue.
 * Examples:
 *   foo - Overwrites foo entirely with the provided value. If foo is not
 *         present in the companion ObjectValue, the field is deleted.
 *   foo.bar - Overwrites only the field bar of the object foo.
 *             If foo is not an object, foo is replaced with an object
 *             containing foo
 */


exports._FieldPath = ht;

var lt = /*#__PURE__*/function () {
  function lt(t) {
    _classCallCheck(this, lt);

    this.fields = t, // TODO(dimond): validation of FieldMask
    // Sort the field mask to support `FieldMask.isEqual()` and assert below.
    t.sort(ht.comparator);
  }
  /**
   * Verifies that `fieldPath` is included by at least one field in this field
   * mask.
   *
   * This is an O(n) operation, where `n` is the size of the field mask.
   */


  _createClass(lt, [{
    key: "covers",
    value: function covers(t) {
      var _iterator = _createForOfIteratorHelper(this.fields),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _e9 = _step.value;
          if (_e9.isPrefixOf(t)) return !0;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return !1;
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return tt(this.fields, t.fields, function (t, e) {
        return t.isEqual(e);
      });
    }
  }]);

  return lt;
}();
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Converts a Base64 encoded string to a binary string. */

/** True if and only if the Base64 conversion functions are available. */


function ft() {
  return "undefined" != typeof atob;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Immutable class that represents a "proto" byte string.
 *
 * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when
 * sent on the wire. This class abstracts away this differentiation by holding
 * the proto byte string in a common class that must be converted into a string
 * before being sent as a proto.
 * @internal
 */


var dt = /*#__PURE__*/function () {
  function dt(t) {
    _classCallCheck(this, dt);

    this.binaryString = t;
  }

  _createClass(dt, [{
    key: "toBase64",
    value: function toBase64() {
      return t = this.binaryString, btoa(t);
      /** Converts a binary string to a Base64 encoded string. */

      var t;
    }
  }, {
    key: "toUint8Array",
    value: function toUint8Array() {
      return function (t) {
        var e = new Uint8Array(t.length);

        for (var _n10 = 0; _n10 < t.length; _n10++) {
          e[_n10] = t.charCodeAt(_n10);
        }

        return e;
      }
      /**
      * @license
      * Copyright 2020 Google LLC
      *
      * Licensed under the Apache License, Version 2.0 (the "License");
      * you may not use this file except in compliance with the License.
      * You may obtain a copy of the License at
      *
      *   http://www.apache.org/licenses/LICENSE-2.0
      *
      * Unless required by applicable law or agreed to in writing, software
      * distributed under the License is distributed on an "AS IS" BASIS,
      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      * See the License for the specific language governing permissions and
      * limitations under the License.
      */
      // A RegExp matching ISO 8601 UTC timestamps with optional fraction.
      (this.binaryString);
    }
  }, {
    key: "approximateByteSize",
    value: function approximateByteSize() {
      return 2 * this.binaryString.length;
    }
  }, {
    key: "compareTo",
    value: function compareTo(t) {
      return Z(this.binaryString, t.binaryString);
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return this.binaryString === t.binaryString;
    }
  }], [{
    key: "fromBase64String",
    value: function fromBase64String(t) {
      var e = atob(t);
      return new dt(e);
    }
  }, {
    key: "fromUint8Array",
    value: function fromUint8Array(t) {
      var e =
      /**
      * Helper function to convert an Uint8array to a binary string.
      */
      function (t) {
        var e = "";

        for (var _n11 = 0; _n11 < t.length; ++_n11) {
          e += String.fromCharCode(t[_n11]);
        }

        return e;
      }
      /**
      * Helper function to convert a binary string to an Uint8Array.
      */
      (t);

      return new dt(e);
    }
  }]);

  return dt;
}();

dt.EMPTY_BYTE_STRING = new dt("");
var wt = new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);
/**
 * Converts the possible Proto values for a timestamp value into a "seconds and
 * nanos" representation.
 */

function _t(t) {
  // The json interface (for the browser) will return an iso timestamp string,
  // while the proto js library (for node) will return a
  // google.protobuf.Timestamp instance.
  if (M(!!t), "string" == typeof t) {
    // The date string can have higher precision (nanos) than the Date class
    // (millis), so we do some custom parsing here.
    // Parse the nanos right out of the string.
    var _e10 = 0;

    var _n12 = wt.exec(t);

    if (M(!!_n12), _n12[1]) {
      // Pad the fraction out to 9 digits (nanos).
      var _t4 = _n12[1];
      _t4 = (_t4 + "000000000").substr(0, 9), _e10 = Number(_t4);
    } // Parse the date to get the seconds.


    var _s4 = new Date(t);

    return {
      seconds: Math.floor(_s4.getTime() / 1e3),
      nanos: _e10
    };
  }

  return {
    seconds: mt(t.seconds),
    nanos: mt(t.nanos)
  };
}
/**
 * Converts the possible Proto types for numbers into a JavaScript number.
 * Returns 0 if the value is not numeric.
 */


function mt(t) {
  // TODO(bjornick): Handle int64 greater than 53 bits.
  return "number" == typeof t ? t : "string" == typeof t ? Number(t) : 0;
}
/** Converts the possible Proto types for Blobs into a ByteString. */


function gt(t) {
  return "string" == typeof t ? dt.fromBase64String(t) : dt.fromUint8Array(t);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Represents a locally-applied ServerTimestamp.
 *
 * Server Timestamps are backed by MapValues that contain an internal field
 * `__type__` with a value of `server_timestamp`. The previous value and local
 * write time are stored in its `__previous_value__` and `__local_write_time__`
 * fields respectively.
 *
 * Notes:
 * - ServerTimestampValue instances are created as the result of applying a
 *   transform. They can only exist in the local view of a document. Therefore
 *   they do not need to be parsed or serialized.
 * - When evaluated locally (e.g. for snapshot.data()), they by default
 *   evaluate to `null`. This behavior can be configured by passing custom
 *   FieldValueOptions to value().
 * - With respect to other ServerTimestampValues, they sort by their
 *   localWriteTime.
 */


function yt(t) {
  var e, n;
  return "server_timestamp" === (null === (n = ((null === (e = null == t ? void 0 : t.mapValue) || void 0 === e ? void 0 : e.fields) || {}).__type__) || void 0 === n ? void 0 : n.stringValue);
}
/**
 * Creates a new ServerTimestamp proto value (using the internal format).
 */

/**
 * Returns the value of the field before this ServerTimestamp was set.
 *
 * Preserving the previous values allows the user to display the last resoled
 * value until the backend responds with the timestamp.
 */


function pt(t) {
  var e = t.mapValue.fields.__previous_value__;
  return yt(e) ? pt(e) : e;
}
/**
 * Returns the local time at which this timestamp was first set.
 */


function Et(t) {
  var e = _t(t.mapValue.fields.__local_write_time__.timestampValue);

  return new nt(e.seconds, e.nanos);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Sentinel value that sorts before any Mutation Batch ID. */

/**
 * Returns whether a variable is either undefined or null.
 */


function Tt(t) {
  return null == t;
}
/** Returns whether the value represents -0. */


function It(t) {
  // Detect if the value is -0.0. Based on polyfill from
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
  return 0 === t && 1 / t == -1 / 0;
}
/**
 * Returns whether a value is an integer and in the safe integer range
 * @param value - The value to test for being an integer and in the safe range
 */


function At(t) {
  return "number" == typeof t && Number.isInteger(t) && !It(t) && t <= Number.MAX_SAFE_INTEGER && t >= Number.MIN_SAFE_INTEGER;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @internal
 */


var Rt = /*#__PURE__*/function () {
  function Rt(t) {
    _classCallCheck(this, Rt);

    this.path = t;
  }

  _createClass(Rt, [{
    key: "hasCollectionId",
    value:
    /** Returns true if the document is in the specified collectionId. */
    function hasCollectionId(t) {
      return this.path.length >= 2 && this.path.get(this.path.length - 2) === t;
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return null !== t && 0 === ct.comparator(this.path, t.path);
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.path.toString();
    }
  }], [{
    key: "fromPath",
    value: function fromPath(t) {
      return new Rt(ct.fromString(t));
    }
  }, {
    key: "fromName",
    value: function fromName(t) {
      return new Rt(ct.fromString(t).popFirst(5));
    }
  }, {
    key: "comparator",
    value: function comparator(t, e) {
      return ct.comparator(t.path, e.path);
    }
  }, {
    key: "isDocumentKey",
    value: function isDocumentKey(t) {
      return t.length % 2 == 0;
    }
    /**
     * Creates and returns a new document key with the given segments.
     *
     * @param segments - The segments of the path to the document
     * @returns A new instance of DocumentKey
     */

  }, {
    key: "fromSegments",
    value: function fromSegments(t) {
      return new Rt(new ct(t.slice()));
    }
  }]);

  return Rt;
}();
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Extracts the backend's type order for the provided value. */


exports._DocumentKey = Rt;

function bt(t) {
  return "nullValue" in t ? 0
  /* NullValue */
  : "booleanValue" in t ? 1
  /* BooleanValue */
  : "integerValue" in t || "doubleValue" in t ? 2
  /* NumberValue */
  : "timestampValue" in t ? 3
  /* TimestampValue */
  : "stringValue" in t ? 5
  /* StringValue */
  : "bytesValue" in t ? 6
  /* BlobValue */
  : "referenceValue" in t ? 7
  /* RefValue */
  : "geoPointValue" in t ? 8
  /* GeoPointValue */
  : "arrayValue" in t ? 9
  /* ArrayValue */
  : "mapValue" in t ? yt(t) ? 4
  /* ServerTimestampValue */
  : 10
  /* ObjectValue */
  : F();
}
/** Tests `left` and `right` for equality based on the backend semantics. */


function Pt(t, e) {
  var n = bt(t);
  if (n !== bt(e)) return !1;

  switch (n) {
    case 0
    /* NullValue */
    :
      return !0;

    case 1
    /* BooleanValue */
    :
      return t.booleanValue === e.booleanValue;

    case 4
    /* ServerTimestampValue */
    :
      return Et(t).isEqual(Et(e));

    case 3
    /* TimestampValue */
    :
      return function (t, e) {
        if ("string" == typeof t.timestampValue && "string" == typeof e.timestampValue && t.timestampValue.length === e.timestampValue.length) // Use string equality for ISO 8601 timestamps
          return t.timestampValue === e.timestampValue;

        var n = _t(t.timestampValue),
            s = _t(e.timestampValue);

        return n.seconds === s.seconds && n.nanos === s.nanos;
      }(t, e);

    case 5
    /* StringValue */
    :
      return t.stringValue === e.stringValue;

    case 6
    /* BlobValue */
    :
      return function (t, e) {
        return gt(t.bytesValue).isEqual(gt(e.bytesValue));
      }(t, e);

    case 7
    /* RefValue */
    :
      return t.referenceValue === e.referenceValue;

    case 8
    /* GeoPointValue */
    :
      return function (t, e) {
        return mt(t.geoPointValue.latitude) === mt(e.geoPointValue.latitude) && mt(t.geoPointValue.longitude) === mt(e.geoPointValue.longitude);
      }(t, e);

    case 2
    /* NumberValue */
    :
      return function (t, e) {
        if ("integerValue" in t && "integerValue" in e) return mt(t.integerValue) === mt(e.integerValue);

        if ("doubleValue" in t && "doubleValue" in e) {
          var _n13 = mt(t.doubleValue),
              _s5 = mt(e.doubleValue);

          return _n13 === _s5 ? It(_n13) === It(_s5) : isNaN(_n13) && isNaN(_s5);
        }

        return !1;
      }(t, e);

    case 9
    /* ArrayValue */
    :
      return tt(t.arrayValue.values || [], e.arrayValue.values || [], Pt);

    case 10
    /* ObjectValue */
    :
      return function (t, e) {
        var n = t.mapValue.fields || {},
            s = e.mapValue.fields || {};
        if (it(n) !== it(s)) return !1;

        for (var _t5 in n) {
          if (n.hasOwnProperty(_t5) && (void 0 === s[_t5] || !Pt(n[_t5], s[_t5]))) return !1;
        }

        return !0;
      }
      /** Returns true if the ArrayValue contains the specified element. */
      (t, e);

    default:
      return F();
  }
}

function vt(t, e) {
  return void 0 !== (t.values || []).find(function (t) {
    return Pt(t, e);
  });
}

function Vt(t, e) {
  var n = bt(t),
      s = bt(e);
  if (n !== s) return Z(n, s);

  switch (n) {
    case 0
    /* NullValue */
    :
      return 0;

    case 1
    /* BooleanValue */
    :
      return Z(t.booleanValue, e.booleanValue);

    case 2
    /* NumberValue */
    :
      return function (t, e) {
        var n = mt(t.integerValue || t.doubleValue),
            s = mt(e.integerValue || e.doubleValue);
        return n < s ? -1 : n > s ? 1 : n === s ? 0 : // one or both are NaN.
        isNaN(n) ? isNaN(s) ? 0 : -1 : 1;
      }(t, e);

    case 3
    /* TimestampValue */
    :
      return St(t.timestampValue, e.timestampValue);

    case 4
    /* ServerTimestampValue */
    :
      return St(Et(t), Et(e));

    case 5
    /* StringValue */
    :
      return Z(t.stringValue, e.stringValue);

    case 6
    /* BlobValue */
    :
      return function (t, e) {
        var n = gt(t),
            s = gt(e);
        return n.compareTo(s);
      }(t.bytesValue, e.bytesValue);

    case 7
    /* RefValue */
    :
      return function (t, e) {
        var n = t.split("/"),
            s = e.split("/");

        for (var _t6 = 0; _t6 < n.length && _t6 < s.length; _t6++) {
          var _e11 = Z(n[_t6], s[_t6]);

          if (0 !== _e11) return _e11;
        }

        return Z(n.length, s.length);
      }(t.referenceValue, e.referenceValue);

    case 8
    /* GeoPointValue */
    :
      return function (t, e) {
        var n = Z(mt(t.latitude), mt(e.latitude));
        if (0 !== n) return n;
        return Z(mt(t.longitude), mt(e.longitude));
      }(t.geoPointValue, e.geoPointValue);

    case 9
    /* ArrayValue */
    :
      return function (t, e) {
        var n = t.values || [],
            s = e.values || [];

        for (var _t7 = 0; _t7 < n.length && _t7 < s.length; ++_t7) {
          var _e12 = Vt(n[_t7], s[_t7]);

          if (_e12) return _e12;
        }

        return Z(n.length, s.length);
      }(t.arrayValue, e.arrayValue);

    case 10
    /* ObjectValue */
    :
      return function (t, e) {
        var n = t.fields || {},
            s = Object.keys(n),
            i = e.fields || {},
            r = Object.keys(i); // Even though MapValues are likely sorted correctly based on their insertion
        // order (e.g. when received from the backend), local modifications can bring
        // elements out of order. We need to re-sort the elements to ensure that
        // canonical IDs are independent of insertion order.

        s.sort(), r.sort();

        for (var _t8 = 0; _t8 < s.length && _t8 < r.length; ++_t8) {
          var _e13 = Z(s[_t8], r[_t8]);

          if (0 !== _e13) return _e13;

          var _o2 = Vt(n[s[_t8]], i[r[_t8]]);

          if (0 !== _o2) return _o2;
        }

        return Z(s.length, r.length);
      }
      /**
      * Generates the canonical ID for the provided field value (as used in Target
      * serialization).
      */
      (t.mapValue, e.mapValue);

    default:
      throw F();
  }
}

function St(t, e) {
  if ("string" == typeof t && "string" == typeof e && t.length === e.length) return Z(t, e);

  var n = _t(t),
      s = _t(e),
      i = Z(n.seconds, s.seconds);

  return 0 !== i ? i : Z(n.nanos, s.nanos);
}

function Dt(t) {
  return Ct(t);
}

function Ct(t) {
  return "nullValue" in t ? "null" : "booleanValue" in t ? "" + t.booleanValue : "integerValue" in t ? "" + t.integerValue : "doubleValue" in t ? "" + t.doubleValue : "timestampValue" in t ? function (t) {
    var e = _t(t);

    return "time(".concat(e.seconds, ",").concat(e.nanos, ")");
  }(t.timestampValue) : "stringValue" in t ? t.stringValue : "bytesValue" in t ? gt(t.bytesValue).toBase64() : "referenceValue" in t ? (n = t.referenceValue, Rt.fromName(n).toString()) : "geoPointValue" in t ? "geo(".concat((e = t.geoPointValue).latitude, ",").concat(e.longitude, ")") : "arrayValue" in t ? function (t) {
    var e = "[",
        n = !0;

    var _iterator2 = _createForOfIteratorHelper(t.values || []),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var _s6 = _step2.value;
        n ? n = !1 : e += ",", e += Ct(_s6);
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }

    return e + "]";
  }
  /** Returns a reference value for the provided database and key. */
  (t.arrayValue) : "mapValue" in t ? function (t) {
    // Iteration order in JavaScript is not guaranteed. To ensure that we generate
    // matching canonical IDs for identical maps, we need to sort the keys.
    var e = Object.keys(t.fields || {}).sort();
    var n = "{",
        s = !0;

    var _iterator3 = _createForOfIteratorHelper(e),
        _step3;

    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var _i5 = _step3.value;
        s ? s = !1 : n += ",", n += "".concat(_i5, ":").concat(Ct(t.fields[_i5]));
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }

    return n + "}";
  }(t.mapValue) : F();
  var e, n;
}

function Nt(t, e) {
  return {
    referenceValue: "projects/".concat(t.projectId, "/databases/").concat(t.database, "/documents/").concat(e.path.canonicalString())
  };
}
/** Returns true if `value` is an IntegerValue . */


function xt(t) {
  return !!t && "integerValue" in t;
}
/** Returns true if `value` is a DoubleValue. */

/** Returns true if `value` is an ArrayValue. */


function kt(t) {
  return !!t && "arrayValue" in t;
}
/** Returns true if `value` is a NullValue. */


function $t(t) {
  return !!t && "nullValue" in t;
}
/** Returns true if `value` is NaN. */


function Ot(t) {
  return !!t && "doubleValue" in t && isNaN(Number(t.doubleValue));
}
/** Returns true if `value` is a MapValue. */


function Ft(t) {
  return !!t && "mapValue" in t;
}
/** Creates a deep copy of `source`. */


function Mt(t) {
  if (t.geoPointValue) return {
    geoPointValue: Object.assign({}, t.geoPointValue)
  };
  if (t.timestampValue && "object" == _typeof(t.timestampValue)) return {
    timestampValue: Object.assign({}, t.timestampValue)
  };

  if (t.mapValue) {
    var _e14 = {
      mapValue: {
        fields: {}
      }
    };
    return rt(t.mapValue.fields, function (t, n) {
      return _e14.mapValue.fields[t] = Mt(n);
    }), _e14;
  }

  if (t.arrayValue) {
    var _e15 = {
      arrayValue: {
        values: []
      }
    };

    for (var _n14 = 0; _n14 < (t.arrayValue.values || []).length; ++_n14) {
      _e15.arrayValue.values[_n14] = Mt(t.arrayValue.values[_n14]);
    }

    return _e15;
  }

  return Object.assign({}, t);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An ObjectValue represents a MapValue in the Firestore Proto and offers the
 * ability to add and remove fields (via the ObjectValueBuilder).
 */


var Lt = /*#__PURE__*/function () {
  function Lt(t) {
    _classCallCheck(this, Lt);

    this.value = t;
  }

  _createClass(Lt, [{
    key: "field",
    value:
    /**
     * Returns the value at the given path or null.
     *
     * @param path - the path to search
     * @returns The value at the path or null if the path is not set.
     */
    function field(t) {
      if (t.isEmpty()) return this.value;
      {
        var _e16 = this.value;

        for (var _n15 = 0; _n15 < t.length - 1; ++_n15) {
          if (_e16 = (_e16.mapValue.fields || {})[t.get(_n15)], !Ft(_e16)) return null;
        }

        return _e16 = (_e16.mapValue.fields || {})[t.lastSegment()], _e16 || null;
      }
    }
    /**
     * Sets the field to the provided value.
     *
     * @param path - The field path to set.
     * @param value - The value to set.
     */

  }, {
    key: "set",
    value: function set(t, e) {
      this.getFieldsMap(t.popLast())[t.lastSegment()] = Mt(e);
    }
    /**
     * Sets the provided fields to the provided values.
     *
     * @param data - A map of fields to values (or null for deletes).
     */

  }, {
    key: "setAll",
    value: function setAll(t) {
      var _this7 = this;

      var e = ht.emptyPath(),
          n = {},
          s = [];
      t.forEach(function (t, i) {
        if (!e.isImmediateParentOf(i)) {
          // Insert the accumulated changes at this parent location
          var _t9 = _this7.getFieldsMap(e);

          _this7.applyChanges(_t9, n, s), n = {}, s = [], e = i.popLast();
        }

        t ? n[i.lastSegment()] = Mt(t) : s.push(i.lastSegment());
      });
      var i = this.getFieldsMap(e);
      this.applyChanges(i, n, s);
    }
    /**
     * Removes the field at the specified path. If there is no field at the
     * specified path, nothing is changed.
     *
     * @param path - The field path to remove.
     */

  }, {
    key: "delete",
    value: function _delete(t) {
      var e = this.field(t.popLast());
      Ft(e) && e.mapValue.fields && delete e.mapValue.fields[t.lastSegment()];
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return Pt(this.value, t.value);
    }
    /**
     * Returns the map that contains the leaf element of `path`. If the parent
     * entry does not yet exist, or if it is not a map, a new map will be created.
     */

  }, {
    key: "getFieldsMap",
    value: function getFieldsMap(t) {
      var e = this.value;
      e.mapValue.fields || (e.mapValue = {
        fields: {}
      });

      for (var _n16 = 0; _n16 < t.length; ++_n16) {
        var _s7 = e.mapValue.fields[t.get(_n16)];
        Ft(_s7) && _s7.mapValue.fields || (_s7 = {
          mapValue: {
            fields: {}
          }
        }, e.mapValue.fields[t.get(_n16)] = _s7), e = _s7;
      }

      return e.mapValue.fields;
    }
    /**
     * Modifies `fieldsMap` by adding, replacing or deleting the specified
     * entries.
     */

  }, {
    key: "applyChanges",
    value: function applyChanges(t, e, n) {
      rt(e, function (e, n) {
        return t[e] = n;
      });

      var _iterator4 = _createForOfIteratorHelper(n),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var _e17 = _step4.value;
          delete t[_e17];
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
    }
  }, {
    key: "clone",
    value: function clone() {
      return new Lt(Mt(this.value));
    }
  }], [{
    key: "empty",
    value: function empty() {
      return new Lt({
        mapValue: {}
      });
    }
  }]);

  return Lt;
}();
/**
 * Returns a FieldMask built from all fields in a MapValue.
 */


function Bt(t) {
  var e = [];
  return rt(t.fields, function (t, n) {
    var s = new ht([t]);

    if (Ft(n)) {
      var _t10 = Bt(n.mapValue).fields;
      if (0 === _t10.length) // Preserve the empty map by adding it to the FieldMask.
        e.push(s);else {
        // For nested and non-empty ObjectValues, add the FieldPath of the
        // leaf nodes.
        var _iterator5 = _createForOfIteratorHelper(_t10),
            _step5;

        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var _n17 = _step5.value;
            e.push(s.child(_n17));
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }
      }
    } else // For nested and non-empty ObjectValues, add the FieldPath of the leaf
      // nodes.
      e.push(s);
  }), new lt(e);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Represents a document in Firestore with a key, version, data and whether it
 * has local mutations applied to it.
 *
 * Documents can transition between states via `convertToFoundDocument()`,
 * `convertToNoDocument()` and `convertToUnknownDocument()`. If a document does
 * not transition to one of these states even after all mutations have been
 * applied, `isValidDocument()` returns false and the document should be removed
 * from all views.
 */


var Ut = /*#__PURE__*/function () {
  function Ut(t, e, n, s, i) {
    _classCallCheck(this, Ut);

    this.key = t, this.documentType = e, this.version = n, this.data = s, this.documentState = i;
  }
  /**
   * Creates a document with no known version or data, but which can serve as
   * base document for mutations.
   */


  _createClass(Ut, [{
    key: "convertToFoundDocument",
    value:
    /**
     * Changes the document type to indicate that it exists and that its version
     * and data are known.
     */
    function convertToFoundDocument(t, e) {
      return this.version = t, this.documentType = 1
      /* FOUND_DOCUMENT */
      , this.data = e, this.documentState = 0
      /* SYNCED */
      , this;
    }
    /**
     * Changes the document type to indicate that it doesn't exist at the given
     * version.
     */

  }, {
    key: "convertToNoDocument",
    value: function convertToNoDocument(t) {
      return this.version = t, this.documentType = 2
      /* NO_DOCUMENT */
      , this.data = Lt.empty(), this.documentState = 0
      /* SYNCED */
      , this;
    }
    /**
     * Changes the document type to indicate that it exists at a given version but
     * that its data is not known (e.g. a document that was updated without a known
     * base document).
     */

  }, {
    key: "convertToUnknownDocument",
    value: function convertToUnknownDocument(t) {
      return this.version = t, this.documentType = 3
      /* UNKNOWN_DOCUMENT */
      , this.data = Lt.empty(), this.documentState = 2
      /* HAS_COMMITTED_MUTATIONS */
      , this;
    }
  }, {
    key: "setHasCommittedMutations",
    value: function setHasCommittedMutations() {
      return this.documentState = 2
      /* HAS_COMMITTED_MUTATIONS */
      , this;
    }
  }, {
    key: "setHasLocalMutations",
    value: function setHasLocalMutations() {
      return this.documentState = 1
      /* HAS_LOCAL_MUTATIONS */
      , this;
    }
  }, {
    key: "hasLocalMutations",
    get: function get() {
      return 1
      /* HAS_LOCAL_MUTATIONS */
      === this.documentState;
    }
  }, {
    key: "hasCommittedMutations",
    get: function get() {
      return 2
      /* HAS_COMMITTED_MUTATIONS */
      === this.documentState;
    }
  }, {
    key: "hasPendingWrites",
    get: function get() {
      return this.hasLocalMutations || this.hasCommittedMutations;
    }
  }, {
    key: "isValidDocument",
    value: function isValidDocument() {
      return 0
      /* INVALID */
      !== this.documentType;
    }
  }, {
    key: "isFoundDocument",
    value: function isFoundDocument() {
      return 1
      /* FOUND_DOCUMENT */
      === this.documentType;
    }
  }, {
    key: "isNoDocument",
    value: function isNoDocument() {
      return 2
      /* NO_DOCUMENT */
      === this.documentType;
    }
  }, {
    key: "isUnknownDocument",
    value: function isUnknownDocument() {
      return 3
      /* UNKNOWN_DOCUMENT */
      === this.documentType;
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return t instanceof Ut && this.key.isEqual(t.key) && this.version.isEqual(t.version) && this.documentType === t.documentType && this.documentState === t.documentState && this.data.isEqual(t.data);
    }
  }, {
    key: "clone",
    value: function clone() {
      return new Ut(this.key, this.documentType, this.version, this.data.clone(), this.documentState);
    }
  }, {
    key: "toString",
    value: function toString() {
      return "Document(".concat(this.key, ", ").concat(this.version, ", ").concat(JSON.stringify(this.data.value), ", {documentType: ").concat(this.documentType, "}), {documentState: ").concat(this.documentState, "})");
    }
  }], [{
    key: "newInvalidDocument",
    value: function newInvalidDocument(t) {
      return new Ut(t, 0
      /* INVALID */
      , st.min(), Lt.empty(), 0
      /* SYNCED */
      );
    }
    /**
     * Creates a new document that is known to exist with the given data at the
     * given version.
     */

  }, {
    key: "newFoundDocument",
    value: function newFoundDocument(t, e, n) {
      return new Ut(t, 1
      /* FOUND_DOCUMENT */
      , e, n, 0
      /* SYNCED */
      );
    }
    /** Creates a new document that is known to not exist at the given version. */

  }, {
    key: "newNoDocument",
    value: function newNoDocument(t, e) {
      return new Ut(t, 2
      /* NO_DOCUMENT */
      , e, Lt.empty(), 0
      /* SYNCED */
      );
    }
    /**
     * Creates a new document that is known to exist at the given version but
     * whose data is not known (e.g. a document that was updated without a known
     * base document).
     */

  }, {
    key: "newUnknownDocument",
    value: function newUnknownDocument(t, e) {
      return new Ut(t, 3
      /* UNKNOWN_DOCUMENT */
      , e, Lt.empty(), 2
      /* HAS_COMMITTED_MUTATIONS */
      );
    }
  }]);

  return Ut;
}();
/**
 * Compares the value for field `field` in the provided documents. Throws if
 * the field does not exist in both documents.
 */

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Visible for testing


var qt = function qt(t) {
  var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var s = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
  var i = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
  var r = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
  var o = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;

  _classCallCheck(this, qt);

  this.path = t, this.collectionGroup = e, this.orderBy = n, this.filters = s, this.limit = i, this.startAt = r, this.endAt = o, this.A = null;
};
/**
 * Initializes a Target with a path and optional additional query constraints.
 * Path must currently be empty if this is a collection group query.
 *
 * NOTE: you should always construct `Target` from `Query.toTarget` instead of
 * using this factory method, because `Query` provides an implicit `orderBy`
 * property.
 */


function Kt(t) {
  var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var s = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
  var i = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
  var r = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
  var o = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;
  return new qt(t, e, n, s, i, r, o);
}

function jt(t) {
  var e = B(t);

  if (null === e.A) {
    var _t11 = e.path.canonicalString();

    null !== e.collectionGroup && (_t11 += "|cg:" + e.collectionGroup), _t11 += "|f:", _t11 += e.filters.map(function (t) {
      return Ht(t);
    }).join(","), _t11 += "|ob:", _t11 += e.orderBy.map(function (t) {
      return function (t) {
        // TODO(b/29183165): Make this collision robust.
        return t.field.canonicalString() + t.dir;
      }(t);
    }).join(","), Tt(e.limit) || (_t11 += "|l:", _t11 += e.limit), e.startAt && (_t11 += "|lb:", _t11 += re(e.startAt)), e.endAt && (_t11 += "|ub:", _t11 += re(e.endAt)), e.A = _t11;
  }

  return e.A;
}

function Qt(t) {
  var e = t.path.canonicalString();
  return null !== t.collectionGroup && (e += " collectionGroup=" + t.collectionGroup), t.filters.length > 0 && (e += ", filters: [".concat(t.filters.map(function (t) {
    return "".concat((e = t).field.canonicalString(), " ").concat(e.op, " ").concat(Dt(e.value));
    /** Returns a debug description for `filter`. */

    var e;
    /** Filter that matches on key fields (i.e. '__name__'). */
  }).join(", "), "]")), Tt(t.limit) || (e += ", limit: " + t.limit), t.orderBy.length > 0 && (e += ", orderBy: [".concat(t.orderBy.map(function (t) {
    return function (t) {
      return "".concat(t.field.canonicalString(), " (").concat(t.dir, ")");
    }(t);
  }).join(", "), "]")), t.startAt && (e += ", startAt: " + re(t.startAt)), t.endAt && (e += ", endAt: " + re(t.endAt)), "Target(".concat(e, ")");
}

function Wt(t, e) {
  if (t.limit !== e.limit) return !1;
  if (t.orderBy.length !== e.orderBy.length) return !1;

  for (var _n18 = 0; _n18 < t.orderBy.length; _n18++) {
    if (!ae(t.orderBy[_n18], e.orderBy[_n18])) return !1;
  }

  if (t.filters.length !== e.filters.length) return !1;

  for (var _i6 = 0; _i6 < t.filters.length; _i6++) {
    if (n = t.filters[_i6], s = e.filters[_i6], n.op !== s.op || !n.field.isEqual(s.field) || !Pt(n.value, s.value)) return !1;
  }

  var n, s;
  return t.collectionGroup === e.collectionGroup && !!t.path.isEqual(e.path) && !!ue(t.startAt, e.startAt) && ue(t.endAt, e.endAt);
}

function Gt(t) {
  return Rt.isDocumentKey(t.path) && null === t.collectionGroup && 0 === t.filters.length;
}

var zt = /*#__PURE__*/function (_ref2) {
  _inherits(zt, _ref2);

  var _super4 = _createSuper(zt);

  function zt(t, e, n) {
    var _this8;

    _classCallCheck(this, zt);

    _this8 = _super4.call(this), _this8.field = t, _this8.op = e, _this8.value = n;
    return _this8;
  }
  /**
   * Creates a filter based on the provided arguments.
   */


  _createClass(zt, [{
    key: "matches",
    value: function matches(t) {
      var e = t.data.field(this.field); // Types do not have to match in NOT_EQUAL filters.

      return "!="
      /* NOT_EQUAL */
      === this.op ? null !== e && this.P(Vt(e, this.value)) : null !== e && bt(this.value) === bt(e) && this.P(Vt(e, this.value)); // Only compare types with matching backend order (such as double and int).
    }
  }, {
    key: "P",
    value: function P(t) {
      switch (this.op) {
        case "<"
        /* LESS_THAN */
        :
          return t < 0;

        case "<="
        /* LESS_THAN_OR_EQUAL */
        :
          return t <= 0;

        case "=="
        /* EQUAL */
        :
          return 0 === t;

        case "!="
        /* NOT_EQUAL */
        :
          return 0 !== t;

        case ">"
        /* GREATER_THAN */
        :
          return t > 0;

        case ">="
        /* GREATER_THAN_OR_EQUAL */
        :
          return t >= 0;

        default:
          return F();
      }
    }
  }, {
    key: "v",
    value: function v() {
      return ["<"
      /* LESS_THAN */
      , "<="
      /* LESS_THAN_OR_EQUAL */
      , ">"
      /* GREATER_THAN */
      , ">="
      /* GREATER_THAN_OR_EQUAL */
      , "!="
      /* NOT_EQUAL */
      , "not-in"
      /* NOT_IN */
      ].indexOf(this.op) >= 0;
    }
  }], [{
    key: "create",
    value: function create(t, e, n) {
      return t.isKeyField() ? "in"
      /* IN */
      === e || "not-in"
      /* NOT_IN */
      === e ? this.R(t, e, n) : new Jt(t, e, n) : "array-contains"
      /* ARRAY_CONTAINS */
      === e ? new te(t, n) : "in"
      /* IN */
      === e ? new ee(t, n) : "not-in"
      /* NOT_IN */
      === e ? new ne(t, n) : "array-contains-any"
      /* ARRAY_CONTAINS_ANY */
      === e ? new se(t, n) : new zt(t, e, n);
    }
  }, {
    key: "R",
    value: function R(t, e, n) {
      return "in"
      /* IN */
      === e ? new Yt(t, n) : new Xt(t, n);
    }
  }]);

  return zt;
}( /*#__PURE__*/function () {
  function _class() {
    _classCallCheck(this, _class);
  }

  return _class;
}());

function Ht(t) {
  // TODO(b/29183165): Technically, this won't be unique if two values have
  // the same description, such as the int 3 and the string "3". So we should
  // add the types in here somehow, too.
  return t.field.canonicalString() + t.op.toString() + Dt(t.value);
}

var Jt = /*#__PURE__*/function (_zt) {
  _inherits(Jt, _zt);

  var _super5 = _createSuper(Jt);

  function Jt(t, e, n) {
    var _this9;

    _classCallCheck(this, Jt);

    _this9 = _super5.call(this, t, e, n), _this9.key = Rt.fromName(n.referenceValue);
    return _this9;
  }

  _createClass(Jt, [{
    key: "matches",
    value: function matches(t) {
      var e = Rt.comparator(t.key, this.key);
      return this.P(e);
    }
  }]);

  return Jt;
}(zt);
/** Filter that matches on key fields within an array. */


var Yt = /*#__PURE__*/function (_zt2) {
  _inherits(Yt, _zt2);

  var _super6 = _createSuper(Yt);

  function Yt(t, e) {
    var _this10;

    _classCallCheck(this, Yt);

    _this10 = _super6.call(this, t, "in"
    /* IN */
    , e), _this10.keys = Zt("in"
    /* IN */
    , e);
    return _this10;
  }

  _createClass(Yt, [{
    key: "matches",
    value: function matches(t) {
      return this.keys.some(function (e) {
        return e.isEqual(t.key);
      });
    }
  }]);

  return Yt;
}(zt);
/** Filter that matches on key fields not present within an array. */


var Xt = /*#__PURE__*/function (_zt3) {
  _inherits(Xt, _zt3);

  var _super7 = _createSuper(Xt);

  function Xt(t, e) {
    var _this11;

    _classCallCheck(this, Xt);

    _this11 = _super7.call(this, t, "not-in"
    /* NOT_IN */
    , e), _this11.keys = Zt("not-in"
    /* NOT_IN */
    , e);
    return _this11;
  }

  _createClass(Xt, [{
    key: "matches",
    value: function matches(t) {
      return !this.keys.some(function (e) {
        return e.isEqual(t.key);
      });
    }
  }]);

  return Xt;
}(zt);

function Zt(t, e) {
  var n;
  return ((null === (n = e.arrayValue) || void 0 === n ? void 0 : n.values) || []).map(function (t) {
    return Rt.fromName(t.referenceValue);
  });
}
/** A Filter that implements the array-contains operator. */


var te = /*#__PURE__*/function (_zt4) {
  _inherits(te, _zt4);

  var _super8 = _createSuper(te);

  function te(t, e) {
    _classCallCheck(this, te);

    return _super8.call(this, t, "array-contains"
    /* ARRAY_CONTAINS */
    , e);
  }

  _createClass(te, [{
    key: "matches",
    value: function matches(t) {
      var e = t.data.field(this.field);
      return kt(e) && vt(e.arrayValue, this.value);
    }
  }]);

  return te;
}(zt);
/** A Filter that implements the IN operator. */


var ee = /*#__PURE__*/function (_zt5) {
  _inherits(ee, _zt5);

  var _super9 = _createSuper(ee);

  function ee(t, e) {
    _classCallCheck(this, ee);

    return _super9.call(this, t, "in"
    /* IN */
    , e);
  }

  _createClass(ee, [{
    key: "matches",
    value: function matches(t) {
      var e = t.data.field(this.field);
      return null !== e && vt(this.value.arrayValue, e);
    }
  }]);

  return ee;
}(zt);
/** A Filter that implements the not-in operator. */


var ne = /*#__PURE__*/function (_zt6) {
  _inherits(ne, _zt6);

  var _super10 = _createSuper(ne);

  function ne(t, e) {
    _classCallCheck(this, ne);

    return _super10.call(this, t, "not-in"
    /* NOT_IN */
    , e);
  }

  _createClass(ne, [{
    key: "matches",
    value: function matches(t) {
      if (vt(this.value.arrayValue, {
        nullValue: "NULL_VALUE"
      })) return !1;
      var e = t.data.field(this.field);
      return null !== e && !vt(this.value.arrayValue, e);
    }
  }]);

  return ne;
}(zt);
/** A Filter that implements the array-contains-any operator. */


var se = /*#__PURE__*/function (_zt7) {
  _inherits(se, _zt7);

  var _super11 = _createSuper(se);

  function se(t, e) {
    _classCallCheck(this, se);

    return _super11.call(this, t, "array-contains-any"
    /* ARRAY_CONTAINS_ANY */
    , e);
  }

  _createClass(se, [{
    key: "matches",
    value: function matches(t) {
      var _this12 = this;

      var e = t.data.field(this.field);
      return !(!kt(e) || !e.arrayValue.values) && e.arrayValue.values.some(function (t) {
        return vt(_this12.value.arrayValue, t);
      });
    }
  }]);

  return se;
}(zt);
/**
 * Represents a bound of a query.
 *
 * The bound is specified with the given components representing a position and
 * whether it's just before or just after the position (relative to whatever the
 * query order is).
 *
 * The position represents a logical index position for a query. It's a prefix
 * of values for the (potentially implicit) order by clauses of a query.
 *
 * Bound provides a function to determine whether a document comes before or
 * after a bound. This is influenced by whether the position is just before or
 * just after the provided values.
 */


var ie = function ie(t, e) {
  _classCallCheck(this, ie);

  this.position = t, this.before = e;
};

function re(t) {
  // TODO(b/29183165): Make this collision robust.
  return "".concat(t.before ? "b" : "a", ":").concat(t.position.map(function (t) {
    return Dt(t);
  }).join(","));
}
/**
 * An ordering on a field, in some Direction. Direction defaults to ASCENDING.
 */


var oe = function oe(t) {
  var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "asc";

  _classCallCheck(this, oe);

  this.field = t, this.dir = e;
};

function ae(t, e) {
  return t.dir === e.dir && t.field.isEqual(e.field);
}
/**
 * Returns true if a document sorts before a bound using the provided sort
 * order.
 */


function ce(t, e, n) {
  var s = 0;

  for (var _i7 = 0; _i7 < t.position.length; _i7++) {
    var _r2 = e[_i7],
        _o3 = t.position[_i7];
    if (_r2.field.isKeyField()) s = Rt.comparator(Rt.fromName(_o3.referenceValue), n.key);else {
      s = Vt(_o3, n.data.field(_r2.field));
    }
    if ("desc"
    /* DESCENDING */
    === _r2.dir && (s *= -1), 0 !== s) break;
  }

  return t.before ? s <= 0 : s < 0;
}

function ue(t, e) {
  if (null === t) return null === e;
  if (null === e) return !1;
  if (t.before !== e.before || t.position.length !== e.position.length) return !1;

  for (var _n19 = 0; _n19 < t.position.length; _n19++) {
    if (!Pt(t.position[_n19], e.position[_n19])) return !1;
  }

  return !0;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Query encapsulates all the query attributes we support in the SDK. It can
 * be run against the LocalStore, as well as be converted to a `Target` to
 * query the RemoteStore results.
 *
 * Visible for testing.
 */


var he =
/**
 * Initializes a Query with a path and optional additional query constraints.
 * Path must currently be empty if this is a collection group query.
 */
function he(t) {
  var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var s = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
  var i = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
  var r = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : "F";
  var o = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;
  var a = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;

  _classCallCheck(this, he);

  this.path = t, this.collectionGroup = e, this.explicitOrderBy = n, this.filters = s, this.limit = i, this.limitType = r, this.startAt = o, this.endAt = a, this.V = null, // The corresponding `Target` of this `Query` instance.
  this.S = null, this.startAt, this.endAt;
};
/** Creates a new Query instance with the options provided. */


function le(t, e, n, s, i, r, o, a) {
  return new he(t, e, n, s, i, r, o, a);
}
/** Creates a new Query for a query that matches all documents at `path` */


function fe(t) {
  return new he(t);
}
/**
 * Helper to convert a collection group query into a collection query at a
 * specific path. This is used when executing collection group queries, since
 * we have to split the query into a set of collection queries at multiple
 * paths.
 */


function de(t) {
  return !Tt(t.limit) && "F"
  /* First */
  === t.limitType;
}

function we(t) {
  return !Tt(t.limit) && "L"
  /* Last */
  === t.limitType;
}

function _e(t) {
  return t.explicitOrderBy.length > 0 ? t.explicitOrderBy[0].field : null;
}

function me(t) {
  var _iterator6 = _createForOfIteratorHelper(t.filters),
      _step6;

  try {
    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
      var _e18 = _step6.value;
      if (_e18.v()) return _e18.field;
    }
  } catch (err) {
    _iterator6.e(err);
  } finally {
    _iterator6.f();
  }

  return null;
}
/**
 * Checks if any of the provided Operators are included in the query and
 * returns the first one that is, or null if none are.
 */

/**
 * Returns whether the query matches a collection group rather than a specific
 * collection.
 */


function ge(t) {
  return null !== t.collectionGroup;
}
/**
 * Returns the implicit order by constraint that is used to execute the Query,
 * which can be different from the order by constraints the user provided (e.g.
 * the SDK and backend always orders by `__name__`).
 */


function ye(t) {
  var e = B(t);

  if (null === e.V) {
    e.V = [];

    var _t12 = me(e),
        _n20 = _e(e);

    if (null !== _t12 && null === _n20) // In order to implicitly add key ordering, we must also add the
      // inequality filter field for it to be a valid query.
      // Note that the default inequality field and key ordering is ascending.
      _t12.isKeyField() || e.V.push(new oe(_t12)), e.V.push(new oe(ht.keyField(), "asc"
      /* ASCENDING */
      ));else {
      var _t13 = !1;

      var _iterator7 = _createForOfIteratorHelper(e.explicitOrderBy),
          _step7;

      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var _n21 = _step7.value;
          e.V.push(_n21), _n21.field.isKeyField() && (_t13 = !0);
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }

      if (!_t13) {
        // The order of the implicit key ordering always matches the last
        // explicit order by
        var _t14 = e.explicitOrderBy.length > 0 ? e.explicitOrderBy[e.explicitOrderBy.length - 1].dir : "asc"
        /* ASCENDING */
        ;

        e.V.push(new oe(ht.keyField(), _t14));
      }
    }
  }

  return e.V;
}
/**
 * Converts this `Query` instance to it's corresponding `Target` representation.
 */


function pe(t) {
  var e = B(t);
  if (!e.S) if ("F"
  /* First */
  === e.limitType) e.S = Kt(e.path, e.collectionGroup, ye(e), e.filters, e.limit, e.startAt, e.endAt);else {
    // Flip the orderBy directions since we want the last results
    var _t15 = [];

    var _iterator8 = _createForOfIteratorHelper(ye(e)),
        _step8;

    try {
      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
        var _n23 = _step8.value;

        var _e19 = "desc"
        /* DESCENDING */
        === _n23.dir ? "asc"
        /* ASCENDING */
        : "desc"
        /* DESCENDING */
        ;

        _t15.push(new oe(_n23.field, _e19));
      } // We need to swap the cursors to match the now-flipped query ordering.

    } catch (err) {
      _iterator8.e(err);
    } finally {
      _iterator8.f();
    }

    var _n22 = e.endAt ? new ie(e.endAt.position, !e.endAt.before) : null,
        _s8 = e.startAt ? new ie(e.startAt.position, !e.startAt.before) : null; // Now return as a LimitType.First query.


    e.S = Kt(e.path, e.collectionGroup, _t15, e.filters, e.limit, _n22, _s8);
  }
  return e.S;
}

function Ee(t, e, n) {
  return new he(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), e, n, t.startAt, t.endAt);
}

function Te(t, e) {
  return Wt(pe(t), pe(e)) && t.limitType === e.limitType;
} // TODO(b/29183165): This is used to get a unique string from a query to, for
// example, use as a dictionary key, but the implementation is subject to
// collisions. Make it collision-free.


function Ie(t) {
  return "".concat(jt(pe(t)), "|lt:").concat(t.limitType);
}

function Ae(t) {
  return "Query(target=".concat(Qt(pe(t)), "; limitType=").concat(t.limitType, ")");
}
/** Returns whether `doc` matches the constraints of `query`. */


function Re(t, e) {
  return e.isFoundDocument() && function (t, e) {
    var n = e.key.path;
    return null !== t.collectionGroup ? e.key.hasCollectionId(t.collectionGroup) && t.path.isPrefixOf(n) : Rt.isDocumentKey(t.path) ? t.path.isEqual(n) : t.path.isImmediateParentOf(n);
  }
  /**
  * A document must have a value for every ordering clause in order to show up
  * in the results.
  */
  (t, e) && function (t, e) {
    var _iterator9 = _createForOfIteratorHelper(t.explicitOrderBy),
        _step9;

    try {
      for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
        var _n24 = _step9.value;
        // order by key always matches
        if (!_n24.field.isKeyField() && null === e.data.field(_n24.field)) return !1;
      }
    } catch (err) {
      _iterator9.e(err);
    } finally {
      _iterator9.f();
    }

    return !0;
  }(t, e) && function (t, e) {
    var _iterator10 = _createForOfIteratorHelper(t.filters),
        _step10;

    try {
      for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
        var _n25 = _step10.value;
        if (!_n25.matches(e)) return !1;
      }
    } catch (err) {
      _iterator10.e(err);
    } finally {
      _iterator10.f();
    }

    return !0;
  }
  /** Makes sure a document is within the bounds, if provided. */
  (t, e) && function (t, e) {
    if (t.startAt && !ce(t.startAt, ye(t), e)) return !1;
    if (t.endAt && ce(t.endAt, ye(t), e)) return !1;
    return !0;
  }
  /**
  * Returns a new comparator function that can be used to compare two documents
  * based on the Query's ordering constraint.
  */
  (t, e);
}

function be(t) {
  return function (e, n) {
    var s = !1;

    var _iterator11 = _createForOfIteratorHelper(ye(t)),
        _step11;

    try {
      for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
        var _i8 = _step11.value;

        var _t16 = Pe(_i8, e, n);

        if (0 !== _t16) return _t16;
        s = s || _i8.field.isKeyField();
      }
    } catch (err) {
      _iterator11.e(err);
    } finally {
      _iterator11.f();
    }

    return 0;
  };
}

function Pe(t, e, n) {
  var s = t.field.isKeyField() ? Rt.comparator(e.key, n.key) : function (t, e, n) {
    var s = e.data.field(t),
        i = n.data.field(t);
    return null !== s && null !== i ? Vt(s, i) : F();
  }(t.field, e, n);

  switch (t.dir) {
    case "asc"
    /* ASCENDING */
    :
      return s;

    case "desc"
    /* DESCENDING */
    :
      return -1 * s;

    default:
      return F();
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns an DoubleValue for `value` that is encoded based the serializer's
 * `useProto3Json` setting.
 */


function ve(t, e) {
  if (t.D) {
    if (isNaN(e)) return {
      doubleValue: "NaN"
    };
    if (e === 1 / 0) return {
      doubleValue: "Infinity"
    };
    if (e === -1 / 0) return {
      doubleValue: "-Infinity"
    };
  }

  return {
    doubleValue: It(e) ? "-0" : e
  };
}
/**
 * Returns an IntegerValue for `value`.
 */


function Ve(t) {
  return {
    integerValue: "" + t
  };
}
/**
 * Returns a value for a number that's appropriate to put into a proto.
 * The return value is an IntegerValue if it can safely represent the value,
 * otherwise a DoubleValue is returned.
 */


function Se(t, e) {
  return At(e) ? Ve(e) : ve(t, e);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Used to represent a field transform on a mutation. */


var De = function De() {
  _classCallCheck(this, De);

  // Make sure that the structural type of `TransformOperation` is unique.
  // See https://github.com/microsoft/TypeScript/issues/5451
  this._ = void 0;
};
/**
 * Computes the local transform result against the provided `previousValue`,
 * optionally using the provided localWriteTime.
 */


function Ce(t, e, n) {
  return t instanceof ke ? function (t, e) {
    var n = {
      fields: {
        __type__: {
          stringValue: "server_timestamp"
        },
        __local_write_time__: {
          timestampValue: {
            seconds: t.seconds,
            nanos: t.nanoseconds
          }
        }
      }
    };
    return e && (n.fields.__previous_value__ = e), {
      mapValue: n
    };
  }(n, e) : t instanceof $e ? Oe(t, e) : t instanceof Fe ? Me(t, e) : function (t, e) {
    // PORTING NOTE: Since JavaScript's integer arithmetic is limited to 53 bit
    // precision and resolves overflows by reducing precision, we do not
    // manually cap overflows at 2^63.
    var n = xe(t, e),
        s = Be(n) + Be(t.C);
    return xt(n) && xt(t.C) ? Ve(s) : ve(t.N, s);
  }(t, e);
}
/**
 * Computes a final transform result after the transform has been acknowledged
 * by the server, potentially using the server-provided transformResult.
 */


function Ne(t, e, n) {
  // The server just sends null as the transform result for array operations,
  // so we have to calculate a result the same as we do for local
  // applications.
  return t instanceof $e ? Oe(t, e) : t instanceof Fe ? Me(t, e) : n;
}
/**
 * If this transform operation is not idempotent, returns the base value to
 * persist for this transform. If a base value is returned, the transform
 * operation is always applied to this base value, even if document has
 * already been updated.
 *
 * Base values provide consistent behavior for non-idempotent transforms and
 * allow us to return the same latency-compensated value even if the backend
 * has already applied the transform operation. The base value is null for
 * idempotent transforms, as they can be re-played even if the backend has
 * already applied them.
 *
 * @returns a base value to store along with the mutation, or null for
 * idempotent transforms.
 */


function xe(t, e) {
  return t instanceof Le ? xt(n = e) || function (t) {
    return !!t && "doubleValue" in t;
  }
  /** Returns true if `value` is either an IntegerValue or a DoubleValue. */
  (n) ? e : {
    integerValue: 0
  } : null;
  var n;
}
/** Transforms a value into a server-generated timestamp. */


var ke = /*#__PURE__*/function (_De) {
  _inherits(ke, _De);

  var _super12 = _createSuper(ke);

  function ke() {
    _classCallCheck(this, ke);

    return _super12.apply(this, arguments);
  }

  return ke;
}(De);
/** Transforms an array value via a union operation. */


var $e = /*#__PURE__*/function (_De2) {
  _inherits($e, _De2);

  var _super13 = _createSuper($e);

  function $e(t) {
    var _this13;

    _classCallCheck(this, $e);

    _this13 = _super13.call(this), _this13.elements = t;
    return _this13;
  }

  return $e;
}(De);

function Oe(t, e) {
  var n = Ue(e);

  var _iterator12 = _createForOfIteratorHelper(t.elements),
      _step12;

  try {
    var _loop = function _loop() {
      var e = _step12.value;
      n.some(function (t) {
        return Pt(t, e);
      }) || n.push(e);
    };

    for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
      _loop();
    }
  } catch (err) {
    _iterator12.e(err);
  } finally {
    _iterator12.f();
  }

  return {
    arrayValue: {
      values: n
    }
  };
}
/** Transforms an array value via a remove operation. */


var Fe = /*#__PURE__*/function (_De3) {
  _inherits(Fe, _De3);

  var _super14 = _createSuper(Fe);

  function Fe(t) {
    var _this14;

    _classCallCheck(this, Fe);

    _this14 = _super14.call(this), _this14.elements = t;
    return _this14;
  }

  return Fe;
}(De);

function Me(t, e) {
  var n = Ue(e);

  var _iterator13 = _createForOfIteratorHelper(t.elements),
      _step13;

  try {
    var _loop2 = function _loop2() {
      var e = _step13.value;
      n = n.filter(function (t) {
        return !Pt(t, e);
      });
    };

    for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
      _loop2();
    }
  } catch (err) {
    _iterator13.e(err);
  } finally {
    _iterator13.f();
  }

  return {
    arrayValue: {
      values: n
    }
  };
}
/**
 * Implements the backend semantics for locally computed NUMERIC_ADD (increment)
 * transforms. Converts all field values to integers or doubles, but unlike the
 * backend does not cap integer values at 2^63. Instead, JavaScript number
 * arithmetic is used and precision loss can occur for values greater than 2^53.
 */


var Le = /*#__PURE__*/function (_De4) {
  _inherits(Le, _De4);

  var _super15 = _createSuper(Le);

  function Le(t, e) {
    var _this15;

    _classCallCheck(this, Le);

    _this15 = _super15.call(this), _this15.N = t, _this15.C = e;
    return _this15;
  }

  return Le;
}(De);

function Be(t) {
  return mt(t.integerValue || t.doubleValue);
}

function Ue(t) {
  return kt(t) && t.arrayValue.values ? t.arrayValue.values.slice() : [];
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** A field path and the TransformOperation to perform upon it. */


var qe = function qe(t, e) {
  _classCallCheck(this, qe);

  this.field = t, this.transform = e;
};

function Ke(t, e) {
  return t.field.isEqual(e.field) && function (t, e) {
    return t instanceof $e && e instanceof $e || t instanceof Fe && e instanceof Fe ? tt(t.elements, e.elements, Pt) : t instanceof Le && e instanceof Le ? Pt(t.C, e.C) : t instanceof ke && e instanceof ke;
  }(t.transform, e.transform);
}
/** The result of successfully applying a mutation to the backend. */


var je = function je(
/**
 * The version at which the mutation was committed:
 *
 * - For most operations, this is the updateTime in the WriteResult.
 * - For deletes, the commitTime of the WriteResponse (because deletes are
 *   not stored and have no updateTime).
 *
 * Note that these versions can be different: No-op writes will not change
 * the updateTime even though the commitTime advances.
 */
t,
/**
 * The resulting fields returned from the backend after a mutation
 * containing field transforms has been committed. Contains one FieldValue
 * for each FieldTransform that was in the mutation.
 *
 * Will be empty if the mutation did not contain any field transforms.
 */
e) {
  _classCallCheck(this, je);

  this.version = t, this.transformResults = e;
};
/**
 * Encodes a precondition for a mutation. This follows the model that the
 * backend accepts with the special case of an explicit "empty" precondition
 * (meaning no precondition).
 */


var Qe = /*#__PURE__*/function () {
  function Qe(t, e) {
    _classCallCheck(this, Qe);

    this.updateTime = t, this.exists = e;
  }
  /** Creates a new empty Precondition. */


  _createClass(Qe, [{
    key: "isNone",
    get:
    /** Returns whether this Precondition is empty. */
    function get() {
      return void 0 === this.updateTime && void 0 === this.exists;
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return this.exists === t.exists && (this.updateTime ? !!t.updateTime && this.updateTime.isEqual(t.updateTime) : !t.updateTime);
    }
  }], [{
    key: "none",
    value: function none() {
      return new Qe();
    }
    /** Creates a new Precondition with an exists flag. */

  }, {
    key: "exists",
    value: function exists(t) {
      return new Qe(void 0, t);
    }
    /** Creates a new Precondition based on a version a document exists at. */

  }, {
    key: "updateTime",
    value: function updateTime(t) {
      return new Qe(t);
    }
  }]);

  return Qe;
}();
/** Returns true if the preconditions is valid for the given document. */


function We(t, e) {
  return void 0 !== t.updateTime ? e.isFoundDocument() && e.version.isEqual(t.updateTime) : void 0 === t.exists || t.exists === e.isFoundDocument();
}
/**
 * A mutation describes a self-contained change to a document. Mutations can
 * create, replace, delete, and update subsets of documents.
 *
 * Mutations not only act on the value of the document but also its version.
 *
 * For local mutations (mutations that haven't been committed yet), we preserve
 * the existing version for Set and Patch mutations. For Delete mutations, we
 * reset the version to 0.
 *
 * Here's the expected transition table.
 *
 * MUTATION           APPLIED TO            RESULTS IN
 *
 * SetMutation        Document(v3)          Document(v3)
 * SetMutation        NoDocument(v3)        Document(v0)
 * SetMutation        InvalidDocument(v0)   Document(v0)
 * PatchMutation      Document(v3)          Document(v3)
 * PatchMutation      NoDocument(v3)        NoDocument(v3)
 * PatchMutation      InvalidDocument(v0)   UnknownDocument(v3)
 * DeleteMutation     Document(v3)          NoDocument(v0)
 * DeleteMutation     NoDocument(v3)        NoDocument(v0)
 * DeleteMutation     InvalidDocument(v0)   NoDocument(v0)
 *
 * For acknowledged mutations, we use the updateTime of the WriteResponse as
 * the resulting version for Set and Patch mutations. As deletes have no
 * explicit update time, we use the commitTime of the WriteResponse for
 * Delete mutations.
 *
 * If a mutation is acknowledged by the backend but fails the precondition check
 * locally, we transition to an `UnknownDocument` and rely on Watch to send us
 * the updated version.
 *
 * Field transforms are used only with Patch and Set Mutations. We use the
 * `updateTransforms` message to store transforms, rather than the `transforms`s
 * messages.
 *
 * ## Subclassing Notes
 *
 * Every type of mutation needs to implement its own applyToRemoteDocument() and
 * applyToLocalView() to implement the actual behavior of applying the mutation
 * to some source document (see `setMutationApplyToRemoteDocument()` for an
 * example).
 */


var Ge = function Ge() {
  _classCallCheck(this, Ge);
};
/**
 * Applies this mutation to the given document for the purposes of computing a
 * new remote document. If the input document doesn't match the expected state
 * (e.g. it is invalid or outdated), the document type may transition to
 * unknown.
 *
 * @param mutation - The mutation to apply.
 * @param document - The document to mutate. The input document can be an
 *     invalid document if the client has no knowledge of the pre-mutation state
 *     of the document.
 * @param mutationResult - The result of applying the mutation from the backend.
 */


function ze(t, e, n) {
  t instanceof Ze ? function (t, e, n) {
    // Unlike setMutationApplyToLocalView, if we're applying a mutation to a
    // remote document the server has accepted the mutation so the precondition
    // must have held.
    var s = t.value.clone(),
        i = nn(t.fieldTransforms, e, n.transformResults);
    s.setAll(i), e.convertToFoundDocument(n.version, s).setHasCommittedMutations();
  }(t, e, n) : t instanceof tn ? function (t, e, n) {
    if (!We(t.precondition, e)) // Since the mutation was not rejected, we know that the precondition
      // matched on the backend. We therefore must not have the expected version
      // of the document in our cache and convert to an UnknownDocument with a
      // known updateTime.
      return void e.convertToUnknownDocument(n.version);
    var s = nn(t.fieldTransforms, e, n.transformResults),
        i = e.data;
    i.setAll(en(t)), i.setAll(s), e.convertToFoundDocument(n.version, i).setHasCommittedMutations();
  }(t, e, n) : function (t, e, n) {
    // Unlike applyToLocalView, if we're applying a mutation to a remote
    // document the server has accepted the mutation so the precondition must
    // have held.
    e.convertToNoDocument(n.version).setHasCommittedMutations();
  }(0, e, n);
}
/**
 * Applies this mutation to the given document for the purposes of computing
 * the new local view of a document. If the input document doesn't match the
 * expected state, the document is not modified.
 *
 * @param mutation - The mutation to apply.
 * @param document - The document to mutate. The input document can be an
 *     invalid document if the client has no knowledge of the pre-mutation state
 *     of the document.
 * @param localWriteTime - A timestamp indicating the local write time of the
 *     batch this mutation is a part of.
 */


function He(t, e, n) {
  t instanceof Ze ? function (t, e, n) {
    if (!We(t.precondition, e)) // The mutation failed to apply (e.g. a document ID created with add()
      // caused a name collision).
      return;
    var s = t.value.clone(),
        i = sn(t.fieldTransforms, n, e);
    s.setAll(i), e.convertToFoundDocument(Xe(e), s).setHasLocalMutations();
  }
  /**
  * A mutation that modifies fields of the document at the given key with the
  * given values. The values are applied through a field mask:
  *
  *  * When a field is in both the mask and the values, the corresponding field
  *    is updated.
  *  * When a field is in neither the mask nor the values, the corresponding
  *    field is unmodified.
  *  * When a field is in the mask but not in the values, the corresponding field
  *    is deleted.
  *  * When a field is not in the mask but is in the values, the values map is
  *    ignored.
  */
  (t, e, n) : t instanceof tn ? function (t, e, n) {
    if (!We(t.precondition, e)) return;
    var s = sn(t.fieldTransforms, n, e),
        i = e.data;
    i.setAll(en(t)), i.setAll(s), e.convertToFoundDocument(Xe(e), i).setHasLocalMutations();
  }
  /**
  * Returns a FieldPath/Value map with the content of the PatchMutation.
  */
  (t, e, n) : function (t, e) {
    We(t.precondition, e) && // We don't call `setHasLocalMutations()` since we want to be backwards
    // compatible with the existing SDK behavior.
    e.convertToNoDocument(st.min());
  }
  /**
  * A mutation that verifies the existence of the document at the given key with
  * the provided precondition.
  *
  * The `verify` operation is only used in Transactions, and this class serves
  * primarily to facilitate serialization into protos.
  */
  (t, e);
}
/**
 * If this mutation is not idempotent, returns the base value to persist with
 * this mutation. If a base value is returned, the mutation is always applied
 * to this base value, even if document has already been updated.
 *
 * The base value is a sparse object that consists of only the document
 * fields for which this mutation contains a non-idempotent transformation
 * (e.g. a numeric increment). The provided value guarantees consistent
 * behavior for non-idempotent transforms and allow us to return the same
 * latency-compensated value even if the backend has already applied the
 * mutation. The base value is null for idempotent mutations, as they can be
 * re-played even if the backend has already applied them.
 *
 * @returns a base value to store along with the mutation, or null for
 * idempotent mutations.
 */


function Je(t, e) {
  var n = null;

  var _iterator14 = _createForOfIteratorHelper(t.fieldTransforms),
      _step14;

  try {
    for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
      var _s9 = _step14.value;

      var _t17 = e.data.field(_s9.field),
          _i9 = xe(_s9.transform, _t17 || null);

      null != _i9 && (null == n && (n = Lt.empty()), n.set(_s9.field, _i9));
    }
  } catch (err) {
    _iterator14.e(err);
  } finally {
    _iterator14.f();
  }

  return n || null;
}

function Ye(t, e) {
  return t.type === e.type && !!t.key.isEqual(e.key) && !!t.precondition.isEqual(e.precondition) && !!function (t, e) {
    return void 0 === t && void 0 === e || !(!t || !e) && tt(t, e, function (t, e) {
      return Ke(t, e);
    });
  }(t.fieldTransforms, e.fieldTransforms) && (0
  /* Set */
  === t.type ? t.value.isEqual(e.value) : 1
  /* Patch */
  !== t.type || t.data.isEqual(e.data) && t.fieldMask.isEqual(e.fieldMask));
}
/**
 * Returns the version from the given document for use as the result of a
 * mutation. Mutations are defined to return the version of the base document
 * only if it is an existing document. Deleted and unknown documents have a
 * post-mutation version of SnapshotVersion.min().
 */


function Xe(t) {
  return t.isFoundDocument() ? t.version : st.min();
}
/**
 * A mutation that creates or replaces the document at the given key with the
 * object value contents.
 */


var Ze = /*#__PURE__*/function (_Ge) {
  _inherits(Ze, _Ge);

  var _super16 = _createSuper(Ze);

  function Ze(t, e, n) {
    var _this16;

    var s = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

    _classCallCheck(this, Ze);

    _this16 = _super16.call(this), _this16.key = t, _this16.value = e, _this16.precondition = n, _this16.fieldTransforms = s, _this16.type = 0
    /* Set */
    ;
    return _this16;
  }

  return Ze;
}(Ge);

var tn = /*#__PURE__*/function (_Ge2) {
  _inherits(tn, _Ge2);

  var _super17 = _createSuper(tn);

  function tn(t, e, n, s) {
    var _this17;

    var i = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];

    _classCallCheck(this, tn);

    _this17 = _super17.call(this), _this17.key = t, _this17.data = e, _this17.fieldMask = n, _this17.precondition = s, _this17.fieldTransforms = i, _this17.type = 1
    /* Patch */
    ;
    return _this17;
  }

  return tn;
}(Ge);

function en(t) {
  var e = new Map();
  return t.fieldMask.fields.forEach(function (n) {
    if (!n.isEmpty()) {
      var _s10 = t.data.field(n);

      e.set(n, _s10);
    }
  }), e;
}
/**
 * Creates a list of "transform results" (a transform result is a field value
 * representing the result of applying a transform) for use after a mutation
 * containing transforms has been acknowledged by the server.
 *
 * @param fieldTransforms - The field transforms to apply the result to.
 * @param mutableDocument - The current state of the document after applying all
 * previous mutations.
 * @param serverTransformResults - The transform results received by the server.
 * @returns The transform results list.
 */


function nn(t, e, n) {
  var s = new Map();
  M(t.length === n.length);

  for (var _i10 = 0; _i10 < n.length; _i10++) {
    var _r3 = t[_i10],
        _o4 = _r3.transform,
        _a2 = e.data.field(_r3.field);

    s.set(_r3.field, Ne(_o4, _a2, n[_i10]));
  }

  return s;
}
/**
 * Creates a list of "transform results" (a transform result is a field value
 * representing the result of applying a transform) for use when applying a
 * transform locally.
 *
 * @param fieldTransforms - The field transforms to apply the result to.
 * @param localWriteTime - The local time of the mutation (used to
 *     generate ServerTimestampValues).
 * @param mutableDocument - The current state of the document after applying all
 *     previous mutations.
 * @returns The transform results list.
 */


function sn(t, e, n) {
  var s = new Map();

  var _iterator15 = _createForOfIteratorHelper(t),
      _step15;

  try {
    for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
      var _i11 = _step15.value;

      var _t18 = _i11.transform,
          _r4 = n.data.field(_i11.field);

      s.set(_i11.field, Ce(_t18, _r4, e));
    }
  } catch (err) {
    _iterator15.e(err);
  } finally {
    _iterator15.f();
  }

  return s;
}
/** A mutation that deletes the document at the given key. */


var rn = /*#__PURE__*/function (_Ge3) {
  _inherits(rn, _Ge3);

  var _super18 = _createSuper(rn);

  function rn(t, e) {
    var _this18;

    _classCallCheck(this, rn);

    _this18 = _super18.call(this), _this18.key = t, _this18.precondition = e, _this18.type = 2
    /* Delete */
    , _this18.fieldTransforms = [];
    return _this18;
  }

  return rn;
}(Ge);

var on = /*#__PURE__*/function (_Ge4) {
  _inherits(on, _Ge4);

  var _super19 = _createSuper(on);

  function on(t, e) {
    var _this19;

    _classCallCheck(this, on);

    _this19 = _super19.call(this), _this19.key = t, _this19.precondition = e, _this19.type = 3
    /* Verify */
    , _this19.fieldTransforms = [];
    return _this19;
  }

  return on;
}(Ge);
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var an = // TODO(b/33078163): just use simplest form of existence filter for now
function an(t) {
  _classCallCheck(this, an);

  this.count = t;
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Error Codes describing the different ways GRPC can fail. These are copied
 * directly from GRPC's sources here:
 *
 * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
 *
 * Important! The names of these identifiers matter because the string forms
 * are used for reverse lookups from the webchannel stream. Do NOT change the
 * names of these identifiers or change this into a const enum.
 */


var cn, un;
/**
 * Determines whether an error code represents a permanent error when received
 * in response to a non-write operation.
 *
 * See isPermanentWriteError for classifying write errors.
 */

function hn(t) {
  switch (t) {
    case U.OK:
      return F();

    case U.CANCELLED:
    case U.UNKNOWN:
    case U.DEADLINE_EXCEEDED:
    case U.RESOURCE_EXHAUSTED:
    case U.INTERNAL:
    case U.UNAVAILABLE: // Unauthenticated means something went wrong with our token and we need
    // to retry with new credentials which will happen automatically.

    case U.UNAUTHENTICATED:
      return !1;

    case U.INVALID_ARGUMENT:
    case U.NOT_FOUND:
    case U.ALREADY_EXISTS:
    case U.PERMISSION_DENIED:
    case U.FAILED_PRECONDITION: // Aborted might be retried in some scenarios, but that is dependant on
    // the context and should handled individually by the calling code.
    // See https://cloud.google.com/apis/design/errors.

    case U.ABORTED:
    case U.OUT_OF_RANGE:
    case U.UNIMPLEMENTED:
    case U.DATA_LOSS:
      return !0;

    default:
      return F();
  }
}
/**
 * Determines whether an error code represents a permanent error when received
 * in response to a write operation.
 *
 * Write operations must be handled specially because as of b/119437764, ABORTED
 * errors on the write stream should be retried too (even though ABORTED errors
 * are not generally retryable).
 *
 * Note that during the initial handshake on the write stream an ABORTED error
 * signals that we should discard our stream token (i.e. it is permanent). This
 * means a handshake error should be classified with isPermanentError, above.
 */

/**
 * Maps an error Code from GRPC status code number, like 0, 1, or 14. These
 * are not the same as HTTP status codes.
 *
 * @returns The Code equivalent to the given GRPC status code. Fails if there
 *     is no match.
 */


function ln(t) {
  if (void 0 === t) // This shouldn't normally happen, but in certain error cases (like trying
    // to send invalid proto messages) we may get an error with no GRPC code.
    return k("GRPC error has no .code"), U.UNKNOWN;

  switch (t) {
    case cn.OK:
      return U.OK;

    case cn.CANCELLED:
      return U.CANCELLED;

    case cn.UNKNOWN:
      return U.UNKNOWN;

    case cn.DEADLINE_EXCEEDED:
      return U.DEADLINE_EXCEEDED;

    case cn.RESOURCE_EXHAUSTED:
      return U.RESOURCE_EXHAUSTED;

    case cn.INTERNAL:
      return U.INTERNAL;

    case cn.UNAVAILABLE:
      return U.UNAVAILABLE;

    case cn.UNAUTHENTICATED:
      return U.UNAUTHENTICATED;

    case cn.INVALID_ARGUMENT:
      return U.INVALID_ARGUMENT;

    case cn.NOT_FOUND:
      return U.NOT_FOUND;

    case cn.ALREADY_EXISTS:
      return U.ALREADY_EXISTS;

    case cn.PERMISSION_DENIED:
      return U.PERMISSION_DENIED;

    case cn.FAILED_PRECONDITION:
      return U.FAILED_PRECONDITION;

    case cn.ABORTED:
      return U.ABORTED;

    case cn.OUT_OF_RANGE:
      return U.OUT_OF_RANGE;

    case cn.UNIMPLEMENTED:
      return U.UNIMPLEMENTED;

    case cn.DATA_LOSS:
      return U.DATA_LOSS;

    default:
      return F();
  }
}
/**
 * Converts an HTTP response's error status to the equivalent error code.
 *
 * @param status - An HTTP error response status ("FAILED_PRECONDITION",
 * "UNKNOWN", etc.)
 * @returns The equivalent Code. Non-matching responses are mapped to
 *     Code.UNKNOWN.
 */


(un = cn || (cn = {}))[un.OK = 0] = "OK", un[un.CANCELLED = 1] = "CANCELLED", un[un.UNKNOWN = 2] = "UNKNOWN", un[un.INVALID_ARGUMENT = 3] = "INVALID_ARGUMENT", un[un.DEADLINE_EXCEEDED = 4] = "DEADLINE_EXCEEDED", un[un.NOT_FOUND = 5] = "NOT_FOUND", un[un.ALREADY_EXISTS = 6] = "ALREADY_EXISTS", un[un.PERMISSION_DENIED = 7] = "PERMISSION_DENIED", un[un.UNAUTHENTICATED = 16] = "UNAUTHENTICATED", un[un.RESOURCE_EXHAUSTED = 8] = "RESOURCE_EXHAUSTED", un[un.FAILED_PRECONDITION = 9] = "FAILED_PRECONDITION", un[un.ABORTED = 10] = "ABORTED", un[un.OUT_OF_RANGE = 11] = "OUT_OF_RANGE", un[un.UNIMPLEMENTED = 12] = "UNIMPLEMENTED", un[un.INTERNAL = 13] = "INTERNAL", un[un.UNAVAILABLE = 14] = "UNAVAILABLE", un[un.DATA_LOSS = 15] = "DATA_LOSS";
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// An immutable sorted map implementation, based on a Left-leaning Red-Black
// tree.

var fn = /*#__PURE__*/function () {
  function fn(t, e) {
    _classCallCheck(this, fn);

    this.comparator = t, this.root = e || wn.EMPTY;
  } // Returns a copy of the map, with the specified key/value added or replaced.


  _createClass(fn, [{
    key: "insert",
    value: function insert(t, e) {
      return new fn(this.comparator, this.root.insert(t, e, this.comparator).copy(null, null, wn.BLACK, null, null));
    } // Returns a copy of the map, with the specified key removed.

  }, {
    key: "remove",
    value: function remove(t) {
      return new fn(this.comparator, this.root.remove(t, this.comparator).copy(null, null, wn.BLACK, null, null));
    } // Returns the value of the node with the given key, or null.

  }, {
    key: "get",
    value: function get(t) {
      var e = this.root;

      for (; !e.isEmpty();) {
        var _n26 = this.comparator(t, e.key);

        if (0 === _n26) return e.value;
        _n26 < 0 ? e = e.left : _n26 > 0 && (e = e.right);
      }

      return null;
    } // Returns the index of the element in this sorted map, or -1 if it doesn't
    // exist.

  }, {
    key: "indexOf",
    value: function indexOf(t) {
      // Number of nodes that were pruned when descending right
      var e = 0,
          n = this.root;

      for (; !n.isEmpty();) {
        var _s11 = this.comparator(t, n.key);

        if (0 === _s11) return e + n.left.size;
        _s11 < 0 ? n = n.left : ( // Count all nodes left of the node plus the node itself
        e += n.left.size + 1, n = n.right);
      } // Node not found


      return -1;
    }
  }, {
    key: "isEmpty",
    value: function isEmpty() {
      return this.root.isEmpty();
    } // Returns the total number of nodes in the map.

  }, {
    key: "size",
    get: function get() {
      return this.root.size;
    } // Returns the minimum key in the map.

  }, {
    key: "minKey",
    value: function minKey() {
      return this.root.minKey();
    } // Returns the maximum key in the map.

  }, {
    key: "maxKey",
    value: function maxKey() {
      return this.root.maxKey();
    } // Traverses the map in key order and calls the specified action function
    // for each key/value pair. If action returns true, traversal is aborted.
    // Returns the first truthy value returned by action, or the last falsey
    // value returned by action.

  }, {
    key: "inorderTraversal",
    value: function inorderTraversal(t) {
      return this.root.inorderTraversal(t);
    }
  }, {
    key: "forEach",
    value: function forEach(t) {
      this.inorderTraversal(function (e, n) {
        return t(e, n), !1;
      });
    }
  }, {
    key: "toString",
    value: function toString() {
      var t = [];
      return this.inorderTraversal(function (e, n) {
        return t.push("".concat(e, ":").concat(n)), !1;
      }), "{".concat(t.join(", "), "}");
    } // Traverses the map in reverse key order and calls the specified action
    // function for each key/value pair. If action returns true, traversal is
    // aborted.
    // Returns the first truthy value returned by action, or the last falsey
    // value returned by action.

  }, {
    key: "reverseTraversal",
    value: function reverseTraversal(t) {
      return this.root.reverseTraversal(t);
    } // Returns an iterator over the SortedMap.

  }, {
    key: "getIterator",
    value: function getIterator() {
      return new dn(this.root, null, this.comparator, !1);
    }
  }, {
    key: "getIteratorFrom",
    value: function getIteratorFrom(t) {
      return new dn(this.root, t, this.comparator, !1);
    }
  }, {
    key: "getReverseIterator",
    value: function getReverseIterator() {
      return new dn(this.root, null, this.comparator, !0);
    }
  }, {
    key: "getReverseIteratorFrom",
    value: function getReverseIteratorFrom(t) {
      return new dn(this.root, t, this.comparator, !0);
    }
  }]);

  return fn;
}(); // end SortedMap
// An iterator over an LLRBNode.


var dn = /*#__PURE__*/function () {
  function dn(t, e, n, s) {
    _classCallCheck(this, dn);

    this.isReverse = s, this.nodeStack = [];
    var i = 1;

    for (; !t.isEmpty();) {
      if (i = e ? n(t.key, e) : 1, // flip the comparison if we're going in reverse
      s && (i *= -1), i < 0) // This node is less than our start key. ignore it
        t = this.isReverse ? t.left : t.right;else {
        if (0 === i) {
          // This node is exactly equal to our start key. Push it on the stack,
          // but stop iterating;
          this.nodeStack.push(t);
          break;
        } // This node is greater than our start key, add it to the stack and move
        // to the next one


        this.nodeStack.push(t), t = this.isReverse ? t.right : t.left;
      }
    }
  }

  _createClass(dn, [{
    key: "getNext",
    value: function getNext() {
      var t = this.nodeStack.pop();
      var e = {
        key: t.key,
        value: t.value
      };
      if (this.isReverse) for (t = t.left; !t.isEmpty();) {
        this.nodeStack.push(t), t = t.right;
      } else for (t = t.right; !t.isEmpty();) {
        this.nodeStack.push(t), t = t.left;
      }
      return e;
    }
  }, {
    key: "hasNext",
    value: function hasNext() {
      return this.nodeStack.length > 0;
    }
  }, {
    key: "peek",
    value: function peek() {
      if (0 === this.nodeStack.length) return null;
      var t = this.nodeStack[this.nodeStack.length - 1];
      return {
        key: t.key,
        value: t.value
      };
    }
  }]);

  return dn;
}(); // end SortedMapIterator
// Represents a node in a Left-leaning Red-Black tree.


var wn = /*#__PURE__*/function () {
  function wn(t, e, n, s, i) {
    _classCallCheck(this, wn);

    this.key = t, this.value = e, this.color = null != n ? n : wn.RED, this.left = null != s ? s : wn.EMPTY, this.right = null != i ? i : wn.EMPTY, this.size = this.left.size + 1 + this.right.size;
  } // Returns a copy of the current node, optionally replacing pieces of it.


  _createClass(wn, [{
    key: "copy",
    value: function copy(t, e, n, s, i) {
      return new wn(null != t ? t : this.key, null != e ? e : this.value, null != n ? n : this.color, null != s ? s : this.left, null != i ? i : this.right);
    }
  }, {
    key: "isEmpty",
    value: function isEmpty() {
      return !1;
    } // Traverses the tree in key order and calls the specified action function
    // for each node. If action returns true, traversal is aborted.
    // Returns the first truthy value returned by action, or the last falsey
    // value returned by action.

  }, {
    key: "inorderTraversal",
    value: function inorderTraversal(t) {
      return this.left.inorderTraversal(t) || t(this.key, this.value) || this.right.inorderTraversal(t);
    } // Traverses the tree in reverse key order and calls the specified action
    // function for each node. If action returns true, traversal is aborted.
    // Returns the first truthy value returned by action, or the last falsey
    // value returned by action.

  }, {
    key: "reverseTraversal",
    value: function reverseTraversal(t) {
      return this.right.reverseTraversal(t) || t(this.key, this.value) || this.left.reverseTraversal(t);
    } // Returns the minimum node in the tree.

  }, {
    key: "min",
    value: function min() {
      return this.left.isEmpty() ? this : this.left.min();
    } // Returns the maximum key in the tree.

  }, {
    key: "minKey",
    value: function minKey() {
      return this.min().key;
    } // Returns the maximum key in the tree.

  }, {
    key: "maxKey",
    value: function maxKey() {
      return this.right.isEmpty() ? this.key : this.right.maxKey();
    } // Returns new tree, with the key/value added.

  }, {
    key: "insert",
    value: function insert(t, e, n) {
      var s = this;
      var i = n(t, s.key);
      return s = i < 0 ? s.copy(null, null, null, s.left.insert(t, e, n), null) : 0 === i ? s.copy(null, e, null, null, null) : s.copy(null, null, null, null, s.right.insert(t, e, n)), s.fixUp();
    }
  }, {
    key: "removeMin",
    value: function removeMin() {
      if (this.left.isEmpty()) return wn.EMPTY;
      var t = this;
      return t.left.isRed() || t.left.left.isRed() || (t = t.moveRedLeft()), t = t.copy(null, null, null, t.left.removeMin(), null), t.fixUp();
    } // Returns new tree, with the specified item removed.

  }, {
    key: "remove",
    value: function remove(t, e) {
      var n,
          s = this;
      if (e(t, s.key) < 0) s.left.isEmpty() || s.left.isRed() || s.left.left.isRed() || (s = s.moveRedLeft()), s = s.copy(null, null, null, s.left.remove(t, e), null);else {
        if (s.left.isRed() && (s = s.rotateRight()), s.right.isEmpty() || s.right.isRed() || s.right.left.isRed() || (s = s.moveRedRight()), 0 === e(t, s.key)) {
          if (s.right.isEmpty()) return wn.EMPTY;
          n = s.right.min(), s = s.copy(n.key, n.value, null, null, s.right.removeMin());
        }

        s = s.copy(null, null, null, null, s.right.remove(t, e));
      }
      return s.fixUp();
    }
  }, {
    key: "isRed",
    value: function isRed() {
      return this.color;
    } // Returns new tree after performing any needed rotations.

  }, {
    key: "fixUp",
    value: function fixUp() {
      var t = this;
      return t.right.isRed() && !t.left.isRed() && (t = t.rotateLeft()), t.left.isRed() && t.left.left.isRed() && (t = t.rotateRight()), t.left.isRed() && t.right.isRed() && (t = t.colorFlip()), t;
    }
  }, {
    key: "moveRedLeft",
    value: function moveRedLeft() {
      var t = this.colorFlip();
      return t.right.left.isRed() && (t = t.copy(null, null, null, null, t.right.rotateRight()), t = t.rotateLeft(), t = t.colorFlip()), t;
    }
  }, {
    key: "moveRedRight",
    value: function moveRedRight() {
      var t = this.colorFlip();
      return t.left.left.isRed() && (t = t.rotateRight(), t = t.colorFlip()), t;
    }
  }, {
    key: "rotateLeft",
    value: function rotateLeft() {
      var t = this.copy(null, null, wn.RED, null, this.right.left);
      return this.right.copy(null, null, this.color, t, null);
    }
  }, {
    key: "rotateRight",
    value: function rotateRight() {
      var t = this.copy(null, null, wn.RED, this.left.right, null);
      return this.left.copy(null, null, this.color, null, t);
    }
  }, {
    key: "colorFlip",
    value: function colorFlip() {
      var t = this.left.copy(null, null, !this.left.color, null, null),
          e = this.right.copy(null, null, !this.right.color, null, null);
      return this.copy(null, null, !this.color, t, e);
    } // For testing.

  }, {
    key: "checkMaxDepth",
    value: function checkMaxDepth() {
      var t = this.check();
      return Math.pow(2, t) <= this.size + 1;
    } // In a balanced RB tree, the black-depth (number of black nodes) from root to
    // leaves is equal on both sides.  This function verifies that or asserts.

  }, {
    key: "check",
    value: function check() {
      if (this.isRed() && this.left.isRed()) throw F();
      if (this.right.isRed()) throw F();
      var t = this.left.check();
      if (t !== this.right.check()) throw F();
      return t + (this.isRed() ? 0 : 1);
    }
  }]);

  return wn;
}(); // end LLRBNode
// Empty node is shared between all LLRB trees.
// eslint-disable-next-line @typescript-eslint/no-explicit-any


wn.EMPTY = null, wn.RED = !0, wn.BLACK = !1; // end LLRBEmptyNode

wn.EMPTY = new (
/*#__PURE__*/
// Represents an empty node (a leaf node in the Red-Black Tree).
function () {
  function _class2() {
    _classCallCheck(this, _class2);

    this.size = 0;
  }

  _createClass(_class2, [{
    key: "key",
    get: function get() {
      throw F();
    }
  }, {
    key: "value",
    get: function get() {
      throw F();
    }
  }, {
    key: "color",
    get: function get() {
      throw F();
    }
  }, {
    key: "left",
    get: function get() {
      throw F();
    }
  }, {
    key: "right",
    get: function get() {
      throw F();
    } // Returns a copy of the current node.

  }, {
    key: "copy",
    value: function copy(t, e, n, s, i) {
      return this;
    } // Returns a copy of the tree, with the specified key/value added.

  }, {
    key: "insert",
    value: function insert(t, e, n) {
      return new wn(t, e);
    } // Returns a copy of the tree, with the specified key removed.

  }, {
    key: "remove",
    value: function remove(t, e) {
      return this;
    }
  }, {
    key: "isEmpty",
    value: function isEmpty() {
      return !0;
    }
  }, {
    key: "inorderTraversal",
    value: function inorderTraversal(t) {
      return !1;
    }
  }, {
    key: "reverseTraversal",
    value: function reverseTraversal(t) {
      return !1;
    }
  }, {
    key: "minKey",
    value: function minKey() {
      return null;
    }
  }, {
    key: "maxKey",
    value: function maxKey() {
      return null;
    }
  }, {
    key: "isRed",
    value: function isRed() {
      return !1;
    } // For testing.

  }, {
    key: "checkMaxDepth",
    value: function checkMaxDepth() {
      return !0;
    }
  }, {
    key: "check",
    value: function check() {
      return 0;
    }
  }]);

  return _class2;
}())();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * SortedSet is an immutable (copy-on-write) collection that holds elements
 * in order specified by the provided comparator.
 *
 * NOTE: if provided comparator returns 0 for two elements, we consider them to
 * be equal!
 */

var _n = /*#__PURE__*/function () {
  function _n(t) {
    _classCallCheck(this, _n);

    this.comparator = t, this.data = new fn(this.comparator);
  }

  _createClass(_n, [{
    key: "has",
    value: function has(t) {
      return null !== this.data.get(t);
    }
  }, {
    key: "first",
    value: function first() {
      return this.data.minKey();
    }
  }, {
    key: "last",
    value: function last() {
      return this.data.maxKey();
    }
  }, {
    key: "size",
    get: function get() {
      return this.data.size;
    }
  }, {
    key: "indexOf",
    value: function indexOf(t) {
      return this.data.indexOf(t);
    }
    /** Iterates elements in order defined by "comparator" */

  }, {
    key: "forEach",
    value: function forEach(t) {
      this.data.inorderTraversal(function (e, n) {
        return t(e), !1;
      });
    }
    /** Iterates over `elem`s such that: range[0] &lt;= elem &lt; range[1]. */

  }, {
    key: "forEachInRange",
    value: function forEachInRange(t, e) {
      var n = this.data.getIteratorFrom(t[0]);

      for (; n.hasNext();) {
        var _s12 = n.getNext();

        if (this.comparator(_s12.key, t[1]) >= 0) return;
        e(_s12.key);
      }
    }
    /**
     * Iterates over `elem`s such that: start &lt;= elem until false is returned.
     */

  }, {
    key: "forEachWhile",
    value: function forEachWhile(t, e) {
      var n;

      for (n = void 0 !== e ? this.data.getIteratorFrom(e) : this.data.getIterator(); n.hasNext();) {
        if (!t(n.getNext().key)) return;
      }
    }
    /** Finds the least element greater than or equal to `elem`. */

  }, {
    key: "firstAfterOrEqual",
    value: function firstAfterOrEqual(t) {
      var e = this.data.getIteratorFrom(t);
      return e.hasNext() ? e.getNext().key : null;
    }
  }, {
    key: "getIterator",
    value: function getIterator() {
      return new mn(this.data.getIterator());
    }
  }, {
    key: "getIteratorFrom",
    value: function getIteratorFrom(t) {
      return new mn(this.data.getIteratorFrom(t));
    }
    /** Inserts or updates an element */

  }, {
    key: "add",
    value: function add(t) {
      return this.copy(this.data.remove(t).insert(t, !0));
    }
    /** Deletes an element */

  }, {
    key: "delete",
    value: function _delete(t) {
      return this.has(t) ? this.copy(this.data.remove(t)) : this;
    }
  }, {
    key: "isEmpty",
    value: function isEmpty() {
      return this.data.isEmpty();
    }
  }, {
    key: "unionWith",
    value: function unionWith(t) {
      var e = this; // Make sure `result` always refers to the larger one of the two sets.

      return e.size < t.size && (e = t, t = this), t.forEach(function (t) {
        e = e.add(t);
      }), e;
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      if (!(t instanceof _n)) return !1;
      if (this.size !== t.size) return !1;
      var e = this.data.getIterator(),
          n = t.data.getIterator();

      for (; e.hasNext();) {
        var _t19 = e.getNext().key,
            _s13 = n.getNext().key;
        if (0 !== this.comparator(_t19, _s13)) return !1;
      }

      return !0;
    }
  }, {
    key: "toArray",
    value: function toArray() {
      var t = [];
      return this.forEach(function (e) {
        t.push(e);
      }), t;
    }
  }, {
    key: "toString",
    value: function toString() {
      var t = [];
      return this.forEach(function (e) {
        return t.push(e);
      }), "SortedSet(" + t.toString() + ")";
    }
  }, {
    key: "copy",
    value: function copy(t) {
      var e = new _n(this.comparator);
      return e.data = t, e;
    }
  }]);

  return _n;
}();

var mn = /*#__PURE__*/function () {
  function mn(t) {
    _classCallCheck(this, mn);

    this.iter = t;
  }

  _createClass(mn, [{
    key: "getNext",
    value: function getNext() {
      return this.iter.getNext().key;
    }
  }, {
    key: "hasNext",
    value: function hasNext() {
      return this.iter.hasNext();
    }
  }]);

  return mn;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var gn = new fn(Rt.comparator);

function yn() {
  return gn;
}

var pn = new fn(Rt.comparator);

function En() {
  return pn;
}

var Tn = new fn(Rt.comparator);

function In() {
  return Tn;
}

var An = new _n(Rt.comparator);

function Rn() {
  var e = An;

  for (var _len5 = arguments.length, t = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
    t[_key5] = arguments[_key5];
  }

  for (var _i12 = 0, _t20 = t; _i12 < _t20.length; _i12++) {
    var _n27 = _t20[_i12];
    e = e.add(_n27);
  }

  return e;
}

var bn = new _n(Z);

function Pn() {
  return bn;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An event from the RemoteStore. It is split into targetChanges (changes to the
 * state or the set of documents in our watched targets) and documentUpdates
 * (changes to the actual documents).
 */


var vn = /*#__PURE__*/function () {
  function vn(
  /**
   * The snapshot version this event brings us up to, or MIN if not set.
   */
  t,
  /**
   * A map from target to changes to the target. See TargetChange.
   */
  e,
  /**
   * A set of targets that is known to be inconsistent. Listens for these
   * targets should be re-established without resume tokens.
   */
  n,
  /**
   * A set of which documents have changed or been deleted, along with the
   * doc's new values (if not deleted).
   */
  s,
  /**
   * A set of which document updates are due only to limbo resolution targets.
   */
  i) {
    _classCallCheck(this, vn);

    this.snapshotVersion = t, this.targetChanges = e, this.targetMismatches = n, this.documentUpdates = s, this.resolvedLimboDocuments = i;
  }
  /**
   * HACK: Views require RemoteEvents in order to determine whether the view is
   * CURRENT, but secondary tabs don't receive remote events. So this method is
   * used to create a synthesized RemoteEvent that can be used to apply a
   * CURRENT status change to a View, for queries executed in a different tab.
   */
  // PORTING NOTE: Multi-tab only


  _createClass(vn, null, [{
    key: "createSynthesizedRemoteEventForCurrentChange",
    value: function createSynthesizedRemoteEventForCurrentChange(t, e) {
      var n = new Map();
      return n.set(t, Vn.createSynthesizedTargetChangeForCurrentChange(t, e)), new vn(st.min(), n, Pn(), yn(), Rn());
    }
  }]);

  return vn;
}();
/**
 * A TargetChange specifies the set of changes for a specific target as part of
 * a RemoteEvent. These changes track which documents are added, modified or
 * removed, as well as the target's resume token and whether the target is
 * marked CURRENT.
 * The actual changes *to* documents are not part of the TargetChange since
 * documents may be part of multiple targets.
 */


var Vn = /*#__PURE__*/function () {
  function Vn(
  /**
   * An opaque, server-assigned token that allows watching a query to be resumed
   * after disconnecting without retransmitting all the data that matches the
   * query. The resume token essentially identifies a point in time from which
   * the server should resume sending results.
   */
  t,
  /**
   * The "current" (synced) status of this target. Note that "current"
   * has special meaning in the RPC protocol that implies that a target is
   * both up-to-date and consistent with the rest of the watch stream.
   */
  e,
  /**
   * The set of documents that were newly assigned to this target as part of
   * this remote event.
   */
  n,
  /**
   * The set of documents that were already assigned to this target but received
   * an update during this remote event.
   */
  s,
  /**
   * The set of documents that were removed from this target as part of this
   * remote event.
   */
  i) {
    _classCallCheck(this, Vn);

    this.resumeToken = t, this.current = e, this.addedDocuments = n, this.modifiedDocuments = s, this.removedDocuments = i;
  }
  /**
   * This method is used to create a synthesized TargetChanges that can be used to
   * apply a CURRENT status change to a View (for queries executed in a different
   * tab) or for new queries (to raise snapshots with correct CURRENT status).
   */


  _createClass(Vn, null, [{
    key: "createSynthesizedTargetChangeForCurrentChange",
    value: function createSynthesizedTargetChangeForCurrentChange(t, e) {
      return new Vn(dt.EMPTY_BYTE_STRING, e, Rn(), Rn(), Rn());
    }
  }]);

  return Vn;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Represents a changed document and a list of target ids to which this change
 * applies.
 *
 * If document has been deleted NoDocument will be provided.
 */


var Sn = function Sn(
/** The new document applies to all of these targets. */
t,
/** The new document is removed from all of these targets. */
e,
/** The key of the document for this change. */
n,
/**
 * The new document or NoDocument if it was deleted. Is null if the
 * document went out of view without the server sending a new document.
 */
s) {
  _classCallCheck(this, Sn);

  this.k = t, this.removedTargetIds = e, this.key = n, this.$ = s;
};

var Dn = function Dn(t, e) {
  _classCallCheck(this, Dn);

  this.targetId = t, this.O = e;
};

var Cn = function Cn(
/** What kind of change occurred to the watch target. */
t,
/** The target IDs that were added/removed/set. */
e) {
  var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : dt.EMPTY_BYTE_STRING;
  var s = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

  _classCallCheck(this, Cn);

  this.state = t, this.targetIds = e, this.resumeToken = n, this.cause = s;
};
/** Tracks the internal state of a Watch target. */


var Nn = /*#__PURE__*/function () {
  function Nn() {
    _classCallCheck(this, Nn);

    /**
     * The number of pending responses (adds or removes) that we are waiting on.
     * We only consider targets active that have no pending responses.
     */
    this.F = 0,
    /**
     * Keeps track of the document changes since the last raised snapshot.
     *
     * These changes are continuously updated as we receive document updates and
     * always reflect the current set of changes against the last issued snapshot.
     */
    this.M = $n(),
    /** See public getters for explanations of these fields. */
    this.L = dt.EMPTY_BYTE_STRING, this.B = !1,
    /**
     * Whether this target state should be included in the next snapshot. We
     * initialize to true so that newly-added targets are included in the next
     * RemoteEvent.
     */
    this.U = !0;
  }
  /**
   * Whether this target has been marked 'current'.
   *
   * 'Current' has special meaning in the RPC protocol: It implies that the
   * Watch backend has sent us all changes up to the point at which the target
   * was added and that the target is consistent with the rest of the watch
   * stream.
   */


  _createClass(Nn, [{
    key: "current",
    get: function get() {
      return this.B;
    }
    /** The last resume token sent to us for this target. */

  }, {
    key: "resumeToken",
    get: function get() {
      return this.L;
    }
    /** Whether this target has pending target adds or target removes. */

  }, {
    key: "q",
    get: function get() {
      return 0 !== this.F;
    }
    /** Whether we have modified any state that should trigger a snapshot. */

  }, {
    key: "K",
    get: function get() {
      return this.U;
    }
    /**
     * Applies the resume token to the TargetChange, but only when it has a new
     * value. Empty resumeTokens are discarded.
     */

  }, {
    key: "j",
    value: function j(t) {
      t.approximateByteSize() > 0 && (this.U = !0, this.L = t);
    }
    /**
     * Creates a target change from the current set of changes.
     *
     * To reset the document changes after raising this snapshot, call
     * `clearPendingChanges()`.
     */

  }, {
    key: "W",
    value: function W() {
      var t = Rn(),
          e = Rn(),
          n = Rn();
      return this.M.forEach(function (s, i) {
        switch (i) {
          case 0
          /* Added */
          :
            t = t.add(s);
            break;

          case 2
          /* Modified */
          :
            e = e.add(s);
            break;

          case 1
          /* Removed */
          :
            n = n.add(s);
            break;

          default:
            F();
        }
      }), new Vn(this.L, this.B, t, e, n);
    }
    /**
     * Resets the document changes and sets `hasPendingChanges` to false.
     */

  }, {
    key: "G",
    value: function G() {
      this.U = !1, this.M = $n();
    }
  }, {
    key: "H",
    value: function H(t, e) {
      this.U = !0, this.M = this.M.insert(t, e);
    }
  }, {
    key: "J",
    value: function J(t) {
      this.U = !0, this.M = this.M.remove(t);
    }
  }, {
    key: "Y",
    value: function Y() {
      this.F += 1;
    }
  }, {
    key: "X",
    value: function X() {
      this.F -= 1;
    }
  }, {
    key: "Z",
    value: function Z() {
      this.U = !0, this.B = !0;
    }
  }]);

  return Nn;
}();
/**
 * A helper class to accumulate watch changes into a RemoteEvent.
 */


var xn = /*#__PURE__*/function () {
  function xn(t) {
    _classCallCheck(this, xn);

    this.tt = t,
    /** The internal state of all tracked targets. */
    this.et = new Map(),
    /** Keeps track of the documents to update since the last raised snapshot. */
    this.nt = yn(),
    /** A mapping of document keys to their set of target IDs. */
    this.st = kn(),
    /**
     * A list of targets with existence filter mismatches. These targets are
     * known to be inconsistent and their listens needs to be re-established by
     * RemoteStore.
     */
    this.it = new _n(Z);
  }
  /**
   * Processes and adds the DocumentWatchChange to the current set of changes.
   */


  _createClass(xn, [{
    key: "rt",
    value: function rt(t) {
      var _iterator16 = _createForOfIteratorHelper(t.k),
          _step16;

      try {
        for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
          var _e20 = _step16.value;
          t.$ && t.$.isFoundDocument() ? this.ot(_e20, t.$) : this.at(_e20, t.key, t.$);
        }
      } catch (err) {
        _iterator16.e(err);
      } finally {
        _iterator16.f();
      }

      var _iterator17 = _createForOfIteratorHelper(t.removedTargetIds),
          _step17;

      try {
        for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
          var _e21 = _step17.value;
          this.at(_e21, t.key, t.$);
        }
      } catch (err) {
        _iterator17.e(err);
      } finally {
        _iterator17.f();
      }
    }
    /** Processes and adds the WatchTargetChange to the current set of changes. */

  }, {
    key: "ct",
    value: function ct(t) {
      var _this20 = this;

      this.forEachTarget(t, function (e) {
        var n = _this20.ut(e);

        switch (t.state) {
          case 0
          /* NoChange */
          :
            _this20.ht(e) && n.j(t.resumeToken);
            break;

          case 1
          /* Added */
          :
            // We need to decrement the number of pending acks needed from watch
            // for this targetId.
            n.X(), n.q || // We have a freshly added target, so we need to reset any state
            // that we had previously. This can happen e.g. when remove and add
            // back a target for existence filter mismatches.
            n.G(), n.j(t.resumeToken);
            break;

          case 2
          /* Removed */
          :
            // We need to keep track of removed targets to we can post-filter and
            // remove any target changes.
            // We need to decrement the number of pending acks needed from watch
            // for this targetId.
            n.X(), n.q || _this20.removeTarget(e);
            break;

          case 3
          /* Current */
          :
            _this20.ht(e) && (n.Z(), n.j(t.resumeToken));
            break;

          case 4
          /* Reset */
          :
            _this20.ht(e) && ( // Reset the target and synthesizes removes for all existing
            // documents. The backend will re-add any documents that still
            // match the target before it sends the next global snapshot.
            _this20.lt(e), n.j(t.resumeToken));
            break;

          default:
            F();
        }
      });
    }
    /**
     * Iterates over all targetIds that the watch change applies to: either the
     * targetIds explicitly listed in the change or the targetIds of all currently
     * active targets.
     */

  }, {
    key: "forEachTarget",
    value: function forEachTarget(t, e) {
      var _this21 = this;

      t.targetIds.length > 0 ? t.targetIds.forEach(e) : this.et.forEach(function (t, n) {
        _this21.ht(n) && e(n);
      });
    }
    /**
     * Handles existence filters and synthesizes deletes for filter mismatches.
     * Targets that are invalidated by filter mismatches are added to
     * `pendingTargetResets`.
     */

  }, {
    key: "ft",
    value: function ft(t) {
      var e = t.targetId,
          n = t.O.count,
          s = this.dt(e);

      if (s) {
        var _t21 = s.target;
        if (Gt(_t21)) {
          if (0 === n) {
            // The existence filter told us the document does not exist. We deduce
            // that this document does not exist and apply a deleted document to
            // our updates. Without applying this deleted document there might be
            // another query that will raise this document as part of a snapshot
            // until it is resolved, essentially exposing inconsistency between
            // queries.
            var _n28 = new Rt(_t21.path);

            this.at(e, _n28, Ut.newNoDocument(_n28, st.min()));
          } else M(1 === n);
        } else {
          this.wt(e) !== n && ( // Existence filter mismatch: We reset the mapping and raise a new
          // snapshot with `isFromCache:true`.
          this.lt(e), this.it = this.it.add(e));
        }
      }
    }
    /**
     * Converts the currently accumulated state into a remote event at the
     * provided snapshot version. Resets the accumulated changes before returning.
     */

  }, {
    key: "_t",
    value: function _t(t) {
      var _this22 = this;

      var e = new Map();
      this.et.forEach(function (n, s) {
        var i = _this22.dt(s);

        if (i) {
          if (n.current && Gt(i.target)) {
            // Document queries for document that don't exist can produce an empty
            // result set. To update our local cache, we synthesize a document
            // delete if we have not previously received the document. This
            // resolves the limbo state of the document, removing it from
            // limboDocumentRefs.
            // TODO(dimond): Ideally we would have an explicit lookup target
            // instead resulting in an explicit delete message and we could
            // remove this special logic.
            var _e22 = new Rt(i.target.path);

            null !== _this22.nt.get(_e22) || _this22.gt(s, _e22) || _this22.at(s, _e22, Ut.newNoDocument(_e22, t));
          }

          n.K && (e.set(s, n.W()), n.G());
        }
      });
      var n = Rn(); // We extract the set of limbo-only document updates as the GC logic
      // special-cases documents that do not appear in the target cache.
      // TODO(gsoltis): Expand on this comment once GC is available in the JS
      // client.

      this.st.forEach(function (t, e) {
        var s = !0;
        e.forEachWhile(function (t) {
          var e = _this22.dt(t);

          return !e || 2
          /* LimboResolution */
          === e.purpose || (s = !1, !1);
        }), s && (n = n.add(t));
      });
      var s = new vn(t, e, this.it, this.nt, n);
      return this.nt = yn(), this.st = kn(), this.it = new _n(Z), s;
    }
    /**
     * Adds the provided document to the internal list of document updates and
     * its document key to the given target's mapping.
     */
    // Visible for testing.

  }, {
    key: "ot",
    value: function ot(t, e) {
      if (!this.ht(t)) return;
      var n = this.gt(t, e.key) ? 2
      /* Modified */
      : 0
      /* Added */
      ;
      this.ut(t).H(e.key, n), this.nt = this.nt.insert(e.key, e), this.st = this.st.insert(e.key, this.yt(e.key).add(t));
    }
    /**
     * Removes the provided document from the target mapping. If the
     * document no longer matches the target, but the document's state is still
     * known (e.g. we know that the document was deleted or we received the change
     * that caused the filter mismatch), the new document can be provided
     * to update the remote document cache.
     */
    // Visible for testing.

  }, {
    key: "at",
    value: function at(t, e, n) {
      if (!this.ht(t)) return;
      var s = this.ut(t);
      this.gt(t, e) ? s.H(e, 1
      /* Removed */
      ) : // The document may have entered and left the target before we raised a
      // snapshot, so we can just ignore the change.
      s.J(e), this.st = this.st.insert(e, this.yt(e).delete(t)), n && (this.nt = this.nt.insert(e, n));
    }
  }, {
    key: "removeTarget",
    value: function removeTarget(t) {
      this.et.delete(t);
    }
    /**
     * Returns the current count of documents in the target. This includes both
     * the number of documents that the LocalStore considers to be part of the
     * target as well as any accumulated changes.
     */

  }, {
    key: "wt",
    value: function wt(t) {
      var e = this.ut(t).W();
      return this.tt.getRemoteKeysForTarget(t).size + e.addedDocuments.size - e.removedDocuments.size;
    }
    /**
     * Increment the number of acks needed from watch before we can consider the
     * server to be 'in-sync' with the client's active targets.
     */

  }, {
    key: "Y",
    value: function Y(t) {
      this.ut(t).Y();
    }
  }, {
    key: "ut",
    value: function ut(t) {
      var e = this.et.get(t);
      return e || (e = new Nn(), this.et.set(t, e)), e;
    }
  }, {
    key: "yt",
    value: function yt(t) {
      var e = this.st.get(t);
      return e || (e = new _n(Z), this.st = this.st.insert(t, e)), e;
    }
    /**
     * Verifies that the user is still interested in this target (by calling
     * `getTargetDataForTarget()`) and that we are not waiting for pending ADDs
     * from watch.
     */

  }, {
    key: "ht",
    value: function ht(t) {
      var e = null !== this.dt(t);
      return e || x("WatchChangeAggregator", "Detected inactive target", t), e;
    }
    /**
     * Returns the TargetData for an active target (i.e. a target that the user
     * is still interested in that has no outstanding target change requests).
     */

  }, {
    key: "dt",
    value: function dt(t) {
      var e = this.et.get(t);
      return e && e.q ? null : this.tt.Et(t);
    }
    /**
     * Resets the state of a Watch target to its initial state (e.g. sets
     * 'current' to false, clears the resume token and removes its target mapping
     * from all documents).
     */

  }, {
    key: "lt",
    value: function lt(t) {
      var _this23 = this;

      this.et.set(t, new Nn());
      this.tt.getRemoteKeysForTarget(t).forEach(function (e) {
        _this23.at(t, e,
        /*updatedDocument=*/
        null);
      });
    }
    /**
     * Returns whether the LocalStore considers the document to be part of the
     * specified target.
     */

  }, {
    key: "gt",
    value: function gt(t, e) {
      return this.tt.getRemoteKeysForTarget(t).has(e);
    }
  }]);

  return xn;
}();

function kn() {
  return new fn(Rt.comparator);
}

function $n() {
  return new fn(Rt.comparator);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var On = function () {
  var t = {
    asc: "ASCENDING",
    desc: "DESCENDING"
  };
  return t;
}(),
    Fn = function () {
  var t = {
    "<": "LESS_THAN",
    "<=": "LESS_THAN_OR_EQUAL",
    ">": "GREATER_THAN",
    ">=": "GREATER_THAN_OR_EQUAL",
    "==": "EQUAL",
    "!=": "NOT_EQUAL",
    "array-contains": "ARRAY_CONTAINS",
    in: "IN",
    "not-in": "NOT_IN",
    "array-contains-any": "ARRAY_CONTAINS_ANY"
  };
  return t;
}();
/**
 * This class generates JsonObject values for the Datastore API suitable for
 * sending to either GRPC stub methods or via the JSON/HTTP REST API.
 *
 * The serializer supports both Protobuf.js and Proto3 JSON formats. By
 * setting `useProto3Json` to true, the serializer will use the Proto3 JSON
 * format.
 *
 * For a description of the Proto3 JSON format check
 * https://developers.google.com/protocol-buffers/docs/proto3#json
 *
 * TODO(klimt): We can remove the databaseId argument if we keep the full
 * resource name in documents.
 */


var Mn = function Mn(t, e) {
  _classCallCheck(this, Mn);

  this.databaseId = t, this.D = e;
};
/**
 * Returns a value for a Date that's appropriate to put into a proto.
 */


function Ln(t, e) {
  if (t.D) {
    return "".concat(new Date(1e3 * e.seconds).toISOString().replace(/\.\d*/, "").replace("Z", ""), ".").concat(("000000000" + e.nanoseconds).slice(-9), "Z");
  }

  return {
    seconds: "" + e.seconds,
    nanos: e.nanoseconds
  };
}
/**
 * Returns a value for bytes that's appropriate to put in a proto.
 *
 * Visible for testing.
 */


function Bn(t, e) {
  return t.D ? e.toBase64() : e.toUint8Array();
}
/**
 * Returns a ByteString based on the proto string value.
 */


function Un(t, e) {
  return Ln(t, e.toTimestamp());
}

function qn(t) {
  return M(!!t), st.fromTimestamp(function (t) {
    var e = _t(t);

    return new nt(e.seconds, e.nanos);
  }(t));
}

function Kn(t, e) {
  return function (t) {
    return new ct(["projects", t.projectId, "databases", t.database]);
  }(t).child("documents").child(e).canonicalString();
}

function jn(t) {
  var e = ct.fromString(t);
  return M(ys(e)), e;
}

function Qn(t, e) {
  return Kn(t.databaseId, e.path);
}

function Wn(t, e) {
  var n = jn(e);
  if (n.get(1) !== t.databaseId.projectId) throw new q(U.INVALID_ARGUMENT, "Tried to deserialize key from different project: " + n.get(1) + " vs " + t.databaseId.projectId);
  if (n.get(3) !== t.databaseId.database) throw new q(U.INVALID_ARGUMENT, "Tried to deserialize key from different database: " + n.get(3) + " vs " + t.databaseId.database);
  return new Rt(Jn(n));
}

function Gn(t, e) {
  return Kn(t.databaseId, e);
}

function zn(t) {
  var e = jn(t); // In v1beta1 queries for collections at the root did not have a trailing
  // "/documents". In v1 all resource paths contain "/documents". Preserve the
  // ability to read the v1beta1 form for compatibility with queries persisted
  // in the local target cache.

  return 4 === e.length ? ct.emptyPath() : Jn(e);
}

function Hn(t) {
  return new ct(["projects", t.databaseId.projectId, "databases", t.databaseId.database]).canonicalString();
}

function Jn(t) {
  return M(t.length > 4 && "documents" === t.get(4)), t.popFirst(5);
}
/** Creates a Document proto from key and fields (but no create/update time) */


function Yn(t, e, n) {
  return {
    name: Qn(t, e),
    fields: n.value.mapValue.fields
  };
}

function Xn(t, e, n) {
  var s = Wn(t, e.name),
      i = qn(e.updateTime),
      r = new Lt({
    mapValue: {
      fields: e.fields
    }
  }),
      o = Ut.newFoundDocument(s, i, r);
  return n && o.setHasCommittedMutations(), n ? o.setHasCommittedMutations() : o;
}

function Zn(t, e) {
  return "found" in e ? function (t, e) {
    M(!!e.found), e.found.name, e.found.updateTime;
    var n = Wn(t, e.found.name),
        s = qn(e.found.updateTime),
        i = new Lt({
      mapValue: {
        fields: e.found.fields
      }
    });
    return Ut.newFoundDocument(n, s, i);
  }(t, e) : "missing" in e ? function (t, e) {
    M(!!e.missing), M(!!e.readTime);
    var n = Wn(t, e.missing),
        s = qn(e.readTime);
    return Ut.newNoDocument(n, s);
  }(t, e) : F();
}

function ts(t, e) {
  var n;

  if ("targetChange" in e) {
    e.targetChange; // proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'
    // if unset

    var _s14 = function (t) {
      return "NO_CHANGE" === t ? 0
      /* NoChange */
      : "ADD" === t ? 1
      /* Added */
      : "REMOVE" === t ? 2
      /* Removed */
      : "CURRENT" === t ? 3
      /* Current */
      : "RESET" === t ? 4
      /* Reset */
      : F();
    }(e.targetChange.targetChangeType || "NO_CHANGE"),
        _i13 = e.targetChange.targetIds || [],
        _r5 = function (t, e) {
      return t.D ? (M(void 0 === e || "string" == typeof e), dt.fromBase64String(e || "")) : (M(void 0 === e || e instanceof Uint8Array), dt.fromUint8Array(e || new Uint8Array()));
    }(t, e.targetChange.resumeToken),
        _o5 = e.targetChange.cause,
        _a3 = _o5 && function (t) {
      var e = void 0 === t.code ? U.UNKNOWN : ln(t.code);
      return new q(e, t.message || "");
    }
    /**
    * Returns a value for a number (or null) that's appropriate to put into
    * a google.protobuf.Int32Value proto.
    * DO NOT USE THIS FOR ANYTHING ELSE.
    * This method cheats. It's typed as returning "number" because that's what
    * our generated proto interfaces say Int32Value must be. But GRPC actually
    * expects a { value: <number> } struct.
    */
    (_o5);

    n = new Cn(_s14, _i13, _r5, _a3 || null);
  } else if ("documentChange" in e) {
    e.documentChange;
    var _s15 = e.documentChange;
    _s15.document, _s15.document.name, _s15.document.updateTime;

    var _i14 = Wn(t, _s15.document.name),
        _r6 = qn(_s15.document.updateTime),
        _o6 = new Lt({
      mapValue: {
        fields: _s15.document.fields
      }
    }),
        _a4 = Ut.newFoundDocument(_i14, _r6, _o6),
        _c2 = _s15.targetIds || [],
        _u2 = _s15.removedTargetIds || [];

    n = new Sn(_c2, _u2, _a4.key, _a4);
  } else if ("documentDelete" in e) {
    e.documentDelete;
    var _s16 = e.documentDelete;
    _s16.document;

    var _i15 = Wn(t, _s16.document),
        _r7 = _s16.readTime ? qn(_s16.readTime) : st.min(),
        _o7 = Ut.newNoDocument(_i15, _r7),
        _a5 = _s16.removedTargetIds || [];

    n = new Sn([], _a5, _o7.key, _o7);
  } else if ("documentRemove" in e) {
    e.documentRemove;
    var _s17 = e.documentRemove;
    _s17.document;

    var _i16 = Wn(t, _s17.document),
        _r8 = _s17.removedTargetIds || [];

    n = new Sn([], _r8, _i16, null);
  } else {
    if (!("filter" in e)) return F();
    {
      e.filter;
      var _t22 = e.filter;
      _t22.targetId;

      var _s18 = _t22.count || 0,
          _i17 = new an(_s18),
          _r9 = _t22.targetId;

      n = new Dn(_r9, _i17);
    }
  }

  return n;
}

function es(t, e) {
  var n;
  if (e instanceof Ze) n = {
    update: Yn(t, e.key, e.value)
  };else if (e instanceof rn) n = {
    delete: Qn(t, e.key)
  };else if (e instanceof tn) n = {
    update: Yn(t, e.key, e.data),
    updateMask: gs(e.fieldMask)
  };else {
    if (!(e instanceof on)) return F();
    n = {
      verify: Qn(t, e.key)
    };
  }
  return e.fieldTransforms.length > 0 && (n.updateTransforms = e.fieldTransforms.map(function (t) {
    return function (t, e) {
      var n = e.transform;
      if (n instanceof ke) return {
        fieldPath: e.field.canonicalString(),
        setToServerValue: "REQUEST_TIME"
      };
      if (n instanceof $e) return {
        fieldPath: e.field.canonicalString(),
        appendMissingElements: {
          values: n.elements
        }
      };
      if (n instanceof Fe) return {
        fieldPath: e.field.canonicalString(),
        removeAllFromArray: {
          values: n.elements
        }
      };
      if (n instanceof Le) return {
        fieldPath: e.field.canonicalString(),
        increment: n.C
      };
      throw F();
    }(0, t);
  })), e.precondition.isNone || (n.currentDocument = function (t, e) {
    return void 0 !== e.updateTime ? {
      updateTime: Un(t, e.updateTime)
    } : void 0 !== e.exists ? {
      exists: e.exists
    } : F();
  }(t, e.precondition)), n;
}

function ns(t, e) {
  var n = e.currentDocument ? function (t) {
    return void 0 !== t.updateTime ? Qe.updateTime(qn(t.updateTime)) : void 0 !== t.exists ? Qe.exists(t.exists) : Qe.none();
  }(e.currentDocument) : Qe.none(),
      s = e.updateTransforms ? e.updateTransforms.map(function (e) {
    return function (t, e) {
      var n = null;
      if ("setToServerValue" in e) M("REQUEST_TIME" === e.setToServerValue), n = new ke();else if ("appendMissingElements" in e) {
        var _t23 = e.appendMissingElements.values || [];

        n = new $e(_t23);
      } else if ("removeAllFromArray" in e) {
        var _t24 = e.removeAllFromArray.values || [];

        n = new Fe(_t24);
      } else "increment" in e ? n = new Le(t, e.increment) : F();
      var s = ht.fromServerFormat(e.fieldPath);
      return new qe(s, n);
    }(t, e);
  }) : [];

  if (e.update) {
    e.update.name;

    var _i18 = Wn(t, e.update.name),
        _r10 = new Lt({
      mapValue: {
        fields: e.update.fields
      }
    });

    if (e.updateMask) {
      var _t25 = function (t) {
        var e = t.fieldPaths || [];
        return new lt(e.map(function (t) {
          return ht.fromServerFormat(t);
        }));
      }(e.updateMask);

      return new tn(_i18, _r10, _t25, n, s);
    }

    return new Ze(_i18, _r10, n, s);
  }

  if (e.delete) {
    var _s19 = Wn(t, e.delete);

    return new rn(_s19, n);
  }

  if (e.verify) {
    var _s20 = Wn(t, e.verify);

    return new on(_s20, n);
  }

  return F();
}

function ss(t, e) {
  return t && t.length > 0 ? (M(void 0 !== e), t.map(function (t) {
    return function (t, e) {
      // NOTE: Deletes don't have an updateTime.
      var n = t.updateTime ? qn(t.updateTime) : qn(e);
      return n.isEqual(st.min()) && ( // The Firestore Emulator currently returns an update time of 0 for
      // deletes of non-existing documents (rather than null). This breaks the
      // test "get deleted doc while offline with source=cache" as NoDocuments
      // with version 0 are filtered by IndexedDb's RemoteDocumentCache.
      // TODO(#2149): Remove this when Emulator is fixed
      n = qn(e)), new je(n, t.transformResults || []);
    }(t, e);
  })) : [];
}

function is(t, e) {
  return {
    documents: [Gn(t, e.path)]
  };
}

function rs(t, e) {
  // Dissect the path into parent, collectionId, and optional key filter.
  var n = {
    structuredQuery: {}
  },
      s = e.path;
  null !== e.collectionGroup ? (n.parent = Gn(t, s), n.structuredQuery.from = [{
    collectionId: e.collectionGroup,
    allDescendants: !0
  }]) : (n.parent = Gn(t, s.popLast()), n.structuredQuery.from = [{
    collectionId: s.lastSegment()
  }]);

  var i = function (t) {
    if (0 === t.length) return;
    var e = t.map(function (t) {
      return (// visible for testing
        function (t) {
          if ("=="
          /* EQUAL */
          === t.op) {
            if (Ot(t.value)) return {
              unaryFilter: {
                field: ds(t.field),
                op: "IS_NAN"
              }
            };
            if ($t(t.value)) return {
              unaryFilter: {
                field: ds(t.field),
                op: "IS_NULL"
              }
            };
          } else if ("!="
          /* NOT_EQUAL */
          === t.op) {
            if (Ot(t.value)) return {
              unaryFilter: {
                field: ds(t.field),
                op: "IS_NOT_NAN"
              }
            };
            if ($t(t.value)) return {
              unaryFilter: {
                field: ds(t.field),
                op: "IS_NOT_NULL"
              }
            };
          }

          return {
            fieldFilter: {
              field: ds(t.field),
              op: fs(t.op),
              value: t.value
            }
          };
        }(t)
      );
    });
    if (1 === e.length) return e[0];
    return {
      compositeFilter: {
        op: "AND",
        filters: e
      }
    };
  }(e.filters);

  i && (n.structuredQuery.where = i);

  var r = function (t) {
    if (0 === t.length) return;
    return t.map(function (t) {
      return (// visible for testing
        function (t) {
          return {
            field: ds(t.field),
            direction: ls(t.dir)
          };
        }(t)
      );
    });
  }(e.orderBy);

  r && (n.structuredQuery.orderBy = r);

  var o = function (t, e) {
    return t.D || Tt(e) ? e : {
      value: e
    };
  }
  /**
  * Returns a number (or null) from a google.protobuf.Int32Value proto.
  */
  (t, e.limit);

  return null !== o && (n.structuredQuery.limit = o), e.startAt && (n.structuredQuery.startAt = us(e.startAt)), e.endAt && (n.structuredQuery.endAt = us(e.endAt)), n;
}

function os(t) {
  var e = zn(t.parent);
  var n = t.structuredQuery,
      s = n.from ? n.from.length : 0;
  var i = null;

  if (s > 0) {
    M(1 === s);
    var _t26 = n.from[0];
    _t26.allDescendants ? i = _t26.collectionId : e = e.child(_t26.collectionId);
  }

  var r = [];
  n.where && (r = cs(n.where));
  var o = [];
  n.orderBy && (o = n.orderBy.map(function (t) {
    return function (t) {
      return new oe(ws(t.field), // visible for testing
      function (t) {
        switch (t) {
          case "ASCENDING":
            return "asc"
            /* ASCENDING */
            ;

          case "DESCENDING":
            return "desc"
            /* DESCENDING */
            ;

          default:
            return;
        }
      } // visible for testing
      (t.direction));
    }(t);
  }));
  var a = null;
  n.limit && (a = function (t) {
    var e;
    return e = "object" == _typeof(t) ? t.value : t, Tt(e) ? null : e;
  }(n.limit));
  var c = null;
  n.startAt && (c = hs(n.startAt));
  var u = null;
  return n.endAt && (u = hs(n.endAt)), le(e, i, o, r, a, "F"
  /* First */
  , c, u);
}

function as(t, e) {
  var n = function (t, e) {
    switch (e) {
      case 0
      /* Listen */
      :
        return null;

      case 1
      /* ExistenceFilterMismatch */
      :
        return "existence-filter-mismatch";

      case 2
      /* LimboResolution */
      :
        return "limbo-document";

      default:
        return F();
    }
  }(0, e.purpose);

  return null == n ? null : {
    "goog-listen-tags": n
  };
}

function cs(t) {
  return t ? void 0 !== t.unaryFilter ? [ms(t)] : void 0 !== t.fieldFilter ? [_s(t)] : void 0 !== t.compositeFilter ? t.compositeFilter.filters.map(function (t) {
    return cs(t);
  }).reduce(function (t, e) {
    return t.concat(e);
  }) : F() : [];
}

function us(t) {
  return {
    before: t.before,
    values: t.position
  };
}

function hs(t) {
  var e = !!t.before,
      n = t.values || [];
  return new ie(n, e);
} // visible for testing


function ls(t) {
  return On[t];
}

function fs(t) {
  return Fn[t];
}

function ds(t) {
  return {
    fieldPath: t.canonicalString()
  };
}

function ws(t) {
  return ht.fromServerFormat(t.fieldPath);
}

function _s(t) {
  return zt.create(ws(t.fieldFilter.field), function (t) {
    switch (t) {
      case "EQUAL":
        return "=="
        /* EQUAL */
        ;

      case "NOT_EQUAL":
        return "!="
        /* NOT_EQUAL */
        ;

      case "GREATER_THAN":
        return ">"
        /* GREATER_THAN */
        ;

      case "GREATER_THAN_OR_EQUAL":
        return ">="
        /* GREATER_THAN_OR_EQUAL */
        ;

      case "LESS_THAN":
        return "<"
        /* LESS_THAN */
        ;

      case "LESS_THAN_OR_EQUAL":
        return "<="
        /* LESS_THAN_OR_EQUAL */
        ;

      case "ARRAY_CONTAINS":
        return "array-contains"
        /* ARRAY_CONTAINS */
        ;

      case "IN":
        return "in"
        /* IN */
        ;

      case "NOT_IN":
        return "not-in"
        /* NOT_IN */
        ;

      case "ARRAY_CONTAINS_ANY":
        return "array-contains-any"
        /* ARRAY_CONTAINS_ANY */
        ;

      case "OPERATOR_UNSPECIFIED":
      default:
        return F();
    }
  }(t.fieldFilter.op), t.fieldFilter.value);
}

function ms(t) {
  switch (t.unaryFilter.op) {
    case "IS_NAN":
      var _e23 = ws(t.unaryFilter.field);

      return zt.create(_e23, "=="
      /* EQUAL */
      , {
        doubleValue: NaN
      });

    case "IS_NULL":
      var _n29 = ws(t.unaryFilter.field);

      return zt.create(_n29, "=="
      /* EQUAL */
      , {
        nullValue: "NULL_VALUE"
      });

    case "IS_NOT_NAN":
      var _s21 = ws(t.unaryFilter.field);

      return zt.create(_s21, "!="
      /* NOT_EQUAL */
      , {
        doubleValue: NaN
      });

    case "IS_NOT_NULL":
      var _i19 = ws(t.unaryFilter.field);

      return zt.create(_i19, "!="
      /* NOT_EQUAL */
      , {
        nullValue: "NULL_VALUE"
      });

    case "OPERATOR_UNSPECIFIED":
    default:
      return F();
  }
}

function gs(t) {
  var e = [];
  return t.fields.forEach(function (t) {
    return e.push(t.canonicalString());
  }), {
    fieldPaths: e
  };
}

function ys(t) {
  // Resource names have at least 4 components (project ID, database ID)
  return t.length >= 4 && "projects" === t.get(0) && "databases" === t.get(2);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Encodes a resource path into a IndexedDb-compatible string form.
 */


function ps(t) {
  var e = "";

  for (var _n30 = 0; _n30 < t.length; _n30++) {
    e.length > 0 && (e = Ts(e)), e = Es(t.get(_n30), e);
  }

  return Ts(e);
}
/** Encodes a single segment of a resource path into the given result */


function Es(t, e) {
  var n = e;
  var s = t.length;

  for (var _e24 = 0; _e24 < s; _e24++) {
    var _s22 = t.charAt(_e24);

    switch (_s22) {
      case "\0":
        n += "";
        break;

      case "":
        n += "";
        break;

      default:
        n += _s22;
    }
  }

  return n;
}
/** Encodes a path separator into the given result */


function Ts(t) {
  return t + "";
}
/**
 * Decodes the given IndexedDb-compatible string form of a resource path into
 * a ResourcePath instance. Note that this method is not suitable for use with
 * decoding resource names from the server; those are One Platform format
 * strings.
 */


function Is(t) {
  // Event the empty path must encode as a path of at least length 2. A path
  // with exactly 2 must be the empty path.
  var e = t.length;
  if (M(e >= 2), 2 === e) return M("" === t.charAt(0) && "" === t.charAt(1)), ct.emptyPath(); // Escape characters cannot exist past the second-to-last position in the
  // source value.

  var n = e - 2,
      s = [];
  var i = "";

  for (var _r11 = 0; _r11 < e;) {
    // The last two characters of a valid encoded path must be a separator, so
    // there must be an end to this segment.
    var _e25 = t.indexOf("", _r11);

    (_e25 < 0 || _e25 > n) && F();

    switch (t.charAt(_e25 + 1)) {
      case "":
        var _n31 = t.substring(_r11, _e25);

        var _o8 = void 0;

        0 === i.length ? // Avoid copying for the common case of a segment that excludes \0
        // and \001
        _o8 = _n31 : (i += _n31, _o8 = i, i = ""), s.push(_o8);
        break;

      case "":
        i += t.substring(_r11, _e25), i += "\0";
        break;

      case "":
        // The escape character can be used in the output to encode itself.
        i += t.substring(_r11, _e25 + 1);
        break;

      default:
        F();
    }

    _r11 = _e25 + 2;
  }

  return new ct(s);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Schema Version for the Web client:
 * 1.  Initial version including Mutation Queue, Query Cache, and Remote
 *     Document Cache
 * 2.  Used to ensure a targetGlobal object exists and add targetCount to it. No
 *     longer required because migration 3 unconditionally clears it.
 * 3.  Dropped and re-created Query Cache to deal with cache corruption related
 *     to limbo resolution. Addresses
 *     https://github.com/firebase/firebase-ios-sdk/issues/1548
 * 4.  Multi-Tab Support.
 * 5.  Removal of held write acks.
 * 6.  Create document global for tracking document cache size.
 * 7.  Ensure every cached document has a sentinel row with a sequence number.
 * 8.  Add collection-parent index for Collection Group queries.
 * 9.  Change RemoteDocumentChanges store to be keyed by readTime rather than
 *     an auto-incrementing ID. This is required for Index-Free queries.
 * 10. Rewrite the canonical IDs to the explicit Protobuf-based format.
 * 11. Add bundles and named_queries for bundle support.
 */

/**
 * Wrapper class to store timestamps (seconds and nanos) in IndexedDb objects.
 */


var As = function As(t, e) {
  _classCallCheck(this, As);

  this.seconds = t, this.nanoseconds = e;
};
/**
 * A singleton object to be stored in the 'owner' store in IndexedDb.
 *
 * A given database can have a single primary tab assigned at a given time. That
 * tab must validate that it is still holding the primary lease before every
 * operation that requires locked access. The primary tab should regularly
 * write an updated timestamp to this lease to prevent other tabs from
 * "stealing" the primary lease
 */


var Rs = function Rs(t,
/** Whether to allow shared access from multiple tabs. */
e, n) {
  _classCallCheck(this, Rs);

  this.ownerId = t, this.allowTabSynchronization = e, this.leaseTimestampMs = n;
};
/**
 * Name of the IndexedDb object store.
 *
 * Note that the name 'owner' is chosen to ensure backwards compatibility with
 * older clients that only supported single locked access to the persistence
 * layer.
 */


Rs.store = "owner",
/**
 * The key string used for the single object that exists in the
 * DbPrimaryClient store.
 */
Rs.key = "owner";
/**
 * An object to be stored in the 'mutationQueues' store in IndexedDb.
 *
 * Each user gets a single queue of MutationBatches to apply to the server.
 * DbMutationQueue tracks the metadata about the queue.
 */

var bs = function bs(
/**
 * The normalized user ID to which this queue belongs.
 */
t,
/**
 * An identifier for the highest numbered batch that has been acknowledged
 * by the server. All MutationBatches in this queue with batchIds less
 * than or equal to this value are considered to have been acknowledged by
 * the server.
 *
 * NOTE: this is deprecated and no longer used by the code.
 */
e,
/**
 * A stream token that was previously sent by the server.
 *
 * See StreamingWriteRequest in datastore.proto for more details about
 * usage.
 *
 * After sending this token, earlier tokens may not be used anymore so
 * only a single stream token is retained.
 *
 * NOTE: this is deprecated and no longer used by the code.
 */
n) {
  _classCallCheck(this, bs);

  this.userId = t, this.lastAcknowledgedBatchId = e, this.lastStreamToken = n;
};
/** Name of the IndexedDb object store.  */


bs.store = "mutationQueues",
/** Keys are automatically assigned via the userId property. */
bs.keyPath = "userId";
/**
 * An object to be stored in the 'mutations' store in IndexedDb.
 *
 * Represents a batch of user-level mutations intended to be sent to the server
 * in a single write. Each user-level batch gets a separate DbMutationBatch
 * with a new batchId.
 */

var Ps = function Ps(
/**
 * The normalized user ID to which this batch belongs.
 */
t,
/**
 * An identifier for this batch, allocated using an auto-generated key.
 */
e,
/**
 * The local write time of the batch, stored as milliseconds since the
 * epoch.
 */
n,
/**
 * A list of "mutations" that represent a partial base state from when this
 * write batch was initially created. During local application of the write
 * batch, these baseMutations are applied prior to the real writes in order
 * to override certain document fields from the remote document cache. This
 * is necessary in the case of non-idempotent writes (e.g. `increment()`
 * transforms) to make sure that the local view of the modified documents
 * doesn't flicker if the remote document cache receives the result of the
 * non-idempotent write before the write is removed from the queue.
 *
 * These mutations are never sent to the backend.
 */
s,
/**
 * A list of mutations to apply. All mutations will be applied atomically.
 *
 * Mutations are serialized via toMutation().
 */
i) {
  _classCallCheck(this, Ps);

  this.userId = t, this.batchId = e, this.localWriteTimeMs = n, this.baseMutations = s, this.mutations = i;
};
/** Name of the IndexedDb object store.  */


Ps.store = "mutations",
/** Keys are automatically assigned via the userId, batchId properties. */
Ps.keyPath = "batchId",
/** The index name for lookup of mutations by user. */
Ps.userMutationsIndex = "userMutationsIndex",
/** The user mutations index is keyed by [userId, batchId] pairs. */
Ps.userMutationsKeyPath = ["userId", "batchId"];
/**
 * An object to be stored in the 'documentMutations' store in IndexedDb.
 *
 * A manually maintained index of all the mutation batches that affect a given
 * document key. The rows in this table are references based on the contents of
 * DbMutationBatch.mutations.
 */

var vs = /*#__PURE__*/function () {
  function vs() {
    _classCallCheck(this, vs);
  }
  /**
   * Creates a [userId] key for use in the DbDocumentMutations index to iterate
   * over all of a user's document mutations.
   */


  _createClass(vs, null, [{
    key: "prefixForUser",
    value: function prefixForUser(t) {
      return [t];
    }
    /**
     * Creates a [userId, encodedPath] key for use in the DbDocumentMutations
     * index to iterate over all at document mutations for a given path or lower.
     */

  }, {
    key: "prefixForPath",
    value: function prefixForPath(t, e) {
      return [t, ps(e)];
    }
    /**
     * Creates a full index key of [userId, encodedPath, batchId] for inserting
     * and deleting into the DbDocumentMutations index.
     */

  }, {
    key: "key",
    value: function key(t, e, n) {
      return [t, ps(e), n];
    }
  }]);

  return vs;
}();

vs.store = "documentMutations",
/**
 * Because we store all the useful information for this store in the key,
 * there is no useful information to store as the value. The raw (unencoded)
 * path cannot be stored because IndexedDb doesn't store prototype
 * information.
 */
vs.PLACEHOLDER = new vs();
/**
 * Represents the known absence of a document at a particular version.
 * Stored in IndexedDb as part of a DbRemoteDocument object.
 */

var Vs = function Vs(t, e) {
  _classCallCheck(this, Vs);

  this.path = t, this.readTime = e;
};
/**
 * Represents a document that is known to exist but whose data is unknown.
 * Stored in IndexedDb as part of a DbRemoteDocument object.
 */


var Ss = function Ss(t, e) {
  _classCallCheck(this, Ss);

  this.path = t, this.version = e;
};
/**
 * An object to be stored in the 'remoteDocuments' store in IndexedDb.
 * It represents either:
 *
 * - A complete document.
 * - A "no document" representing a document that is known not to exist (at
 * some version).
 * - An "unknown document" representing a document that is known to exist (at
 * some version) but whose contents are unknown.
 *
 * Note: This is the persisted equivalent of a MaybeDocument and could perhaps
 * be made more general if necessary.
 */


var Ds = // TODO: We are currently storing full document keys almost three times
// (once as part of the primary key, once - partly - as `parentPath` and once
// inside the encoded documents). During our next migration, we should
// rewrite the primary key as parentPath + document ID which would allow us
// to drop one value.
function Ds(
/**
 * Set to an instance of DbUnknownDocument if the data for a document is
 * not known, but it is known that a document exists at the specified
 * version (e.g. it had a successful update applied to it)
 */
t,
/**
 * Set to an instance of a DbNoDocument if it is known that no document
 * exists.
 */
e,
/**
 * Set to an instance of a Document if there's a cached version of the
 * document.
 */
n,
/**
 * Documents that were written to the remote document store based on
 * a write acknowledgment are marked with `hasCommittedMutations`. These
 * documents are potentially inconsistent with the backend's copy and use
 * the write's commit version as their document version.
 */
s,
/**
 * When the document was read from the backend. Undefined for data written
 * prior to schema version 9.
 */
i,
/**
 * The path of the collection this document is part of. Undefined for data
 * written prior to schema version 9.
 */
r) {
  _classCallCheck(this, Ds);

  this.unknownDocument = t, this.noDocument = e, this.document = n, this.hasCommittedMutations = s, this.readTime = i, this.parentPath = r;
};

Ds.store = "remoteDocuments",
/**
 * An index that provides access to all entries sorted by read time (which
 * corresponds to the last modification time of each row).
 *
 * This index is used to provide a changelog for Multi-Tab.
 */
Ds.readTimeIndex = "readTimeIndex", Ds.readTimeIndexPath = "readTime",
/**
 * An index that provides access to documents in a collection sorted by read
 * time.
 *
 * This index is used to allow the RemoteDocumentCache to fetch newly changed
 * documents in a collection.
 */
Ds.collectionReadTimeIndex = "collectionReadTimeIndex", Ds.collectionReadTimeIndexPath = ["parentPath", "readTime"];
/**
 * Contains a single entry that has metadata about the remote document cache.
 */

var Cs =
/**
 * @param byteSize - Approximately the total size in bytes of all the
 * documents in the document cache.
 */
function Cs(t) {
  _classCallCheck(this, Cs);

  this.byteSize = t;
};

Cs.store = "remoteDocumentGlobal", Cs.key = "remoteDocumentGlobalKey";
/**
 * An object to be stored in the 'targets' store in IndexedDb.
 *
 * This is based on and should be kept in sync with the proto used in the iOS
 * client.
 *
 * Each query the client listens to against the server is tracked on disk so
 * that the query can be efficiently resumed on restart.
 */

var Ns = function Ns(
/**
 * An auto-generated sequential numeric identifier for the query.
 *
 * Queries are stored using their canonicalId as the key, but these
 * canonicalIds can be quite long so we additionally assign a unique
 * queryId which can be used by referenced data structures (e.g.
 * indexes) to minimize the on-disk cost.
 */
t,
/**
 * The canonical string representing this query. This is not unique.
 */
e,
/**
 * The last readTime received from the Watch Service for this query.
 *
 * This is the same value as TargetChange.read_time in the protos.
 */
n,
/**
 * An opaque, server-assigned token that allows watching a query to be
 * resumed after disconnecting without retransmitting all the data
 * that matches the query. The resume token essentially identifies a
 * point in time from which the server should resume sending results.
 *
 * This is related to the snapshotVersion in that the resumeToken
 * effectively also encodes that value, but the resumeToken is opaque
 * and sometimes encodes additional information.
 *
 * A consequence of this is that the resumeToken should be used when
 * asking the server to reason about where this client is in the watch
 * stream, but the client should use the snapshotVersion for its own
 * purposes.
 *
 * This is the same value as TargetChange.resume_token in the protos.
 */
s,
/**
 * A sequence number representing the last time this query was
 * listened to, used for garbage collection purposes.
 *
 * Conventionally this would be a timestamp value, but device-local
 * clocks are unreliable and they must be able to create new listens
 * even while disconnected. Instead this should be a monotonically
 * increasing number that's incremented on each listen call.
 *
 * This is different from the queryId since the queryId is an
 * immutable identifier assigned to the Query on first use while
 * lastListenSequenceNumber is updated every time the query is
 * listened to.
 */
i,
/**
 * Denotes the maximum snapshot version at which the associated query view
 * contained no limbo documents.  Undefined for data written prior to
 * schema version 9.
 */
r,
/**
 * The query for this target.
 *
 * Because canonical ids are not unique we must store the actual query. We
 * use the proto to have an object we can persist without having to
 * duplicate translation logic to and from a `Query` object.
 */
o) {
  _classCallCheck(this, Ns);

  this.targetId = t, this.canonicalId = e, this.readTime = n, this.resumeToken = s, this.lastListenSequenceNumber = i, this.lastLimboFreeSnapshotVersion = r, this.query = o;
};

Ns.store = "targets",
/** Keys are automatically assigned via the targetId property. */
Ns.keyPath = "targetId",
/** The name of the queryTargets index. */
Ns.queryTargetsIndexName = "queryTargetsIndex",
/**
 * The index of all canonicalIds to the targets that they match. This is not
 * a unique mapping because canonicalId does not promise a unique name for all
 * possible queries, so we append the targetId to make the mapping unique.
 */
Ns.queryTargetsKeyPath = ["canonicalId", "targetId"];
/**
 * An object representing an association between a target and a document, or a
 * sentinel row marking the last sequence number at which a document was used.
 * Each document cached must have a corresponding sentinel row before lru
 * garbage collection is enabled.
 *
 * The target associations and sentinel rows are co-located so that orphaned
 * documents and their sequence numbers can be identified efficiently via a scan
 * of this store.
 */

var xs = function xs(
/**
 * The targetId identifying a target or 0 for a sentinel row.
 */
t,
/**
 * The path to the document, as encoded in the key.
 */
e,
/**
 * If this is a sentinel row, this should be the sequence number of the last
 * time the document specified by `path` was used. Otherwise, it should be
 * `undefined`.
 */
n) {
  _classCallCheck(this, xs);

  this.targetId = t, this.path = e, this.sequenceNumber = n;
};
/** Name of the IndexedDb object store.  */


xs.store = "targetDocuments",
/** Keys are automatically assigned via the targetId, path properties. */
xs.keyPath = ["targetId", "path"],
/** The index name for the reverse index. */
xs.documentTargetsIndex = "documentTargetsIndex",
/** We also need to create the reverse index for these properties. */
xs.documentTargetsKeyPath = ["path", "targetId"];
/**
 * A record of global state tracked across all Targets, tracked separately
 * to avoid the need for extra indexes.
 *
 * This should be kept in-sync with the proto used in the iOS client.
 */

var ks = function ks(
/**
 * The highest numbered target id across all targets.
 *
 * See DbTarget.targetId.
 */
t,
/**
 * The highest numbered lastListenSequenceNumber across all targets.
 *
 * See DbTarget.lastListenSequenceNumber.
 */
e,
/**
 * A global snapshot version representing the last consistent snapshot we
 * received from the backend. This is monotonically increasing and any
 * snapshots received from the backend prior to this version (e.g. for
 * targets resumed with a resumeToken) should be suppressed (buffered)
 * until the backend has caught up to this snapshot version again. This
 * prevents our cache from ever going backwards in time.
 */
n,
/**
 * The number of targets persisted.
 */
s) {
  _classCallCheck(this, ks);

  this.highestTargetId = t, this.highestListenSequenceNumber = e, this.lastRemoteSnapshotVersion = n, this.targetCount = s;
};
/**
 * The key string used for the single object that exists in the
 * DbTargetGlobal store.
 */


ks.key = "targetGlobalKey", ks.store = "targetGlobal";
/**
 * An object representing an association between a Collection id (e.g. 'messages')
 * to a parent path (e.g. '/chats/123') that contains it as a (sub)collection.
 * This is used to efficiently find all collections to query when performing
 * a Collection Group query.
 */

var $s = function $s(
/**
 * The collectionId (e.g. 'messages')
 */
t,
/**
 * The path to the parent (either a document location or an empty path for
 * a root-level collection).
 */
e) {
  _classCallCheck(this, $s);

  this.collectionId = t, this.parent = e;
};
/** Name of the IndexedDb object store. */


$s.store = "collectionParents",
/** Keys are automatically assigned via the collectionId, parent properties. */
$s.keyPath = ["collectionId", "parent"];
/**
 * A record of the metadata state of each client.
 *
 * PORTING NOTE: This is used to synchronize multi-tab state and does not need
 * to be ported to iOS or Android.
 */

var Os = function Os( // Note: Previous schema versions included a field
// "lastProcessedDocumentChangeId". Don't use anymore.

/** The auto-generated client id assigned at client startup. */
t,
/** The last time this state was updated. */
e,
/** Whether the client's network connection is enabled. */
n,
/** Whether this client is running in a foreground tab. */
s) {
  _classCallCheck(this, Os);

  this.clientId = t, this.updateTimeMs = e, this.networkEnabled = n, this.inForeground = s;
};
/** Name of the IndexedDb object store. */


Os.store = "clientMetadata",
/** Keys are automatically assigned via the clientId properties. */
Os.keyPath = "clientId";
/**
 * A object representing a bundle loaded by the SDK.
 */

var Fs = function Fs(
/** The ID of the loaded bundle. */
t,
/** The create time of the loaded bundle. */
e,
/** The schema version of the loaded bundle. */
n) {
  _classCallCheck(this, Fs);

  this.bundleId = t, this.createTime = e, this.version = n;
};
/** Name of the IndexedDb object store. */


Fs.store = "bundles", Fs.keyPath = "bundleId";
/**
 * A object representing a named query loaded by the SDK via a bundle.
 */

var Ms = function Ms(
/** The name of the query. */
t,
/** The read time of the results saved in the bundle from the named query. */
e,
/** The query saved in the bundle. */
n) {
  _classCallCheck(this, Ms);

  this.name = t, this.readTime = e, this.bundledQuery = n;
};
/** Name of the IndexedDb object store. */


Ms.store = "namedQueries", Ms.keyPath = "name"; // Visible for testing

var Ls = [bs.store, Ps.store, vs.store, Ds.store, Ns.store, Rs.store, ks.store, xs.store].concat([Os.store]).concat([Cs.store]).concat([$s.store]).concat([Fs.store, Ms.store]),
    Bs = "The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab."; // V2 is no longer usable (see comment at top of file)
// Visible for testing

/**
 * A base class representing a persistence transaction, encapsulating both the
 * transaction's sequence numbers as well as a list of onCommitted listeners.
 *
 * When you call Persistence.runTransaction(), it will create a transaction and
 * pass it to your callback. You then pass it to any method that operates
 * on persistence.
 */

var Us = /*#__PURE__*/function () {
  function Us() {
    _classCallCheck(this, Us);

    this.onCommittedListeners = [];
  }

  _createClass(Us, [{
    key: "addOnCommittedListener",
    value: function addOnCommittedListener(t) {
      this.onCommittedListeners.push(t);
    }
  }, {
    key: "raiseOnCommittedEvent",
    value: function raiseOnCommittedEvent() {
      this.onCommittedListeners.forEach(function (t) {
        return t();
      });
    }
  }]);

  return Us;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * PersistencePromise is essentially a re-implementation of Promise except
 * it has a .next() method instead of .then() and .next() and .catch() callbacks
 * are executed synchronously when a PersistencePromise resolves rather than
 * asynchronously (Promise implementations use setImmediate() or similar).
 *
 * This is necessary to interoperate with IndexedDB which will automatically
 * commit transactions if control is returned to the event loop without
 * synchronously initiating another operation on the transaction.
 *
 * NOTE: .then() and .catch() only allow a single consumer, unlike normal
 * Promises.
 */


var qs = /*#__PURE__*/function () {
  function qs(t) {
    var _this24 = this;

    _classCallCheck(this, qs);

    // NOTE: next/catchCallback will always point to our own wrapper functions,
    // not the user's raw next() or catch() callbacks.
    this.nextCallback = null, this.catchCallback = null, // When the operation resolves, we'll set result or error and mark isDone.
    this.result = void 0, this.error = void 0, this.isDone = !1, // Set to true when .then() or .catch() are called and prevents additional
    // chaining.
    this.callbackAttached = !1, t(function (t) {
      _this24.isDone = !0, _this24.result = t, _this24.nextCallback && // value should be defined unless T is Void, but we can't express
      // that in the type system.
      _this24.nextCallback(t);
    }, function (t) {
      _this24.isDone = !0, _this24.error = t, _this24.catchCallback && _this24.catchCallback(t);
    });
  }

  _createClass(qs, [{
    key: "catch",
    value: function _catch(t) {
      return this.next(void 0, t);
    }
  }, {
    key: "next",
    value: function next(t, e) {
      var _this25 = this;

      return this.callbackAttached && F(), this.callbackAttached = !0, this.isDone ? this.error ? this.wrapFailure(e, this.error) : this.wrapSuccess(t, this.result) : new qs(function (n, s) {
        _this25.nextCallback = function (e) {
          _this25.wrapSuccess(t, e).next(n, s);
        }, _this25.catchCallback = function (t) {
          _this25.wrapFailure(e, t).next(n, s);
        };
      });
    }
  }, {
    key: "toPromise",
    value: function toPromise() {
      var _this26 = this;

      return new Promise(function (t, e) {
        _this26.next(t, e);
      });
    }
  }, {
    key: "wrapUserFunction",
    value: function wrapUserFunction(t) {
      try {
        var _e26 = t();

        return _e26 instanceof qs ? _e26 : qs.resolve(_e26);
      } catch (t) {
        return qs.reject(t);
      }
    }
  }, {
    key: "wrapSuccess",
    value: function wrapSuccess(t, e) {
      return t ? this.wrapUserFunction(function () {
        return t(e);
      }) : qs.resolve(e);
    }
  }, {
    key: "wrapFailure",
    value: function wrapFailure(t, e) {
      return t ? this.wrapUserFunction(function () {
        return t(e);
      }) : qs.reject(e);
    }
  }], [{
    key: "resolve",
    value: function resolve(t) {
      return new qs(function (e, n) {
        e(t);
      });
    }
  }, {
    key: "reject",
    value: function reject(t) {
      return new qs(function (e, n) {
        n(t);
      });
    }
  }, {
    key: "waitFor",
    value: function waitFor( // Accept all Promise types in waitFor().
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    t) {
      return new qs(function (e, n) {
        var s = 0,
            i = 0,
            r = !1;
        t.forEach(function (t) {
          ++s, t.next(function () {
            ++i, r && i === s && e();
          }, function (t) {
            return n(t);
          });
        }), r = !0, i === s && e();
      });
    }
    /**
     * Given an array of predicate functions that asynchronously evaluate to a
     * boolean, implements a short-circuiting `or` between the results. Predicates
     * will be evaluated until one of them returns `true`, then stop. The final
     * result will be whether any of them returned `true`.
     */

  }, {
    key: "or",
    value: function or(t) {
      var e = qs.resolve(!1);

      var _iterator18 = _createForOfIteratorHelper(t),
          _step18;

      try {
        var _loop3 = function _loop3() {
          var n = _step18.value;
          e = e.next(function (t) {
            return t ? qs.resolve(t) : n();
          });
        };

        for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
          _loop3();
        }
      } catch (err) {
        _iterator18.e(err);
      } finally {
        _iterator18.f();
      }

      return e;
    }
  }, {
    key: "forEach",
    value: function forEach(t, e) {
      var _this27 = this;

      var n = [];
      return t.forEach(function (t, s) {
        n.push(e.call(_this27, t, s));
      }), this.waitFor(n);
    }
  }]);

  return qs;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// References to `window` are guarded by SimpleDb.isAvailable()

/* eslint-disable no-restricted-globals */

/**
 * Wraps an IDBTransaction and exposes a store() method to get a handle to a
 * specific object store.
 */


var Ks = /*#__PURE__*/function () {
  function Ks(t, e) {
    var _this28 = this;

    _classCallCheck(this, Ks);

    this.action = t, this.transaction = e, this.aborted = !1,
    /**
     * A `Promise` that resolves with the result of the IndexedDb transaction.
     */
    this.Tt = new K(), this.transaction.oncomplete = function () {
      _this28.Tt.resolve();
    }, this.transaction.onabort = function () {
      e.error ? _this28.Tt.reject(new Ws(t, e.error)) : _this28.Tt.resolve();
    }, this.transaction.onerror = function (e) {
      var n = Ys(e.target.error);

      _this28.Tt.reject(new Ws(t, n));
    };
  }

  _createClass(Ks, [{
    key: "It",
    get: function get() {
      return this.Tt.promise;
    }
  }, {
    key: "abort",
    value: function abort(t) {
      t && this.Tt.reject(t), this.aborted || (x("SimpleDb", "Aborting transaction:", t ? t.message : "Client-initiated abort"), this.aborted = !0, this.transaction.abort());
    }
    /**
     * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All
     * operations performed on the SimpleDbStore happen within the context of this
     * transaction and it cannot be used anymore once the transaction is
     * completed.
     *
     * Note that we can't actually enforce that the KeyType and ValueType are
     * correct, but they allow type safety through the rest of the consuming code.
     */

  }, {
    key: "store",
    value: function store(t) {
      var e = this.transaction.objectStore(t);
      return new zs(e);
    }
  }], [{
    key: "open",
    value: function open(t, e, n, s) {
      try {
        return new Ks(e, t.transaction(s, n));
      } catch (t) {
        throw new Ws(e, t);
      }
    }
  }]);

  return Ks;
}();
/**
 * Provides a wrapper around IndexedDb with a simplified interface that uses
 * Promise-like return values to chain operations. Real promises cannot be used
 * since .then() continuations are executed asynchronously (e.g. via
 * .setImmediate), which would cause IndexedDB to end the transaction.
 * See PersistencePromise for more details.
 */


var js = /*#__PURE__*/function () {
  /*
   * Creates a new SimpleDb wrapper for IndexedDb database `name`.
   *
   * Note that `version` must not be a downgrade. IndexedDB does not support
   * downgrading the schema version. We currently do not support any way to do
   * versioning outside of IndexedDB's versioning mechanism, as only
   * version-upgrade transactions are allowed to do things like create
   * objectstores.
   */
  function js(t, e, n) {
    _classCallCheck(this, js);

    this.name = t, this.version = e, this.At = n; // NOTE: According to https://bugs.webkit.org/show_bug.cgi?id=197050, the
    // bug we're checking for should exist in iOS >= 12.2 and < 13, but for
    // whatever reason it's much harder to hit after 12.2 so we only proactively
    // log on 12.2.

    12.2 === js.Rt((0, _util.getUA)()) && k("Firestore persistence suffers from a bug in iOS 12.2 Safari that may cause your app to stop working. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");
  }
  /** Deletes the specified database. */


  _createClass(js, [{
    key: "Dt",
    value:
    /**
     * Opens the specified database, creating or upgrading it if necessary.
     */
    function () {
      var _Dt = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(t) {
        var _this29 = this;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.t0 = this.db;

                if (_context2.t0) {
                  _context2.next = 6;
                  break;
                }

                x("SimpleDb", "Opening database:", this.name);
                _context2.next = 5;
                return new Promise(function (e, n) {
                  // TODO(mikelehen): Investigate browser compatibility.
                  // https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB
                  // suggests IE9 and older WebKit browsers handle upgrade
                  // differently. They expect setVersion, as described here:
                  // https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeRequest/setVersion
                  var s = indexedDB.open(_this29.name, _this29.version);
                  s.onsuccess = function (t) {
                    var n = t.target.result;
                    e(n);
                  }, s.onblocked = function () {
                    n(new Ws(t, "Cannot upgrade IndexedDB schema while another tab is open. Close all tabs that access Firestore and reload this page to proceed."));
                  }, s.onerror = function (e) {
                    var s = e.target.error;
                    "VersionError" === s.name ? n(new q(U.FAILED_PRECONDITION, "A newer version of the Firestore SDK was previously used and so the persisted data is not compatible with the version of the SDK you are now using. The SDK will operate with persistence disabled. If you need persistence, please re-upgrade to a newer version of the SDK or else clear the persisted IndexedDB data for your app to start fresh.")) : "InvalidStateError" === s.name ? n(new q(U.FAILED_PRECONDITION, "Unable to open an IndexedDB connection. This could be due to running in a private browsing session on a browser whose private browsing sessions do not support IndexedDB: " + s)) : n(new Ws(t, s));
                  }, s.onupgradeneeded = function (t) {
                    x("SimpleDb", 'Database "' + _this29.name + '" requires upgrade from version:', t.oldVersion);
                    var e = t.target.result;

                    _this29.At.Ct(e, s.transaction, t.oldVersion, _this29.version).next(function () {
                      x("SimpleDb", "Database upgrade to version " + _this29.version + " complete");
                    });
                  };
                });

              case 5:
                this.db = _context2.sent;

              case 6:
                this.Nt && (this.db.onversionchange = function (t) {
                  return _this29.Nt(t);
                });
                return _context2.abrupt("return", this.db);

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function Dt(_x) {
        return _Dt.apply(this, arguments);
      }

      return Dt;
    }()
  }, {
    key: "xt",
    value: function xt(t) {
      this.Nt = t, this.db && (this.db.onversionchange = function (e) {
        return t(e);
      });
    }
  }, {
    key: "runTransaction",
    value: function () {
      var _runTransaction = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(t, e, n, s) {
        var _this30 = this;

        var i, r, _ret, _e27;

        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                i = "readonly" === e;
                r = 0;

              case 2:
                ++r;
                _context4.prev = 3;
                return _context4.delegateYield( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                  var e, r;
                  return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          _context3.next = 2;
                          return _this30.Dt(t);

                        case 2:
                          _this30.db = _context3.sent;
                          e = Ks.open(_this30.db, t, i ? "readonly" : "readwrite", n), r = s(e).catch(function (t) {
                            return (// Abort the transaction if there was an error.
                              e.abort(t), qs.reject(t)
                            );
                          }).toPromise(); // As noted above, errors are propagated by aborting the transaction. So
                          // we swallow any error here to avoid the browser logging it as unhandled.

                          r.catch(function () {});
                          _context3.next = 7;
                          return e.It;

                        case 7:
                          _context3.t0 = r;
                          return _context3.abrupt("return", {
                            v: _context3.t0
                          });

                        case 9:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  }, _callee3);
                })(), "t0", 5);

              case 5:
                _ret = _context4.t0;

                if (!(_typeof(_ret) === "object")) {
                  _context4.next = 8;
                  break;
                }

                return _context4.abrupt("return", _ret.v);

              case 8:
                _context4.next = 15;
                break;

              case 10:
                _context4.prev = 10;
                _context4.t1 = _context4["catch"](3);
                // TODO(schmidt-sebastian): We could probably be smarter about this and
                // not retry exceptions that are likely unrecoverable (such as quota
                // exceeded errors).
                // Note: We cannot use an instanceof check for FirestoreException, since the
                // exception is wrapped in a generic error by our async/await handling.
                _e27 = "FirebaseError" !== _context4.t1.name && r < 3;

                if (!(x("SimpleDb", "Transaction failed with error:", _context4.t1.message, "Retrying:", _e27), this.close(), !_e27)) {
                  _context4.next = 15;
                  break;
                }

                return _context4.abrupt("return", Promise.reject(_context4.t1));

              case 15:
                _context4.next = 2;
                break;

              case 17:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this, [[3, 10]]);
      }));

      function runTransaction(_x2, _x3, _x4, _x5) {
        return _runTransaction.apply(this, arguments);
      }

      return runTransaction;
    }()
  }, {
    key: "close",
    value: function close() {
      this.db && this.db.close(), this.db = void 0;
    }
  }], [{
    key: "delete",
    value: function _delete(t) {
      return x("SimpleDb", "Removing database:", t), Hs(window.indexedDB.deleteDatabase(t)).toPromise();
    }
    /** Returns true if IndexedDB is available in the current environment. */

  }, {
    key: "bt",
    value: function bt() {
      if ("undefined" == typeof indexedDB) return !1;
      if (js.Pt()) return !0; // We extensively use indexed array values and compound keys,
      // which IE and Edge do not support. However, they still have indexedDB
      // defined on the window, so we need to check for them here and make sure
      // to return that persistence is not enabled for those browsers.
      // For tracking support of this feature, see here:
      // https://developer.microsoft.com/en-us/microsoft-edge/platform/status/indexeddbarraysandmultientrysupport/
      // Check the UA string to find out the browser.

      var t = (0, _util.getUA)(),
          e = js.Rt(t),
          n = 0 < e && e < 10,
          s = js.vt(t),
          i = 0 < s && s < 4.5; // IE 10
      // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';
      // IE 11
      // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';
      // Edge
      // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML,
      // like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';
      // iOS Safari: Disable for users running iOS version < 10.

      return !(t.indexOf("MSIE ") > 0 || t.indexOf("Trident/") > 0 || t.indexOf("Edge/") > 0 || n || i);
    }
    /**
     * Returns true if the backing IndexedDB store is the Node IndexedDBShim
     * (see https://github.com/axemclion/IndexedDBShim).
     */

  }, {
    key: "Pt",
    value: function Pt() {
      var t;
      return "undefined" != typeof process && "YES" === (null === (t = process.env) || void 0 === t ? void 0 : t.Vt);
    }
    /** Helper to get a typed SimpleDbStore from a transaction. */

  }, {
    key: "St",
    value: function St(t, e) {
      return t.store(e);
    } // visible for testing

    /** Parse User Agent to determine iOS version. Returns -1 if not found. */

  }, {
    key: "Rt",
    value: function Rt(t) {
      var e = t.match(/i(?:phone|pad|pod) os ([\d_]+)/i),
          n = e ? e[1].split("_").slice(0, 2).join(".") : "-1";
      return Number(n);
    } // visible for testing

    /** Parse User Agent to determine Android version. Returns -1 if not found. */

  }, {
    key: "vt",
    value: function vt(t) {
      var e = t.match(/Android ([\d.]+)/i),
          n = e ? e[1].split(".").slice(0, 2).join(".") : "-1";
      return Number(n);
    }
  }]);

  return js;
}();
/**
 * A controller for iterating over a key range or index. It allows an iterate
 * callback to delete the currently-referenced object, or jump to a new key
 * within the key range or index.
 */


var Qs = /*#__PURE__*/function () {
  function Qs(t) {
    _classCallCheck(this, Qs);

    this.kt = t, this.$t = !1, this.Ot = null;
  }

  _createClass(Qs, [{
    key: "isDone",
    get: function get() {
      return this.$t;
    }
  }, {
    key: "Ft",
    get: function get() {
      return this.Ot;
    }
  }, {
    key: "cursor",
    set: function set(t) {
      this.kt = t;
    }
    /**
     * This function can be called to stop iteration at any point.
     */

  }, {
    key: "done",
    value: function done() {
      this.$t = !0;
    }
    /**
     * This function can be called to skip to that next key, which could be
     * an index or a primary key.
     */

  }, {
    key: "Mt",
    value: function Mt(t) {
      this.Ot = t;
    }
    /**
     * Delete the current cursor value from the object store.
     *
     * NOTE: You CANNOT do this with a keysOnly query.
     */

  }, {
    key: "delete",
    value: function _delete() {
      return Hs(this.kt.delete());
    }
  }]);

  return Qs;
}();
/** An error that wraps exceptions that thrown during IndexedDB execution. */


var Ws = /*#__PURE__*/function (_q) {
  _inherits(Ws, _q);

  var _super20 = _createSuper(Ws);

  function Ws(t, e) {
    var _this31;

    _classCallCheck(this, Ws);

    _this31 = _super20.call(this, U.UNAVAILABLE, "IndexedDB transaction '".concat(t, "' failed: ").concat(e)), _this31.name = "IndexedDbTransactionError";
    return _this31;
  }

  return Ws;
}(q);
/** Verifies whether `e` is an IndexedDbTransactionError. */


function Gs(t) {
  // Use name equality, as instanceof checks on errors don't work with errors
  // that wrap other errors.
  return "IndexedDbTransactionError" === t.name;
}
/**
 * A wrapper around an IDBObjectStore providing an API that:
 *
 * 1) Has generic KeyType / ValueType parameters to provide strongly-typed
 * methods for acting against the object store.
 * 2) Deals with IndexedDB's onsuccess / onerror event callbacks, making every
 * method return a PersistencePromise instead.
 * 3) Provides a higher-level API to avoid needing to do excessive wrapping of
 * intermediate IndexedDB types (IDBCursorWithValue, etc.)
 */


var zs = /*#__PURE__*/function () {
  function zs(t) {
    _classCallCheck(this, zs);

    this.store = t;
  }

  _createClass(zs, [{
    key: "put",
    value: function put(t, e) {
      var n;
      return void 0 !== e ? (x("SimpleDb", "PUT", this.store.name, t, e), n = this.store.put(e, t)) : (x("SimpleDb", "PUT", this.store.name, "<auto-key>", t), n = this.store.put(t)), Hs(n);
    }
    /**
     * Adds a new value into an Object Store and returns the new key. Similar to
     * IndexedDb's `add()`, this method will fail on primary key collisions.
     *
     * @param value - The object to write.
     * @returns The key of the value to add.
     */

  }, {
    key: "add",
    value: function add(t) {
      x("SimpleDb", "ADD", this.store.name, t, t);
      return Hs(this.store.add(t));
    }
    /**
     * Gets the object with the specified key from the specified store, or null
     * if no object exists with the specified key.
     *
     * @key The key of the object to get.
     * @returns The object with the specified key or null if no object exists.
     */

  }, {
    key: "get",
    value: function get(t) {
      var _this32 = this;

      // We're doing an unsafe cast to ValueType.
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      return Hs(this.store.get(t)).next(function (e) {
        return (// Normalize nonexistence to null.
          void 0 === e && (e = null), x("SimpleDb", "GET", _this32.store.name, t, e), e
        );
      });
    }
  }, {
    key: "delete",
    value: function _delete(t) {
      x("SimpleDb", "DELETE", this.store.name, t);
      return Hs(this.store.delete(t));
    }
    /**
     * If we ever need more of the count variants, we can add overloads. For now,
     * all we need is to count everything in a store.
     *
     * Returns the number of rows in the store.
     */

  }, {
    key: "count",
    value: function count() {
      x("SimpleDb", "COUNT", this.store.name);
      return Hs(this.store.count());
    }
  }, {
    key: "Lt",
    value: function Lt(t, e) {
      var n = this.cursor(this.options(t, e)),
          s = [];
      return this.Bt(n, function (t, e) {
        s.push(e);
      }).next(function () {
        return s;
      });
    }
  }, {
    key: "Ut",
    value: function Ut(t, e) {
      x("SimpleDb", "DELETE ALL", this.store.name);
      var n = this.options(t, e);
      n.qt = !1;
      var s = this.cursor(n);
      return this.Bt(s, function (t, e, n) {
        return n.delete();
      });
    }
  }, {
    key: "Kt",
    value: function Kt(t, e) {
      var n;
      e ? n = t : (n = {}, e = t);
      var s = this.cursor(n);
      return this.Bt(s, e);
    }
    /**
     * Iterates over a store, but waits for the given callback to complete for
     * each entry before iterating the next entry. This allows the callback to do
     * asynchronous work to determine if this iteration should continue.
     *
     * The provided callback should return `true` to continue iteration, and
     * `false` otherwise.
     */

  }, {
    key: "jt",
    value: function jt(t) {
      var e = this.cursor({});
      return new qs(function (n, s) {
        e.onerror = function (t) {
          var e = Ys(t.target.error);
          s(e);
        }, e.onsuccess = function (e) {
          var s = e.target.result;
          s ? t(s.primaryKey, s.value).next(function (t) {
            t ? s.continue() : n();
          }) : n();
        };
      });
    }
  }, {
    key: "Bt",
    value: function Bt(t, e) {
      var n = [];
      return new qs(function (s, i) {
        t.onerror = function (t) {
          i(t.target.error);
        }, t.onsuccess = function (t) {
          var i = t.target.result;
          if (!i) return void s();
          var r = new Qs(i),
              o = e(i.primaryKey, i.value, r);

          if (o instanceof qs) {
            var _t27 = o.catch(function (t) {
              return r.done(), qs.reject(t);
            });

            n.push(_t27);
          }

          r.isDone ? s() : null === r.Ft ? i.continue() : i.continue(r.Ft);
        };
      }).next(function () {
        return qs.waitFor(n);
      });
    }
  }, {
    key: "options",
    value: function options(t, e) {
      var n;
      return void 0 !== t && ("string" == typeof t ? n = t : e = t), {
        index: n,
        range: e
      };
    }
  }, {
    key: "cursor",
    value: function cursor(t) {
      var e = "next";

      if (t.reverse && (e = "prev"), t.index) {
        var _n32 = this.store.index(t.index);

        return t.qt ? _n32.openKeyCursor(t.range, e) : _n32.openCursor(t.range, e);
      }

      return this.store.openCursor(t.range, e);
    }
  }]);

  return zs;
}();
/**
 * Wraps an IDBRequest in a PersistencePromise, using the onsuccess / onerror
 * handlers to resolve / reject the PersistencePromise as appropriate.
 */


function Hs(t) {
  return new qs(function (e, n) {
    t.onsuccess = function (t) {
      var n = t.target.result;
      e(n);
    }, t.onerror = function (t) {
      var e = Ys(t.target.error);
      n(e);
    };
  });
} // Guard so we only report the error once.


var Js = !1;

function Ys(t) {
  var e = js.Rt((0, _util.getUA)());

  if (e >= 12.2 && e < 13) {
    var _e28 = "An internal error was encountered in the Indexed Database server";

    if (t.message.indexOf(_e28) >= 0) {
      // Wrap error in a more descriptive one.
      var _t28 = new q("internal", "IOS_INDEXEDDB_BUG1: IndexedDb has thrown '".concat(_e28, "'. This is likely due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround."));

      return Js || (Js = !0, // Throw a global exception outside of this promise chain, for the user to
      // potentially catch.
      setTimeout(function () {
        throw _t28;
      }, 0)), _t28;
    }
  }

  return t;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var Xs = /*#__PURE__*/function (_Us) {
  _inherits(Xs, _Us);

  var _super21 = _createSuper(Xs);

  function Xs(t, e) {
    var _this33;

    _classCallCheck(this, Xs);

    _this33 = _super21.call(this), _this33.Qt = t, _this33.currentSequenceNumber = e;
    return _this33;
  }

  return Xs;
}(Us);

function Zs(t, e) {
  var n = B(t);
  return js.St(n.Qt, e);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A batch of mutations that will be sent as one unit to the backend.
 */


var ti = /*#__PURE__*/function () {
  /**
   * @param batchId - The unique ID of this mutation batch.
   * @param localWriteTime - The original write time of this mutation.
   * @param baseMutations - Mutations that are used to populate the base
   * values when this mutation is applied locally. This can be used to locally
   * overwrite values that are persisted in the remote document cache. Base
   * mutations are never sent to the backend.
   * @param mutations - The user-provided mutations in this mutation batch.
   * User-provided mutations are applied both locally and remotely on the
   * backend.
   */
  function ti(t, e, n, s) {
    _classCallCheck(this, ti);

    this.batchId = t, this.localWriteTime = e, this.baseMutations = n, this.mutations = s;
  }
  /**
   * Applies all the mutations in this MutationBatch to the specified document
   * to compute the state of the remote document
   *
   * @param document - The document to apply mutations to.
   * @param batchResult - The result of applying the MutationBatch to the
   * backend.
   */


  _createClass(ti, [{
    key: "applyToRemoteDocument",
    value: function applyToRemoteDocument(t, e) {
      var n = e.mutationResults;

      for (var _e29 = 0; _e29 < this.mutations.length; _e29++) {
        var _s23 = this.mutations[_e29];

        if (_s23.key.isEqual(t.key)) {
          ze(_s23, t, n[_e29]);
        }
      }
    }
    /**
     * Computes the local view of a document given all the mutations in this
     * batch.
     *
     * @param document - The document to apply mutations to.
     */

  }, {
    key: "applyToLocalView",
    value: function applyToLocalView(t) {
      // First, apply the base state. This allows us to apply non-idempotent
      // transform against a consistent set of values.
      var _iterator19 = _createForOfIteratorHelper(this.baseMutations),
          _step19;

      try {
        for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
          var _e30 = _step19.value;
          _e30.key.isEqual(t.key) && He(_e30, t, this.localWriteTime);
        } // Second, apply all user-provided mutations.

      } catch (err) {
        _iterator19.e(err);
      } finally {
        _iterator19.f();
      }

      var _iterator20 = _createForOfIteratorHelper(this.mutations),
          _step20;

      try {
        for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
          var _e31 = _step20.value;
          _e31.key.isEqual(t.key) && He(_e31, t, this.localWriteTime);
        }
      } catch (err) {
        _iterator20.e(err);
      } finally {
        _iterator20.f();
      }
    }
    /**
     * Computes the local view for all provided documents given the mutations in
     * this batch.
     */

  }, {
    key: "applyToLocalDocumentSet",
    value: function applyToLocalDocumentSet(t) {
      var _this34 = this;

      // TODO(mrschmidt): This implementation is O(n^2). If we apply the mutations
      // directly (as done in `applyToLocalView()`), we can reduce the complexity
      // to O(n).
      this.mutations.forEach(function (e) {
        var n = t.get(e.key),
            s = n; // TODO(mutabledocuments): This method should take a MutableDocumentMap
        // and we should remove this cast.

        _this34.applyToLocalView(s), n.isValidDocument() || s.convertToNoDocument(st.min());
      });
    }
  }, {
    key: "keys",
    value: function keys() {
      return this.mutations.reduce(function (t, e) {
        return t.add(e.key);
      }, Rn());
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return this.batchId === t.batchId && tt(this.mutations, t.mutations, function (t, e) {
        return Ye(t, e);
      }) && tt(this.baseMutations, t.baseMutations, function (t, e) {
        return Ye(t, e);
      });
    }
  }]);

  return ti;
}();
/** The result of applying a mutation batch to the backend. */


var ei = /*#__PURE__*/function () {
  function ei(t, e, n,
  /**
   * A pre-computed mapping from each mutated document to the resulting
   * version.
   */
  s) {
    _classCallCheck(this, ei);

    this.batch = t, this.commitVersion = e, this.mutationResults = n, this.docVersions = s;
  }
  /**
   * Creates a new MutationBatchResult for the given batch and results. There
   * must be one result for each mutation in the batch. This static factory
   * caches a document=&gt;version mapping (docVersions).
   */


  _createClass(ei, null, [{
    key: "from",
    value: function from(t, e, n) {
      M(t.mutations.length === n.length);
      var s = In();
      var i = t.mutations;

      for (var _t29 = 0; _t29 < i.length; _t29++) {
        s = s.insert(i[_t29].key, n[_t29].version);
      }

      return new ei(t, e, n, s);
    }
  }]);

  return ei;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An immutable set of metadata that the local store tracks for each target.
 */


var ni = /*#__PURE__*/function () {
  function ni(
  /** The target being listened to. */
  t,
  /**
   * The target ID to which the target corresponds; Assigned by the
   * LocalStore for user listens and by the SyncEngine for limbo watches.
   */
  e,
  /** The purpose of the target. */
  n,
  /**
   * The sequence number of the last transaction during which this target data
   * was modified.
   */
  s) {
    var i = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : st.min();
    var r = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : st.min();
    var o = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : dt.EMPTY_BYTE_STRING;

    _classCallCheck(this, ni);

    this.target = t, this.targetId = e, this.purpose = n, this.sequenceNumber = s, this.snapshotVersion = i, this.lastLimboFreeSnapshotVersion = r, this.resumeToken = o;
  }
  /** Creates a new target data instance with an updated sequence number. */


  _createClass(ni, [{
    key: "withSequenceNumber",
    value: function withSequenceNumber(t) {
      return new ni(this.target, this.targetId, this.purpose, t, this.snapshotVersion, this.lastLimboFreeSnapshotVersion, this.resumeToken);
    }
    /**
     * Creates a new target data instance with an updated resume token and
     * snapshot version.
     */

  }, {
    key: "withResumeToken",
    value: function withResumeToken(t, e) {
      return new ni(this.target, this.targetId, this.purpose, this.sequenceNumber, e, this.lastLimboFreeSnapshotVersion, t);
    }
    /**
     * Creates a new target data instance with an updated last limbo free
     * snapshot version number.
     */

  }, {
    key: "withLastLimboFreeSnapshotVersion",
    value: function withLastLimboFreeSnapshotVersion(t) {
      return new ni(this.target, this.targetId, this.purpose, this.sequenceNumber, this.snapshotVersion, t, this.resumeToken);
    }
  }]);

  return ni;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Serializer for values stored in the LocalStore. */


var si = function si(t) {
  _classCallCheck(this, si);

  this.Wt = t;
};
/** Decodes a remote document from storage locally to a Document. */


function ii(t, e) {
  if (e.document) return Xn(t.Wt, e.document, !!e.hasCommittedMutations);

  if (e.noDocument) {
    var _t30 = Rt.fromSegments(e.noDocument.path),
        _n33 = ui(e.noDocument.readTime),
        _s24 = Ut.newNoDocument(_t30, _n33);

    return e.hasCommittedMutations ? _s24.setHasCommittedMutations() : _s24;
  }

  if (e.unknownDocument) {
    var _t31 = Rt.fromSegments(e.unknownDocument.path),
        _n34 = ui(e.unknownDocument.version);

    return Ut.newUnknownDocument(_t31, _n34);
  }

  return F();
}
/** Encodes a document for storage locally. */


function ri(t, e, n) {
  var s = oi(n),
      i = e.key.path.popLast().toArray();

  if (e.isFoundDocument()) {
    var _n35 = function (t, e) {
      return {
        name: Qn(t, e.key),
        fields: e.data.value.mapValue.fields,
        updateTime: Ln(t, e.version.toTimestamp())
      };
    }(t.Wt, e),
        _r12 = e.hasCommittedMutations;

    return new Ds(
    /* unknownDocument= */
    null,
    /* noDocument= */
    null, _n35, _r12, s, i);
  }

  if (e.isNoDocument()) {
    var _t32 = e.key.path.toArray(),
        _n36 = ci(e.version),
        _r13 = e.hasCommittedMutations;

    return new Ds(
    /* unknownDocument= */
    null, new Vs(_t32, _n36),
    /* document= */
    null, _r13, s, i);
  }

  if (e.isUnknownDocument()) {
    var _t33 = e.key.path.toArray(),
        _n37 = ci(e.version);

    return new Ds(new Ss(_t33, _n37),
    /* noDocument= */
    null,
    /* document= */
    null,
    /* hasCommittedMutations= */
    !0, s, i);
  }

  return F();
}

function oi(t) {
  var e = t.toTimestamp();
  return [e.seconds, e.nanoseconds];
}

function ai(t) {
  var e = new nt(t[0], t[1]);
  return st.fromTimestamp(e);
}

function ci(t) {
  var e = t.toTimestamp();
  return new As(e.seconds, e.nanoseconds);
}

function ui(t) {
  var e = new nt(t.seconds, t.nanoseconds);
  return st.fromTimestamp(e);
}
/** Encodes a batch of mutations into a DbMutationBatch for local storage. */

/** Decodes a DbMutationBatch into a MutationBatch */


function hi(t, e) {
  var n = (e.baseMutations || []).map(function (e) {
    return ns(t.Wt, e);
  }); // Squash old transform mutations into existing patch or set mutations.
  // The replacement of representing `transforms` with `update_transforms`
  // on the SDK means that old `transform` mutations stored in IndexedDB need
  // to be updated to `update_transforms`.
  // TODO(b/174608374): Remove this code once we perform a schema migration.

  for (var _t34 = 0; _t34 < e.mutations.length - 1; ++_t34) {
    var _n38 = e.mutations[_t34];

    if (_t34 + 1 < e.mutations.length && void 0 !== e.mutations[_t34 + 1].transform) {
      var _s25 = e.mutations[_t34 + 1];
      _n38.updateTransforms = _s25.transform.fieldTransforms, e.mutations.splice(_t34 + 1, 1), ++_t34;
    }
  }

  var s = e.mutations.map(function (e) {
    return ns(t.Wt, e);
  }),
      i = nt.fromMillis(e.localWriteTimeMs);
  return new ti(e.batchId, i, n, s);
}
/** Decodes a DbTarget into TargetData */


function li(t) {
  var e = ui(t.readTime),
      n = void 0 !== t.lastLimboFreeSnapshotVersion ? ui(t.lastLimboFreeSnapshotVersion) : st.min();
  var s;
  var i;
  return void 0 !== t.query.documents ? (M(1 === (i = t.query).documents.length), s = pe(fe(zn(i.documents[0])))) : s = function (t) {
    return pe(os(t));
  }(t.query), new ni(s, t.targetId, 0
  /* Listen */
  , t.lastListenSequenceNumber, e, n, dt.fromBase64String(t.resumeToken));
}
/** Encodes TargetData into a DbTarget for storage locally. */


function fi(t, e) {
  var n = ci(e.snapshotVersion),
      s = ci(e.lastLimboFreeSnapshotVersion);
  var i;
  i = Gt(e.target) ? is(t.Wt, e.target) : rs(t.Wt, e.target); // We can't store the resumeToken as a ByteString in IndexedDb, so we
  // convert it to a base64 string for storage.

  var r = e.resumeToken.toBase64(); // lastListenSequenceNumber is always 0 until we do real GC.

  return new Ns(e.targetId, jt(e.target), n, r, e.sequenceNumber, s, i);
}
/**
 * A helper function for figuring out what kind of query has been stored.
 */

/**
 * Encodes a `BundledQuery` from bundle proto to a Query object.
 *
 * This reconstructs the original query used to build the bundle being loaded,
 * including features exists only in SDKs (for example: limit-to-last).
 */


function di(t) {
  var e = os({
    parent: t.parent,
    structuredQuery: t.structuredQuery
  });
  return "LAST" === t.limitType ? Ee(e, e.limit, "L"
  /* Last */
  ) : e;
}
/** Encodes a NamedQuery proto object to a NamedQuery model object. */

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var wi = /*#__PURE__*/function () {
  function wi() {
    _classCallCheck(this, wi);
  }

  _createClass(wi, [{
    key: "getBundleMetadata",
    value: function getBundleMetadata(t, e) {
      return _i(t).get(e).next(function (t) {
        if (t) return {
          id: (e = t).bundleId,
          createTime: ui(e.createTime),
          version: e.version
        };
        /** Encodes a DbBundle to a BundleMetadata object. */

        var e;
        /** Encodes a BundleMetadata to a DbBundle. */
      });
    }
  }, {
    key: "saveBundleMetadata",
    value: function saveBundleMetadata(t, e) {
      return _i(t).put({
        bundleId: (n = e).id,
        createTime: ci(qn(n.createTime)),
        version: n.version
      });
      var n;
      /** Encodes a DbNamedQuery to a NamedQuery. */
    }
  }, {
    key: "getNamedQuery",
    value: function getNamedQuery(t, e) {
      return mi(t).get(e).next(function (t) {
        if (t) return {
          name: (e = t).name,
          query: di(e.bundledQuery),
          readTime: ui(e.readTime)
        };
        var e;
        /** Encodes a NamedQuery from a bundle proto to a DbNamedQuery. */
      });
    }
  }, {
    key: "saveNamedQuery",
    value: function saveNamedQuery(t, e) {
      return mi(t).put(function (t) {
        return {
          name: t.name,
          readTime: ci(qn(t.readTime)),
          bundledQuery: t.bundledQuery
        };
      }(e));
    }
  }]);

  return wi;
}();
/**
 * Helper to get a typed SimpleDbStore for the bundles object store.
 */


function _i(t) {
  return Zs(t, Fs.store);
}
/**
 * Helper to get a typed SimpleDbStore for the namedQueries object store.
 */


function mi(t) {
  return Zs(t, Ms.store);
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An in-memory implementation of IndexManager.
 */


var gi = /*#__PURE__*/function () {
  function gi() {
    _classCallCheck(this, gi);

    this.Gt = new yi();
  }

  _createClass(gi, [{
    key: "addToCollectionParentIndex",
    value: function addToCollectionParentIndex(t, e) {
      return this.Gt.add(e), qs.resolve();
    }
  }, {
    key: "getCollectionParents",
    value: function getCollectionParents(t, e) {
      return qs.resolve(this.Gt.getEntries(e));
    }
  }]);

  return gi;
}();
/**
 * Internal implementation of the collection-parent index exposed by MemoryIndexManager.
 * Also used for in-memory caching by IndexedDbIndexManager and initial index population
 * in indexeddb_schema.ts
 */


var yi = /*#__PURE__*/function () {
  function yi() {
    _classCallCheck(this, yi);

    this.index = {};
  } // Returns false if the entry already existed.


  _createClass(yi, [{
    key: "add",
    value: function add(t) {
      var e = t.lastSegment(),
          n = t.popLast(),
          s = this.index[e] || new _n(ct.comparator),
          i = !s.has(n);
      return this.index[e] = s.add(n), i;
    }
  }, {
    key: "has",
    value: function has(t) {
      var e = t.lastSegment(),
          n = t.popLast(),
          s = this.index[e];
      return s && s.has(n);
    }
  }, {
    key: "getEntries",
    value: function getEntries(t) {
      return (this.index[t] || new _n(ct.comparator)).toArray();
    }
  }]);

  return yi;
}();
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A persisted implementation of IndexManager.
 */


var pi = /*#__PURE__*/function () {
  function pi() {
    _classCallCheck(this, pi);

    /**
     * An in-memory copy of the index entries we've already written since the SDK
     * launched. Used to avoid re-writing the same entry repeatedly.
     *
     * This is *NOT* a complete cache of what's in persistence and so can never be used to
     * satisfy reads.
     */
    this.zt = new yi();
  }
  /**
   * Adds a new entry to the collection parent index.
   *
   * Repeated calls for the same collectionPath should be avoided within a
   * transaction as IndexedDbIndexManager only caches writes once a transaction
   * has been committed.
   */


  _createClass(pi, [{
    key: "addToCollectionParentIndex",
    value: function addToCollectionParentIndex(t, e) {
      var _this35 = this;

      if (!this.zt.has(e)) {
        var _n39 = e.lastSegment(),
            _s26 = e.popLast();

        t.addOnCommittedListener(function () {
          // Add the collection to the in memory cache only if the transaction was
          // successfully committed.
          _this35.zt.add(e);
        });
        var _i20 = {
          collectionId: _n39,
          parent: ps(_s26)
        };
        return Ei(t).put(_i20);
      }

      return qs.resolve();
    }
  }, {
    key: "getCollectionParents",
    value: function getCollectionParents(t, e) {
      var n = [],
          s = IDBKeyRange.bound([e, ""], [et(e), ""],
      /*lowerOpen=*/
      !1,
      /*upperOpen=*/
      !0);
      return Ei(t).Lt(s).next(function (t) {
        var _iterator21 = _createForOfIteratorHelper(t),
            _step21;

        try {
          for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
            var _s27 = _step21.value;
            // This collectionId guard shouldn't be necessary (and isn't as long
            // as we're running in a real browser), but there's a bug in
            // indexeddbshim that breaks our range in our tests running in node:
            // https://github.com/axemclion/IndexedDBShim/issues/334
            if (_s27.collectionId !== e) break;
            n.push(Is(_s27.parent));
          }
        } catch (err) {
          _iterator21.e(err);
        } finally {
          _iterator21.f();
        }

        return n;
      });
    }
  }]);

  return pi;
}();
/**
 * Helper to get a typed SimpleDbStore for the collectionParents
 * document store.
 */


function Ei(t) {
  return Zs(t, $s.store);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var Ti = {
  didRun: !1,
  sequenceNumbersCollected: 0,
  targetsRemoved: 0,
  documentsRemoved: 0
};

var Ii = /*#__PURE__*/function () {
  function Ii( // When we attempt to collect, we will only do so if the cache size is greater than this
  // threshold. Passing `COLLECTION_DISABLED` here will cause collection to always be skipped.
  t, // The percentage of sequence numbers that we will attempt to collect
  e, // A cap on the total number of sequence numbers that will be collected. This prevents
  // us from collecting a huge number of sequence numbers if the cache has grown very large.
  n) {
    _classCallCheck(this, Ii);

    this.cacheSizeCollectionThreshold = t, this.percentileToCollect = e, this.maximumSequenceNumbersToCollect = n;
  }

  _createClass(Ii, null, [{
    key: "withCacheSize",
    value: function withCacheSize(t) {
      return new Ii(t, Ii.DEFAULT_COLLECTION_PERCENTILE, Ii.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT);
    }
  }]);

  return Ii;
}();
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Delete a mutation batch and the associated document mutations.
 * @returns A PersistencePromise of the document mutations that were removed.
 */


function Ai(t, e, n) {
  var s = t.store(Ps.store),
      i = t.store(vs.store),
      r = [],
      o = IDBKeyRange.only(n.batchId);
  var a = 0;
  var c = s.Kt({
    range: o
  }, function (t, e, n) {
    return a++, n.delete();
  });
  r.push(c.next(function () {
    M(1 === a);
  }));
  var u = [];

  var _iterator22 = _createForOfIteratorHelper(n.mutations),
      _step22;

  try {
    for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {
      var _t35 = _step22.value;

      var _s28 = vs.key(e, _t35.key.path, n.batchId);

      r.push(i.delete(_s28)), u.push(_t35.key);
    }
  } catch (err) {
    _iterator22.e(err);
  } finally {
    _iterator22.f();
  }

  return qs.waitFor(r).next(function () {
    return u;
  });
}
/**
 * Returns an approximate size for the given document.
 */


function Ri(t) {
  if (!t) return 0;
  var e;
  if (t.document) e = t.document;else if (t.unknownDocument) e = t.unknownDocument;else {
    if (!t.noDocument) throw F();
    e = t.noDocument;
  }
  return JSON.stringify(e).length;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** A mutation queue for a specific user, backed by IndexedDB. */


Ii.DEFAULT_COLLECTION_PERCENTILE = 10, Ii.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT = 1e3, Ii.DEFAULT = new Ii(41943040, Ii.DEFAULT_COLLECTION_PERCENTILE, Ii.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT), Ii.DISABLED = new Ii(-1, 0, 0);

var bi = /*#__PURE__*/function () {
  function bi(
  /**
   * The normalized userId (e.g. null UID => "" userId) used to store /
   * retrieve mutations.
   */
  t, e, n, s) {
    _classCallCheck(this, bi);

    this.userId = t, this.N = e, this.Ht = n, this.referenceDelegate = s,
    /**
     * Caches the document keys for pending mutation batches. If the mutation
     * has been removed from IndexedDb, the cached value may continue to
     * be used to retrieve the batch's document keys. To remove a cached value
     * locally, `removeCachedMutationKeys()` should be invoked either directly
     * or through `removeMutationBatches()`.
     *
     * With multi-tab, when the primary client acknowledges or rejects a mutation,
     * this cache is used by secondary clients to invalidate the local
     * view of the documents that were previously affected by the mutation.
     */
    // PORTING NOTE: Multi-tab only.
    this.Jt = {};
  }
  /**
   * Creates a new mutation queue for the given user.
   * @param user - The user for which to create a mutation queue.
   * @param serializer - The serializer to use when persisting to IndexedDb.
   */


  _createClass(bi, [{
    key: "checkEmpty",
    value: function checkEmpty(t) {
      var e = !0;
      var n = IDBKeyRange.bound([this.userId, Number.NEGATIVE_INFINITY], [this.userId, Number.POSITIVE_INFINITY]);
      return vi(t).Kt({
        index: Ps.userMutationsIndex,
        range: n
      }, function (t, n, s) {
        e = !1, s.done();
      }).next(function () {
        return e;
      });
    }
  }, {
    key: "addMutationBatch",
    value: function addMutationBatch(t, e, n, s) {
      var _this36 = this;

      var i = Vi(t),
          r = vi(t); // The IndexedDb implementation in Chrome (and Firefox) does not handle
      // compound indices that include auto-generated keys correctly. To ensure
      // that the index entry is added correctly in all browsers, we perform two
      // writes: The first write is used to retrieve the next auto-generated Batch
      // ID, and the second write populates the index and stores the actual
      // mutation batch.
      // See: https://bugs.chromium.org/p/chromium/issues/detail?id=701972
      // We write an empty object to obtain key
      // eslint-disable-next-line @typescript-eslint/no-explicit-any

      return r.add({}).next(function (o) {
        M("number" == typeof o);

        var a = new ti(o, e, n, s),
            c = function (t, e, n) {
          var s = n.baseMutations.map(function (e) {
            return es(t.Wt, e);
          }),
              i = n.mutations.map(function (e) {
            return es(t.Wt, e);
          });
          return new Ps(e, n.batchId, n.localWriteTime.toMillis(), s, i);
        }(_this36.N, _this36.userId, a),
            u = [];

        var h = new _n(function (t, e) {
          return Z(t.canonicalString(), e.canonicalString());
        });

        var _iterator23 = _createForOfIteratorHelper(s),
            _step23;

        try {
          for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {
            var _t36 = _step23.value;

            var _e32 = vs.key(_this36.userId, _t36.key.path, o);

            h = h.add(_t36.key.path.popLast()), u.push(r.put(c)), u.push(i.put(_e32, vs.PLACEHOLDER));
          }
        } catch (err) {
          _iterator23.e(err);
        } finally {
          _iterator23.f();
        }

        return h.forEach(function (e) {
          u.push(_this36.Ht.addToCollectionParentIndex(t, e));
        }), t.addOnCommittedListener(function () {
          _this36.Jt[o] = a.keys();
        }), qs.waitFor(u).next(function () {
          return a;
        });
      });
    }
  }, {
    key: "lookupMutationBatch",
    value: function lookupMutationBatch(t, e) {
      var _this37 = this;

      return vi(t).get(e).next(function (t) {
        return t ? (M(t.userId === _this37.userId), hi(_this37.N, t)) : null;
      });
    }
    /**
     * Returns the document keys for the mutation batch with the given batchId.
     * For primary clients, this method returns `null` after
     * `removeMutationBatches()` has been called. Secondary clients return a
     * cached result until `removeCachedMutationKeys()` is invoked.
     */
    // PORTING NOTE: Multi-tab only.

  }, {
    key: "Xt",
    value: function Xt(t, e) {
      var _this38 = this;

      return this.Jt[e] ? qs.resolve(this.Jt[e]) : this.lookupMutationBatch(t, e).next(function (t) {
        if (t) {
          var _n40 = t.keys();

          return _this38.Jt[e] = _n40, _n40;
        }

        return null;
      });
    }
  }, {
    key: "getNextMutationBatchAfterBatchId",
    value: function getNextMutationBatchAfterBatchId(t, e) {
      var _this39 = this;

      var n = e + 1,
          s = IDBKeyRange.lowerBound([this.userId, n]);
      var i = null;
      return vi(t).Kt({
        index: Ps.userMutationsIndex,
        range: s
      }, function (t, e, s) {
        e.userId === _this39.userId && (M(e.batchId >= n), i = hi(_this39.N, e)), s.done();
      }).next(function () {
        return i;
      });
    }
  }, {
    key: "getHighestUnacknowledgedBatchId",
    value: function getHighestUnacknowledgedBatchId(t) {
      var e = IDBKeyRange.upperBound([this.userId, Number.POSITIVE_INFINITY]);
      var n = -1;
      return vi(t).Kt({
        index: Ps.userMutationsIndex,
        range: e,
        reverse: !0
      }, function (t, e, s) {
        n = e.batchId, s.done();
      }).next(function () {
        return n;
      });
    }
  }, {
    key: "getAllMutationBatches",
    value: function getAllMutationBatches(t) {
      var _this40 = this;

      var e = IDBKeyRange.bound([this.userId, -1], [this.userId, Number.POSITIVE_INFINITY]);
      return vi(t).Lt(Ps.userMutationsIndex, e).next(function (t) {
        return t.map(function (t) {
          return hi(_this40.N, t);
        });
      });
    }
  }, {
    key: "getAllMutationBatchesAffectingDocumentKey",
    value: function getAllMutationBatchesAffectingDocumentKey(t, e) {
      var _this41 = this;

      // Scan the document-mutation index starting with a prefix starting with
      // the given documentKey.
      var n = vs.prefixForPath(this.userId, e.path),
          s = IDBKeyRange.lowerBound(n),
          i = [];
      return Vi(t).Kt({
        range: s
      }, function (n, s, r) {
        var _n41 = _slicedToArray(n, 3),
            o = _n41[0],
            a = _n41[1],
            c = _n41[2],
            u = Is(a); // Only consider rows matching exactly the specific key of
        // interest. Note that because we order by path first, and we
        // order terminators before path separators, we'll encounter all
        // the index rows for documentKey contiguously. In particular, all
        // the rows for documentKey will occur before any rows for
        // documents nested in a subcollection beneath documentKey so we
        // can stop as soon as we hit any such row.


        if (o === _this41.userId && e.path.isEqual(u)) // Look up the mutation batch in the store.
          return vi(t).get(c).next(function (t) {
            if (!t) throw F();
            M(t.userId === _this41.userId), i.push(hi(_this41.N, t));
          });
        r.done();
      }).next(function () {
        return i;
      });
    }
  }, {
    key: "getAllMutationBatchesAffectingDocumentKeys",
    value: function getAllMutationBatchesAffectingDocumentKeys(t, e) {
      var _this42 = this;

      var n = new _n(Z);
      var s = [];
      return e.forEach(function (e) {
        var i = vs.prefixForPath(_this42.userId, e.path),
            r = IDBKeyRange.lowerBound(i),
            o = Vi(t).Kt({
          range: r
        }, function (t, s, i) {
          var _t37 = _slicedToArray(t, 3),
              r = _t37[0],
              o = _t37[1],
              a = _t37[2],
              c = Is(o); // Only consider rows matching exactly the specific key of
          // interest. Note that because we order by path first, and we
          // order terminators before path separators, we'll encounter all
          // the index rows for documentKey contiguously. In particular, all
          // the rows for documentKey will occur before any rows for
          // documents nested in a subcollection beneath documentKey so we
          // can stop as soon as we hit any such row.


          r === _this42.userId && e.path.isEqual(c) ? n = n.add(a) : i.done();
        });
        s.push(o);
      }), qs.waitFor(s).next(function () {
        return _this42.Zt(t, n);
      });
    }
  }, {
    key: "getAllMutationBatchesAffectingQuery",
    value: function getAllMutationBatchesAffectingQuery(t, e) {
      var _this43 = this;

      var n = e.path,
          s = n.length + 1,
          i = vs.prefixForPath(this.userId, n),
          r = IDBKeyRange.lowerBound(i); // Collect up unique batchIDs encountered during a scan of the index. Use a
      // SortedSet to accumulate batch IDs so they can be traversed in order in a
      // scan of the main table.

      var o = new _n(Z);
      return Vi(t).Kt({
        range: r
      }, function (t, e, i) {
        var _t38 = _slicedToArray(t, 3),
            r = _t38[0],
            a = _t38[1],
            c = _t38[2],
            u = Is(a);

        r === _this43.userId && n.isPrefixOf(u) ? // Rows with document keys more than one segment longer than the
        // query path can't be matches. For example, a query on 'rooms'
        // can't match the document /rooms/abc/messages/xyx.
        // TODO(mcg): we'll need a different scanner when we implement
        // ancestor queries.
        u.length === s && (o = o.add(c)) : i.done();
      }).next(function () {
        return _this43.Zt(t, o);
      });
    }
  }, {
    key: "Zt",
    value: function Zt(t, e) {
      var _this44 = this;

      var n = [],
          s = []; // TODO(rockwood): Implement this using iterate.

      return e.forEach(function (e) {
        s.push(vi(t).get(e).next(function (t) {
          if (null === t) throw F();
          M(t.userId === _this44.userId), n.push(hi(_this44.N, t));
        }));
      }), qs.waitFor(s).next(function () {
        return n;
      });
    }
  }, {
    key: "removeMutationBatch",
    value: function removeMutationBatch(t, e) {
      var _this45 = this;

      return Ai(t.Qt, this.userId, e).next(function (n) {
        return t.addOnCommittedListener(function () {
          _this45.te(e.batchId);
        }), qs.forEach(n, function (e) {
          return _this45.referenceDelegate.markPotentiallyOrphaned(t, e);
        });
      });
    }
    /**
     * Clears the cached keys for a mutation batch. This method should be
     * called by secondary clients after they process mutation updates.
     *
     * Note that this method does not have to be called from primary clients as
     * the corresponding cache entries are cleared when an acknowledged or
     * rejected batch is removed from the mutation queue.
     */
    // PORTING NOTE: Multi-tab only

  }, {
    key: "te",
    value: function te(t) {
      delete this.Jt[t];
    }
  }, {
    key: "performConsistencyCheck",
    value: function performConsistencyCheck(t) {
      var _this46 = this;

      return this.checkEmpty(t).next(function (e) {
        if (!e) return qs.resolve(); // Verify that there are no entries in the documentMutations index if
        // the queue is empty.

        var n = IDBKeyRange.lowerBound(vs.prefixForUser(_this46.userId)),
            s = [];
        return Vi(t).Kt({
          range: n
        }, function (t, e, n) {
          if (t[0] === _this46.userId) {
            var _e33 = Is(t[1]);

            s.push(_e33);
          } else n.done();
        }).next(function () {
          M(0 === s.length);
        });
      });
    }
  }, {
    key: "containsKey",
    value: function containsKey(t, e) {
      return Pi(t, this.userId, e);
    } // PORTING NOTE: Multi-tab only (state is held in memory in other clients).

    /** Returns the mutation queue's metadata from IndexedDb. */

  }, {
    key: "ee",
    value: function ee(t) {
      var _this47 = this;

      return Si(t).get(this.userId).next(function (t) {
        return t || new bs(_this47.userId, -1,
        /*lastStreamToken=*/
        "");
      });
    }
  }], [{
    key: "Yt",
    value: function Yt(t, e, n, s) {
      // TODO(mcg): Figure out what constraints there are on userIDs
      // In particular, are there any reserved characters? are empty ids allowed?
      // For the moment store these together in the same mutations table assuming
      // that empty userIDs aren't allowed.
      M("" !== t.uid);
      var i = t.isAuthenticated() ? t.uid : "";
      return new bi(i, e, n, s);
    }
  }]);

  return bi;
}();
/**
 * @returns true if the mutation queue for the given user contains a pending
 *         mutation for the given key.
 */


function Pi(t, e, n) {
  var s = vs.prefixForPath(e, n.path),
      i = s[1],
      r = IDBKeyRange.lowerBound(s);
  var o = !1;
  return Vi(t).Kt({
    range: r,
    qt: !0
  }, function (t, n, s) {
    var _t39 = _slicedToArray(t, 3),
        r = _t39[0],
        a = _t39[1],

    /*batchID*/
    c = _t39[2];

    r === e && a === i && (o = !0), s.done();
  }).next(function () {
    return o;
  });
}
/** Returns true if any mutation queue contains the given document. */

/**
 * Helper to get a typed SimpleDbStore for the mutations object store.
 */


function vi(t) {
  return Zs(t, Ps.store);
}
/**
 * Helper to get a typed SimpleDbStore for the mutationQueues object store.
 */


function Vi(t) {
  return Zs(t, vs.store);
}
/**
 * Helper to get a typed SimpleDbStore for the mutationQueues object store.
 */


function Si(t) {
  return Zs(t, bs.store);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Offset to ensure non-overlapping target ids. */

/**
 * Generates monotonically increasing target IDs for sending targets to the
 * watch stream.
 *
 * The client constructs two generators, one for the target cache, and one for
 * for the sync engine (to generate limbo documents targets). These
 * generators produce non-overlapping IDs (by using even and odd IDs
 * respectively).
 *
 * By separating the target ID space, the query cache can generate target IDs
 * that persist across client restarts, while sync engine can independently
 * generate in-memory target IDs that are transient and can be reused after a
 * restart.
 */


var Di = /*#__PURE__*/function () {
  function Di(t) {
    _classCallCheck(this, Di);

    this.ne = t;
  }

  _createClass(Di, [{
    key: "next",
    value: function next() {
      return this.ne += 2, this.ne;
    }
  }], [{
    key: "se",
    value: function se() {
      // The target cache generator must return '2' in its first call to `next()`
      // as there is no differentiation in the protocol layer between an unset
      // number and the number '0'. If we were to sent a target with target ID
      // '0', the backend would consider it unset and replace it with its own ID.
      return new Di(0);
    }
  }, {
    key: "ie",
    value: function ie() {
      // Sync engine assigns target IDs for limbo document detection.
      return new Di(-1);
    }
  }]);

  return Di;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var Ci = /*#__PURE__*/function () {
  function Ci(t, e) {
    _classCallCheck(this, Ci);

    this.referenceDelegate = t, this.N = e;
  } // PORTING NOTE: We don't cache global metadata for the target cache, since
  // some of it (in particular `highestTargetId`) can be modified by secondary
  // tabs. We could perhaps be more granular (and e.g. still cache
  // `lastRemoteSnapshotVersion` in memory) but for simplicity we currently go
  // to IndexedDb whenever we need to read metadata. We can revisit if it turns
  // out to have a meaningful performance impact.


  _createClass(Ci, [{
    key: "allocateTargetId",
    value: function allocateTargetId(t) {
      var _this48 = this;

      return this.re(t).next(function (e) {
        var n = new Di(e.highestTargetId);
        return e.highestTargetId = n.next(), _this48.oe(t, e).next(function () {
          return e.highestTargetId;
        });
      });
    }
  }, {
    key: "getLastRemoteSnapshotVersion",
    value: function getLastRemoteSnapshotVersion(t) {
      return this.re(t).next(function (t) {
        return st.fromTimestamp(new nt(t.lastRemoteSnapshotVersion.seconds, t.lastRemoteSnapshotVersion.nanoseconds));
      });
    }
  }, {
    key: "getHighestSequenceNumber",
    value: function getHighestSequenceNumber(t) {
      return this.re(t).next(function (t) {
        return t.highestListenSequenceNumber;
      });
    }
  }, {
    key: "setTargetsMetadata",
    value: function setTargetsMetadata(t, e, n) {
      var _this49 = this;

      return this.re(t).next(function (s) {
        return s.highestListenSequenceNumber = e, n && (s.lastRemoteSnapshotVersion = n.toTimestamp()), e > s.highestListenSequenceNumber && (s.highestListenSequenceNumber = e), _this49.oe(t, s);
      });
    }
  }, {
    key: "addTargetData",
    value: function addTargetData(t, e) {
      var _this50 = this;

      return this.ae(t, e).next(function () {
        return _this50.re(t).next(function (n) {
          return n.targetCount += 1, _this50.ce(e, n), _this50.oe(t, n);
        });
      });
    }
  }, {
    key: "updateTargetData",
    value: function updateTargetData(t, e) {
      return this.ae(t, e);
    }
  }, {
    key: "removeTargetData",
    value: function removeTargetData(t, e) {
      var _this51 = this;

      return this.removeMatchingKeysForTargetId(t, e.targetId).next(function () {
        return Ni(t).delete(e.targetId);
      }).next(function () {
        return _this51.re(t);
      }).next(function (e) {
        return M(e.targetCount > 0), e.targetCount -= 1, _this51.oe(t, e);
      });
    }
    /**
     * Drops any targets with sequence number less than or equal to the upper bound, excepting those
     * present in `activeTargetIds`. Document associations for the removed targets are also removed.
     * Returns the number of targets removed.
     */

  }, {
    key: "removeTargets",
    value: function removeTargets(t, e, n) {
      var _this52 = this;

      var s = 0;
      var i = [];
      return Ni(t).Kt(function (r, o) {
        var a = li(o);
        a.sequenceNumber <= e && null === n.get(a.targetId) && (s++, i.push(_this52.removeTargetData(t, a)));
      }).next(function () {
        return qs.waitFor(i);
      }).next(function () {
        return s;
      });
    }
    /**
     * Call provided function with each `TargetData` that we have cached.
     */

  }, {
    key: "forEachTarget",
    value: function forEachTarget(t, e) {
      return Ni(t).Kt(function (t, n) {
        var s = li(n);
        e(s);
      });
    }
  }, {
    key: "re",
    value: function re(t) {
      return xi(t).get(ks.key).next(function (t) {
        return M(null !== t), t;
      });
    }
  }, {
    key: "oe",
    value: function oe(t, e) {
      return xi(t).put(ks.key, e);
    }
  }, {
    key: "ae",
    value: function ae(t, e) {
      return Ni(t).put(fi(this.N, e));
    }
    /**
     * In-place updates the provided metadata to account for values in the given
     * TargetData. Saving is done separately. Returns true if there were any
     * changes to the metadata.
     */

  }, {
    key: "ce",
    value: function ce(t, e) {
      var n = !1;
      return t.targetId > e.highestTargetId && (e.highestTargetId = t.targetId, n = !0), t.sequenceNumber > e.highestListenSequenceNumber && (e.highestListenSequenceNumber = t.sequenceNumber, n = !0), n;
    }
  }, {
    key: "getTargetCount",
    value: function getTargetCount(t) {
      return this.re(t).next(function (t) {
        return t.targetCount;
      });
    }
  }, {
    key: "getTargetData",
    value: function getTargetData(t, e) {
      // Iterating by the canonicalId may yield more than one result because
      // canonicalId values are not required to be unique per target. This query
      // depends on the queryTargets index to be efficient.
      var n = jt(e),
          s = IDBKeyRange.bound([n, Number.NEGATIVE_INFINITY], [n, Number.POSITIVE_INFINITY]);
      var i = null;
      return Ni(t).Kt({
        range: s,
        index: Ns.queryTargetsIndexName
      }, function (t, n, s) {
        var r = li(n); // After finding a potential match, check that the target is
        // actually equal to the requested target.

        Wt(e, r.target) && (i = r, s.done());
      }).next(function () {
        return i;
      });
    }
  }, {
    key: "addMatchingKeys",
    value: function addMatchingKeys(t, e, n) {
      var _this53 = this;

      // PORTING NOTE: The reverse index (documentsTargets) is maintained by
      // IndexedDb.
      var s = [],
          i = ki(t);
      return e.forEach(function (e) {
        var r = ps(e.path);
        s.push(i.put(new xs(n, r))), s.push(_this53.referenceDelegate.addReference(t, n, e));
      }), qs.waitFor(s);
    }
  }, {
    key: "removeMatchingKeys",
    value: function removeMatchingKeys(t, e, n) {
      var _this54 = this;

      // PORTING NOTE: The reverse index (documentsTargets) is maintained by
      // IndexedDb.
      var s = ki(t);
      return qs.forEach(e, function (e) {
        var i = ps(e.path);
        return qs.waitFor([s.delete([n, i]), _this54.referenceDelegate.removeReference(t, n, e)]);
      });
    }
  }, {
    key: "removeMatchingKeysForTargetId",
    value: function removeMatchingKeysForTargetId(t, e) {
      var n = ki(t),
          s = IDBKeyRange.bound([e], [e + 1],
      /*lowerOpen=*/
      !1,
      /*upperOpen=*/
      !0);
      return n.delete(s);
    }
  }, {
    key: "getMatchingKeysForTargetId",
    value: function getMatchingKeysForTargetId(t, e) {
      var n = IDBKeyRange.bound([e], [e + 1],
      /*lowerOpen=*/
      !1,
      /*upperOpen=*/
      !0),
          s = ki(t);
      var i = Rn();
      return s.Kt({
        range: n,
        qt: !0
      }, function (t, e, n) {
        var s = Is(t[1]),
            r = new Rt(s);
        i = i.add(r);
      }).next(function () {
        return i;
      });
    }
  }, {
    key: "containsKey",
    value: function containsKey(t, e) {
      var n = ps(e.path),
          s = IDBKeyRange.bound([n], [et(n)],
      /*lowerOpen=*/
      !1,
      /*upperOpen=*/
      !0);
      var i = 0;
      return ki(t).Kt({
        index: xs.documentTargetsIndex,
        qt: !0,
        range: s
      }, function (_ref3, n, s) {
        var _ref4 = _slicedToArray(_ref3, 2),
            t = _ref4[0],
            e = _ref4[1];

        // Having a sentinel row for a document does not count as containing that document;
        // For the target cache, containing the document means the document is part of some
        // target.
        0 !== t && (i++, s.done());
      }).next(function () {
        return i > 0;
      });
    }
    /**
     * Looks up a TargetData entry by target ID.
     *
     * @param targetId - The target ID of the TargetData entry to look up.
     * @returns The cached TargetData entry, or null if the cache has no entry for
     * the target.
     */
    // PORTING NOTE: Multi-tab only.

  }, {
    key: "Et",
    value: function Et(t, e) {
      return Ni(t).get(e).next(function (t) {
        return t ? li(t) : null;
      });
    }
  }]);

  return Ci;
}();
/**
 * Helper to get a typed SimpleDbStore for the queries object store.
 */


function Ni(t) {
  return Zs(t, Ns.store);
}
/**
 * Helper to get a typed SimpleDbStore for the target globals object store.
 */


function xi(t) {
  return Zs(t, ks.store);
}
/**
 * Helper to get a typed SimpleDbStore for the document target object store.
 */


function ki(t) {
  return Zs(t, xs.store);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Verifies the error thrown by a LocalStore operation. If a LocalStore
 * operation fails because the primary lease has been taken by another client,
 * we ignore the error (the persistence layer will immediately call
 * `applyPrimaryLease` to propagate the primary state change). All other errors
 * are re-thrown.
 *
 * @param err - An error returned by a LocalStore operation.
 * @returns A Promise that resolves after we recovered, or the original error.
 */


function $i(_x6) {
  return _$i.apply(this, arguments);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function _$i() {
  _$i = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee70(t) {
    return regeneratorRuntime.wrap(function _callee70$(_context70) {
      while (1) {
        switch (_context70.prev = _context70.next) {
          case 0:
            if (!(t.code !== U.FAILED_PRECONDITION || t.message !== Bs)) {
              _context70.next = 2;
              break;
            }

            throw t;

          case 2:
            x("LocalStore", "Unexpectedly lost primary lease");

          case 3:
          case "end":
            return _context70.stop();
        }
      }
    }, _callee70);
  }));
  return _$i.apply(this, arguments);
}

function Oi(_ref5, _ref6) {
  var _ref7 = _slicedToArray(_ref5, 2),
      t = _ref7[0],
      e = _ref7[1];

  var _ref8 = _slicedToArray(_ref6, 2),
      n = _ref8[0],
      s = _ref8[1];

  var i = Z(t, n);
  return 0 === i ? Z(e, s) : i;
}
/**
 * Used to calculate the nth sequence number. Keeps a rolling buffer of the
 * lowest n values passed to `addElement`, and finally reports the largest of
 * them in `maxValue`.
 */


var Fi = /*#__PURE__*/function () {
  function Fi(t) {
    _classCallCheck(this, Fi);

    this.ue = t, this.buffer = new _n(Oi), this.he = 0;
  }

  _createClass(Fi, [{
    key: "le",
    value: function le() {
      return ++this.he;
    }
  }, {
    key: "fe",
    value: function fe(t) {
      var e = [t, this.le()];
      if (this.buffer.size < this.ue) this.buffer = this.buffer.add(e);else {
        var _t40 = this.buffer.last();

        Oi(e, _t40) < 0 && (this.buffer = this.buffer.delete(_t40).add(e));
      }
    }
  }, {
    key: "maxValue",
    get: function get() {
      // Guaranteed to be non-empty. If we decide we are not collecting any
      // sequence numbers, nthSequenceNumber below short-circuits. If we have
      // decided that we are collecting n sequence numbers, it's because n is some
      // percentage of the existing sequence numbers. That means we should never
      // be in a situation where we are collecting sequence numbers but don't
      // actually have any.
      return this.buffer.last()[0];
    }
  }]);

  return Fi;
}();
/**
 * This class is responsible for the scheduling of LRU garbage collection. It handles checking
 * whether or not GC is enabled, as well as which delay to use before the next run.
 */


var Mi = /*#__PURE__*/function () {
  function Mi(t, e) {
    _classCallCheck(this, Mi);

    this.garbageCollector = t, this.asyncQueue = e, this.de = !1, this.we = null;
  }

  _createClass(Mi, [{
    key: "start",
    value: function start(t) {
      -1 !== this.garbageCollector.params.cacheSizeCollectionThreshold && this._e(t);
    }
  }, {
    key: "stop",
    value: function stop() {
      this.we && (this.we.cancel(), this.we = null);
    }
  }, {
    key: "started",
    get: function get() {
      return null !== this.we;
    }
  }, {
    key: "_e",
    value: function _e(t) {
      var _this55 = this;

      var e = this.de ? 3e5 : 6e4;
      x("LruGarbageCollector", "Garbage collection scheduled in ".concat(e, "ms")), this.we = this.asyncQueue.enqueueAfterDelay("lru_garbage_collection"
      /* LruGarbageCollection */
      , e, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _this55.we = null, _this55.de = !0;
                _context5.prev = 1;
                _context5.next = 4;
                return t.collectGarbage(_this55.garbageCollector);

              case 4:
                _context5.next = 14;
                break;

              case 6:
                _context5.prev = 6;
                _context5.t0 = _context5["catch"](1);

                if (!Gs(_context5.t0)) {
                  _context5.next = 12;
                  break;
                }

                x("LruGarbageCollector", "Ignoring IndexedDB error during garbage collection: ", _context5.t0);
                _context5.next = 14;
                break;

              case 12:
                _context5.next = 14;
                return $i(_context5.t0);

              case 14:
                _context5.next = 16;
                return _this55._e(t);

              case 16:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, null, [[1, 6]]);
      })));
    }
  }]);

  return Mi;
}();
/** Implements the steps for LRU garbage collection. */


var Li = /*#__PURE__*/function () {
  function Li(t, e) {
    _classCallCheck(this, Li);

    this.me = t, this.params = e;
  }

  _createClass(Li, [{
    key: "calculateTargetCount",
    value: function calculateTargetCount(t, e) {
      return this.me.ge(t).next(function (t) {
        return Math.floor(e / 100 * t);
      });
    }
  }, {
    key: "nthSequenceNumber",
    value: function nthSequenceNumber(t, e) {
      var _this56 = this;

      if (0 === e) return qs.resolve(J.T);
      var n = new Fi(e);
      return this.me.forEachTarget(t, function (t) {
        return n.fe(t.sequenceNumber);
      }).next(function () {
        return _this56.me.ye(t, function (t) {
          return n.fe(t);
        });
      }).next(function () {
        return n.maxValue;
      });
    }
  }, {
    key: "removeTargets",
    value: function removeTargets(t, e, n) {
      return this.me.removeTargets(t, e, n);
    }
  }, {
    key: "removeOrphanedDocuments",
    value: function removeOrphanedDocuments(t, e) {
      return this.me.removeOrphanedDocuments(t, e);
    }
  }, {
    key: "collect",
    value: function collect(t, e) {
      var _this57 = this;

      return -1 === this.params.cacheSizeCollectionThreshold ? (x("LruGarbageCollector", "Garbage collection skipped; disabled"), qs.resolve(Ti)) : this.getCacheSize(t).next(function (n) {
        return n < _this57.params.cacheSizeCollectionThreshold ? (x("LruGarbageCollector", "Garbage collection skipped; Cache size ".concat(n, " is lower than threshold ").concat(_this57.params.cacheSizeCollectionThreshold)), Ti) : _this57.pe(t, e);
      });
    }
  }, {
    key: "getCacheSize",
    value: function getCacheSize(t) {
      return this.me.getCacheSize(t);
    }
  }, {
    key: "pe",
    value: function pe(t, e) {
      var _this58 = this;

      var n, s, i, r, o, c, u;
      var h = Date.now();
      return this.calculateTargetCount(t, this.params.percentileToCollect).next(function (e) {
        return (// Cap at the configured max
          e > _this58.params.maximumSequenceNumbersToCollect ? (x("LruGarbageCollector", "Capping sequence numbers to collect down to the maximum of ".concat(_this58.params.maximumSequenceNumbersToCollect, " from ").concat(e)), s = _this58.params.maximumSequenceNumbersToCollect) : s = e, r = Date.now(), _this58.nthSequenceNumber(t, s)
        );
      }).next(function (s) {
        return n = s, o = Date.now(), _this58.removeTargets(t, n, e);
      }).next(function (e) {
        return i = e, c = Date.now(), _this58.removeOrphanedDocuments(t, n);
      }).next(function (t) {
        if (u = Date.now(), C() <= _logger.LogLevel.DEBUG) {
          x("LruGarbageCollector", "LRU Garbage Collection\n\tCounted targets in ".concat(r - h, "ms\n\tDetermined least recently used ").concat(s, " in ") + (o - r) + "ms\n" + "\tRemoved ".concat(i, " targets in ") + (c - o) + "ms\n" + "\tRemoved ".concat(t, " documents in ") + (u - c) + "ms\n" + "Total Duration: ".concat(u - h, "ms"));
        }

        return qs.resolve({
          didRun: !0,
          sequenceNumbersCollected: s,
          targetsRemoved: i,
          documentsRemoved: t
        });
      });
    }
  }]);

  return Li;
}();
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Provides LRU functionality for IndexedDB persistence. */


var Bi = /*#__PURE__*/function () {
  function Bi(t, e) {
    _classCallCheck(this, Bi);

    this.db = t, this.garbageCollector = function (t, e) {
      return new Li(t, e);
    }(this, e);
  }

  _createClass(Bi, [{
    key: "ge",
    value: function ge(t) {
      var e = this.Ee(t);
      return this.db.getTargetCache().getTargetCount(t).next(function (t) {
        return e.next(function (e) {
          return t + e;
        });
      });
    }
  }, {
    key: "Ee",
    value: function Ee(t) {
      var e = 0;
      return this.ye(t, function (t) {
        e++;
      }).next(function () {
        return e;
      });
    }
  }, {
    key: "forEachTarget",
    value: function forEachTarget(t, e) {
      return this.db.getTargetCache().forEachTarget(t, e);
    }
  }, {
    key: "ye",
    value: function ye(t, e) {
      return this.Te(t, function (t, n) {
        return e(n);
      });
    }
  }, {
    key: "addReference",
    value: function addReference(t, e, n) {
      return Ui(t, n);
    }
  }, {
    key: "removeReference",
    value: function removeReference(t, e, n) {
      return Ui(t, n);
    }
  }, {
    key: "removeTargets",
    value: function removeTargets(t, e, n) {
      return this.db.getTargetCache().removeTargets(t, e, n);
    }
  }, {
    key: "markPotentiallyOrphaned",
    value: function markPotentiallyOrphaned(t, e) {
      return Ui(t, e);
    }
    /**
     * Returns true if anything would prevent this document from being garbage
     * collected, given that the document in question is not present in any
     * targets and has a sequence number less than or equal to the upper bound for
     * the collection run.
     */

  }, {
    key: "Ie",
    value: function Ie(t, e) {
      return function (t, e) {
        var n = !1;
        return Si(t).jt(function (s) {
          return Pi(t, s, e).next(function (t) {
            return t && (n = !0), qs.resolve(!t);
          });
        }).next(function () {
          return n;
        });
      }(t, e);
    }
  }, {
    key: "removeOrphanedDocuments",
    value: function removeOrphanedDocuments(t, e) {
      var _this59 = this;

      var n = this.db.getRemoteDocumentCache().newChangeBuffer(),
          s = [];
      var i = 0;
      return this.Te(t, function (r, o) {
        if (o <= e) {
          var _e34 = _this59.Ie(t, r).next(function (e) {
            if (!e) // Our size accounting requires us to read all documents before
              // removing them.
              return i++, n.getEntry(t, r).next(function () {
                return n.removeEntry(r), ki(t).delete([0, ps(r.path)]);
              });
          });

          s.push(_e34);
        }
      }).next(function () {
        return qs.waitFor(s);
      }).next(function () {
        return n.apply(t);
      }).next(function () {
        return i;
      });
    }
  }, {
    key: "removeTarget",
    value: function removeTarget(t, e) {
      var n = e.withSequenceNumber(t.currentSequenceNumber);
      return this.db.getTargetCache().updateTargetData(t, n);
    }
  }, {
    key: "updateLimboDocument",
    value: function updateLimboDocument(t, e) {
      return Ui(t, e);
    }
    /**
     * Call provided function for each document in the cache that is 'orphaned'. Orphaned
     * means not a part of any target, so the only entry in the target-document index for
     * that document will be the sentinel row (targetId 0), which will also have the sequence
     * number for the last time the document was accessed.
     */

  }, {
    key: "Te",
    value: function Te(t, e) {
      var n = ki(t);
      var s,
          i = J.T;
      return n.Kt({
        index: xs.documentTargetsIndex
      }, function (_ref10, _ref11) {
        var _ref12 = _slicedToArray(_ref10, 2),
            t = _ref12[0],
            n = _ref12[1];

        var r = _ref11.path,
            o = _ref11.sequenceNumber;
        0 === t ? ( // if nextToReport is valid, report it, this is a new key so the
        // last one must not be a member of any targets.
        i !== J.T && e(new Rt(Is(s)), i), // set nextToReport to be this sequence number. It's the next one we
        // might report, if we don't find any targets for this document.
        // Note that the sequence number must be defined when the targetId
        // is 0.
        i = o, s = r) : // set nextToReport to be invalid, we know we don't need to report
        // this one since we found a target for it.
        i = J.T;
      }).next(function () {
        // Since we report sequence numbers after getting to the next key, we
        // need to check if the last key we iterated over was an orphaned
        // document and report it.
        i !== J.T && e(new Rt(Is(s)), i);
      });
    }
  }, {
    key: "getCacheSize",
    value: function getCacheSize(t) {
      return this.db.getRemoteDocumentCache().getSize(t);
    }
  }]);

  return Bi;
}();

function Ui(t, e) {
  return ki(t).put(
  /**
  * @returns A value suitable for writing a sentinel row in the target-document
  * store.
  */
  function (t, e) {
    return new xs(0, ps(t.path), e);
  }(e, t.currentSequenceNumber));
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A map implementation that uses objects as keys. Objects must have an
 * associated equals function and must be immutable. Entries in the map are
 * stored together with the key being produced from the mapKeyFn. This map
 * automatically handles collisions of keys.
 */


var qi = /*#__PURE__*/function () {
  function qi(t, e) {
    _classCallCheck(this, qi);

    this.mapKeyFn = t, this.equalsFn = e,
    /**
     * The inner map for a key/value pair. Due to the possibility of collisions we
     * keep a list of entries that we do a linear search through to find an actual
     * match. Note that collisions should be rare, so we still expect near
     * constant time lookups in practice.
     */
    this.inner = {};
  }
  /** Get a value for this key, or undefined if it does not exist. */


  _createClass(qi, [{
    key: "get",
    value: function get(t) {
      var e = this.mapKeyFn(t),
          n = this.inner[e];

      if (void 0 !== n) {
        var _iterator24 = _createForOfIteratorHelper(n),
            _step24;

        try {
          for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {
            var _step24$value = _slicedToArray(_step24.value, 2),
                _e35 = _step24$value[0],
                _s29 = _step24$value[1];

            if (this.equalsFn(_e35, t)) return _s29;
          }
        } catch (err) {
          _iterator24.e(err);
        } finally {
          _iterator24.f();
        }
      }
    }
  }, {
    key: "has",
    value: function has(t) {
      return void 0 !== this.get(t);
    }
    /** Put this key and value in the map. */

  }, {
    key: "set",
    value: function set(t, e) {
      var n = this.mapKeyFn(t),
          s = this.inner[n];

      if (void 0 !== s) {
        for (var _n42 = 0; _n42 < s.length; _n42++) {
          if (this.equalsFn(s[_n42][0], t)) return void (s[_n42] = [t, e]);
        }

        s.push([t, e]);
      } else this.inner[n] = [[t, e]];
    }
    /**
     * Remove this key from the map. Returns a boolean if anything was deleted.
     */

  }, {
    key: "delete",
    value: function _delete(t) {
      var e = this.mapKeyFn(t),
          n = this.inner[e];
      if (void 0 === n) return !1;

      for (var _s30 = 0; _s30 < n.length; _s30++) {
        if (this.equalsFn(n[_s30][0], t)) return 1 === n.length ? delete this.inner[e] : n.splice(_s30, 1), !0;
      }

      return !1;
    }
  }, {
    key: "forEach",
    value: function forEach(t) {
      rt(this.inner, function (e, n) {
        var _iterator25 = _createForOfIteratorHelper(n),
            _step25;

        try {
          for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {
            var _step25$value = _slicedToArray(_step25.value, 2),
                _e36 = _step25$value[0],
                _s31 = _step25$value[1];

            t(_e36, _s31);
          }
        } catch (err) {
          _iterator25.e(err);
        } finally {
          _iterator25.f();
        }
      });
    }
  }, {
    key: "isEmpty",
    value: function isEmpty() {
      return ot(this.inner);
    }
  }]);

  return qi;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An in-memory buffer of entries to be written to a RemoteDocumentCache.
 * It can be used to batch up a set of changes to be written to the cache, but
 * additionally supports reading entries back with the `getEntry()` method,
 * falling back to the underlying RemoteDocumentCache if no entry is
 * buffered.
 *
 * Entries added to the cache *must* be read first. This is to facilitate
 * calculating the size delta of the pending changes.
 *
 * PORTING NOTE: This class was implemented then removed from other platforms.
 * If byte-counting ends up being needed on the other platforms, consider
 * porting this class as part of that implementation work.
 */


var Ki = /*#__PURE__*/function () {
  function Ki() {
    _classCallCheck(this, Ki);

    // A mapping of document key to the new cache entry that should be written (or null if any
    // existing cache entry should be removed).
    this.changes = new qi(function (t) {
      return t.toString();
    }, function (t, e) {
      return t.isEqual(e);
    }), this.changesApplied = !1;
  }

  _createClass(Ki, [{
    key: "getReadTime",
    value: function getReadTime(t) {
      var e = this.changes.get(t);
      return e ? e.readTime : st.min();
    }
    /**
     * Buffers a `RemoteDocumentCache.addEntry()` call.
     *
     * You can only modify documents that have already been retrieved via
     * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
     */

  }, {
    key: "addEntry",
    value: function addEntry(t, e) {
      this.assertNotApplied(), this.changes.set(t.key, {
        document: t,
        readTime: e
      });
    }
    /**
     * Buffers a `RemoteDocumentCache.removeEntry()` call.
     *
     * You can only remove documents that have already been retrieved via
     * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
     */

  }, {
    key: "removeEntry",
    value: function removeEntry(t) {
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      this.assertNotApplied(), this.changes.set(t, {
        document: Ut.newInvalidDocument(t),
        readTime: e
      });
    }
    /**
     * Looks up an entry in the cache. The buffered changes will first be checked,
     * and if no buffered change applies, this will forward to
     * `RemoteDocumentCache.getEntry()`.
     *
     * @param transaction - The transaction in which to perform any persistence
     *     operations.
     * @param documentKey - The key of the entry to look up.
     * @returns The cached document or an invalid document if we have nothing
     * cached.
     */

  }, {
    key: "getEntry",
    value: function getEntry(t, e) {
      this.assertNotApplied();
      var n = this.changes.get(e);
      return void 0 !== n ? qs.resolve(n.document) : this.getFromCache(t, e);
    }
    /**
     * Looks up several entries in the cache, forwarding to
     * `RemoteDocumentCache.getEntry()`.
     *
     * @param transaction - The transaction in which to perform any persistence
     *     operations.
     * @param documentKeys - The keys of the entries to look up.
     * @returns A map of cached documents, indexed by key. If an entry cannot be
     *     found, the corresponding key will be mapped to an invalid document.
     */

  }, {
    key: "getEntries",
    value: function getEntries(t, e) {
      return this.getAllFromCache(t, e);
    }
    /**
     * Applies buffered changes to the underlying RemoteDocumentCache, using
     * the provided transaction.
     */

  }, {
    key: "apply",
    value: function apply(t) {
      return this.assertNotApplied(), this.changesApplied = !0, this.applyChanges(t);
    }
    /** Helper to assert this.changes is not null  */

  }, {
    key: "assertNotApplied",
    value: function assertNotApplied() {}
  }]);

  return Ki;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The RemoteDocumentCache for IndexedDb. To construct, invoke
 * `newIndexedDbRemoteDocumentCache()`.
 */


var ji = /*#__PURE__*/function () {
  /**
   * @param serializer - The document serializer.
   * @param indexManager - The query indexes that need to be maintained.
   */
  function ji(t, e) {
    _classCallCheck(this, ji);

    this.N = t, this.Ht = e;
  }
  /**
   * Adds the supplied entries to the cache.
   *
   * All calls of `addEntry` are required to go through the RemoteDocumentChangeBuffer
   * returned by `newChangeBuffer()` to ensure proper accounting of metadata.
   */


  _createClass(ji, [{
    key: "addEntry",
    value: function addEntry(t, e, n) {
      return Gi(t).put(zi(e), n);
    }
    /**
     * Removes a document from the cache.
     *
     * All calls of `removeEntry`  are required to go through the RemoteDocumentChangeBuffer
     * returned by `newChangeBuffer()` to ensure proper accounting of metadata.
     */

  }, {
    key: "removeEntry",
    value: function removeEntry(t, e) {
      var n = Gi(t),
          s = zi(e);
      return n.delete(s);
    }
    /**
     * Updates the current cache size.
     *
     * Callers to `addEntry()` and `removeEntry()` *must* call this afterwards to update the
     * cache's metadata.
     */

  }, {
    key: "updateMetadata",
    value: function updateMetadata(t, e) {
      var _this60 = this;

      return this.getMetadata(t).next(function (n) {
        return n.byteSize += e, _this60.Ae(t, n);
      });
    }
  }, {
    key: "getEntry",
    value: function getEntry(t, e) {
      var _this61 = this;

      return Gi(t).get(zi(e)).next(function (t) {
        return _this61.Re(e, t);
      });
    }
    /**
     * Looks up an entry in the cache.
     *
     * @param documentKey - The key of the entry to look up.
     * @returns The cached document entry and its size.
     */

  }, {
    key: "be",
    value: function be(t, e) {
      var _this62 = this;

      return Gi(t).get(zi(e)).next(function (t) {
        return {
          document: _this62.Re(e, t),
          size: Ri(t)
        };
      });
    }
  }, {
    key: "getEntries",
    value: function getEntries(t, e) {
      var _this63 = this;

      var n = yn();
      return this.Pe(t, e, function (t, e) {
        var s = _this63.Re(t, e);

        n = n.insert(t, s);
      }).next(function () {
        return n;
      });
    }
    /**
     * Looks up several entries in the cache.
     *
     * @param documentKeys - The set of keys entries to look up.
     * @returns A map of documents indexed by key and a map of sizes indexed by
     *     key (zero if the document does not exist).
     */

  }, {
    key: "ve",
    value: function ve(t, e) {
      var _this64 = this;

      var n = yn(),
          s = new fn(Rt.comparator);
      return this.Pe(t, e, function (t, e) {
        var i = _this64.Re(t, e);

        n = n.insert(t, i), s = s.insert(t, Ri(e));
      }).next(function () {
        return {
          documents: n,
          Ve: s
        };
      });
    }
  }, {
    key: "Pe",
    value: function Pe(t, e, n) {
      if (e.isEmpty()) return qs.resolve();
      var s = IDBKeyRange.bound(e.first().path.toArray(), e.last().path.toArray()),
          i = e.getIterator();
      var r = i.getNext();
      return Gi(t).Kt({
        range: s
      }, function (t, e, s) {
        var o = Rt.fromSegments(t); // Go through keys not found in cache.

        for (; r && Rt.comparator(r, o) < 0;) {
          n(r, null), r = i.getNext();
        }

        r && r.isEqual(o) && ( // Key found in cache.
        n(r, e), r = i.hasNext() ? i.getNext() : null), // Skip to the next key (if there is one).
        r ? s.Mt(r.path.toArray()) : s.done();
      }).next(function () {
        // The rest of the keys are not in the cache. One case where `iterate`
        // above won't go through them is when the cache is empty.
        for (; r;) {
          n(r, null), r = i.hasNext() ? i.getNext() : null;
        }
      });
    }
  }, {
    key: "getDocumentsMatchingQuery",
    value: function getDocumentsMatchingQuery(t, e, n) {
      var _this65 = this;

      var s = yn();
      var i = e.path.length + 1,
          r = {};

      if (n.isEqual(st.min())) {
        // Documents are ordered by key, so we can use a prefix scan to narrow
        // down the documents we need to match the query against.
        var _t41 = e.path.toArray();

        r.range = IDBKeyRange.lowerBound(_t41);
      } else {
        // Execute an index-free query and filter by read time. This is safe
        // since all document changes to queries that have a
        // lastLimboFreeSnapshotVersion (`sinceReadTime`) have a read time set.
        var _t42 = e.path.toArray(),
            _s32 = oi(n);

        r.range = IDBKeyRange.lowerBound([_t42, _s32],
        /* open= */
        !0), r.index = Ds.collectionReadTimeIndex;
      }

      return Gi(t).Kt(r, function (t, n, r) {
        // The query is actually returning any path that starts with the query
        // path prefix which may include documents in subcollections. For
        // example, a query on 'rooms' will return rooms/abc/messages/xyx but we
        // shouldn't match it. Fix this by discarding rows with document keys
        // more than one segment longer than the query path.
        if (t.length !== i) return;
        var o = ii(_this65.N, n);
        e.path.isPrefixOf(o.key.path) ? Re(e, o) && (s = s.insert(o.key, o)) : r.done();
      }).next(function () {
        return s;
      });
    }
  }, {
    key: "newChangeBuffer",
    value: function newChangeBuffer(t) {
      return new Qi(this, !!t && t.trackRemovals);
    }
  }, {
    key: "getSize",
    value: function getSize(t) {
      return this.getMetadata(t).next(function (t) {
        return t.byteSize;
      });
    }
  }, {
    key: "getMetadata",
    value: function getMetadata(t) {
      return Wi(t).get(Cs.key).next(function (t) {
        return M(!!t), t;
      });
    }
  }, {
    key: "Ae",
    value: function Ae(t, e) {
      return Wi(t).put(Cs.key, e);
    }
    /**
     * Decodes `remoteDoc` and returns the document (or null, if the document
     * corresponds to the format used for sentinel deletes).
     */

  }, {
    key: "Re",
    value: function Re(t, e) {
      if (e) {
        var _t43 = ii(this.N, e); // Whether the document is a sentinel removal and should only be used in the
        // `getNewDocumentChanges()`


        if (!(_t43.isNoDocument() && _t43.version.isEqual(st.min()))) return _t43;
      }

      return Ut.newInvalidDocument(t);
    }
  }]);

  return ji;
}();
/**
 * Creates a new IndexedDbRemoteDocumentCache.
 *
 * @param serializer - The document serializer.
 * @param indexManager - The query indexes that need to be maintained.
 */

/**
 * Handles the details of adding and updating documents in the IndexedDbRemoteDocumentCache.
 *
 * Unlike the MemoryRemoteDocumentChangeBuffer, the IndexedDb implementation computes the size
 * delta for all submitted changes. This avoids having to re-read all documents from IndexedDb
 * when we apply the changes.
 */


var Qi = /*#__PURE__*/function (_Ki) {
  _inherits(Qi, _Ki);

  var _super22 = _createSuper(Qi);

  /**
   * @param documentCache - The IndexedDbRemoteDocumentCache to apply the changes to.
   * @param trackRemovals - Whether to create sentinel deletes that can be tracked by
   * `getNewDocumentChanges()`.
   */
  function Qi(t, e) {
    var _this66;

    _classCallCheck(this, Qi);

    _this66 = _super22.call(this), _this66.Se = t, _this66.trackRemovals = e, // A map of document sizes prior to applying the changes in this buffer.
    _this66.De = new qi(function (t) {
      return t.toString();
    }, function (t, e) {
      return t.isEqual(e);
    });
    return _this66;
  }

  _createClass(Qi, [{
    key: "applyChanges",
    value: function applyChanges(t) {
      var _this67 = this;

      var e = [];
      var n = 0,
          s = new _n(function (t, e) {
        return Z(t.canonicalString(), e.canonicalString());
      });
      return this.changes.forEach(function (i, r) {
        var o = _this67.De.get(i);

        if (r.document.isValidDocument()) {
          var _a6 = ri(_this67.Se.N, r.document, _this67.getReadTime(i));

          s = s.add(i.path.popLast());

          var _c3 = Ri(_a6);

          n += _c3 - o, e.push(_this67.Se.addEntry(t, i, _a6));
        } else if (n -= o, _this67.trackRemovals) {
          // In order to track removals, we store a "sentinel delete" in the
          // RemoteDocumentCache. This entry is represented by a NoDocument
          // with a version of 0 and ignored by `maybeDecodeDocument()` but
          // preserved in `getNewDocumentChanges()`.
          var _n43 = ri(_this67.Se.N, Ut.newNoDocument(i, st.min()), _this67.getReadTime(i));

          e.push(_this67.Se.addEntry(t, i, _n43));
        } else e.push(_this67.Se.removeEntry(t, i));
      }), s.forEach(function (n) {
        e.push(_this67.Se.Ht.addToCollectionParentIndex(t, n));
      }), e.push(this.Se.updateMetadata(t, n)), qs.waitFor(e);
    }
  }, {
    key: "getFromCache",
    value: function getFromCache(t, e) {
      var _this68 = this;

      // Record the size of everything we load from the cache so we can compute a delta later.
      return this.Se.be(t, e).next(function (t) {
        return _this68.De.set(e, t.size), t.document;
      });
    }
  }, {
    key: "getAllFromCache",
    value: function getAllFromCache(t, e) {
      var _this69 = this;

      // Record the size of everything we load from the cache so we can compute
      // a delta later.
      return this.Se.ve(t, e).next(function (_ref13) {
        var t = _ref13.documents,
            e = _ref13.Ve;
        return (// Note: `getAllFromCache` returns two maps instead of a single map from
          // keys to `DocumentSizeEntry`s. This is to allow returning the
          // `MutableDocumentMap` directly, without a conversion.
          e.forEach(function (t, e) {
            _this69.De.set(t, e);
          }), t
        );
      });
    }
  }]);

  return Qi;
}(Ki);

function Wi(t) {
  return Zs(t, Cs.store);
}
/**
 * Helper to get a typed SimpleDbStore for the remoteDocuments object store.
 */


function Gi(t) {
  return Zs(t, Ds.store);
}

function zi(t) {
  return t.path.toArray();
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Performs database creation and schema upgrades. */


var Hi = /*#__PURE__*/function () {
  function Hi(t) {
    _classCallCheck(this, Hi);

    this.N = t;
  }
  /**
   * Performs database creation and schema upgrades.
   *
   * Note that in production, this method is only ever used to upgrade the schema
   * to SCHEMA_VERSION. Different values of toVersion are only used for testing
   * and local feature development.
   */


  _createClass(Hi, [{
    key: "Ct",
    value: function Ct(t, e, n, s) {
      var _this70 = this;

      M(n < s && n >= 0 && s <= 11);
      var i = new Ks("createOrUpgrade", e);
      n < 1 && s >= 1 && (function (t) {
        t.createObjectStore(Rs.store);
      }(t), function (t) {
        t.createObjectStore(bs.store, {
          keyPath: bs.keyPath
        });
        t.createObjectStore(Ps.store, {
          keyPath: Ps.keyPath,
          autoIncrement: !0
        }).createIndex(Ps.userMutationsIndex, Ps.userMutationsKeyPath, {
          unique: !0
        }), t.createObjectStore(vs.store);
      }
      /**
      * Upgrade function to migrate the 'mutations' store from V1 to V3. Loads
      * and rewrites all data.
      */
      (t), Ji(t), function (t) {
        t.createObjectStore(Ds.store);
      }(t)); // Migration 2 to populate the targetGlobal object no longer needed since
      // migration 3 unconditionally clears it.

      var r = qs.resolve();
      return n < 3 && s >= 3 && ( // Brand new clients don't need to drop and recreate--only clients that
      // potentially have corrupt data.
      0 !== n && (!function (t) {
        t.deleteObjectStore(xs.store), t.deleteObjectStore(Ns.store), t.deleteObjectStore(ks.store);
      }(t), Ji(t)), r = r.next(function () {
        return (
          /**
          * Creates the target global singleton row.
          *
          * @param txn - The version upgrade transaction for indexeddb
          */
          function (t) {
            var e = t.store(ks.store),
                n = new ks(
            /*highestTargetId=*/
            0,
            /*lastListenSequenceNumber=*/
            0, st.min().toTimestamp(),
            /*targetCount=*/
            0);
            return e.put(ks.key, n);
          }
          /**
          * Creates indices on the RemoteDocuments store used for both multi-tab
          * and Index-Free queries.
          */
          (i)
        );
      })), n < 4 && s >= 4 && (0 !== n && ( // Schema version 3 uses auto-generated keys to generate globally unique
      // mutation batch IDs (this was previously ensured internally by the
      // client). To migrate to the new schema, we have to read all mutations
      // and write them back out. We preserve the existing batch IDs to guarantee
      // consistency with other object stores. Any further mutation batch IDs will
      // be auto-generated.
      r = r.next(function () {
        return function (t, e) {
          return e.store(Ps.store).Lt().next(function (n) {
            t.deleteObjectStore(Ps.store);
            t.createObjectStore(Ps.store, {
              keyPath: Ps.keyPath,
              autoIncrement: !0
            }).createIndex(Ps.userMutationsIndex, Ps.userMutationsKeyPath, {
              unique: !0
            });
            var s = e.store(Ps.store),
                i = n.map(function (t) {
              return s.put(t);
            });
            return qs.waitFor(i);
          });
        }(t, i);
      })), r = r.next(function () {
        !function (t) {
          t.createObjectStore(Os.store, {
            keyPath: Os.keyPath
          });
        }(t);
      })), n < 5 && s >= 5 && (r = r.next(function () {
        return _this70.Ce(i);
      })), n < 6 && s >= 6 && (r = r.next(function () {
        return function (t) {
          t.createObjectStore(Cs.store);
        }(t), _this70.Ne(i);
      })), n < 7 && s >= 7 && (r = r.next(function () {
        return _this70.xe(i);
      })), n < 8 && s >= 8 && (r = r.next(function () {
        return _this70.ke(t, i);
      })), n < 9 && s >= 9 && (r = r.next(function () {
        // Multi-Tab used to manage its own changelog, but this has been moved
        // to the DbRemoteDocument object store itself. Since the previous change
        // log only contained transient data, we can drop its object store.
        !function (t) {
          t.objectStoreNames.contains("remoteDocumentChanges") && t.deleteObjectStore("remoteDocumentChanges");
        }(t), function (t) {
          var e = t.objectStore(Ds.store);
          e.createIndex(Ds.readTimeIndex, Ds.readTimeIndexPath, {
            unique: !1
          }), e.createIndex(Ds.collectionReadTimeIndex, Ds.collectionReadTimeIndexPath, {
            unique: !1
          });
        }(e);
      })), n < 10 && s >= 10 && (r = r.next(function () {
        return _this70.$e(i);
      })), n < 11 && s >= 11 && (r = r.next(function () {
        !function (t) {
          t.createObjectStore(Fs.store, {
            keyPath: Fs.keyPath
          });
        }(t), function (t) {
          t.createObjectStore(Ms.store, {
            keyPath: Ms.keyPath
          });
        }
        /**
        * @license
        * Copyright 2017 Google LLC
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *   http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
        (t);
      })), r;
    }
  }, {
    key: "Ne",
    value: function Ne(t) {
      var e = 0;
      return t.store(Ds.store).Kt(function (t, n) {
        e += Ri(n);
      }).next(function () {
        var n = new Cs(e);
        return t.store(Cs.store).put(Cs.key, n);
      });
    }
  }, {
    key: "Ce",
    value: function Ce(t) {
      var _this71 = this;

      var e = t.store(bs.store),
          n = t.store(Ps.store);
      return e.Lt().next(function (e) {
        return qs.forEach(e, function (e) {
          var s = IDBKeyRange.bound([e.userId, -1], [e.userId, e.lastAcknowledgedBatchId]);
          return n.Lt(Ps.userMutationsIndex, s).next(function (n) {
            return qs.forEach(n, function (n) {
              M(n.userId === e.userId);
              var s = hi(_this71.N, n);
              return Ai(t, e.userId, s).next(function () {});
            });
          });
        });
      });
    }
    /**
     * Ensures that every document in the remote document cache has a corresponding sentinel row
     * with a sequence number. Missing rows are given the most recently used sequence number.
     */

  }, {
    key: "xe",
    value: function xe(t) {
      var e = t.store(xs.store),
          n = t.store(Ds.store);
      return t.store(ks.store).get(ks.key).next(function (t) {
        var s = [];
        return n.Kt(function (n, i) {
          var r = new ct(n),
              o = function (t) {
            return [0, ps(t)];
          }(r);

          s.push(e.get(o).next(function (n) {
            return n ? qs.resolve() : function (n) {
              return e.put(new xs(0, ps(n), t.highestListenSequenceNumber));
            }(r);
          }));
        }).next(function () {
          return qs.waitFor(s);
        });
      });
    }
  }, {
    key: "ke",
    value: function ke(t, e) {
      // Create the index.
      t.createObjectStore($s.store, {
        keyPath: $s.keyPath
      });

      var n = e.store($s.store),
          s = new yi(),
          i = function i(t) {
        if (s.add(t)) {
          var _e37 = t.lastSegment(),
              _s33 = t.popLast();

          return n.put({
            collectionId: _e37,
            parent: ps(_s33)
          });
        }
      }; // Helper to add an index entry iff we haven't already written it.
      // Index existing remote documents.


      return e.store(Ds.store).Kt({
        qt: !0
      }, function (t, e) {
        var n = new ct(t);
        return i(n.popLast());
      }).next(function () {
        return e.store(vs.store).Kt({
          qt: !0
        }, function (_ref14, s) {
          var _ref15 = _slicedToArray(_ref14, 3),
              t = _ref15[0],
              e = _ref15[1],
              n = _ref15[2];

          var r = Is(e);
          return i(r.popLast());
        });
      });
    }
  }, {
    key: "$e",
    value: function $e(t) {
      var _this72 = this;

      var e = t.store(Ns.store);
      return e.Kt(function (t, n) {
        var s = li(n),
            i = fi(_this72.N, s);
        return e.put(i);
      });
    }
  }]);

  return Hi;
}();

function Ji(t) {
  t.createObjectStore(xs.store, {
    keyPath: xs.keyPath
  }).createIndex(xs.documentTargetsIndex, xs.documentTargetsKeyPath, {
    unique: !0
  }); // NOTE: This is unique only because the TargetId is the suffix.

  t.createObjectStore(Ns.store, {
    keyPath: Ns.keyPath
  }).createIndex(Ns.queryTargetsIndexName, Ns.queryTargetsKeyPath, {
    unique: !0
  }), t.createObjectStore(ks.store);
}

var Yi = "Failed to obtain exclusive access to the persistence layer. To allow shared access, multi-tab synchronization has to be enabled in all tabs. If you are using `experimentalForceOwningTab:true`, make sure that only one tab has persistence enabled at any given time.";
/**
 * Oldest acceptable age in milliseconds for client metadata before the client
 * is considered inactive and its associated data is garbage collected.
 */

/**
 * An IndexedDB-backed instance of Persistence. Data is stored persistently
 * across sessions.
 *
 * On Web only, the Firestore SDKs support shared access to its persistence
 * layer. This allows multiple browser tabs to read and write to IndexedDb and
 * to synchronize state even without network connectivity. Shared access is
 * currently optional and not enabled unless all clients invoke
 * `enablePersistence()` with `{synchronizeTabs:true}`.
 *
 * In multi-tab mode, if multiple clients are active at the same time, the SDK
 * will designate one client as the “primary client”. An effort is made to pick
 * a visible, network-connected and active client, and this client is
 * responsible for letting other clients know about its presence. The primary
 * client writes a unique client-generated identifier (the client ID) to
 * IndexedDb’s “owner” store every 4 seconds. If the primary client fails to
 * update this entry, another client can acquire the lease and take over as
 * primary.
 *
 * Some persistence operations in the SDK are designated as primary-client only
 * operations. This includes the acknowledgment of mutations and all updates of
 * remote documents. The effects of these operations are written to persistence
 * and then broadcast to other tabs via LocalStorage (see
 * `WebStorageSharedClientState`), which then refresh their state from
 * persistence.
 *
 * Similarly, the primary client listens to notifications sent by secondary
 * clients to discover persistence changes written by secondary clients, such as
 * the addition of new mutations and query targets.
 *
 * If multi-tab is not enabled and another tab already obtained the primary
 * lease, IndexedDbPersistence enters a failed state and all subsequent
 * operations will automatically fail.
 *
 * Additionally, there is an optimization so that when a tab is closed, the
 * primary lease is released immediately (this is especially important to make
 * sure that a refreshed tab is able to immediately re-acquire the primary
 * lease). Unfortunately, IndexedDB cannot be reliably used in window.unload
 * since it is an asynchronous API. So in addition to attempting to give up the
 * lease, the leaseholder writes its client ID to a "zombiedClient" entry in
 * LocalStorage which acts as an indicator that another tab should go ahead and
 * take the primary lease immediately regardless of the current lease timestamp.
 *
 * TODO(b/114226234): Remove `synchronizeTabs` section when multi-tab is no
 * longer optional.
 */

var Xi = /*#__PURE__*/function () {
  function Xi(
  /**
   * Whether to synchronize the in-memory state of multiple tabs and share
   * access to local persistence.
   */
  t, e, n, s, i, r, o, a, c,
  /**
   * If set to true, forcefully obtains database access. Existing tabs will
   * no longer be able to access IndexedDB.
   */
  u) {
    _classCallCheck(this, Xi);

    if (this.allowTabSynchronization = t, this.persistenceKey = e, this.clientId = n, this.Oe = i, this.window = r, this.document = o, this.Fe = c, this.Me = u, this.Le = null, this.Be = !1, this.isPrimary = !1, this.networkEnabled = !0,
    /** Our window.unload handler, if registered. */
    this.Ue = null, this.inForeground = !1,
    /** Our 'visibilitychange' listener if registered. */
    this.qe = null,
    /** The client metadata refresh task. */
    this.Ke = null,
    /** The last time we garbage collected the client metadata object store. */
    this.je = Number.NEGATIVE_INFINITY,
    /** A listener to notify on primary state changes. */
    this.Qe = function (t) {
      return Promise.resolve();
    }, !Xi.bt()) throw new q(U.UNIMPLEMENTED, "This platform is either missing IndexedDB or is known to have an incomplete implementation. Offline persistence has been disabled.");
    this.referenceDelegate = new Bi(this, s), this.We = e + "main", this.N = new si(a), this.Ge = new js(this.We, 11, new Hi(this.N)), this.ze = new Ci(this.referenceDelegate, this.N), this.Ht = new pi(), this.He = function (t, e) {
      return new ji(t, e);
    }
    /**
    * Returns the set of documents that have changed since the specified read
    * time.
    */
    // PORTING NOTE: This is only used for multi-tab synchronization.
    (this.N, this.Ht), this.Je = new wi(), this.window && this.window.localStorage ? this.Ye = this.window.localStorage : (this.Ye = null, !1 === u && k("IndexedDbPersistence", "LocalStorage is unavailable. As a result, persistence may not work reliably. In particular enablePersistence() could fail immediately after refreshing the page."));
  }
  /**
   * Attempt to start IndexedDb persistence.
   *
   * @returns Whether persistence was enabled.
   */


  _createClass(Xi, [{
    key: "start",
    value: function start() {
      var _this73 = this;

      // NOTE: This is expected to fail sometimes (in the case of another tab
      // already having the persistence lock), so it's the first thing we should
      // do.
      return this.Xe().then(function () {
        if (!_this73.isPrimary && !_this73.allowTabSynchronization) // Fail `start()` if `synchronizeTabs` is disabled and we cannot
          // obtain the primary lease.
          throw new q(U.FAILED_PRECONDITION, Yi);
        return _this73.Ze(), _this73.tn(), _this73.en(), _this73.runTransaction("getHighestListenSequenceNumber", "readonly", function (t) {
          return _this73.ze.getHighestSequenceNumber(t);
        });
      }).then(function (t) {
        _this73.Le = new J(t, _this73.Fe);
      }).then(function () {
        _this73.Be = !0;
      }).catch(function (t) {
        return _this73.Ge && _this73.Ge.close(), Promise.reject(t);
      });
    }
    /**
     * Registers a listener that gets called when the primary state of the
     * instance changes. Upon registering, this listener is invoked immediately
     * with the current primary state.
     *
     * PORTING NOTE: This is only used for Web multi-tab.
     */

  }, {
    key: "nn",
    value: function nn(t) {
      var _this74 = this;

      return this.Qe = /*#__PURE__*/function () {
        var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(e) {
          return regeneratorRuntime.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  if (!_this74.started) {
                    _context6.next = 2;
                    break;
                  }

                  return _context6.abrupt("return", t(e));

                case 2:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6);
        }));

        return function (_x7) {
          return _ref16.apply(this, arguments);
        };
      }(), t(this.isPrimary);
    }
    /**
     * Registers a listener that gets called when the database receives a
     * version change event indicating that it has deleted.
     *
     * PORTING NOTE: This is only used for Web multi-tab.
     */

  }, {
    key: "setDatabaseDeletedListener",
    value: function setDatabaseDeletedListener(t) {
      this.Ge.xt( /*#__PURE__*/function () {
        var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(e) {
          return regeneratorRuntime.wrap(function _callee7$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  _context7.t0 = null === e.newVersion;

                  if (!_context7.t0) {
                    _context7.next = 4;
                    break;
                  }

                  _context7.next = 4;
                  return t();

                case 4:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee7);
        }));

        return function (_x8) {
          return _ref17.apply(this, arguments);
        };
      }());
    }
    /**
     * Adjusts the current network state in the client's metadata, potentially
     * affecting the primary lease.
     *
     * PORTING NOTE: This is only used for Web multi-tab.
     */

  }, {
    key: "setNetworkEnabled",
    value: function setNetworkEnabled(t) {
      var _this75 = this;

      this.networkEnabled !== t && (this.networkEnabled = t, // Schedule a primary lease refresh for immediate execution. The eventual
      // lease update will be propagated via `primaryStateListener`.
      this.Oe.enqueueAndForget( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.t0 = _this75.started;

                if (!_context8.t0) {
                  _context8.next = 4;
                  break;
                }

                _context8.next = 4;
                return _this75.Xe();

              case 4:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }))));
    }
    /**
     * Updates the client metadata in IndexedDb and attempts to either obtain or
     * extend the primary lease for the local client. Asynchronously notifies the
     * primary state listener if the client either newly obtained or released its
     * primary lease.
     */

  }, {
    key: "Xe",
    value: function Xe() {
      var _this76 = this;

      return this.runTransaction("updateClientMetadataAndTryBecomePrimary", "readwrite", function (t) {
        return tr(t).put(new Os(_this76.clientId, Date.now(), _this76.networkEnabled, _this76.inForeground)).next(function () {
          if (_this76.isPrimary) return _this76.sn(t).next(function (t) {
            t || (_this76.isPrimary = !1, _this76.Oe.enqueueRetryable(function () {
              return _this76.Qe(!1);
            }));
          });
        }).next(function () {
          return _this76.rn(t);
        }).next(function (e) {
          return _this76.isPrimary && !e ? _this76.on(t).next(function () {
            return !1;
          }) : !!e && _this76.an(t).next(function () {
            return !0;
          });
        });
      }).catch(function (t) {
        if (Gs(t)) // Proceed with the existing state. Any subsequent access to
          // IndexedDB will verify the lease.
          return x("IndexedDbPersistence", "Failed to extend owner lease: ", t), _this76.isPrimary;
        if (!_this76.allowTabSynchronization) throw t;
        return x("IndexedDbPersistence", "Releasing owner lease after error during lease refresh", t),
        /* isPrimary= */
        !1;
      }).then(function (t) {
        _this76.isPrimary !== t && _this76.Oe.enqueueRetryable(function () {
          return _this76.Qe(t);
        }), _this76.isPrimary = t;
      });
    }
  }, {
    key: "sn",
    value: function sn(t) {
      var _this77 = this;

      return Zi(t).get(Rs.key).next(function (t) {
        return qs.resolve(_this77.cn(t));
      });
    }
  }, {
    key: "un",
    value: function un(t) {
      return tr(t).delete(this.clientId);
    }
    /**
     * If the garbage collection threshold has passed, prunes the
     * RemoteDocumentChanges and the ClientMetadata store based on the last update
     * time of all clients.
     */

  }, {
    key: "hn",
    value: function () {
      var _hn = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
        var _this78 = this;

        var _t44, _iterator26, _step26, _e38;

        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                if (!(this.isPrimary && !this.ln(this.je, 18e5))) {
                  _context9.next = 6;
                  break;
                }

                this.je = Date.now();
                _context9.next = 4;
                return this.runTransaction("maybeGarbageCollectMultiClientState", "readwrite-primary", function (t) {
                  var e = Zs(t, Os.store);
                  return e.Lt().next(function (t) {
                    var n = _this78.fn(t, 18e5),
                        s = t.filter(function (t) {
                      return -1 === n.indexOf(t);
                    }); // Delete metadata for clients that are no longer considered active.


                    // Delete metadata for clients that are no longer considered active.
                    return qs.forEach(s, function (t) {
                      return e.delete(t.clientId);
                    }).next(function () {
                      return s;
                    });
                  });
                }).catch(function () {
                  return [];
                });

              case 4:
                _t44 = _context9.sent;

                // Delete potential leftover entries that may continue to mark the
                // inactive clients as zombied in LocalStorage.
                // Ideally we'd delete the IndexedDb and LocalStorage zombie entries for
                // the client atomically, but we can't. So we opt to delete the IndexedDb
                // entries first to avoid potentially reviving a zombied client.
                if (this.Ye) {
                  _iterator26 = _createForOfIteratorHelper(_t44);

                  try {
                    for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {
                      _e38 = _step26.value;
                      this.Ye.removeItem(this.dn(_e38.clientId));
                    }
                  } catch (err) {
                    _iterator26.e(err);
                  } finally {
                    _iterator26.f();
                  }
                }

              case 6:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function hn() {
        return _hn.apply(this, arguments);
      }

      return hn;
    }()
    /**
     * Schedules a recurring timer to update the client metadata and to either
     * extend or acquire the primary lease if the client is eligible.
     */

  }, {
    key: "en",
    value: function en() {
      var _this79 = this;

      this.Ke = this.Oe.enqueueAfterDelay("client_metadata_refresh"
      /* ClientMetadataRefresh */
      , 4e3, function () {
        return _this79.Xe().then(function () {
          return _this79.hn();
        }).then(function () {
          return _this79.en();
        });
      });
    }
    /** Checks whether `client` is the local client. */

  }, {
    key: "cn",
    value: function cn(t) {
      return !!t && t.ownerId === this.clientId;
    }
    /**
     * Evaluate the state of all active clients and determine whether the local
     * client is or can act as the holder of the primary lease. Returns whether
     * the client is eligible for the lease, but does not actually acquire it.
     * May return 'false' even if there is no active leaseholder and another
     * (foreground) client should become leaseholder instead.
     */

  }, {
    key: "rn",
    value: function rn(t) {
      var _this80 = this;

      if (this.Me) return qs.resolve(!0);
      return Zi(t).get(Rs.key).next(function (e) {
        // A client is eligible for the primary lease if:
        // - its network is enabled and the client's tab is in the foreground.
        // - its network is enabled and no other client's tab is in the
        //   foreground.
        // - every clients network is disabled and the client's tab is in the
        //   foreground.
        // - every clients network is disabled and no other client's tab is in
        //   the foreground.
        // - the `forceOwningTab` setting was passed in.
        if (null !== e && _this80.ln(e.leaseTimestampMs, 5e3) && !_this80.wn(e.ownerId)) {
          if (_this80.cn(e) && _this80.networkEnabled) return !0;

          if (!_this80.cn(e)) {
            if (!e.allowTabSynchronization) // Fail the `canActAsPrimary` check if the current leaseholder has
              // not opted into multi-tab synchronization. If this happens at
              // client startup, we reject the Promise returned by
              // `enablePersistence()` and the user can continue to use Firestore
              // with in-memory persistence.
              // If this fails during a lease refresh, we will instead block the
              // AsyncQueue from executing further operations. Note that this is
              // acceptable since mixing & matching different `synchronizeTabs`
              // settings is not supported.
              // TODO(b/114226234): Remove this check when `synchronizeTabs` can
              // no longer be turned off.
              throw new q(U.FAILED_PRECONDITION, Yi);
            return !1;
          }
        }

        return !(!_this80.networkEnabled || !_this80.inForeground) || tr(t).Lt().next(function (t) {
          return void 0 === _this80.fn(t, 5e3).find(function (t) {
            if (_this80.clientId !== t.clientId) {
              var _e39 = !_this80.networkEnabled && t.networkEnabled,
                  _n44 = !_this80.inForeground && t.inForeground,
                  _s34 = _this80.networkEnabled === t.networkEnabled;

              if (_e39 || _n44 && _s34) return !0;
            }

            return !1;
          });
        });
      }).next(function (t) {
        return _this80.isPrimary !== t && x("IndexedDbPersistence", "Client ".concat(t ? "is" : "is not", " eligible for a primary lease.")), t;
      });
    }
  }, {
    key: "shutdown",
    value: function () {
      var _shutdown = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
        var _this81 = this;

        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                this.Be = !1;

                this._n();

                this.Ke && (this.Ke.cancel(), this.Ke = null);
                this.mn();
                this.gn();
                _context10.next = 7;
                return this.Ge.runTransaction("shutdown", "readwrite", [Rs.store, Os.store], function (t) {
                  var e = new Xs(t, J.T);
                  return _this81.on(e).next(function () {
                    return _this81.un(e);
                  });
                });

              case 7:
                this.Ge.close();
                // Remove the entry marking the client as zombied from LocalStorage since
                // we successfully deleted its metadata from IndexedDb.
                this.yn();

              case 9:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function shutdown() {
        return _shutdown.apply(this, arguments);
      }

      return shutdown;
    }()
    /**
     * Returns clients that are not zombied and have an updateTime within the
     * provided threshold.
     */

  }, {
    key: "fn",
    value: function fn(t, e) {
      var _this82 = this;

      return t.filter(function (t) {
        return _this82.ln(t.updateTimeMs, e) && !_this82.wn(t.clientId);
      });
    }
    /**
     * Returns the IDs of the clients that are currently active. If multi-tab
     * is not supported, returns an array that only contains the local client's
     * ID.
     *
     * PORTING NOTE: This is only used for Web multi-tab.
     */

  }, {
    key: "pn",
    value: function pn() {
      var _this83 = this;

      return this.runTransaction("getActiveClients", "readonly", function (t) {
        return tr(t).Lt().next(function (t) {
          return _this83.fn(t, 18e5).map(function (t) {
            return t.clientId;
          });
        });
      });
    }
  }, {
    key: "started",
    get: function get() {
      return this.Be;
    }
  }, {
    key: "getMutationQueue",
    value: function getMutationQueue(t) {
      return bi.Yt(t, this.N, this.Ht, this.referenceDelegate);
    }
  }, {
    key: "getTargetCache",
    value: function getTargetCache() {
      return this.ze;
    }
  }, {
    key: "getRemoteDocumentCache",
    value: function getRemoteDocumentCache() {
      return this.He;
    }
  }, {
    key: "getIndexManager",
    value: function getIndexManager() {
      return this.Ht;
    }
  }, {
    key: "getBundleCache",
    value: function getBundleCache() {
      return this.Je;
    }
  }, {
    key: "runTransaction",
    value: function runTransaction(t, e, n) {
      var _this84 = this;

      x("IndexedDbPersistence", "Starting transaction:", t);
      var s = "readonly" === e ? "readonly" : "readwrite";
      var i; // Do all transactions as readwrite against all object stores, since we
      // are the only reader/writer.

      return this.Ge.runTransaction(t, s, Ls, function (s) {
        return i = new Xs(s, _this84.Le ? _this84.Le.next() : J.T), "readwrite-primary" === e ? _this84.sn(i).next(function (t) {
          return !!t || _this84.rn(i);
        }).next(function (e) {
          if (!e) throw k("Failed to obtain primary lease for action '".concat(t, "'.")), _this84.isPrimary = !1, _this84.Oe.enqueueRetryable(function () {
            return _this84.Qe(!1);
          }), new q(U.FAILED_PRECONDITION, Bs);
          return n(i);
        }).next(function (t) {
          return _this84.an(i).next(function () {
            return t;
          });
        }) : _this84.En(i).next(function () {
          return n(i);
        });
      }).then(function (t) {
        return i.raiseOnCommittedEvent(), t;
      });
    }
    /**
     * Verifies that the current tab is the primary leaseholder or alternatively
     * that the leaseholder has opted into multi-tab synchronization.
     */
    // TODO(b/114226234): Remove this check when `synchronizeTabs` can no longer
    // be turned off.

  }, {
    key: "En",
    value: function En(t) {
      var _this85 = this;

      return Zi(t).get(Rs.key).next(function (t) {
        if (null !== t && _this85.ln(t.leaseTimestampMs, 5e3) && !_this85.wn(t.ownerId) && !_this85.cn(t) && !(_this85.Me || _this85.allowTabSynchronization && t.allowTabSynchronization)) throw new q(U.FAILED_PRECONDITION, Yi);
      });
    }
    /**
     * Obtains or extends the new primary lease for the local client. This
     * method does not verify that the client is eligible for this lease.
     */

  }, {
    key: "an",
    value: function an(t) {
      var e = new Rs(this.clientId, this.allowTabSynchronization, Date.now());
      return Zi(t).put(Rs.key, e);
    }
  }, {
    key: "on",
    value:
    /** Checks the primary lease and removes it if we are the current primary. */
    function on(t) {
      var _this86 = this;

      var e = Zi(t);
      return e.get(Rs.key).next(function (t) {
        return _this86.cn(t) ? (x("IndexedDbPersistence", "Releasing primary lease."), e.delete(Rs.key)) : qs.resolve();
      });
    }
    /** Verifies that `updateTimeMs` is within `maxAgeMs`. */

  }, {
    key: "ln",
    value: function ln(t, e) {
      var n = Date.now();
      return !(t < n - e) && (!(t > n) || (k("Detected an update time that is in the future: ".concat(t, " > ").concat(n)), !1));
    }
  }, {
    key: "Ze",
    value: function Ze() {
      var _this87 = this;

      null !== this.document && "function" == typeof this.document.addEventListener && (this.qe = function () {
        _this87.Oe.enqueueAndForget(function () {
          return _this87.inForeground = "visible" === _this87.document.visibilityState, _this87.Xe();
        });
      }, this.document.addEventListener("visibilitychange", this.qe), this.inForeground = "visible" === this.document.visibilityState);
    }
  }, {
    key: "mn",
    value: function mn() {
      this.qe && (this.document.removeEventListener("visibilitychange", this.qe), this.qe = null);
    }
    /**
     * Attaches a window.unload handler that will synchronously write our
     * clientId to a "zombie client id" location in LocalStorage. This can be used
     * by tabs trying to acquire the primary lease to determine that the lease
     * is no longer valid even if the timestamp is recent. This is particularly
     * important for the refresh case (so the tab correctly re-acquires the
     * primary lease). LocalStorage is used for this rather than IndexedDb because
     * it is a synchronous API and so can be used reliably from  an unload
     * handler.
     */

  }, {
    key: "tn",
    value: function tn() {
      var _this88 = this;

      var t;
      "function" == typeof (null === (t = this.window) || void 0 === t ? void 0 : t.addEventListener) && (this.Ue = function () {
        // Note: In theory, this should be scheduled on the AsyncQueue since it
        // accesses internal state. We execute this code directly during shutdown
        // to make sure it gets a chance to run.
        _this88._n(), (0, _util.isSafari)() && navigator.appVersion.match("Version/14") && // On Safari 14, we do not run any cleanup actions as it might trigger
        // a bug that prevents Safari from re-opening IndexedDB during the
        // next page load.
        // See https://bugs.webkit.org/show_bug.cgi?id=226547
        _this88.Oe.enterRestrictedMode(
        /* purgeExistingTasks= */
        !0), _this88.Oe.enqueueAndForget(function () {
          return _this88.shutdown();
        });
      }, this.window.addEventListener("pagehide", this.Ue));
    }
  }, {
    key: "gn",
    value: function gn() {
      this.Ue && (this.window.removeEventListener("pagehide", this.Ue), this.Ue = null);
    }
    /**
     * Returns whether a client is "zombied" based on its LocalStorage entry.
     * Clients become zombied when their tab closes without running all of the
     * cleanup logic in `shutdown()`.
     */

  }, {
    key: "wn",
    value: function wn(t) {
      var e;

      try {
        var _n45 = null !== (null === (e = this.Ye) || void 0 === e ? void 0 : e.getItem(this.dn(t)));

        return x("IndexedDbPersistence", "Client '".concat(t, "' ").concat(_n45 ? "is" : "is not", " zombied in LocalStorage")), _n45;
      } catch (t) {
        // Gracefully handle if LocalStorage isn't working.
        return k("IndexedDbPersistence", "Failed to get zombied client id.", t), !1;
      }
    }
    /**
     * Record client as zombied (a client that had its tab closed). Zombied
     * clients are ignored during primary tab selection.
     */

  }, {
    key: "_n",
    value: function _n() {
      if (this.Ye) try {
        this.Ye.setItem(this.dn(this.clientId), String(Date.now()));
      } catch (t) {
        // Gracefully handle if LocalStorage isn't available / working.
        k("Failed to set zombie client id.", t);
      }
    }
    /** Removes the zombied client entry if it exists. */

  }, {
    key: "yn",
    value: function yn() {
      if (this.Ye) try {
        this.Ye.removeItem(this.dn(this.clientId));
      } catch (t) {// Ignore
      }
    }
  }, {
    key: "dn",
    value: function dn(t) {
      return "firestore_zombie_".concat(this.persistenceKey, "_").concat(t);
    }
  }], [{
    key: "bt",
    value: function bt() {
      return js.bt();
    }
  }]);

  return Xi;
}();
/**
 * Helper to get a typed SimpleDbStore for the primary client object store.
 */


function Zi(t) {
  return Zs(t, Rs.store);
}
/**
 * Helper to get a typed SimpleDbStore for the client metadata object store.
 */


function tr(t) {
  return Zs(t, Os.store);
}
/**
 * Generates a string used as a prefix when storing data in IndexedDB and
 * LocalStorage.
 */


function er(t, e) {
  // Use two different prefix formats:
  //   * firestore / persistenceKey / projectID . databaseID / ...
  //   * firestore / persistenceKey / projectID / ...
  // projectIDs are DNS-compatible names and cannot contain dots
  // so there's no danger of collisions.
  var n = t.projectId;
  return t.isDefaultDatabase || (n += "." + t.database), "firestore/" + e + "/" + n + "/";
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var nr = function nr(t, e) {
  _classCallCheck(this, nr);

  this.progress = t, this.Tn = e;
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A readonly view of the local state of all documents we're tracking (i.e. we
 * have a cached version in remoteDocumentCache or local mutations for the
 * document). The view is computed by applying the mutations in the
 * MutationQueue to the RemoteDocumentCache.
 */


var sr = /*#__PURE__*/function () {
  function sr(t, e, n) {
    _classCallCheck(this, sr);

    this.He = t, this.In = e, this.Ht = n;
  }
  /**
   * Get the local view of the document identified by `key`.
   *
   * @returns Local view of the document or null if we don't have any cached
   * state for it.
   */


  _createClass(sr, [{
    key: "An",
    value: function An(t, e) {
      var _this89 = this;

      return this.In.getAllMutationBatchesAffectingDocumentKey(t, e).next(function (n) {
        return _this89.Rn(t, e, n);
      });
    }
    /** Internal version of `getDocument` that allows reusing batches. */

  }, {
    key: "Rn",
    value: function Rn(t, e, n) {
      return this.He.getEntry(t, e).next(function (t) {
        var _iterator27 = _createForOfIteratorHelper(n),
            _step27;

        try {
          for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {
            var _e40 = _step27.value;

            _e40.applyToLocalView(t);
          }
        } catch (err) {
          _iterator27.e(err);
        } finally {
          _iterator27.f();
        }

        return t;
      });
    } // Returns the view of the given `docs` as they would appear after applying
    // all mutations in the given `batches`.

  }, {
    key: "bn",
    value: function bn(t, e) {
      t.forEach(function (t, n) {
        var _iterator28 = _createForOfIteratorHelper(e),
            _step28;

        try {
          for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {
            var _t45 = _step28.value;

            _t45.applyToLocalView(n);
          }
        } catch (err) {
          _iterator28.e(err);
        } finally {
          _iterator28.f();
        }
      });
    }
    /**
     * Gets the local view of the documents identified by `keys`.
     *
     * If we don't have cached state for a document in `keys`, a NoDocument will
     * be stored for that key in the resulting set.
     */

  }, {
    key: "Pn",
    value: function Pn(t, e) {
      var _this90 = this;

      return this.He.getEntries(t, e).next(function (e) {
        return _this90.vn(t, e).next(function () {
          return e;
        });
      });
    }
    /**
     * Applies the local view the given `baseDocs` without retrieving documents
     * from the local store.
     */

  }, {
    key: "vn",
    value: function vn(t, e) {
      var _this91 = this;

      return this.In.getAllMutationBatchesAffectingDocumentKeys(t, e).next(function (t) {
        return _this91.bn(e, t);
      });
    }
    /**
     * Performs a query against the local view of all documents.
     *
     * @param transaction - The persistence transaction.
     * @param query - The query to match documents against.
     * @param sinceReadTime - If not set to SnapshotVersion.min(), return only
     *     documents that have been read since this snapshot version (exclusive).
     */

  }, {
    key: "getDocumentsMatchingQuery",
    value: function getDocumentsMatchingQuery(t, e, n) {
      /**
      * Returns whether the query matches a single document by path (rather than a
      * collection).
      */
      return function (t) {
        return Rt.isDocumentKey(t.path) && null === t.collectionGroup && 0 === t.filters.length;
      }(e) ? this.Vn(t, e.path) : ge(e) ? this.Sn(t, e, n) : this.Dn(t, e, n);
    }
  }, {
    key: "Vn",
    value: function Vn(t, e) {
      // Just do a simple document lookup.
      return this.An(t, new Rt(e)).next(function (t) {
        var e = En();
        return t.isFoundDocument() && (e = e.insert(t.key, t)), e;
      });
    }
  }, {
    key: "Sn",
    value: function Sn(t, e, n) {
      var _this92 = this;

      var s = e.collectionGroup;
      var i = En();
      return this.Ht.getCollectionParents(t, s).next(function (r) {
        return qs.forEach(r, function (r) {
          var o = function (t, e) {
            return new he(e,
            /*collectionGroup=*/
            null, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, t.startAt, t.endAt);
          }
          /**
          * Returns true if this query does not specify any query constraints that
          * could remove results.
          */
          (e, r.child(s));

          return _this92.Dn(t, o, n).next(function (t) {
            t.forEach(function (t, e) {
              i = i.insert(t, e);
            });
          });
        }).next(function () {
          return i;
        });
      });
    }
  }, {
    key: "Dn",
    value: function Dn(t, e, n) {
      var _this93 = this;

      // Query the remote documents and overlay mutations.
      var s, i;
      return this.He.getDocumentsMatchingQuery(t, e, n).next(function (n) {
        return s = n, _this93.In.getAllMutationBatchesAffectingQuery(t, e);
      }).next(function (e) {
        return i = e, _this93.Cn(t, i, s).next(function (t) {
          s = t;

          var _iterator29 = _createForOfIteratorHelper(i),
              _step29;

          try {
            for (_iterator29.s(); !(_step29 = _iterator29.n()).done;) {
              var _t46 = _step29.value;

              var _iterator30 = _createForOfIteratorHelper(_t46.mutations),
                  _step30;

              try {
                for (_iterator30.s(); !(_step30 = _iterator30.n()).done;) {
                  var _e41 = _step30.value;
                  var _n46 = _e41.key;

                  var _i21 = s.get(_n46);

                  null == _i21 && ( // Create invalid document to apply mutations on top of
                  _i21 = Ut.newInvalidDocument(_n46), s = s.insert(_n46, _i21)), He(_e41, _i21, _t46.localWriteTime), _i21.isFoundDocument() || (s = s.remove(_n46));
                }
              } catch (err) {
                _iterator30.e(err);
              } finally {
                _iterator30.f();
              }
            }
          } catch (err) {
            _iterator29.e(err);
          } finally {
            _iterator29.f();
          }
        });
      }).next(function () {
        return (// Finally, filter out any documents that don't actually match
          // the query.
          s.forEach(function (t, n) {
            Re(e, n) || (s = s.remove(t));
          }), s
        );
      });
    }
  }, {
    key: "Cn",
    value: function Cn(t, e, n) {
      var s = Rn();

      var _iterator31 = _createForOfIteratorHelper(e),
          _step31;

      try {
        for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {
          var _t47 = _step31.value;

          var _iterator32 = _createForOfIteratorHelper(_t47.mutations),
              _step32;

          try {
            for (_iterator32.s(); !(_step32 = _iterator32.n()).done;) {
              var _e42 = _step32.value;
              _e42 instanceof tn && null === n.get(_e42.key) && (s = s.add(_e42.key));
            }
          } catch (err) {
            _iterator32.e(err);
          } finally {
            _iterator32.f();
          }
        }
      } catch (err) {
        _iterator31.e(err);
      } finally {
        _iterator31.f();
      }

      var i = n;
      return this.He.getEntries(t, s).next(function (t) {
        return t.forEach(function (t, e) {
          e.isFoundDocument() && (i = i.insert(t, e));
        }), i;
      });
    }
  }]);

  return sr;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A set of changes to what documents are currently in view and out of view for
 * a given query. These changes are sent to the LocalStore by the View (via
 * the SyncEngine) and are used to pin / unpin documents as appropriate.
 */


var ir = /*#__PURE__*/function () {
  function ir(t, e, n, s) {
    _classCallCheck(this, ir);

    this.targetId = t, this.fromCache = e, this.Nn = n, this.xn = s;
  }

  _createClass(ir, null, [{
    key: "kn",
    value: function kn(t, e) {
      var n = Rn(),
          s = Rn();

      var _iterator33 = _createForOfIteratorHelper(e.docChanges),
          _step33;

      try {
        for (_iterator33.s(); !(_step33 = _iterator33.n()).done;) {
          var _t48 = _step33.value;

          switch (_t48.type) {
            case 0
            /* Added */
            :
              n = n.add(_t48.doc.key);
              break;

            case 1
            /* Removed */
            :
              s = s.add(_t48.doc.key);
            // do nothing
          }
        }
      } catch (err) {
        _iterator33.e(err);
      } finally {
        _iterator33.f();
      }

      return new ir(t, e.fromCache, n, s);
    }
  }]);

  return ir;
}();
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A query engine that takes advantage of the target document mapping in the
 * QueryCache. Query execution is optimized by only reading the documents that
 * previously matched a query plus any documents that were edited after the
 * query was last listened to.
 *
 * There are some cases when this optimization is not guaranteed to produce
 * the same results as full collection scans. In these cases, query
 * processing falls back to full scans. These cases are:
 *
 * - Limit queries where a document that matched the query previously no longer
 *   matches the query.
 *
 * - Limit queries where a document edit may cause the document to sort below
 *   another document that is in the local cache.
 *
 * - Queries that have never been CURRENT or free of limbo documents.
 */


var rr = /*#__PURE__*/function () {
  function rr() {
    _classCallCheck(this, rr);
  }

  _createClass(rr, [{
    key: "$n",
    value:
    /** Sets the document view to query against. */
    function $n(t) {
      this.On = t;
    }
    /** Returns all local documents matching the specified query. */

  }, {
    key: "getDocumentsMatchingQuery",
    value: function getDocumentsMatchingQuery(t, e, n, s) {
      var _this94 = this;

      // Queries that match all documents don't benefit from using
      // key-based lookups. It is more efficient to scan all documents in a
      // collection, rather than to perform individual lookups.
      return function (t) {
        return 0 === t.filters.length && null === t.limit && null == t.startAt && null == t.endAt && (0 === t.explicitOrderBy.length || 1 === t.explicitOrderBy.length && t.explicitOrderBy[0].field.isKeyField());
      }(e) || n.isEqual(st.min()) ? this.Fn(t, e) : this.On.Pn(t, s).next(function (i) {
        var r = _this94.Mn(e, i);

        return (de(e) || we(e)) && _this94.Ln(e.limitType, r, s, n) ? _this94.Fn(t, e) : (C() <= _logger.LogLevel.DEBUG && x("QueryEngine", "Re-using previous result from %s to execute query: %s", n.toString(), Ae(e)), _this94.On.getDocumentsMatchingQuery(t, e, n).next(function (t) {
          return (// We merge `previousResults` into `updateResults`, since
            // `updateResults` is already a DocumentMap. If a document is
            // contained in both lists, then its contents are the same.
            r.forEach(function (e) {
              t = t.insert(e.key, e);
            }), t
          );
        }));
      }); // Queries that have never seen a snapshot without limbo free documents
      // should also be run as a full collection scan.
    }
    /** Applies the query filter and sorting to the provided documents.  */

  }, {
    key: "Mn",
    value: function Mn(t, e) {
      // Sort the documents and re-apply the query filter since previously
      // matching documents do not necessarily still match the query.
      var n = new _n(be(t));
      return e.forEach(function (e, s) {
        Re(t, s) && (n = n.add(s));
      }), n;
    }
    /**
     * Determines if a limit query needs to be refilled from cache, making it
     * ineligible for index-free execution.
     *
     * @param sortedPreviousResults - The documents that matched the query when it
     * was last synchronized, sorted by the query's comparator.
     * @param remoteKeys - The document keys that matched the query at the last
     * snapshot.
     * @param limboFreeSnapshotVersion - The version of the snapshot when the
     * query was last synchronized.
     */

  }, {
    key: "Ln",
    value: function Ln(t, e, n, s) {
      // The query needs to be refilled if a previously matching document no
      // longer matches.
      if (n.size !== e.size) return !0; // Limit queries are not eligible for index-free query execution if there is
      // a potential that an older document from cache now sorts before a document
      // that was previously part of the limit. This, however, can only happen if
      // the document at the edge of the limit goes out of limit.
      // If a document that is not the limit boundary sorts differently,
      // the boundary of the limit itself did not change and documents from cache
      // will continue to be "rejected" by this boundary. Therefore, we can ignore
      // any modifications that don't affect the last document.

      var i = "F"
      /* First */
      === t ? e.last() : e.first();
      return !!i && (i.hasPendingWrites || i.version.compareTo(s) > 0);
    }
  }, {
    key: "Fn",
    value: function Fn(t, e) {
      return C() <= _logger.LogLevel.DEBUG && x("QueryEngine", "Using full collection scan to execute query:", Ae(e)), this.On.getDocumentsMatchingQuery(t, e, st.min());
    }
  }]);

  return rr;
}();
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Implements `LocalStore` interface.
 *
 * Note: some field defined in this class might have public access level, but
 * the class is not exported so they are only accessible from this module.
 * This is useful to implement optional features (like bundles) in free
 * functions, such that they are tree-shakeable.
 */


var or = /*#__PURE__*/function () {
  function or(
  /** Manages our in-memory or durable persistence. */
  t, e, n, s) {
    _classCallCheck(this, or);

    this.persistence = t, this.Bn = e, this.N = s,
    /**
     * Maps a targetID to data about its target.
     *
     * PORTING NOTE: We are using an immutable data structure on Web to make re-runs
     * of `applyRemoteEvent()` idempotent.
     */
    this.Un = new fn(Z),
    /** Maps a target to its targetID. */
    // TODO(wuandy): Evaluate if TargetId can be part of Target.
    this.qn = new qi(function (t) {
      return jt(t);
    }, Wt),
    /**
     * The read time of the last entry processed by `getNewDocumentChanges()`.
     *
     * PORTING NOTE: This is only used for multi-tab synchronization.
     */
    this.Kn = st.min(), this.In = t.getMutationQueue(n), this.jn = t.getRemoteDocumentCache(), this.ze = t.getTargetCache(), this.Qn = new sr(this.jn, this.In, this.persistence.getIndexManager()), this.Je = t.getBundleCache(), this.Bn.$n(this.Qn);
  }

  _createClass(or, [{
    key: "collectGarbage",
    value: function collectGarbage(t) {
      var _this95 = this;

      return this.persistence.runTransaction("Collect garbage", "readwrite-primary", function (e) {
        return t.collect(e, _this95.Un);
      });
    }
  }]);

  return or;
}();

function ar(
/** Manages our in-memory or durable persistence. */
t, e, n, s) {
  return new or(t, e, n, s);
}
/**
 * Tells the LocalStore that the currently authenticated user has changed.
 *
 * In response the local store switches the mutation queue to the new user and
 * returns any resulting document changes.
 */
// PORTING NOTE: Android and iOS only return the documents affected by the
// change.


function cr(_x9, _x10) {
  return _cr.apply(this, arguments);
}
/* Accepts locally generated Mutations and commit them to storage. */

/**
 * Acknowledges the given batch.
 *
 * On the happy path when a batch is acknowledged, the local store will
 *
 *  + remove the batch from the mutation queue;
 *  + apply the changes to the remote document cache;
 *  + recalculate the latency compensated view implied by those changes (there
 *    may be mutations in the queue that affect the documents but haven't been
 *    acknowledged yet); and
 *  + give the changed documents back the sync engine
 *
 * @returns The resulting (modified) documents.
 */


function _cr() {
  _cr = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee71(t, e) {
    var n, s, i, r;
    return regeneratorRuntime.wrap(function _callee71$(_context71) {
      while (1) {
        switch (_context71.prev = _context71.next) {
          case 0:
            n = B(t);
            s = n.In, i = n.Qn;
            _context71.next = 4;
            return n.persistence.runTransaction("Handle user change", "readonly", function (t) {
              // Swap out the mutation queue, grabbing the pending mutation batches
              // before and after.
              var r;
              return n.In.getAllMutationBatches(t).next(function (o) {
                return r = o, s = n.persistence.getMutationQueue(e), // Recreate our LocalDocumentsView using the new
                // MutationQueue.
                i = new sr(n.jn, s, n.persistence.getIndexManager()), s.getAllMutationBatches(t);
              }).next(function (e) {
                var n = [],
                    s = []; // Union the old/new changed keys.

                // Union the old/new changed keys.
                var o = Rn();

                var _iterator58 = _createForOfIteratorHelper(r),
                    _step58;

                try {
                  for (_iterator58.s(); !(_step58 = _iterator58.n()).done;) {
                    var _t90 = _step58.value;
                    n.push(_t90.batchId);

                    var _iterator60 = _createForOfIteratorHelper(_t90.mutations),
                        _step60;

                    try {
                      for (_iterator60.s(); !(_step60 = _iterator60.n()).done;) {
                        var _e72 = _step60.value;
                        o = o.add(_e72.key);
                      }
                    } catch (err) {
                      _iterator60.e(err);
                    } finally {
                      _iterator60.f();
                    }
                  }
                } catch (err) {
                  _iterator58.e(err);
                } finally {
                  _iterator58.f();
                }

                var _iterator59 = _createForOfIteratorHelper(e),
                    _step59;

                try {
                  for (_iterator59.s(); !(_step59 = _iterator59.n()).done;) {
                    var _t91 = _step59.value;
                    s.push(_t91.batchId);

                    var _iterator61 = _createForOfIteratorHelper(_t91.mutations),
                        _step61;

                    try {
                      for (_iterator61.s(); !(_step61 = _iterator61.n()).done;) {
                        var _e73 = _step61.value;
                        o = o.add(_e73.key);
                      }
                    } catch (err) {
                      _iterator61.e(err);
                    } finally {
                      _iterator61.f();
                    }
                  } // Return the set of all (potentially) changed documents and the list
                  // of mutation batch IDs that were affected by change.

                } catch (err) {
                  _iterator59.e(err);
                } finally {
                  _iterator59.f();
                } // Return the set of all (potentially) changed documents and the list
                // of mutation batch IDs that were affected by change.


                // Return the set of all (potentially) changed documents and the list
                // of mutation batch IDs that were affected by change.
                return i.Pn(t, o).next(function (t) {
                  return {
                    Wn: t,
                    removedBatchIds: n,
                    addedBatchIds: s
                  };
                });
              });
            });

          case 4:
            r = _context71.sent;
            return _context71.abrupt("return", (n.In = s, n.Qn = i, n.Bn.$n(n.Qn), r));

          case 6:
          case "end":
            return _context71.stop();
        }
      }
    }, _callee71);
  }));
  return _cr.apply(this, arguments);
}

function ur(t, e) {
  var n = B(t);
  return n.persistence.runTransaction("Acknowledge batch", "readwrite-primary", function (t) {
    var s = e.batch.keys(),
        i = n.jn.newChangeBuffer({
      trackRemovals: !0
    });
    return function (t, e, n, s) {
      var i = n.batch,
          r = i.keys();
      var o = qs.resolve();
      return r.forEach(function (t) {
        o = o.next(function () {
          return s.getEntry(e, t);
        }).next(function (e) {
          var r = n.docVersions.get(t);
          M(null !== r), e.version.compareTo(r) < 0 && (i.applyToRemoteDocument(e, n), e.isValidDocument() && // We use the commitVersion as the readTime rather than the
          // document's updateTime since the updateTime is not advanced
          // for updates that do not modify the underlying document.
          s.addEntry(e, n.commitVersion));
        });
      }), o.next(function () {
        return t.In.removeMutationBatch(e, i);
      });
    }
    /** Returns the local view of the documents affected by a mutation batch. */
    // PORTING NOTE: Multi-Tab only.
    (n, t, e, i).next(function () {
      return i.apply(t);
    }).next(function () {
      return n.In.performConsistencyCheck(t);
    }).next(function () {
      return n.Qn.Pn(t, s);
    });
  });
}
/**
 * Removes mutations from the MutationQueue for the specified batch;
 * LocalDocuments will be recalculated.
 *
 * @returns The resulting modified documents.
 */

/**
 * Returns the last consistent snapshot processed (used by the RemoteStore to
 * determine whether to buffer incoming snapshots from the backend).
 */


function hr(t) {
  var e = B(t);
  return e.persistence.runTransaction("Get last remote snapshot version", "readonly", function (t) {
    return e.ze.getLastRemoteSnapshotVersion(t);
  });
}
/**
 * Updates the "ground-state" (remote) documents. We assume that the remote
 * event reflects any write batches that have been acknowledged or rejected
 * (i.e. we do not re-apply local mutations to updates from this event).
 *
 * LocalDocuments are re-calculated if there are remaining mutations in the
 * queue.
 */


function lr(t, e) {
  var n = B(t),
      s = e.snapshotVersion;
  var i = n.Un;
  return n.persistence.runTransaction("Apply remote event", "readwrite-primary", function (t) {
    var r = n.jn.newChangeBuffer({
      trackRemovals: !0
    }); // Reset newTargetDataByTargetMap in case this transaction gets re-run.

    i = n.Un;
    var o = [];
    e.targetChanges.forEach(function (e, r) {
      var a = i.get(r);
      if (!a) return; // Only update the remote keys if the target is still active. This
      // ensures that we can persist the updated target data along with
      // the updated assignment.

      o.push(n.ze.removeMatchingKeys(t, e.removedDocuments, r).next(function () {
        return n.ze.addMatchingKeys(t, e.addedDocuments, r);
      }));
      var c = e.resumeToken; // Update the resume token if the change includes one.

      if (c.approximateByteSize() > 0) {
        var _u3 = a.withResumeToken(c, s).withSequenceNumber(t.currentSequenceNumber);

        i = i.insert(r, _u3), // Update the target data if there are target changes (or if
        // sufficient time has passed since the last update).

        /**
        * Returns true if the newTargetData should be persisted during an update of
        * an active target. TargetData should always be persisted when a target is
        * being released and should not call this function.
        *
        * While the target is active, TargetData updates can be omitted when nothing
        * about the target has changed except metadata like the resume token or
        * snapshot version. Occasionally it's worth the extra write to prevent these
        * values from getting too stale after a crash, but this doesn't have to be
        * too frequent.
        */
        function (t, e, n) {
          // Always persist target data if we don't already have a resume token.
          if (M(e.resumeToken.approximateByteSize() > 0), 0 === t.resumeToken.approximateByteSize()) return !0; // Don't allow resume token changes to be buffered indefinitely. This
          // allows us to be reasonably up-to-date after a crash and avoids needing
          // to loop over all active queries on shutdown. Especially in the browser
          // we may not get time to do anything interesting while the current tab is
          // closing.

          if (e.snapshotVersion.toMicroseconds() - t.snapshotVersion.toMicroseconds() >= 3e8) return !0; // Otherwise if the only thing that has changed about a target is its resume
          // token it's not worth persisting. Note that the RemoteStore keeps an
          // in-memory view of the currently active targets which includes the current
          // resume token, so stream failure or user changes will still use an
          // up-to-date resume token regardless of what we do here.

          return n.addedDocuments.size + n.modifiedDocuments.size + n.removedDocuments.size > 0;
        }
        /**
        * Notifies local store of the changed views to locally pin documents.
        */
        (a, _u3, e) && o.push(n.ze.updateTargetData(t, _u3));
      }
    });
    var a = yn(); // HACK: The only reason we allow a null snapshot version is so that we
    // can synthesize remote events when we get permission denied errors while
    // trying to resolve the state of a locally cached document that is in
    // limbo.

    if (e.documentUpdates.forEach(function (s, i) {
      e.resolvedLimboDocuments.has(s) && o.push(n.persistence.referenceDelegate.updateLimboDocument(t, s));
    }), // Each loop iteration only affects its "own" doc, so it's safe to get all the remote
    // documents in advance in a single call.
    o.push(fr(t, r, e.documentUpdates, s, void 0).next(function (t) {
      a = t;
    })), !s.isEqual(st.min())) {
      var _e43 = n.ze.getLastRemoteSnapshotVersion(t).next(function (e) {
        return n.ze.setTargetsMetadata(t, t.currentSequenceNumber, s);
      });

      o.push(_e43);
    }

    return qs.waitFor(o).next(function () {
      return r.apply(t);
    }).next(function () {
      return n.Qn.vn(t, a);
    }).next(function () {
      return a;
    });
  }).then(function (t) {
    return n.Un = i, t;
  });
}
/**
 * Populates document change buffer with documents from backend or a bundle.
 * Returns the document changes resulting from applying those documents.
 *
 * @param txn - Transaction to use to read existing documents from storage.
 * @param documentBuffer - Document buffer to collect the resulted changes to be
 *        applied to storage.
 * @param documents - Documents to be applied.
 * @param globalVersion - A `SnapshotVersion` representing the read time if all
 *        documents have the same read time.
 * @param documentVersions - A DocumentKey-to-SnapshotVersion map if documents
 *        have their own read time.
 *
 * Note: this function will use `documentVersions` if it is defined;
 * when it is not defined, resorts to `globalVersion`.
 */


function fr(t, e, n, s, // TODO(wuandy): We could add `readTime` to MaybeDocument instead to remove
// this parameter.
i) {
  var r = Rn();
  return n.forEach(function (t) {
    return r = r.add(t);
  }), e.getEntries(t, r).next(function (t) {
    var r = yn();
    return n.forEach(function (n, o) {
      var a = t.get(n),
          c = (null == i ? void 0 : i.get(n)) || s; // Note: The order of the steps below is important, since we want
      // to ensure that rejected limbo resolutions (which fabricate
      // NoDocuments with SnapshotVersion.min()) never add documents to
      // cache.

      o.isNoDocument() && o.version.isEqual(st.min()) ? ( // NoDocuments with SnapshotVersion.min() are used in manufactured
      // events. We remove these documents from cache since we lost
      // access.
      e.removeEntry(n, c), r = r.insert(n, o)) : !a.isValidDocument() || o.version.compareTo(a.version) > 0 || 0 === o.version.compareTo(a.version) && a.hasPendingWrites ? (e.addEntry(o, c), r = r.insert(n, o)) : x("LocalStore", "Ignoring outdated watch update for ", n, ". Current version:", a.version, " Watch version:", o.version);
    }), r;
  });
}
/**
 * Gets the mutation batch after the passed in batchId in the mutation queue
 * or null if empty.
 * @param afterBatchId - If provided, the batch to search after.
 * @returns The next mutation or null if there wasn't one.
 */


function dr(t, e) {
  var n = B(t);
  return n.persistence.runTransaction("Get next mutation batch", "readonly", function (t) {
    return void 0 === e && (e = -1), n.In.getNextMutationBatchAfterBatchId(t, e);
  });
}
/**
 * Reads the current value of a Document with a given key or null if not
 * found - used for testing.
 */

/**
 * Assigns the given target an internal ID so that its results can be pinned so
 * they don't get GC'd. A target must be allocated in the local store before
 * the store can be used to manage its view.
 *
 * Allocating an already allocated `Target` will return the existing `TargetData`
 * for that `Target`.
 */


function wr(t, e) {
  var n = B(t);
  return n.persistence.runTransaction("Allocate target", "readwrite", function (t) {
    var s;
    return n.ze.getTargetData(t, e).next(function (i) {
      return i ? ( // This target has been listened to previously, so reuse the
      // previous targetID.
      // TODO(mcg): freshen last accessed date?
      s = i, qs.resolve(s)) : n.ze.allocateTargetId(t).next(function (i) {
        return s = new ni(e, i, 0
        /* Listen */
        , t.currentSequenceNumber), n.ze.addTargetData(t, s).next(function () {
          return s;
        });
      });
    });
  }).then(function (t) {
    // If Multi-Tab is enabled, the existing target data may be newer than
    // the in-memory data
    var s = n.Un.get(t.targetId);
    return (null === s || t.snapshotVersion.compareTo(s.snapshotVersion) > 0) && (n.Un = n.Un.insert(t.targetId, t), n.qn.set(e, t.targetId)), t;
  });
}
/**
 * Returns the TargetData as seen by the LocalStore, including updates that may
 * have not yet been persisted to the TargetCache.
 */
// Visible for testing.

/**
 * Unpins all the documents associated with the given target. If
 * `keepPersistedTargetData` is set to false and Eager GC enabled, the method
 * directly removes the associated target data from the target cache.
 *
 * Releasing a non-existing `Target` is a no-op.
 */
// PORTING NOTE: `keepPersistedTargetData` is multi-tab only.


function _r(_x11, _x12, _x13) {
  return _r14.apply(this, arguments);
}
/**
 * Runs the specified query against the local store and returns the results,
 * potentially taking advantage of query data from previous executions (such
 * as the set of remote keys).
 *
 * @param usePreviousResults - Whether results from previous executions can
 * be used to optimize this query execution.
 */


function _r14() {
  _r14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee72(t, e, n) {
    var s, i, r;
    return regeneratorRuntime.wrap(function _callee72$(_context72) {
      while (1) {
        switch (_context72.prev = _context72.next) {
          case 0:
            s = B(t), i = s.Un.get(e), r = n ? "readwrite" : "readwrite-primary";
            _context72.prev = 1;
            _context72.t0 = n;

            if (_context72.t0) {
              _context72.next = 6;
              break;
            }

            _context72.next = 6;
            return s.persistence.runTransaction("Release target", r, function (t) {
              return s.persistence.referenceDelegate.removeTarget(t, i);
            });

          case 6:
            _context72.next = 13;
            break;

          case 8:
            _context72.prev = 8;
            _context72.t1 = _context72["catch"](1);

            if (Gs(_context72.t1)) {
              _context72.next = 12;
              break;
            }

            throw _context72.t1;

          case 12:
            // All `releaseTarget` does is record the final metadata state for the
            // target, but we've been recording this periodically during target
            // activity. If we lose this write this could cause a very slight
            // difference in the order of target deletion during GC, but we
            // don't define exact LRU semantics so this is acceptable.
            x("LocalStore", "Failed to update sequence numbers for target ".concat(e, ": ").concat(_context72.t1));

          case 13:
            s.Un = s.Un.remove(e), s.qn.delete(i.target);

          case 14:
          case "end":
            return _context72.stop();
        }
      }
    }, _callee72, null, [[1, 8]]);
  }));
  return _r14.apply(this, arguments);
}

function mr(t, e, n) {
  var s = B(t);
  var i = st.min(),
      r = Rn();
  return s.persistence.runTransaction("Execute query", "readonly", function (t) {
    return function (t, e, n) {
      var s = B(t),
          i = s.qn.get(n);
      return void 0 !== i ? qs.resolve(s.Un.get(i)) : s.ze.getTargetData(e, n);
    }(s, t, pe(e)).next(function (e) {
      if (e) return i = e.lastLimboFreeSnapshotVersion, s.ze.getMatchingKeysForTargetId(t, e.targetId).next(function (t) {
        r = t;
      });
    }).next(function () {
      return s.Bn.getDocumentsMatchingQuery(t, e, n ? i : st.min(), n ? r : Rn());
    }).next(function (t) {
      return {
        documents: t,
        Gn: r
      };
    });
  });
} // PORTING NOTE: Multi-Tab only.


function gr(t, e) {
  var n = B(t),
      s = B(n.ze),
      i = n.Un.get(e);
  return i ? Promise.resolve(i.target) : n.persistence.runTransaction("Get target data", "readonly", function (t) {
    return s.Et(t, e).next(function (t) {
      return t ? t.target : null;
    });
  });
}
/**
 * Returns the set of documents that have been updated since the last call.
 * If this is the first call, returns the set of changes since client
 * initialization. Further invocations will return document that have changed
 * since the prior call.
 */
// PORTING NOTE: Multi-Tab only.


function yr(t) {
  var e = B(t);
  return e.persistence.runTransaction("Get new document changes", "readonly", function (t) {
    return function (t, e, n) {
      var s = B(t);
      var i = yn(),
          r = oi(n);
      var o = Gi(e),
          a = IDBKeyRange.lowerBound(r, !0);
      return o.Kt({
        index: Ds.readTimeIndex,
        range: a
      }, function (t, e) {
        // Unlike `getEntry()` and others, `getNewDocumentChanges()` parses
        // the documents directly since we want to keep sentinel deletes.
        var n = ii(s.N, e);
        i = i.insert(n.key, n), r = e.readTime;
      }).next(function () {
        return {
          Tn: i,
          readTime: ai(r)
        };
      });
    }
    /**
    * Returns the read time of the most recently read document in the cache, or
    * SnapshotVersion.min() if not available.
    */
    // PORTING NOTE: This is only used for multi-tab synchronization.
    (e.jn, t, e.Kn);
  }).then(function (_ref19) {
    var t = _ref19.Tn,
        n = _ref19.readTime;
    return e.Kn = n, t;
  });
}
/**
 * Reads the newest document change from persistence and moves the internal
 * synchronization marker forward so that calls to `getNewDocumentChanges()`
 * only return changes that happened after client initialization.
 */
// PORTING NOTE: Multi-Tab only.


function pr(_x14) {
  return _pr.apply(this, arguments);
}
/**
 * Creates a new target using the given bundle name, which will be used to
 * hold the keys of all documents from the bundle in query-document mappings.
 * This ensures that the loaded documents do not get garbage collected
 * right away.
 */

/**
 * Applies the documents from a bundle to the "ground-state" (remote)
 * documents.
 *
 * LocalDocuments are re-calculated if there are remaining mutations in the
 * queue.
 */


function _pr() {
  _pr = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee73(t) {
    var e;
    return regeneratorRuntime.wrap(function _callee73$(_context73) {
      while (1) {
        switch (_context73.prev = _context73.next) {
          case 0:
            e = B(t);
            return _context73.abrupt("return", e.persistence.runTransaction("Synchronize last document change read time", "readonly", function (t) {
              return function (t) {
                var e = Gi(t); // If there are no existing entries, we return SnapshotVersion.min().

                // If there are no existing entries, we return SnapshotVersion.min().
                var n = st.min();
                return e.Kt({
                  index: Ds.readTimeIndex,
                  reverse: !0
                }, function (t, e, s) {
                  e.readTime && (n = ai(e.readTime)), s.done();
                }).next(function () {
                  return n;
                });
              }(t);
            }).then(function (t) {
              e.Kn = t;
            }));

          case 2:
          case "end":
            return _context73.stop();
        }
      }
    }, _callee73);
  }));
  return _pr.apply(this, arguments);
}

function Er(_x15, _x16, _x17, _x18) {
  return _Er.apply(this, arguments);
}
/**
 * Returns a promise of a boolean to indicate if the given bundle has already
 * been loaded and the create time is newer than the current loading bundle.
 */

/**
 * Saves the given `NamedQuery` to local persistence.
 */


function _Er() {
  _Er = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee74(t, e, n, s) {
    var i, r, o, a, _iterator62, _step62, _t92, _n76, c, u;

    return regeneratorRuntime.wrap(function _callee74$(_context74) {
      while (1) {
        switch (_context74.prev = _context74.next) {
          case 0:
            i = B(t);
            r = Rn(), o = yn(), a = In();
            _iterator62 = _createForOfIteratorHelper(n);

            try {
              for (_iterator62.s(); !(_step62 = _iterator62.n()).done;) {
                _t92 = _step62.value;
                _n76 = e.zn(_t92.metadata.name);
                _t92.document && (r = r.add(_n76)), o = o.insert(_n76, e.Hn(_t92)), a = a.insert(_n76, e.Jn(_t92.metadata.readTime));
              }
            } catch (err) {
              _iterator62.e(err);
            } finally {
              _iterator62.f();
            }

            c = i.jn.newChangeBuffer({
              trackRemovals: !0
            });
            _context74.next = 7;
            return wr(i, function (t) {
              // It is OK that the path used for the query is not valid, because this will
              // not be read and queried.
              return pe(fe(ct.fromString("__bundle__/docs/".concat(t))));
            }(s));

          case 7:
            u = _context74.sent;
            return _context74.abrupt("return", i.persistence.runTransaction("Apply bundle documents", "readwrite", function (t) {
              return fr(t, c, o, st.min(), a).next(function (e) {
                return c.apply(t), e;
              }).next(function (e) {
                return i.ze.removeMatchingKeysForTargetId(t, u.targetId).next(function () {
                  return i.ze.addMatchingKeys(t, r, u.targetId);
                }).next(function () {
                  return i.Qn.vn(t, e);
                }).next(function () {
                  return e;
                });
              });
            }));

          case 9:
          case "end":
            return _context74.stop();
        }
      }
    }, _callee74);
  }));
  return _Er.apply(this, arguments);
}

function Tr(_x19, _x20) {
  return _Tr.apply(this, arguments);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function _Tr() {
  _Tr = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee75(t, e) {
    var n,
        s,
        i,
        _args75 = arguments;
    return regeneratorRuntime.wrap(function _callee75$(_context75) {
      while (1) {
        switch (_context75.prev = _context75.next) {
          case 0:
            n = _args75.length > 2 && _args75[2] !== undefined ? _args75[2] : Rn();
            _context75.next = 3;
            return wr(t, pe(di(e.bundledQuery)));

          case 3:
            s = _context75.sent;
            i = B(t);
            return _context75.abrupt("return", i.persistence.runTransaction("Save named query", "readwrite", function (t) {
              var r = qn(e.readTime); // Simply save the query itself if it is older than what the SDK already
              // has.

              // Simply save the query itself if it is older than what the SDK already
              // has.
              if (s.snapshotVersion.compareTo(r) >= 0) return i.Je.saveNamedQuery(t, e); // Update existing target data because the query from the bundle is newer.

              // Update existing target data because the query from the bundle is newer.
              var o = s.withResumeToken(dt.EMPTY_BYTE_STRING, r);
              return i.Un = i.Un.insert(o.targetId, o), i.ze.updateTargetData(t, o).next(function () {
                return i.ze.removeMatchingKeysForTargetId(t, s.targetId);
              }).next(function () {
                return i.ze.addMatchingKeys(t, n, s.targetId);
              }).next(function () {
                return i.Je.saveNamedQuery(t, e);
              });
            }));

          case 6:
          case "end":
            return _context75.stop();
        }
      }
    }, _callee75);
  }));
  return _Tr.apply(this, arguments);
}

var Ir = /*#__PURE__*/function () {
  function Ir(t) {
    _classCallCheck(this, Ir);

    this.N = t, this.Yn = new Map(), this.Xn = new Map();
  }

  _createClass(Ir, [{
    key: "getBundleMetadata",
    value: function getBundleMetadata(t, e) {
      return qs.resolve(this.Yn.get(e));
    }
  }, {
    key: "saveBundleMetadata",
    value: function saveBundleMetadata(t, e) {
      /** Decodes a BundleMetadata proto into a BundleMetadata object. */
      var n;
      return this.Yn.set(e.id, {
        id: (n = e).id,
        version: n.version,
        createTime: qn(n.createTime)
      }), qs.resolve();
    }
  }, {
    key: "getNamedQuery",
    value: function getNamedQuery(t, e) {
      return qs.resolve(this.Xn.get(e));
    }
  }, {
    key: "saveNamedQuery",
    value: function saveNamedQuery(t, e) {
      return this.Xn.set(e.name, function (t) {
        return {
          name: t.name,
          query: di(t.bundledQuery),
          readTime: qn(t.readTime)
        };
      }(e)), qs.resolve();
    }
  }]);

  return Ir;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A collection of references to a document from some kind of numbered entity
 * (either a target ID or batch ID). As references are added to or removed from
 * the set corresponding events are emitted to a registered garbage collector.
 *
 * Each reference is represented by a DocumentReference object. Each of them
 * contains enough information to uniquely identify the reference. They are all
 * stored primarily in a set sorted by key. A document is considered garbage if
 * there's no references in that set (this can be efficiently checked thanks to
 * sorting by key).
 *
 * ReferenceSet also keeps a secondary set that contains references sorted by
 * IDs. This one is used to efficiently implement removal of all references by
 * some target ID.
 */


var Ar = /*#__PURE__*/function () {
  function Ar() {
    _classCallCheck(this, Ar);

    // A set of outstanding references to a document sorted by key.
    this.Zn = new _n(Rr.ts), // A set of outstanding references to a document sorted by target id.
    this.es = new _n(Rr.ns);
  }
  /** Returns true if the reference set contains no references. */


  _createClass(Ar, [{
    key: "isEmpty",
    value: function isEmpty() {
      return this.Zn.isEmpty();
    }
    /** Adds a reference to the given document key for the given ID. */

  }, {
    key: "addReference",
    value: function addReference(t, e) {
      var n = new Rr(t, e);
      this.Zn = this.Zn.add(n), this.es = this.es.add(n);
    }
    /** Add references to the given document keys for the given ID. */

  }, {
    key: "ss",
    value: function ss(t, e) {
      var _this96 = this;

      t.forEach(function (t) {
        return _this96.addReference(t, e);
      });
    }
    /**
     * Removes a reference to the given document key for the given
     * ID.
     */

  }, {
    key: "removeReference",
    value: function removeReference(t, e) {
      this.rs(new Rr(t, e));
    }
  }, {
    key: "os",
    value: function os(t, e) {
      var _this97 = this;

      t.forEach(function (t) {
        return _this97.removeReference(t, e);
      });
    }
    /**
     * Clears all references with a given ID. Calls removeRef() for each key
     * removed.
     */

  }, {
    key: "cs",
    value: function cs(t) {
      var _this98 = this;

      var e = new Rt(new ct([])),
          n = new Rr(e, t),
          s = new Rr(e, t + 1),
          i = [];
      return this.es.forEachInRange([n, s], function (t) {
        _this98.rs(t), i.push(t.key);
      }), i;
    }
  }, {
    key: "us",
    value: function us() {
      var _this99 = this;

      this.Zn.forEach(function (t) {
        return _this99.rs(t);
      });
    }
  }, {
    key: "rs",
    value: function rs(t) {
      this.Zn = this.Zn.delete(t), this.es = this.es.delete(t);
    }
  }, {
    key: "hs",
    value: function hs(t) {
      var e = new Rt(new ct([])),
          n = new Rr(e, t),
          s = new Rr(e, t + 1);
      var i = Rn();
      return this.es.forEachInRange([n, s], function (t) {
        i = i.add(t.key);
      }), i;
    }
  }, {
    key: "containsKey",
    value: function containsKey(t) {
      var e = new Rr(t, 0),
          n = this.Zn.firstAfterOrEqual(e);
      return null !== n && t.isEqual(n.key);
    }
  }]);

  return Ar;
}();

var Rr = /*#__PURE__*/function () {
  function Rr(t, e) {
    _classCallCheck(this, Rr);

    this.key = t, this.ls = e;
  }
  /** Compare by key then by ID */


  _createClass(Rr, null, [{
    key: "ts",
    value: function ts(t, e) {
      return Rt.comparator(t.key, e.key) || Z(t.ls, e.ls);
    }
    /** Compare by ID then by key */

  }, {
    key: "ns",
    value: function ns(t, e) {
      return Z(t.ls, e.ls) || Rt.comparator(t.key, e.key);
    }
  }]);

  return Rr;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var br = /*#__PURE__*/function () {
  function br(t, e) {
    _classCallCheck(this, br);

    this.Ht = t, this.referenceDelegate = e,
    /**
     * The set of all mutations that have been sent but not yet been applied to
     * the backend.
     */
    this.In = [],
    /** Next value to use when assigning sequential IDs to each mutation batch. */
    this.fs = 1,
    /** An ordered mapping between documents and the mutations batch IDs. */
    this.ds = new _n(Rr.ts);
  }

  _createClass(br, [{
    key: "checkEmpty",
    value: function checkEmpty(t) {
      return qs.resolve(0 === this.In.length);
    }
  }, {
    key: "addMutationBatch",
    value: function addMutationBatch(t, e, n, s) {
      var i = this.fs;
      this.fs++, this.In.length > 0 && this.In[this.In.length - 1];
      var r = new ti(i, e, n, s);
      this.In.push(r); // Track references by document key and index collection parents.

      var _iterator34 = _createForOfIteratorHelper(s),
          _step34;

      try {
        for (_iterator34.s(); !(_step34 = _iterator34.n()).done;) {
          var _e44 = _step34.value;
          this.ds = this.ds.add(new Rr(_e44.key, i)), this.Ht.addToCollectionParentIndex(t, _e44.key.path.popLast());
        }
      } catch (err) {
        _iterator34.e(err);
      } finally {
        _iterator34.f();
      }

      return qs.resolve(r);
    }
  }, {
    key: "lookupMutationBatch",
    value: function lookupMutationBatch(t, e) {
      return qs.resolve(this.ws(e));
    }
  }, {
    key: "getNextMutationBatchAfterBatchId",
    value: function getNextMutationBatchAfterBatchId(t, e) {
      var n = e + 1,
          s = this._s(n),
          i = s < 0 ? 0 : s; // The requested batchId may still be out of range so normalize it to the
      // start of the queue.


      return qs.resolve(this.In.length > i ? this.In[i] : null);
    }
  }, {
    key: "getHighestUnacknowledgedBatchId",
    value: function getHighestUnacknowledgedBatchId() {
      return qs.resolve(0 === this.In.length ? -1 : this.fs - 1);
    }
  }, {
    key: "getAllMutationBatches",
    value: function getAllMutationBatches(t) {
      return qs.resolve(this.In.slice());
    }
  }, {
    key: "getAllMutationBatchesAffectingDocumentKey",
    value: function getAllMutationBatchesAffectingDocumentKey(t, e) {
      var _this100 = this;

      var n = new Rr(e, 0),
          s = new Rr(e, Number.POSITIVE_INFINITY),
          i = [];
      return this.ds.forEachInRange([n, s], function (t) {
        var e = _this100.ws(t.ls);

        i.push(e);
      }), qs.resolve(i);
    }
  }, {
    key: "getAllMutationBatchesAffectingDocumentKeys",
    value: function getAllMutationBatchesAffectingDocumentKeys(t, e) {
      var _this101 = this;

      var n = new _n(Z);
      return e.forEach(function (t) {
        var e = new Rr(t, 0),
            s = new Rr(t, Number.POSITIVE_INFINITY);

        _this101.ds.forEachInRange([e, s], function (t) {
          n = n.add(t.ls);
        });
      }), qs.resolve(this.gs(n));
    }
  }, {
    key: "getAllMutationBatchesAffectingQuery",
    value: function getAllMutationBatchesAffectingQuery(t, e) {
      // Use the query path as a prefix for testing if a document matches the
      // query.
      var n = e.path,
          s = n.length + 1; // Construct a document reference for actually scanning the index. Unlike
      // the prefix the document key in this reference must have an even number of
      // segments. The empty segment can be used a suffix of the query path
      // because it precedes all other segments in an ordered traversal.

      var i = n;
      Rt.isDocumentKey(i) || (i = i.child(""));
      var r = new Rr(new Rt(i), 0); // Find unique batchIDs referenced by all documents potentially matching the
      // query.

      var o = new _n(Z);
      return this.ds.forEachWhile(function (t) {
        var e = t.key.path;
        return !!n.isPrefixOf(e) && ( // Rows with document keys more than one segment longer than the query
        // path can't be matches. For example, a query on 'rooms' can't match
        // the document /rooms/abc/messages/xyx.
        // TODO(mcg): we'll need a different scanner when we implement
        // ancestor queries.
        e.length === s && (o = o.add(t.ls)), !0);
      }, r), qs.resolve(this.gs(o));
    }
  }, {
    key: "gs",
    value: function gs(t) {
      var _this102 = this;

      // Construct an array of matching batches, sorted by batchID to ensure that
      // multiple mutations affecting the same document key are applied in order.
      var e = [];
      return t.forEach(function (t) {
        var n = _this102.ws(t);

        null !== n && e.push(n);
      }), e;
    }
  }, {
    key: "removeMutationBatch",
    value: function removeMutationBatch(t, e) {
      var _this103 = this;

      M(0 === this.ys(e.batchId, "removed")), this.In.shift();
      var n = this.ds;
      return qs.forEach(e.mutations, function (s) {
        var i = new Rr(s.key, e.batchId);
        return n = n.delete(i), _this103.referenceDelegate.markPotentiallyOrphaned(t, s.key);
      }).next(function () {
        _this103.ds = n;
      });
    }
  }, {
    key: "te",
    value: function te(t) {// No-op since the memory mutation queue does not maintain a separate cache.
    }
  }, {
    key: "containsKey",
    value: function containsKey(t, e) {
      var n = new Rr(e, 0),
          s = this.ds.firstAfterOrEqual(n);
      return qs.resolve(e.isEqual(s && s.key));
    }
  }, {
    key: "performConsistencyCheck",
    value: function performConsistencyCheck(t) {
      return this.In.length, qs.resolve();
    }
    /**
     * Finds the index of the given batchId in the mutation queue and asserts that
     * the resulting index is within the bounds of the queue.
     *
     * @param batchId - The batchId to search for
     * @param action - A description of what the caller is doing, phrased in passive
     * form (e.g. "acknowledged" in a routine that acknowledges batches).
     */

  }, {
    key: "ys",
    value: function ys(t, e) {
      return this._s(t);
    }
    /**
     * Finds the index of the given batchId in the mutation queue. This operation
     * is O(1).
     *
     * @returns The computed index of the batch with the given batchId, based on
     * the state of the queue. Note this index can be negative if the requested
     * batchId has already been remvoed from the queue or past the end of the
     * queue if the batchId is larger than the last added batch.
     */

  }, {
    key: "_s",
    value: function _s(t) {
      if (0 === this.In.length) // As an index this is past the end of the queue
        return 0; // Examine the front of the queue to figure out the difference between the
      // batchId and indexes in the array. Note that since the queue is ordered
      // by batchId, if the first batch has a larger batchId then the requested
      // batchId doesn't exist in the queue.

      return t - this.In[0].batchId;
    }
    /**
     * A version of lookupMutationBatch that doesn't return a promise, this makes
     * other functions that uses this code easier to read and more efficent.
     */

  }, {
    key: "ws",
    value: function ws(t) {
      var e = this._s(t);

      if (e < 0 || e >= this.In.length) return null;
      return this.In[e];
    }
  }]);

  return br;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The memory-only RemoteDocumentCache for IndexedDb. To construct, invoke
 * `newMemoryRemoteDocumentCache()`.
 */


var Pr = /*#__PURE__*/function () {
  /**
   * @param sizer - Used to assess the size of a document. For eager GC, this is
   * expected to just return 0 to avoid unnecessarily doing the work of
   * calculating the size.
   */
  function Pr(t, e) {
    _classCallCheck(this, Pr);

    this.Ht = t, this.ps = e,
    /** Underlying cache of documents and their read times. */
    this.docs = new fn(Rt.comparator),
    /** Size of all cached documents. */
    this.size = 0;
  }
  /**
   * Adds the supplied entry to the cache and updates the cache size as appropriate.
   *
   * All calls of `addEntry`  are required to go through the RemoteDocumentChangeBuffer
   * returned by `newChangeBuffer()`.
   */


  _createClass(Pr, [{
    key: "addEntry",
    value: function addEntry(t, e, n) {
      var s = e.key,
          i = this.docs.get(s),
          r = i ? i.size : 0,
          o = this.ps(e);
      return this.docs = this.docs.insert(s, {
        document: e.clone(),
        size: o,
        readTime: n
      }), this.size += o - r, this.Ht.addToCollectionParentIndex(t, s.path.popLast());
    }
    /**
     * Removes the specified entry from the cache and updates the cache size as appropriate.
     *
     * All calls of `removeEntry` are required to go through the RemoteDocumentChangeBuffer
     * returned by `newChangeBuffer()`.
     */

  }, {
    key: "removeEntry",
    value: function removeEntry(t) {
      var e = this.docs.get(t);
      e && (this.docs = this.docs.remove(t), this.size -= e.size);
    }
  }, {
    key: "getEntry",
    value: function getEntry(t, e) {
      var n = this.docs.get(e);
      return qs.resolve(n ? n.document.clone() : Ut.newInvalidDocument(e));
    }
  }, {
    key: "getEntries",
    value: function getEntries(t, e) {
      var _this104 = this;

      var n = yn();
      return e.forEach(function (t) {
        var e = _this104.docs.get(t);

        n = n.insert(t, e ? e.document.clone() : Ut.newInvalidDocument(t));
      }), qs.resolve(n);
    }
  }, {
    key: "getDocumentsMatchingQuery",
    value: function getDocumentsMatchingQuery(t, e, n) {
      var s = yn(); // Documents are ordered by key, so we can use a prefix scan to narrow down
      // the documents we need to match the query against.

      var i = new Rt(e.path.child("")),
          r = this.docs.getIteratorFrom(i);

      for (; r.hasNext();) {
        var _r$getNext = r.getNext(),
            _t49 = _r$getNext.key,
            _r$getNext$value = _r$getNext.value,
            _i22 = _r$getNext$value.document,
            _o9 = _r$getNext$value.readTime;

        if (!e.path.isPrefixOf(_t49.path)) break;
        _o9.compareTo(n) <= 0 || Re(e, _i22) && (s = s.insert(_i22.key, _i22.clone()));
      }

      return qs.resolve(s);
    }
  }, {
    key: "Es",
    value: function Es(t, e) {
      return qs.forEach(this.docs, function (t) {
        return e(t);
      });
    }
  }, {
    key: "newChangeBuffer",
    value: function newChangeBuffer(t) {
      // `trackRemovals` is ignores since the MemoryRemoteDocumentCache keeps
      // a separate changelog and does not need special handling for removals.
      return new vr(this);
    }
  }, {
    key: "getSize",
    value: function getSize(t) {
      return qs.resolve(this.size);
    }
  }]);

  return Pr;
}();
/**
 * Creates a new memory-only RemoteDocumentCache.
 *
 * @param indexManager - A class that manages collection group indices.
 * @param sizer - Used to assess the size of a document. For eager GC, this is
 * expected to just return 0 to avoid unnecessarily doing the work of
 * calculating the size.
 */

/**
 * Handles the details of adding and updating documents in the MemoryRemoteDocumentCache.
 */


var vr = /*#__PURE__*/function (_Ki2) {
  _inherits(vr, _Ki2);

  var _super23 = _createSuper(vr);

  function vr(t) {
    var _this105;

    _classCallCheck(this, vr);

    _this105 = _super23.call(this), _this105.Se = t;
    return _this105;
  }

  _createClass(vr, [{
    key: "applyChanges",
    value: function applyChanges(t) {
      var _this106 = this;

      var e = [];
      return this.changes.forEach(function (n, s) {
        s.document.isValidDocument() ? e.push(_this106.Se.addEntry(t, s.document, _this106.getReadTime(n))) : _this106.Se.removeEntry(n);
      }), qs.waitFor(e);
    }
  }, {
    key: "getFromCache",
    value: function getFromCache(t, e) {
      return this.Se.getEntry(t, e);
    }
  }, {
    key: "getAllFromCache",
    value: function getAllFromCache(t, e) {
      return this.Se.getEntries(t, e);
    }
  }]);

  return vr;
}(Ki);
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var Vr = /*#__PURE__*/function () {
  function Vr(t) {
    _classCallCheck(this, Vr);

    this.persistence = t,
    /**
     * Maps a target to the data about that target
     */
    this.Ts = new qi(function (t) {
      return jt(t);
    }, Wt),
    /** The last received snapshot version. */
    this.lastRemoteSnapshotVersion = st.min(),
    /** The highest numbered target ID encountered. */
    this.highestTargetId = 0,
    /** The highest sequence number encountered. */
    this.Is = 0,
    /**
     * A ordered bidirectional mapping between documents and the remote target
     * IDs.
     */
    this.As = new Ar(), this.targetCount = 0, this.Rs = Di.se();
  }

  _createClass(Vr, [{
    key: "forEachTarget",
    value: function forEachTarget(t, e) {
      return this.Ts.forEach(function (t, n) {
        return e(n);
      }), qs.resolve();
    }
  }, {
    key: "getLastRemoteSnapshotVersion",
    value: function getLastRemoteSnapshotVersion(t) {
      return qs.resolve(this.lastRemoteSnapshotVersion);
    }
  }, {
    key: "getHighestSequenceNumber",
    value: function getHighestSequenceNumber(t) {
      return qs.resolve(this.Is);
    }
  }, {
    key: "allocateTargetId",
    value: function allocateTargetId(t) {
      return this.highestTargetId = this.Rs.next(), qs.resolve(this.highestTargetId);
    }
  }, {
    key: "setTargetsMetadata",
    value: function setTargetsMetadata(t, e, n) {
      return n && (this.lastRemoteSnapshotVersion = n), e > this.Is && (this.Is = e), qs.resolve();
    }
  }, {
    key: "ae",
    value: function ae(t) {
      this.Ts.set(t.target, t);
      var e = t.targetId;
      e > this.highestTargetId && (this.Rs = new Di(e), this.highestTargetId = e), t.sequenceNumber > this.Is && (this.Is = t.sequenceNumber);
    }
  }, {
    key: "addTargetData",
    value: function addTargetData(t, e) {
      return this.ae(e), this.targetCount += 1, qs.resolve();
    }
  }, {
    key: "updateTargetData",
    value: function updateTargetData(t, e) {
      return this.ae(e), qs.resolve();
    }
  }, {
    key: "removeTargetData",
    value: function removeTargetData(t, e) {
      return this.Ts.delete(e.target), this.As.cs(e.targetId), this.targetCount -= 1, qs.resolve();
    }
  }, {
    key: "removeTargets",
    value: function removeTargets(t, e, n) {
      var _this107 = this;

      var s = 0;
      var i = [];
      return this.Ts.forEach(function (r, o) {
        o.sequenceNumber <= e && null === n.get(o.targetId) && (_this107.Ts.delete(r), i.push(_this107.removeMatchingKeysForTargetId(t, o.targetId)), s++);
      }), qs.waitFor(i).next(function () {
        return s;
      });
    }
  }, {
    key: "getTargetCount",
    value: function getTargetCount(t) {
      return qs.resolve(this.targetCount);
    }
  }, {
    key: "getTargetData",
    value: function getTargetData(t, e) {
      var n = this.Ts.get(e) || null;
      return qs.resolve(n);
    }
  }, {
    key: "addMatchingKeys",
    value: function addMatchingKeys(t, e, n) {
      return this.As.ss(e, n), qs.resolve();
    }
  }, {
    key: "removeMatchingKeys",
    value: function removeMatchingKeys(t, e, n) {
      this.As.os(e, n);
      var s = this.persistence.referenceDelegate,
          i = [];
      return s && e.forEach(function (e) {
        i.push(s.markPotentiallyOrphaned(t, e));
      }), qs.waitFor(i);
    }
  }, {
    key: "removeMatchingKeysForTargetId",
    value: function removeMatchingKeysForTargetId(t, e) {
      return this.As.cs(e), qs.resolve();
    }
  }, {
    key: "getMatchingKeysForTargetId",
    value: function getMatchingKeysForTargetId(t, e) {
      var n = this.As.hs(e);
      return qs.resolve(n);
    }
  }, {
    key: "containsKey",
    value: function containsKey(t, e) {
      return qs.resolve(this.As.containsKey(e));
    }
  }]);

  return Vr;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A memory-backed instance of Persistence. Data is stored only in RAM and
 * not persisted across sessions.
 */


var Sr = /*#__PURE__*/function () {
  /**
   * The constructor accepts a factory for creating a reference delegate. This
   * allows both the delegate and this instance to have strong references to
   * each other without having nullable fields that would then need to be
   * checked or asserted on every access.
   */
  function Sr(t, e) {
    var _this108 = this;

    _classCallCheck(this, Sr);

    this.bs = {}, this.Le = new J(0), this.Be = !1, this.Be = !0, this.referenceDelegate = t(this), this.ze = new Vr(this);
    this.Ht = new gi(), this.He = function (t, e) {
      return new Pr(t, e);
    }(this.Ht, function (t) {
      return _this108.referenceDelegate.Ps(t);
    }), this.N = new si(e), this.Je = new Ir(this.N);
  }

  _createClass(Sr, [{
    key: "start",
    value: function start() {
      return Promise.resolve();
    }
  }, {
    key: "shutdown",
    value: function shutdown() {
      // No durable state to ensure is closed on shutdown.
      return this.Be = !1, Promise.resolve();
    }
  }, {
    key: "started",
    get: function get() {
      return this.Be;
    }
  }, {
    key: "setDatabaseDeletedListener",
    value: function setDatabaseDeletedListener() {// No op.
    }
  }, {
    key: "setNetworkEnabled",
    value: function setNetworkEnabled() {// No op.
    }
  }, {
    key: "getIndexManager",
    value: function getIndexManager() {
      return this.Ht;
    }
  }, {
    key: "getMutationQueue",
    value: function getMutationQueue(t) {
      var e = this.bs[t.toKey()];
      return e || (e = new br(this.Ht, this.referenceDelegate), this.bs[t.toKey()] = e), e;
    }
  }, {
    key: "getTargetCache",
    value: function getTargetCache() {
      return this.ze;
    }
  }, {
    key: "getRemoteDocumentCache",
    value: function getRemoteDocumentCache() {
      return this.He;
    }
  }, {
    key: "getBundleCache",
    value: function getBundleCache() {
      return this.Je;
    }
  }, {
    key: "runTransaction",
    value: function runTransaction(t, e, n) {
      var _this109 = this;

      x("MemoryPersistence", "Starting transaction:", t);
      var s = new Dr(this.Le.next());
      return this.referenceDelegate.vs(), n(s).next(function (t) {
        return _this109.referenceDelegate.Vs(s).next(function () {
          return t;
        });
      }).toPromise().then(function (t) {
        return s.raiseOnCommittedEvent(), t;
      });
    }
  }, {
    key: "Ss",
    value: function Ss(t, e) {
      return qs.or(Object.values(this.bs).map(function (n) {
        return function () {
          return n.containsKey(t, e);
        };
      }));
    }
  }]);

  return Sr;
}();
/**
 * Memory persistence is not actually transactional, but future implementations
 * may have transaction-scoped state.
 */


var Dr = /*#__PURE__*/function (_Us2) {
  _inherits(Dr, _Us2);

  var _super24 = _createSuper(Dr);

  function Dr(t) {
    var _this110;

    _classCallCheck(this, Dr);

    _this110 = _super24.call(this), _this110.currentSequenceNumber = t;
    return _this110;
  }

  return Dr;
}(Us);

var Cr = /*#__PURE__*/function () {
  function Cr(t) {
    _classCallCheck(this, Cr);

    this.persistence = t,
    /** Tracks all documents that are active in Query views. */
    this.Ds = new Ar(),
    /** The list of documents that are potentially GCed after each transaction. */
    this.Cs = null;
  }

  _createClass(Cr, [{
    key: "xs",
    get: function get() {
      if (this.Cs) return this.Cs;
      throw F();
    }
  }, {
    key: "addReference",
    value: function addReference(t, e, n) {
      return this.Ds.addReference(n, e), this.xs.delete(n.toString()), qs.resolve();
    }
  }, {
    key: "removeReference",
    value: function removeReference(t, e, n) {
      return this.Ds.removeReference(n, e), this.xs.add(n.toString()), qs.resolve();
    }
  }, {
    key: "markPotentiallyOrphaned",
    value: function markPotentiallyOrphaned(t, e) {
      return this.xs.add(e.toString()), qs.resolve();
    }
  }, {
    key: "removeTarget",
    value: function removeTarget(t, e) {
      var _this111 = this;

      this.Ds.cs(e.targetId).forEach(function (t) {
        return _this111.xs.add(t.toString());
      });
      var n = this.persistence.getTargetCache();
      return n.getMatchingKeysForTargetId(t, e.targetId).next(function (t) {
        t.forEach(function (t) {
          return _this111.xs.add(t.toString());
        });
      }).next(function () {
        return n.removeTargetData(t, e);
      });
    }
  }, {
    key: "vs",
    value: function vs() {
      this.Cs = new Set();
    }
  }, {
    key: "Vs",
    value: function Vs(t) {
      var _this112 = this;

      // Remove newly orphaned documents.
      var e = this.persistence.getRemoteDocumentCache().newChangeBuffer();
      return qs.forEach(this.xs, function (n) {
        var s = Rt.fromPath(n);
        return _this112.ks(t, s).next(function (t) {
          t || e.removeEntry(s);
        });
      }).next(function () {
        return _this112.Cs = null, e.apply(t);
      });
    }
  }, {
    key: "updateLimboDocument",
    value: function updateLimboDocument(t, e) {
      var _this113 = this;

      return this.ks(t, e).next(function (t) {
        t ? _this113.xs.delete(e.toString()) : _this113.xs.add(e.toString());
      });
    }
  }, {
    key: "Ps",
    value: function Ps(t) {
      // For eager GC, we don't care about the document size, there are no size thresholds.
      return 0;
    }
  }, {
    key: "ks",
    value: function ks(t, e) {
      var _this114 = this;

      return qs.or([function () {
        return qs.resolve(_this114.Ds.containsKey(e));
      }, function () {
        return _this114.persistence.getTargetCache().containsKey(t, e);
      }, function () {
        return _this114.persistence.Ss(t, e);
      }]);
    }
  }], [{
    key: "Ns",
    value: function Ns(t) {
      return new Cr(t);
    }
  }]);

  return Cr;
}();
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// The format of the LocalStorage key that stores the client state is:
//     firestore_clients_<persistence_prefix>_<instance_key>

/** Assembles the key for a client state in WebStorage */


function Nr(t, e) {
  return "firestore_clients_".concat(t, "_").concat(e);
} // The format of the WebStorage key that stores the mutation state is:
//     firestore_mutations_<persistence_prefix>_<batch_id>
//     (for unauthenticated users)
// or: firestore_mutations_<persistence_prefix>_<batch_id>_<user_uid>
// 'user_uid' is last to avoid needing to escape '_' characters that it might
// contain.

/** Assembles the key for a mutation batch in WebStorage */


function xr(t, e, n) {
  var s = "firestore_mutations_".concat(t, "_").concat(n);
  return e.isAuthenticated() && (s += "_".concat(e.uid)), s;
} // The format of the WebStorage key that stores a query target's metadata is:
//     firestore_targets_<persistence_prefix>_<target_id>

/** Assembles the key for a query state in WebStorage */


function kr(t, e) {
  return "firestore_targets_".concat(t, "_").concat(e);
} // The WebStorage prefix that stores the primary tab's online state. The
// format of the key is:
//     firestore_online_state_<persistence_prefix>

/**
 * Holds the state of a mutation batch, including its user ID, batch ID and
 * whether the batch is 'pending', 'acknowledged' or 'rejected'.
 */
// Visible for testing


var $r = /*#__PURE__*/function () {
  function $r(t, e, n, s) {
    _classCallCheck(this, $r);

    this.user = t, this.batchId = e, this.state = n, this.error = s;
  }
  /**
   * Parses a MutationMetadata from its JSON representation in WebStorage.
   * Logs a warning and returns null if the format of the data is not valid.
   */


  _createClass($r, [{
    key: "Os",
    value: function Os() {
      var t = {
        state: this.state,
        updateTimeMs: Date.now()
      };
      return this.error && (t.error = {
        code: this.error.code,
        message: this.error.message
      }), JSON.stringify(t);
    }
  }], [{
    key: "$s",
    value: function $s(t, e, n) {
      var s = JSON.parse(n);

      var i,
          r = "object" == _typeof(s) && -1 !== ["pending", "acknowledged", "rejected"].indexOf(s.state) && (void 0 === s.error || "object" == _typeof(s.error));

      return r && s.error && (r = "string" == typeof s.error.message && "string" == typeof s.error.code, r && (i = new q(s.error.code, s.error.message))), r ? new $r(t, e, s.state, i) : (k("SharedClientState", "Failed to parse mutation state for ID '".concat(e, "': ").concat(n)), null);
    }
  }]);

  return $r;
}();
/**
 * Holds the state of a query target, including its target ID and whether the
 * target is 'not-current', 'current' or 'rejected'.
 */
// Visible for testing


var Or = /*#__PURE__*/function () {
  function Or(t, e, n) {
    _classCallCheck(this, Or);

    this.targetId = t, this.state = e, this.error = n;
  }
  /**
   * Parses a QueryTargetMetadata from its JSON representation in WebStorage.
   * Logs a warning and returns null if the format of the data is not valid.
   */


  _createClass(Or, [{
    key: "Os",
    value: function Os() {
      var t = {
        state: this.state,
        updateTimeMs: Date.now()
      };
      return this.error && (t.error = {
        code: this.error.code,
        message: this.error.message
      }), JSON.stringify(t);
    }
  }], [{
    key: "$s",
    value: function $s(t, e) {
      var n = JSON.parse(e);

      var s,
          i = "object" == _typeof(n) && -1 !== ["not-current", "current", "rejected"].indexOf(n.state) && (void 0 === n.error || "object" == _typeof(n.error));

      return i && n.error && (i = "string" == typeof n.error.message && "string" == typeof n.error.code, i && (s = new q(n.error.code, n.error.message))), i ? new Or(t, n.state, s) : (k("SharedClientState", "Failed to parse target state for ID '".concat(t, "': ").concat(e)), null);
    }
  }]);

  return Or;
}();
/**
 * This class represents the immutable ClientState for a client read from
 * WebStorage, containing the list of active query targets.
 */


var Fr = /*#__PURE__*/function () {
  function Fr(t, e) {
    _classCallCheck(this, Fr);

    this.clientId = t, this.activeTargetIds = e;
  }
  /**
   * Parses a RemoteClientState from the JSON representation in WebStorage.
   * Logs a warning and returns null if the format of the data is not valid.
   */


  _createClass(Fr, null, [{
    key: "$s",
    value: function $s(t, e) {
      var n = JSON.parse(e);
      var s = "object" == _typeof(n) && n.activeTargetIds instanceof Array,
          i = Pn();

      for (var _t50 = 0; s && _t50 < n.activeTargetIds.length; ++_t50) {
        s = At(n.activeTargetIds[_t50]), i = i.add(n.activeTargetIds[_t50]);
      }

      return s ? new Fr(t, i) : (k("SharedClientState", "Failed to parse client data for instance '".concat(t, "': ").concat(e)), null);
    }
  }]);

  return Fr;
}();
/**
 * This class represents the online state for all clients participating in
 * multi-tab. The online state is only written to by the primary client, and
 * used in secondary clients to update their query views.
 */


var Mr = /*#__PURE__*/function () {
  function Mr(t, e) {
    _classCallCheck(this, Mr);

    this.clientId = t, this.onlineState = e;
  }
  /**
   * Parses a SharedOnlineState from its JSON representation in WebStorage.
   * Logs a warning and returns null if the format of the data is not valid.
   */


  _createClass(Mr, null, [{
    key: "$s",
    value: function $s(t) {
      var e = JSON.parse(t);
      return "object" == _typeof(e) && -1 !== ["Unknown", "Online", "Offline"].indexOf(e.onlineState) && "string" == typeof e.clientId ? new Mr(e.clientId, e.onlineState) : (k("SharedClientState", "Failed to parse online state: ".concat(t)), null);
    }
  }]);

  return Mr;
}();
/**
 * Metadata state of the local client. Unlike `RemoteClientState`, this class is
 * mutable and keeps track of all pending mutations, which allows us to
 * update the range of pending mutation batch IDs as new mutations are added or
 * removed.
 *
 * The data in `LocalClientState` is not read from WebStorage and instead
 * updated via its instance methods. The updated state can be serialized via
 * `toWebStorageJSON()`.
 */
// Visible for testing.


var Lr = /*#__PURE__*/function () {
  function Lr() {
    _classCallCheck(this, Lr);

    this.activeTargetIds = Pn();
  }

  _createClass(Lr, [{
    key: "Fs",
    value: function Fs(t) {
      this.activeTargetIds = this.activeTargetIds.add(t);
    }
  }, {
    key: "Ms",
    value: function Ms(t) {
      this.activeTargetIds = this.activeTargetIds.delete(t);
    }
    /**
     * Converts this entry into a JSON-encoded format we can use for WebStorage.
     * Does not encode `clientId` as it is part of the key in WebStorage.
     */

  }, {
    key: "Os",
    value: function Os() {
      var t = {
        activeTargetIds: this.activeTargetIds.toArray(),
        updateTimeMs: Date.now()
      };
      return JSON.stringify(t);
    }
  }]);

  return Lr;
}();
/**
 * `WebStorageSharedClientState` uses WebStorage (window.localStorage) as the
 * backing store for the SharedClientState. It keeps track of all active
 * clients and supports modifications of the local client's data.
 */


var Br = /*#__PURE__*/function () {
  function Br(t, e, n, s, i) {
    _classCallCheck(this, Br);

    this.window = t, this.Oe = e, this.persistenceKey = n, this.Ls = s, this.syncEngine = null, this.onlineStateHandler = null, this.sequenceNumberHandler = null, this.Bs = this.Us.bind(this), this.qs = new fn(Z), this.started = !1,
    /**
     * Captures WebStorage events that occur before `start()` is called. These
     * events are replayed once `WebStorageSharedClientState` is started.
     */
    this.Ks = []; // Escape the special characters mentioned here:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions

    var r = n.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    this.storage = this.window.localStorage, this.currentUser = i, this.js = Nr(this.persistenceKey, this.Ls), this.Qs =
    /** Assembles the key for the current sequence number. */
    function (t) {
      return "firestore_sequence_number_".concat(t);
    }
    /**
    * @license
    * Copyright 2018 Google LLC
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    (this.persistenceKey), this.qs = this.qs.insert(this.Ls, new Lr()), this.Ws = new RegExp("^firestore_clients_".concat(r, "_([^_]*)$")), this.Gs = new RegExp("^firestore_mutations_".concat(r, "_(\\d+)(?:_(.*))?$")), this.zs = new RegExp("^firestore_targets_".concat(r, "_(\\d+)$")), this.Hs =
    /** Assembles the key for the online state of the primary tab. */
    function (t) {
      return "firestore_online_state_".concat(t);
    } // The WebStorage prefix that plays as a event to indicate the remote documents
    // might have changed due to some secondary tabs loading a bundle.
    // format of the key is:
    //     firestore_bundle_loaded_<persistenceKey>
    (this.persistenceKey), this.Js = function (t) {
      return "firestore_bundle_loaded_".concat(t);
    } // The WebStorage key prefix for the key that stores the last sequence number allocated. The key
    // looks like 'firestore_sequence_number_<persistence_prefix>'.
    (this.persistenceKey), // Rather than adding the storage observer during start(), we add the
    // storage observer during initialization. This ensures that we collect
    // events before other components populate their initial state (during their
    // respective start() calls). Otherwise, we might for example miss a
    // mutation that is added after LocalStore's start() processed the existing
    // mutations but before we observe WebStorage events.
    this.window.addEventListener("storage", this.Bs);
  }
  /** Returns 'true' if WebStorage is available in the current environment. */


  _createClass(Br, [{
    key: "start",
    value: function () {
      var _start = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {
        var _this115 = this;

        var t, _iterator35, _step35, _e45, _t52, _n47, e, _t51, _iterator36, _step36, _t53;

        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                _context11.next = 2;
                return this.syncEngine.pn();

              case 2:
                t = _context11.sent;
                _iterator35 = _createForOfIteratorHelper(t);
                _context11.prev = 4;

                _iterator35.s();

              case 6:
                if ((_step35 = _iterator35.n()).done) {
                  _context11.next = 14;
                  break;
                }

                _e45 = _step35.value;

                if (!(_e45 === this.Ls)) {
                  _context11.next = 10;
                  break;
                }

                return _context11.abrupt("continue", 12);

              case 10:
                _t52 = this.getItem(Nr(this.persistenceKey, _e45));

                if (_t52) {
                  _n47 = Fr.$s(_e45, _t52);
                  _n47 && (this.qs = this.qs.insert(_n47.clientId, _n47));
                }

              case 12:
                _context11.next = 6;
                break;

              case 14:
                _context11.next = 19;
                break;

              case 16:
                _context11.prev = 16;
                _context11.t0 = _context11["catch"](4);

                _iterator35.e(_context11.t0);

              case 19:
                _context11.prev = 19;

                _iterator35.f();

                return _context11.finish(19);

              case 22:
                this.Ys(); // Check if there is an existing online state and call the callback handler
                // if applicable.

                e = this.storage.getItem(this.Hs);

                if (e) {
                  _t51 = this.Xs(e);
                  _t51 && this.Zs(_t51);
                }

                _iterator36 = _createForOfIteratorHelper(this.Ks);

                try {
                  for (_iterator36.s(); !(_step36 = _iterator36.n()).done;) {
                    _t53 = _step36.value;
                    this.Us(_t53);
                  }
                } catch (err) {
                  _iterator36.e(err);
                } finally {
                  _iterator36.f();
                }

                this.Ks = [], // Register a window unload hook to remove the client metadata entry from
                // WebStorage even if `shutdown()` was not called.
                this.window.addEventListener("pagehide", function () {
                  return _this115.shutdown();
                }), this.started = !0;

              case 28:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this, [[4, 16, 19, 22]]);
      }));

      function start() {
        return _start.apply(this, arguments);
      }

      return start;
    }()
  }, {
    key: "writeSequenceNumber",
    value: function writeSequenceNumber(t) {
      this.setItem(this.Qs, JSON.stringify(t));
    }
  }, {
    key: "getAllActiveQueryTargets",
    value: function getAllActiveQueryTargets() {
      return this.ti(this.qs);
    }
  }, {
    key: "isActiveQueryTarget",
    value: function isActiveQueryTarget(t) {
      var e = !1;
      return this.qs.forEach(function (n, s) {
        s.activeTargetIds.has(t) && (e = !0);
      }), e;
    }
  }, {
    key: "addPendingMutation",
    value: function addPendingMutation(t) {
      this.ei(t, "pending");
    }
  }, {
    key: "updateMutationState",
    value: function updateMutationState(t, e, n) {
      this.ei(t, e, n), // Once a final mutation result is observed by other clients, they no longer
      // access the mutation's metadata entry. Since WebStorage replays events
      // in order, it is safe to delete the entry right after updating it.
      this.ni(t);
    }
  }, {
    key: "addLocalQueryTarget",
    value: function addLocalQueryTarget(t) {
      var e = "not-current"; // Lookup an existing query state if the target ID was already registered
      // by another tab

      if (this.isActiveQueryTarget(t)) {
        var _n48 = this.storage.getItem(kr(this.persistenceKey, t));

        if (_n48) {
          var _s35 = Or.$s(t, _n48);

          _s35 && (e = _s35.state);
        }
      }

      return this.si.Fs(t), this.Ys(), e;
    }
  }, {
    key: "removeLocalQueryTarget",
    value: function removeLocalQueryTarget(t) {
      this.si.Ms(t), this.Ys();
    }
  }, {
    key: "isLocalQueryTarget",
    value: function isLocalQueryTarget(t) {
      return this.si.activeTargetIds.has(t);
    }
  }, {
    key: "clearQueryState",
    value: function clearQueryState(t) {
      this.removeItem(kr(this.persistenceKey, t));
    }
  }, {
    key: "updateQueryState",
    value: function updateQueryState(t, e, n) {
      this.ii(t, e, n);
    }
  }, {
    key: "handleUserChange",
    value: function handleUserChange(t, e, n) {
      var _this116 = this;

      e.forEach(function (t) {
        _this116.ni(t);
      }), this.currentUser = t, n.forEach(function (t) {
        _this116.addPendingMutation(t);
      });
    }
  }, {
    key: "setOnlineState",
    value: function setOnlineState(t) {
      this.ri(t);
    }
  }, {
    key: "notifyBundleLoaded",
    value: function notifyBundleLoaded() {
      this.oi();
    }
  }, {
    key: "shutdown",
    value: function shutdown() {
      this.started && (this.window.removeEventListener("storage", this.Bs), this.removeItem(this.js), this.started = !1);
    }
  }, {
    key: "getItem",
    value: function getItem(t) {
      var e = this.storage.getItem(t);
      return x("SharedClientState", "READ", t, e), e;
    }
  }, {
    key: "setItem",
    value: function setItem(t, e) {
      x("SharedClientState", "SET", t, e), this.storage.setItem(t, e);
    }
  }, {
    key: "removeItem",
    value: function removeItem(t) {
      x("SharedClientState", "REMOVE", t), this.storage.removeItem(t);
    }
  }, {
    key: "Us",
    value: function Us(t) {
      var _this117 = this;

      // Note: The function is typed to take Event to be interface-compatible with
      // `Window.addEventListener`.
      var e = t;

      if (e.storageArea === this.storage) {
        if (x("SharedClientState", "EVENT", e.key, e.newValue), e.key === this.js) return void k("Received WebStorage notification for local change. Another client might have garbage-collected our state");
        this.Oe.enqueueRetryable( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {
          var _t54, _t55, _t56, _t57, _t58, _t59;

          return regeneratorRuntime.wrap(function _callee12$(_context12) {
            while (1) {
              switch (_context12.prev = _context12.next) {
                case 0:
                  if (!_this117.started) {
                    _context12.next = 41;
                    break;
                  }

                  if (!(null !== e.key)) {
                    _context12.next = 39;
                    break;
                  }

                  if (!_this117.Ws.test(e.key)) {
                    _context12.next = 11;
                    break;
                  }

                  if (!(null == e.newValue)) {
                    _context12.next = 6;
                    break;
                  }

                  _t54 = _this117.ai(e.key);
                  return _context12.abrupt("return", _this117.ci(_t54, null));

                case 6:
                  _t55 = _this117.ui(e.key, e.newValue);

                  if (!_t55) {
                    _context12.next = 9;
                    break;
                  }

                  return _context12.abrupt("return", _this117.ci(_t55.clientId, _t55));

                case 9:
                  _context12.next = 39;
                  break;

                case 11:
                  if (!_this117.Gs.test(e.key)) {
                    _context12.next = 18;
                    break;
                  }

                  if (!(null !== e.newValue)) {
                    _context12.next = 16;
                    break;
                  }

                  _t56 = _this117.hi(e.key, e.newValue);

                  if (!_t56) {
                    _context12.next = 16;
                    break;
                  }

                  return _context12.abrupt("return", _this117.li(_t56));

                case 16:
                  _context12.next = 39;
                  break;

                case 18:
                  if (!_this117.zs.test(e.key)) {
                    _context12.next = 25;
                    break;
                  }

                  if (!(null !== e.newValue)) {
                    _context12.next = 23;
                    break;
                  }

                  _t57 = _this117.fi(e.key, e.newValue);

                  if (!_t57) {
                    _context12.next = 23;
                    break;
                  }

                  return _context12.abrupt("return", _this117.di(_t57));

                case 23:
                  _context12.next = 39;
                  break;

                case 25:
                  if (!(e.key === _this117.Hs)) {
                    _context12.next = 32;
                    break;
                  }

                  if (!(null !== e.newValue)) {
                    _context12.next = 30;
                    break;
                  }

                  _t58 = _this117.Xs(e.newValue);

                  if (!_t58) {
                    _context12.next = 30;
                    break;
                  }

                  return _context12.abrupt("return", _this117.Zs(_t58));

                case 30:
                  _context12.next = 39;
                  break;

                case 32:
                  if (!(e.key === _this117.Qs)) {
                    _context12.next = 37;
                    break;
                  }

                  _t59 = function (t) {
                    var e = J.T;
                    if (null != t) try {
                      var _n49 = JSON.parse(t);

                      M("number" == typeof _n49), e = _n49;
                    } catch (t) {
                      k("SharedClientState", "Failed to read sequence number from WebStorage", t);
                    }
                    return e;
                  }
                  /**
                  * `MemorySharedClientState` is a simple implementation of SharedClientState for
                  * clients using memory persistence. The state in this class remains fully
                  * isolated and no synchronization is performed.
                  */
                  (e.newValue);

                  _t59 !== J.T && _this117.sequenceNumberHandler(_t59);
                  _context12.next = 39;
                  break;

                case 37:
                  if (!(e.key === _this117.Js)) {
                    _context12.next = 39;
                    break;
                  }

                  return _context12.abrupt("return", _this117.syncEngine.wi());

                case 39:
                  _context12.next = 42;
                  break;

                case 41:
                  _this117.Ks.push(e);

                case 42:
                case "end":
                  return _context12.stop();
              }
            }
          }, _callee12);
        })));
      }
    }
  }, {
    key: "si",
    get: function get() {
      return this.qs.get(this.Ls);
    }
  }, {
    key: "Ys",
    value: function Ys() {
      this.setItem(this.js, this.si.Os());
    }
  }, {
    key: "ei",
    value: function ei(t, e, n) {
      var s = new $r(this.currentUser, t, e, n),
          i = xr(this.persistenceKey, this.currentUser, t);
      this.setItem(i, s.Os());
    }
  }, {
    key: "ni",
    value: function ni(t) {
      var e = xr(this.persistenceKey, this.currentUser, t);
      this.removeItem(e);
    }
  }, {
    key: "ri",
    value: function ri(t) {
      var e = {
        clientId: this.Ls,
        onlineState: t
      };
      this.storage.setItem(this.Hs, JSON.stringify(e));
    }
  }, {
    key: "ii",
    value: function ii(t, e, n) {
      var s = kr(this.persistenceKey, t),
          i = new Or(t, e, n);
      this.setItem(s, i.Os());
    }
  }, {
    key: "oi",
    value: function oi() {
      this.setItem(this.Js, "value-not-used");
    }
    /**
     * Parses a client state key in WebStorage. Returns null if the key does not
     * match the expected key format.
     */

  }, {
    key: "ai",
    value: function ai(t) {
      var e = this.Ws.exec(t);
      return e ? e[1] : null;
    }
    /**
     * Parses a client state in WebStorage. Returns 'null' if the value could not
     * be parsed.
     */

  }, {
    key: "ui",
    value: function ui(t, e) {
      var n = this.ai(t);
      return Fr.$s(n, e);
    }
    /**
     * Parses a mutation batch state in WebStorage. Returns 'null' if the value
     * could not be parsed.
     */

  }, {
    key: "hi",
    value: function hi(t, e) {
      var n = this.Gs.exec(t),
          s = Number(n[1]),
          i = void 0 !== n[2] ? n[2] : null;
      return $r.$s(new V(i), s, e);
    }
    /**
     * Parses a query target state from WebStorage. Returns 'null' if the value
     * could not be parsed.
     */

  }, {
    key: "fi",
    value: function fi(t, e) {
      var n = this.zs.exec(t),
          s = Number(n[1]);
      return Or.$s(s, e);
    }
    /**
     * Parses an online state from WebStorage. Returns 'null' if the value
     * could not be parsed.
     */

  }, {
    key: "Xs",
    value: function Xs(t) {
      return Mr.$s(t);
    }
  }, {
    key: "li",
    value: function () {
      var _li = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(t) {
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                if (!(t.user.uid === this.currentUser.uid)) {
                  _context13.next = 2;
                  break;
                }

                return _context13.abrupt("return", this.syncEngine._i(t.batchId, t.state, t.error));

              case 2:
                x("SharedClientState", "Ignoring mutation for non-active user ".concat(t.user.uid));

              case 3:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      function li(_x21) {
        return _li.apply(this, arguments);
      }

      return li;
    }()
  }, {
    key: "di",
    value: function di(t) {
      return this.syncEngine.mi(t.targetId, t.state, t.error);
    }
  }, {
    key: "ci",
    value: function ci(t, e) {
      var _this118 = this;

      var n = e ? this.qs.insert(t, e) : this.qs.remove(t),
          s = this.ti(this.qs),
          i = this.ti(n),
          r = [],
          o = [];
      return i.forEach(function (t) {
        s.has(t) || r.push(t);
      }), s.forEach(function (t) {
        i.has(t) || o.push(t);
      }), this.syncEngine.gi(r, o).then(function () {
        _this118.qs = n;
      });
    }
  }, {
    key: "Zs",
    value: function Zs(t) {
      // We check whether the client that wrote this online state is still active
      // by comparing its client ID to the list of clients kept active in
      // IndexedDb. If a client does not update their IndexedDb client state
      // within 5 seconds, it is considered inactive and we don't emit an online
      // state event.
      this.qs.get(t.clientId) && this.onlineStateHandler(t.onlineState);
    }
  }, {
    key: "ti",
    value: function ti(t) {
      var e = Pn();
      return t.forEach(function (t, n) {
        e = e.unionWith(n.activeTargetIds);
      }), e;
    }
  }], [{
    key: "bt",
    value: function bt(t) {
      return !(!t || !t.localStorage);
    }
  }]);

  return Br;
}();

var Ur = /*#__PURE__*/function () {
  function Ur() {
    _classCallCheck(this, Ur);

    this.yi = new Lr(), this.pi = {}, this.onlineStateHandler = null, this.sequenceNumberHandler = null;
  }

  _createClass(Ur, [{
    key: "addPendingMutation",
    value: function addPendingMutation(t) {// No op.
    }
  }, {
    key: "updateMutationState",
    value: function updateMutationState(t, e, n) {// No op.
    }
  }, {
    key: "addLocalQueryTarget",
    value: function addLocalQueryTarget(t) {
      return this.yi.Fs(t), this.pi[t] || "not-current";
    }
  }, {
    key: "updateQueryState",
    value: function updateQueryState(t, e, n) {
      this.pi[t] = e;
    }
  }, {
    key: "removeLocalQueryTarget",
    value: function removeLocalQueryTarget(t) {
      this.yi.Ms(t);
    }
  }, {
    key: "isLocalQueryTarget",
    value: function isLocalQueryTarget(t) {
      return this.yi.activeTargetIds.has(t);
    }
  }, {
    key: "clearQueryState",
    value: function clearQueryState(t) {
      delete this.pi[t];
    }
  }, {
    key: "getAllActiveQueryTargets",
    value: function getAllActiveQueryTargets() {
      return this.yi.activeTargetIds;
    }
  }, {
    key: "isActiveQueryTarget",
    value: function isActiveQueryTarget(t) {
      return this.yi.activeTargetIds.has(t);
    }
  }, {
    key: "start",
    value: function start() {
      return this.yi = new Lr(), Promise.resolve();
    }
  }, {
    key: "handleUserChange",
    value: function handleUserChange(t, e, n) {// No op.
    }
  }, {
    key: "setOnlineState",
    value: function setOnlineState(t) {// No op.
    }
  }, {
    key: "shutdown",
    value: function shutdown() {}
  }, {
    key: "writeSequenceNumber",
    value: function writeSequenceNumber(t) {}
  }, {
    key: "notifyBundleLoaded",
    value: function notifyBundleLoaded() {// No op.
    }
  }]);

  return Ur;
}();
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var qr = /*#__PURE__*/function () {
  function qr() {
    _classCallCheck(this, qr);
  }

  _createClass(qr, [{
    key: "Ei",
    value: function Ei(t) {// No-op.
    }
  }, {
    key: "shutdown",
    value: function shutdown() {// No-op.
    }
  }]);

  return qr;
}();
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// References to `window` are guarded by BrowserConnectivityMonitor.isAvailable()

/* eslint-disable no-restricted-globals */

/**
 * Browser implementation of ConnectivityMonitor.
 */


var Kr = /*#__PURE__*/function () {
  function Kr() {
    var _this119 = this;

    _classCallCheck(this, Kr);

    this.Ti = function () {
      return _this119.Ii();
    }, this.Ai = function () {
      return _this119.Ri();
    }, this.bi = [], this.Pi();
  }

  _createClass(Kr, [{
    key: "Ei",
    value: function Ei(t) {
      this.bi.push(t);
    }
  }, {
    key: "shutdown",
    value: function shutdown() {
      window.removeEventListener("online", this.Ti), window.removeEventListener("offline", this.Ai);
    }
  }, {
    key: "Pi",
    value: function Pi() {
      window.addEventListener("online", this.Ti), window.addEventListener("offline", this.Ai);
    }
  }, {
    key: "Ii",
    value: function Ii() {
      x("ConnectivityMonitor", "Network connectivity changed: AVAILABLE");

      var _iterator37 = _createForOfIteratorHelper(this.bi),
          _step37;

      try {
        for (_iterator37.s(); !(_step37 = _iterator37.n()).done;) {
          var _t60 = _step37.value;

          _t60(0
          /* AVAILABLE */
          );
        }
      } catch (err) {
        _iterator37.e(err);
      } finally {
        _iterator37.f();
      }
    }
  }, {
    key: "Ri",
    value: function Ri() {
      x("ConnectivityMonitor", "Network connectivity changed: UNAVAILABLE");

      var _iterator38 = _createForOfIteratorHelper(this.bi),
          _step38;

      try {
        for (_iterator38.s(); !(_step38 = _iterator38.n()).done;) {
          var _t61 = _step38.value;

          _t61(1
          /* UNAVAILABLE */
          );
        }
      } catch (err) {
        _iterator38.e(err);
      } finally {
        _iterator38.f();
      }
    } // TODO(chenbrian): Consider passing in window either into this component or
    // here for testing via FakeWindow.

    /** Checks that all used attributes of window are available. */

  }], [{
    key: "bt",
    value: function bt() {
      return "undefined" != typeof window && void 0 !== window.addEventListener && void 0 !== window.removeEventListener;
    }
  }]);

  return Kr;
}();
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var jr = {
  BatchGetDocuments: "batchGet",
  Commit: "commit",
  RunQuery: "runQuery"
};
/**
 * Maps RPC names to the corresponding REST endpoint name.
 *
 * We use array notation to avoid mangling.
 */

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Provides a simple helper class that implements the Stream interface to
 * bridge to other implementations that are streams but do not implement the
 * interface. The stream callbacks are invoked with the callOn... methods.
 */

var Qr = /*#__PURE__*/function () {
  function Qr(t) {
    _classCallCheck(this, Qr);

    this.vi = t.vi, this.Vi = t.Vi;
  }

  _createClass(Qr, [{
    key: "Si",
    value: function Si(t) {
      this.Di = t;
    }
  }, {
    key: "Ci",
    value: function Ci(t) {
      this.Ni = t;
    }
  }, {
    key: "onMessage",
    value: function onMessage(t) {
      this.xi = t;
    }
  }, {
    key: "close",
    value: function close() {
      this.Vi();
    }
  }, {
    key: "send",
    value: function send(t) {
      this.vi(t);
    }
  }, {
    key: "ki",
    value: function ki() {
      this.Di();
    }
  }, {
    key: "$i",
    value: function $i(t) {
      this.Ni(t);
    }
  }, {
    key: "Oi",
    value: function Oi(t) {
      this.xi(t);
    }
  }]);

  return Qr;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var Wr = /*#__PURE__*/function (_ref21) {
  _inherits(Wr, _ref21);

  var _super25 = _createSuper(Wr);

  function Wr(t) {
    var _this120;

    _classCallCheck(this, Wr);

    _this120 = _super25.call(this, t), _this120.forceLongPolling = t.forceLongPolling, _this120.autoDetectLongPolling = t.autoDetectLongPolling, _this120.useFetchStreams = t.useFetchStreams;
    return _this120;
  }

  _createClass(Wr, [{
    key: "qi",
    value: function qi(t, e, n, s) {
      return new Promise(function (i, r) {
        var o = new _webchannelWrapper.XhrIo();
        o.listenOnce(_webchannelWrapper.EventType.COMPLETE, function () {
          try {
            switch (o.getLastErrorCode()) {
              case _webchannelWrapper.ErrorCode.NO_ERROR:
                var _e46 = o.getResponseJson();

                x("Connection", "XHR received:", JSON.stringify(_e46)), i(_e46);
                break;

              case _webchannelWrapper.ErrorCode.TIMEOUT:
                x("Connection", 'RPC "' + t + '" timed out'), r(new q(U.DEADLINE_EXCEEDED, "Request time out"));
                break;

              case _webchannelWrapper.ErrorCode.HTTP_ERROR:
                var _n50 = o.getStatus();

                if (x("Connection", 'RPC "' + t + '" failed with status:', _n50, "response text:", o.getResponseText()), _n50 > 0) {
                  var _t62 = o.getResponseJson().error;

                  if (_t62 && _t62.status && _t62.message) {
                    var _e47 = function (t) {
                      var e = t.toLowerCase().replace(/_/g, "-");
                      return Object.values(U).indexOf(e) >= 0 ? e : U.UNKNOWN;
                    }(_t62.status);

                    r(new q(_e47, _t62.message));
                  } else r(new q(U.UNKNOWN, "Server responded with status " + o.getStatus()));
                } else // If we received an HTTP_ERROR but there's no status code,
                  // it's most probably a connection issue
                  r(new q(U.UNAVAILABLE, "Connection failed."));

                break;

              default:
                F();
            }
          } finally {
            x("Connection", 'RPC "' + t + '" completed.');
          }
        });
        var a = JSON.stringify(s);
        o.send(e, "POST", a, n, 15);
      });
    }
  }, {
    key: "ji",
    value: function ji(t, e) {
      var n = [this.Fi, "/", "google.firestore.v1.Firestore", "/", t, "/channel"],
          s = (0, _webchannelWrapper.createWebChannelTransport)(),
          i = (0, _webchannelWrapper.getStatEventTarget)(),
          r = {
        // Required for backend stickiness, routing behavior is based on this
        // parameter.
        httpSessionIdParam: "gsessionid",
        initMessageHeaders: {},
        messageUrlParams: {
          // This param is used to improve routing and project isolation by the
          // backend and must be included in every request.
          database: "projects/".concat(this.databaseId.projectId, "/databases/").concat(this.databaseId.database)
        },
        sendRawJson: !0,
        supportsCrossDomainXhr: !0,
        internalChannelParams: {
          // Override the default timeout (randomized between 10-20 seconds) since
          // a large write batch on a slow internet connection may take a long
          // time to send to the backend. Rather than have WebChannel impose a
          // tight timeout which could lead to infinite timeouts and retries, we
          // set it very large (5-10 minutes) and rely on the browser's builtin
          // timeouts to kick in if the request isn't working.
          forwardChannelRequestTimeoutMs: 6e5
        },
        forceLongPolling: this.forceLongPolling,
        detectBufferingProxy: this.autoDetectLongPolling
      };
      this.useFetchStreams && (r.xmlHttpFactory = new _webchannelWrapper.FetchXmlHttpFactory({})), this.Ui(r.initMessageHeaders, e), // Sending the custom headers we just added to request.initMessageHeaders
      // (Authorization, etc.) will trigger the browser to make a CORS preflight
      // request because the XHR will no longer meet the criteria for a "simple"
      // CORS request:
      // https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests
      // Therefore to avoid the CORS preflight request (an extra network
      // roundtrip), we use the httpHeadersOverwriteParam option to specify that
      // the headers should instead be encoded into a special "$httpHeaders" query
      // parameter, which is recognized by the webchannel backend. This is
      // formally defined here:
      // https://github.com/google/closure-library/blob/b0e1815b13fb92a46d7c9b3c30de5d6a396a3245/closure/goog/net/rpc/httpcors.js#L32
      // TODO(b/145624756): There is a backend bug where $httpHeaders isn't respected if the request
      // doesn't have an Origin header. So we have to exclude a few browser environments that are
      // known to (sometimes) not include an Origin. See
      // https://github.com/firebase/firebase-js-sdk/issues/1491.
      (0, _util.isMobileCordova)() || (0, _util.isReactNative)() || (0, _util.isElectron)() || (0, _util.isIE)() || (0, _util.isUWP)() || (0, _util.isBrowserExtension)() || (r.httpHeadersOverwriteParam = "$httpHeaders");
      var o = n.join("");
      x("Connection", "Creating WebChannel: " + o, r);
      var a = s.createWebChannel(o, r); // WebChannel supports sending the first message with the handshake - saving
      // a network round trip. However, it will have to call send in the same
      // JS event loop as open. In order to enforce this, we delay actually
      // opening the WebChannel until send is called. Whether we have called
      // open is tracked with this variable.

      var c = !1,
          u = !1; // A flag to determine whether the stream was closed (by us or through an
      // error/close event) to avoid delivering multiple close events or sending
      // on a closed stream

      var m = new Qr({
        vi: function vi(t) {
          u ? x("Connection", "Not sending because WebChannel is closed:", t) : (c || (x("Connection", "Opening WebChannel transport."), a.open(), c = !0), x("Connection", "WebChannel sending:", t), a.send(t));
        },
        Vi: function Vi() {
          return a.close();
        }
      }),
          g = function g(t, e, n) {
        // TODO(dimond): closure typing seems broken because WebChannel does
        // not implement goog.events.Listenable
        t.listen(e, function (t) {
          try {
            n(t);
          } catch (t) {
            setTimeout(function () {
              throw t;
            }, 0);
          }
        });
      }; // Closure events are guarded and exceptions are swallowed, so catch any
      // exception and rethrow using a setTimeout so they become visible again.
      // Note that eventually this function could go away if we are confident
      // enough the code is exception free.


      return g(a, _webchannelWrapper.WebChannel.EventType.OPEN, function () {
        u || x("Connection", "WebChannel transport opened.");
      }), g(a, _webchannelWrapper.WebChannel.EventType.CLOSE, function () {
        u || (u = !0, x("Connection", "WebChannel transport closed"), m.$i());
      }), g(a, _webchannelWrapper.WebChannel.EventType.ERROR, function (t) {
        u || (u = !0, $("Connection", "WebChannel transport errored:", t), m.$i(new q(U.UNAVAILABLE, "The operation could not be completed")));
      }), g(a, _webchannelWrapper.WebChannel.EventType.MESSAGE, function (t) {
        var e;

        if (!u) {
          var _n51 = t.data[0];
          M(!!_n51); // TODO(b/35143891): There is a bug in One Platform that caused errors
          // (and only errors) to be wrapped in an extra array. To be forward
          // compatible with the bug we need to check either condition. The latter
          // can be removed once the fix has been rolled out.
          // Use any because msgData.error is not typed.

          var _s36 = _n51,
              _i23 = _s36.error || (null === (e = _s36[0]) || void 0 === e ? void 0 : e.error);

          if (_i23) {
            x("Connection", "WebChannel received error:", _i23); // error.status will be a string like 'OK' or 'NOT_FOUND'.

            var _t63 = _i23.status;

            var _e48 =
            /**
            * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.
            *
            * @returns The Code equivalent to the given status string or undefined if
            *     there is no match.
            */
            function (t) {
              // lookup by string
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              var e = cn[t];
              if (void 0 !== e) return ln(e);
            }(_t63),
                _n52 = _i23.message;

            void 0 === _e48 && (_e48 = U.INTERNAL, _n52 = "Unknown error status: " + _t63 + " with message " + _i23.message), // Mark closed so no further events are propagated
            u = !0, m.$i(new q(_e48, _n52)), a.close();
          } else x("Connection", "WebChannel received:", _n51), m.Oi(_n51);
        }
      }), g(i, _webchannelWrapper.Event.STAT_EVENT, function (t) {
        t.stat === _webchannelWrapper.Stat.PROXY ? x("Connection", "Detected buffering proxy") : t.stat === _webchannelWrapper.Stat.NOPROXY && x("Connection", "Detected no buffering proxy");
      }), setTimeout(function () {
        // Technically we could/should wait for the WebChannel opened event,
        // but because we want to send the first message with the WebChannel
        // handshake we pretend the channel opened here (asynchronously), and
        // then delay the actual open until the first message is sent.
        m.ki();
      }, 0), m;
    }
  }]);

  return Wr;
}(
/*#__PURE__*/

/**
 * Base class for all Rest-based connections to the backend (WebChannel and
 * HTTP).
 */
function () {
  function _class3(t) {
    _classCallCheck(this, _class3);

    this.databaseInfo = t, this.databaseId = t.databaseId;
    var e = t.ssl ? "https" : "http";
    this.Fi = e + "://" + t.host, this.Mi = "projects/" + this.databaseId.projectId + "/databases/" + this.databaseId.database + "/documents";
  }

  _createClass(_class3, [{
    key: "Li",
    value: function Li(t, e, n, s) {
      var i = this.Bi(t, e);
      x("RestConnection", "Sending: ", i, n);
      var r = {};
      return this.Ui(r, s), this.qi(t, i, r, n).then(function (t) {
        return x("RestConnection", "Received: ", t), t;
      }, function (e) {
        throw $("RestConnection", "".concat(t, " failed with error: "), e, "url: ", i, "request:", n), e;
      });
    }
  }, {
    key: "Ki",
    value: function Ki(t, e, n, s) {
      // The REST API automatically aggregates all of the streamed results, so we
      // can just use the normal invoke() method.
      return this.Li(t, e, n, s);
    }
    /**
     * Modifies the headers for a request, adding any authorization token if
     * present and any additional headers for the request.
     */

  }, {
    key: "Ui",
    value:
    /**
     * Modifies the headers for a request, adding any authorization token if
     * present and any additional headers for the request.
     */
    function Ui(t, e) {
      if (t["X-Goog-Api-Client"] = "gl-js/ fire/" + S, // Content-Type: text/plain will avoid preflight requests which might
      // mess with CORS and redirects by proxies. If we add custom headers
      // we will need to change this code to potentially use the $httpOverwrite
      // parameter supported by ESF to avoid triggering preflight requests.
      t["Content-Type"] = "text/plain", this.databaseInfo.appId && (t["X-Firebase-GMPID"] = this.databaseInfo.appId), e) for (var _n53 in e.authHeaders) {
        e.authHeaders.hasOwnProperty(_n53) && (t[_n53] = e.authHeaders[_n53]);
      }
    }
  }, {
    key: "Bi",
    value: function Bi(t, e) {
      var n = jr[t];
      return "".concat(this.Fi, "/v1/").concat(e, ":").concat(n);
    }
  }]);

  return _class3;
}());
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Initializes the WebChannelConnection for the browser. */

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** The Platform's 'window' implementation or null if not available. */


function Gr() {
  // `window` is not always available, e.g. in ReactNative and WebWorkers.
  // eslint-disable-next-line no-restricted-globals
  return "undefined" != typeof window ? window : null;
}
/** The Platform's 'document' implementation or null if not available. */


function zr() {
  // `document` is not always available, e.g. in ReactNative and WebWorkers.
  // eslint-disable-next-line no-restricted-globals
  return "undefined" != typeof document ? document : null;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function Hr(t) {
  return new Mn(t,
  /* useProto3Json= */
  !0);
}
/**
 * An instance of the Platform's 'TextEncoder' implementation.
 */

/**
 * A helper for running delayed tasks following an exponential backoff curve
 * between attempts.
 *
 * Each delay is made up of a "base" delay which follows the exponential
 * backoff curve, and a +/- 50% "jitter" that is calculated and added to the
 * base delay. This prevents clients from accidentally synchronizing their
 * delays causing spikes of load to the backend.
 */


var Jr = /*#__PURE__*/function () {
  function Jr(
  /**
   * The AsyncQueue to run backoff operations on.
   */
  t,
  /**
   * The ID to use when scheduling backoff operations on the AsyncQueue.
   */
  e) {
    var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1e3;
    var s = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1.5;
    var i = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 6e4;

    _classCallCheck(this, Jr);

    this.Oe = t, this.timerId = e, this.Qi = n, this.Wi = s, this.Gi = i, this.zi = 0, this.Hi = null,
    /** The last backoff attempt, as epoch milliseconds. */
    this.Ji = Date.now(), this.reset();
  }
  /**
   * Resets the backoff delay.
   *
   * The very next backoffAndWait() will have no delay. If it is called again
   * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and
   * subsequent ones will increase according to the backoffFactor.
   */


  _createClass(Jr, [{
    key: "reset",
    value: function reset() {
      this.zi = 0;
    }
    /**
     * Resets the backoff delay to the maximum delay (e.g. for use after a
     * RESOURCE_EXHAUSTED error).
     */

  }, {
    key: "Yi",
    value: function Yi() {
      this.zi = this.Gi;
    }
    /**
     * Returns a promise that resolves after currentDelayMs, and increases the
     * delay for any subsequent attempts. If there was a pending backoff operation
     * already, it will be canceled.
     */

  }, {
    key: "Xi",
    value: function Xi(t) {
      var _this121 = this;

      // Cancel any pending backoff operation.
      this.cancel(); // First schedule using the current base (which may be 0 and should be
      // honored as such).

      var e = Math.floor(this.zi + this.Zi()),
          n = Math.max(0, Date.now() - this.Ji),
          s = Math.max(0, e - n); // Guard against lastAttemptTime being in the future due to a clock change.

      s > 0 && x("ExponentialBackoff", "Backing off for ".concat(s, " ms (base delay: ").concat(this.zi, " ms, delay with jitter: ").concat(e, " ms, last attempt: ").concat(n, " ms ago)")), this.Hi = this.Oe.enqueueAfterDelay(this.timerId, s, function () {
        return _this121.Ji = Date.now(), t();
      }), // Apply backoff factor to determine next delay and ensure it is within
      // bounds.
      this.zi *= this.Wi, this.zi < this.Qi && (this.zi = this.Qi), this.zi > this.Gi && (this.zi = this.Gi);
    }
  }, {
    key: "tr",
    value: function tr() {
      null !== this.Hi && (this.Hi.skipDelay(), this.Hi = null);
    }
  }, {
    key: "cancel",
    value: function cancel() {
      null !== this.Hi && (this.Hi.cancel(), this.Hi = null);
    }
    /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */

  }, {
    key: "Zi",
    value: function Zi() {
      return (Math.random() - .5) * this.zi;
    }
  }]);

  return Jr;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A PersistentStream is an abstract base class that represents a streaming RPC
 * to the Firestore backend. It's built on top of the connections own support
 * for streaming RPCs, and adds several critical features for our clients:
 *
 *   - Exponential backoff on failure
 *   - Authentication via CredentialsProvider
 *   - Dispatching all callbacks into the shared worker queue
 *   - Closing idle streams after 60 seconds of inactivity
 *
 * Subclasses of PersistentStream implement serialization of models to and
 * from the JSON representation of the protocol buffers for a specific
 * streaming RPC.
 *
 * ## Starting and Stopping
 *
 * Streaming RPCs are stateful and need to be start()ed before messages can
 * be sent and received. The PersistentStream will call the onOpen() function
 * of the listener once the stream is ready to accept requests.
 *
 * Should a start() fail, PersistentStream will call the registered onClose()
 * listener with a FirestoreError indicating what went wrong.
 *
 * A PersistentStream can be started and stopped repeatedly.
 *
 * Generic types:
 *  SendType: The type of the outgoing message of the underlying
 *    connection stream
 *  ReceiveType: The type of the incoming message of the underlying
 *    connection stream
 *  ListenerType: The type of the listener that will be used for callbacks
 */


var Yr = /*#__PURE__*/function () {
  function Yr(t, e, n, s, i, r) {
    _classCallCheck(this, Yr);

    this.Oe = t, this.er = n, this.nr = s, this.credentialsProvider = i, this.listener = r, this.state = 0
    /* Initial */
    ,
    /**
     * A close count that's incremented every time the stream is closed; used by
     * getCloseGuardedDispatcher() to invalidate callbacks that happen after
     * close.
     */
    this.sr = 0, this.ir = null, this.stream = null, this.rr = new Jr(t, e);
  }
  /**
   * Returns true if start() has been called and no error has occurred. True
   * indicates the stream is open or in the process of opening (which
   * encompasses respecting backoff, getting auth tokens, and starting the
   * actual RPC). Use isOpen() to determine if the stream is open and ready for
   * outbound requests.
   */


  _createClass(Yr, [{
    key: "ar",
    value: function ar() {
      return 1
      /* Starting */
      === this.state || 2
      /* Open */
      === this.state || 4
      /* Backoff */
      === this.state;
    }
    /**
     * Returns true if the underlying RPC is open (the onOpen() listener has been
     * called) and the stream is ready for outbound requests.
     */

  }, {
    key: "cr",
    value: function cr() {
      return 2
      /* Open */
      === this.state;
    }
    /**
     * Starts the RPC. Only allowed if isStarted() returns false. The stream is
     * not immediately ready for use: onOpen() will be invoked when the RPC is
     * ready for outbound requests, at which point isOpen() will return true.
     *
     * When start returns, isStarted() will return true.
     */

  }, {
    key: "start",
    value: function start() {
      3
      /* Error */
      !== this.state ? this.auth() : this.ur();
    }
    /**
     * Stops the RPC. This call is idempotent and allowed regardless of the
     * current isStarted() state.
     *
     * When stop returns, isStarted() and isOpen() will both return false.
     */

  }, {
    key: "stop",
    value: function () {
      var _stop = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {
        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                _context14.t0 = this.ar();

                if (!_context14.t0) {
                  _context14.next = 4;
                  break;
                }

                _context14.next = 4;
                return this.close(0
                /* Initial */
                );

              case 4:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      function stop() {
        return _stop.apply(this, arguments);
      }

      return stop;
    }()
    /**
     * After an error the stream will usually back off on the next attempt to
     * start it. If the error warrants an immediate restart of the stream, the
     * sender can use this to indicate that the receiver should not back off.
     *
     * Each error will call the onClose() listener. That function can decide to
     * inhibit backoff if required.
     */

  }, {
    key: "hr",
    value: function hr() {
      this.state = 0
      /* Initial */
      , this.rr.reset();
    }
    /**
     * Marks this stream as idle. If no further actions are performed on the
     * stream for one minute, the stream will automatically close itself and
     * notify the stream's onClose() handler with Status.OK. The stream will then
     * be in a !isStarted() state, requiring the caller to start the stream again
     * before further use.
     *
     * Only streams that are in state 'Open' can be marked idle, as all other
     * states imply pending network operations.
     */

  }, {
    key: "lr",
    value: function lr() {
      var _this122 = this;

      // Starts the idle time if we are in state 'Open' and are not yet already
      // running a timer (in which case the previous idle timeout still applies).
      this.cr() && null === this.ir && (this.ir = this.Oe.enqueueAfterDelay(this.er, 6e4, function () {
        return _this122.dr();
      }));
    }
    /** Sends a message to the underlying stream. */

  }, {
    key: "wr",
    value: function wr(t) {
      this._r(), this.stream.send(t);
    }
    /** Called by the idle timer when the stream should close due to inactivity. */

  }, {
    key: "dr",
    value: function () {
      var _dr = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15() {
        return regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                if (!this.cr()) {
                  _context15.next = 2;
                  break;
                }

                return _context15.abrupt("return", this.close(0
                /* Initial */
                ));

              case 2:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      function dr() {
        return _dr.apply(this, arguments);
      }

      return dr;
    }()
    /** Marks the stream as active again. */

  }, {
    key: "_r",
    value: function _r() {
      this.ir && (this.ir.cancel(), this.ir = null);
    }
    /**
     * Closes the stream and cleans up as necessary:
     *
     * * closes the underlying GRPC stream;
     * * calls the onClose handler with the given 'error';
     * * sets internal stream state to 'finalState';
     * * adjusts the backoff timer based on the error
     *
     * A new stream can be opened by calling start().
     *
     * @param finalState - the intended state of the stream after closing.
     * @param error - the error the connection was closed with.
     */

  }, {
    key: "close",
    value: function () {
      var _close = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(t, e) {
        return regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                this._r();

                this.rr.cancel();
                // Invalidates any stream-related callbacks (e.g. from auth or the
                // underlying stream), guaranteeing they won't execute.
                this.sr++;
                3
                /* Error */
                !== t ? // If this is an intentional close ensure we don't delay our next connection attempt.
                this.rr.reset() : e && e.code === U.RESOURCE_EXHAUSTED ? ( // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)
                k(e.toString()), k("Using maximum backoff delay to prevent overloading the backend."), this.rr.Yi()) : e && e.code === U.UNAUTHENTICATED && // "unauthenticated" error means the token was rejected. Try force refreshing it in case it
                // just expired.
                this.credentialsProvider.invalidateToken();
                // Clean up the underlying stream because we are no longer interested in events.
                null !== this.stream && (this.mr(), this.stream.close(), this.stream = null);
                // This state must be assigned before calling onClose() to allow the callback to
                // inhibit backoff or otherwise manipulate the state in its non-started state.
                this.state = t;
                _context16.next = 8;
                return this.listener.Ci(e);

              case 8:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      function close(_x22, _x23) {
        return _close.apply(this, arguments);
      }

      return close;
    }()
    /**
     * Can be overridden to perform additional cleanup before the stream is closed.
     * Calling super.tearDown() is not required.
     */

  }, {
    key: "mr",
    value: function mr() {}
  }, {
    key: "auth",
    value: function auth() {
      var _this123 = this;

      this.state = 1
      /* Starting */
      ;
      var t = this.gr(this.sr),
          e = this.sr; // TODO(mikelehen): Just use dispatchIfNotClosed, but see TODO below.

      this.credentialsProvider.getToken().then(function (t) {
        // Stream can be stopped while waiting for authentication.
        // TODO(mikelehen): We really should just use dispatchIfNotClosed
        // and let this dispatch onto the queue, but that opened a spec test can
        // of worms that I don't want to deal with in this PR.
        _this123.sr === e && // Normally we'd have to schedule the callback on the AsyncQueue.
        // However, the following calls are safe to be called outside the
        // AsyncQueue since they don't chain asynchronous calls
        _this123.yr(t);
      }, function (e) {
        t(function () {
          var t = new q(U.UNKNOWN, "Fetching auth token failed: " + e.message);
          return _this123.pr(t);
        });
      });
    }
  }, {
    key: "yr",
    value: function yr(t) {
      var _this124 = this;

      var e = this.gr(this.sr);
      this.stream = this.Er(t), this.stream.Si(function () {
        e(function () {
          return _this124.state = 2
          /* Open */
          , _this124.listener.Si();
        });
      }), this.stream.Ci(function (t) {
        e(function () {
          return _this124.pr(t);
        });
      }), this.stream.onMessage(function (t) {
        e(function () {
          return _this124.onMessage(t);
        });
      });
    }
  }, {
    key: "ur",
    value: function ur() {
      var _this125 = this;

      this.state = 4
      /* Backoff */
      , this.rr.Xi( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17() {
        return regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                _this125.state = 0
                /* Initial */
                , _this125.start();

              case 1:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17);
      })));
    } // Visible for tests

  }, {
    key: "pr",
    value: function pr(t) {
      // In theory the stream could close cleanly, however, in our current model
      // we never expect this to happen because if we stop a stream ourselves,
      // this callback will never be called. To prevent cases where we retry
      // without a backoff accidentally, we set the stream to error in all cases.
      return x("PersistentStream", "close with error: ".concat(t)), this.stream = null, this.close(3
      /* Error */
      , t);
    }
    /**
     * Returns a "dispatcher" function that dispatches operations onto the
     * AsyncQueue but only runs them if closeCount remains unchanged. This allows
     * us to turn auth / stream callbacks into no-ops if the stream is closed /
     * re-opened, etc.
     */

  }, {
    key: "gr",
    value: function gr(t) {
      var _this126 = this;

      return function (e) {
        _this126.Oe.enqueueAndForget(function () {
          return _this126.sr === t ? e() : (x("PersistentStream", "stream callback skipped by getCloseGuardedDispatcher."), Promise.resolve());
        });
      };
    }
  }]);

  return Yr;
}();
/**
 * A PersistentStream that implements the Listen RPC.
 *
 * Once the Listen stream has called the onOpen() listener, any number of
 * listen() and unlisten() calls can be made to control what changes will be
 * sent from the server for ListenResponses.
 */


var Xr = /*#__PURE__*/function (_Yr) {
  _inherits(Xr, _Yr);

  var _super26 = _createSuper(Xr);

  function Xr(t, e, n, s, i) {
    var _this127;

    _classCallCheck(this, Xr);

    _this127 = _super26.call(this, t, "listen_stream_connection_backoff"
    /* ListenStreamConnectionBackoff */
    , "listen_stream_idle"
    /* ListenStreamIdle */
    , e, n, i), _this127.N = s;
    return _this127;
  }

  _createClass(Xr, [{
    key: "Er",
    value: function Er(t) {
      return this.nr.ji("Listen", t);
    }
  }, {
    key: "onMessage",
    value: function onMessage(t) {
      // A successful response means the stream is healthy
      this.rr.reset();

      var e = ts(this.N, t),
          n = function (t) {
        // We have only reached a consistent snapshot for the entire stream if there
        // is a read_time set and it applies to all targets (i.e. the list of
        // targets is empty). The backend is guaranteed to send such responses.
        if (!("targetChange" in t)) return st.min();
        var e = t.targetChange;
        return e.targetIds && e.targetIds.length ? st.min() : e.readTime ? qn(e.readTime) : st.min();
      }(t);

      return this.listener.Tr(e, n);
    }
    /**
     * Registers interest in the results of the given target. If the target
     * includes a resumeToken it will be included in the request. Results that
     * affect the target will be streamed back as WatchChange messages that
     * reference the targetId.
     */

  }, {
    key: "Ir",
    value: function Ir(t) {
      var e = {};
      e.database = Hn(this.N), e.addTarget = function (t, e) {
        var n;
        var s = e.target;
        return n = Gt(s) ? {
          documents: is(t, s)
        } : {
          query: rs(t, s)
        }, n.targetId = e.targetId, e.resumeToken.approximateByteSize() > 0 ? n.resumeToken = Bn(t, e.resumeToken) : e.snapshotVersion.compareTo(st.min()) > 0 && ( // TODO(wuandy): Consider removing above check because it is most likely true.
        // Right now, many tests depend on this behaviour though (leaving min() out
        // of serialization).
        n.readTime = Ln(t, e.snapshotVersion.toTimestamp())), n;
      }(this.N, t);
      var n = as(this.N, t);
      n && (e.labels = n), this.wr(e);
    }
    /**
     * Unregisters interest in the results of the target associated with the
     * given targetId.
     */

  }, {
    key: "Ar",
    value: function Ar(t) {
      var e = {};
      e.database = Hn(this.N), e.removeTarget = t, this.wr(e);
    }
  }]);

  return Xr;
}(Yr);
/**
 * A Stream that implements the Write RPC.
 *
 * The Write RPC requires the caller to maintain special streamToken
 * state in between calls, to help the server understand which responses the
 * client has processed by the time the next request is made. Every response
 * will contain a streamToken; this value must be passed to the next
 * request.
 *
 * After calling start() on this stream, the next request must be a handshake,
 * containing whatever streamToken is on hand. Once a response to this
 * request is received, all pending mutations may be submitted. When
 * submitting multiple batches of mutations at the same time, it's
 * okay to use the same streamToken for the calls to writeMutations.
 *
 * TODO(b/33271235): Use proto types
 */


var Zr = /*#__PURE__*/function (_Yr2) {
  _inherits(Zr, _Yr2);

  var _super27 = _createSuper(Zr);

  function Zr(t, e, n, s, i) {
    var _this128;

    _classCallCheck(this, Zr);

    _this128 = _super27.call(this, t, "write_stream_connection_backoff"
    /* WriteStreamConnectionBackoff */
    , "write_stream_idle"
    /* WriteStreamIdle */
    , e, n, i), _this128.N = s, _this128.Rr = !1;
    return _this128;
  }
  /**
   * Tracks whether or not a handshake has been successfully exchanged and
   * the stream is ready to accept mutations.
   */


  _createClass(Zr, [{
    key: "br",
    get: function get() {
      return this.Rr;
    } // Override of PersistentStream.start

  }, {
    key: "start",
    value: function start() {
      this.Rr = !1, this.lastStreamToken = void 0, _get(_getPrototypeOf(Zr.prototype), "start", this).call(this);
    }
  }, {
    key: "mr",
    value: function mr() {
      this.Rr && this.Pr([]);
    }
  }, {
    key: "Er",
    value: function Er(t) {
      return this.nr.ji("Write", t);
    }
  }, {
    key: "onMessage",
    value: function onMessage(t) {
      if ( // Always capture the last stream token.
      M(!!t.streamToken), this.lastStreamToken = t.streamToken, this.Rr) {
        // A successful first write response means the stream is healthy,
        // Note, that we could consider a successful handshake healthy, however,
        // the write itself might be causing an error we want to back off from.
        this.rr.reset();

        var _e49 = ss(t.writeResults, t.commitTime),
            _n54 = qn(t.commitTime);

        return this.listener.vr(_n54, _e49);
      } // The first response is always the handshake response


      return M(!t.writeResults || 0 === t.writeResults.length), this.Rr = !0, this.listener.Vr();
    }
    /**
     * Sends an initial streamToken to the server, performing the handshake
     * required to make the StreamingWrite RPC work. Subsequent
     * calls should wait until onHandshakeComplete was called.
     */

  }, {
    key: "Sr",
    value: function Sr() {
      // TODO(dimond): Support stream resumption. We intentionally do not set the
      // stream token on the handshake, ignoring any stream token we might have.
      var t = {};
      t.database = Hn(this.N), this.wr(t);
    }
    /** Sends a group of mutations to the Firestore backend to apply. */

  }, {
    key: "Pr",
    value: function Pr(t) {
      var _this129 = this;

      var e = {
        streamToken: this.lastStreamToken,
        writes: t.map(function (t) {
          return es(_this129.N, t);
        })
      };
      this.wr(e);
    }
  }]);

  return Zr;
}(Yr);
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Datastore and its related methods are a wrapper around the external Google
 * Cloud Datastore grpc API, which provides an interface that is more convenient
 * for the rest of the client SDK architecture to consume.
 */

/**
 * An implementation of Datastore that exposes additional state for internal
 * consumption.
 */


var to = /*#__PURE__*/function (_ref23) {
  _inherits(to, _ref23);

  var _super28 = _createSuper(to);

  function to(t, e, n) {
    var _this130;

    _classCallCheck(this, to);

    _this130 = _super28.call(this), _this130.credentials = t, _this130.nr = e, _this130.N = n, _this130.Dr = !1;
    return _this130;
  }

  _createClass(to, [{
    key: "Cr",
    value: function Cr() {
      if (this.Dr) throw new q(U.FAILED_PRECONDITION, "The client has already been terminated.");
    }
    /** Gets an auth token and invokes the provided RPC. */

  }, {
    key: "Li",
    value: function Li(t, e, n) {
      var _this131 = this;

      return this.Cr(), this.credentials.getToken().then(function (s) {
        return _this131.nr.Li(t, e, n, s);
      }).catch(function (t) {
        throw "FirebaseError" === t.name ? (t.code === U.UNAUTHENTICATED && _this131.credentials.invalidateToken(), t) : new q(U.UNKNOWN, t.toString());
      });
    }
    /** Gets an auth token and invokes the provided RPC with streamed results. */

  }, {
    key: "Ki",
    value: function Ki(t, e, n) {
      var _this132 = this;

      return this.Cr(), this.credentials.getToken().then(function (s) {
        return _this132.nr.Ki(t, e, n, s);
      }).catch(function (t) {
        throw "FirebaseError" === t.name ? (t.code === U.UNAUTHENTICATED && _this132.credentials.invalidateToken(), t) : new q(U.UNKNOWN, t.toString());
      });
    }
  }, {
    key: "terminate",
    value: function terminate() {
      this.Dr = !0;
    }
  }]);

  return to;
}( /*#__PURE__*/function () {
  function _class4() {
    _classCallCheck(this, _class4);
  }

  return _class4;
}()); // TODO(firestorexp): Make sure there is only one Datastore instance per
// firestore-exp client.

/**
 * A component used by the RemoteStore to track the OnlineState (that is,
 * whether or not the client as a whole should be considered to be online or
 * offline), implementing the appropriate heuristics.
 *
 * In particular, when the client is trying to connect to the backend, we
 * allow up to MAX_WATCH_STREAM_FAILURES within ONLINE_STATE_TIMEOUT_MS for
 * a connection to succeed. If we have too many failures or the timeout elapses,
 * then we set the OnlineState to Offline, and the client will behave as if
 * it is offline (get()s will return cached data, etc.).
 */


var eo = /*#__PURE__*/function () {
  function eo(t, e) {
    _classCallCheck(this, eo);

    this.asyncQueue = t, this.onlineStateHandler = e,
    /** The current OnlineState. */
    this.state = "Unknown"
    /* Unknown */
    ,
    /**
     * A count of consecutive failures to open the stream. If it reaches the
     * maximum defined by MAX_WATCH_STREAM_FAILURES, we'll set the OnlineState to
     * Offline.
     */
    this.Nr = 0,
    /**
     * A timer that elapses after ONLINE_STATE_TIMEOUT_MS, at which point we
     * transition from OnlineState.Unknown to OnlineState.Offline without waiting
     * for the stream to actually fail (MAX_WATCH_STREAM_FAILURES times).
     */
    this.kr = null,
    /**
     * Whether the client should log a warning message if it fails to connect to
     * the backend (initially true, cleared after a successful stream, or if we've
     * logged the message already).
     */
    this.$r = !0;
  }
  /**
   * Called by RemoteStore when a watch stream is started (including on each
   * backoff attempt).
   *
   * If this is the first attempt, it sets the OnlineState to Unknown and starts
   * the onlineStateTimer.
   */


  _createClass(eo, [{
    key: "Or",
    value: function Or() {
      var _this133 = this;

      0 === this.Nr && (this.Fr("Unknown"
      /* Unknown */
      ), this.kr = this.asyncQueue.enqueueAfterDelay("online_state_timeout"
      /* OnlineStateTimeout */
      , 1e4, function () {
        return _this133.kr = null, _this133.Mr("Backend didn't respond within 10 seconds."), _this133.Fr("Offline"
        /* Offline */
        ), Promise.resolve();
      }));
    }
    /**
     * Updates our OnlineState as appropriate after the watch stream reports a
     * failure. The first failure moves us to the 'Unknown' state. We then may
     * allow multiple failures (based on MAX_WATCH_STREAM_FAILURES) before we
     * actually transition to the 'Offline' state.
     */

  }, {
    key: "Lr",
    value: function Lr(t) {
      "Online"
      /* Online */
      === this.state ? this.Fr("Unknown"
      /* Unknown */
      ) : (this.Nr++, this.Nr >= 1 && (this.Br(), this.Mr("Connection failed 1 times. Most recent error: ".concat(t.toString())), this.Fr("Offline"
      /* Offline */
      )));
    }
    /**
     * Explicitly sets the OnlineState to the specified state.
     *
     * Note that this resets our timers / failure counters, etc. used by our
     * Offline heuristics, so must not be used in place of
     * handleWatchStreamStart() and handleWatchStreamFailure().
     */

  }, {
    key: "set",
    value: function set(t) {
      this.Br(), this.Nr = 0, "Online"
      /* Online */
      === t && ( // We've connected to watch at least once. Don't warn the developer
      // about being offline going forward.
      this.$r = !1), this.Fr(t);
    }
  }, {
    key: "Fr",
    value: function Fr(t) {
      t !== this.state && (this.state = t, this.onlineStateHandler(t));
    }
  }, {
    key: "Mr",
    value: function Mr(t) {
      var e = "Could not reach Cloud Firestore backend. ".concat(t, "\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.");
      this.$r ? (k(e), this.$r = !1) : x("OnlineStateTracker", e);
    }
  }, {
    key: "Br",
    value: function Br() {
      null !== this.kr && (this.kr.cancel(), this.kr = null);
    }
  }]);

  return eo;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var no = function no(
/**
 * The local store, used to fill the write pipeline with outbound mutations.
 */
t,
/** The client-side proxy for interacting with the backend. */
e, n, s, i) {
  var _this134 = this;

  _classCallCheck(this, no);

  this.localStore = t, this.datastore = e, this.asyncQueue = n, this.remoteSyncer = {},
  /**
   * A list of up to MAX_PENDING_WRITES writes that we have fetched from the
   * LocalStore via fillWritePipeline() and have or will send to the write
   * stream.
   *
   * Whenever writePipeline.length > 0 the RemoteStore will attempt to start or
   * restart the write stream. When the stream is established the writes in the
   * pipeline will be sent in order.
   *
   * Writes remain in writePipeline until they are acknowledged by the backend
   * and thus will automatically be re-sent if the stream is interrupted /
   * restarted before they're acknowledged.
   *
   * Write responses from the backend are linked to their originating request
   * purely based on order, and so we can just shift() writes from the front of
   * the writePipeline as we receive responses.
   */
  this.Ur = [],
  /**
   * A mapping of watched targets that the client cares about tracking and the
   * user has explicitly called a 'listen' for this target.
   *
   * These targets may or may not have been sent to or acknowledged by the
   * server. On re-establishing the listen stream, these targets should be sent
   * to the server. The targets removed with unlistens are removed eagerly
   * without waiting for confirmation from the listen stream.
   */
  this.qr = new Map(),
  /**
   * A set of reasons for why the RemoteStore may be offline. If empty, the
   * RemoteStore may start its network connections.
   */
  this.Kr = new Set(),
  /**
   * Event handlers that get called when the network is disabled or enabled.
   *
   * PORTING NOTE: These functions are used on the Web client to create the
   * underlying streams (to support tree-shakeable streams). On Android and iOS,
   * the streams are created during construction of RemoteStore.
   */
  this.jr = [], this.Qr = i, this.Qr.Ei(function (t) {
    n.enqueueAndForget( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19() {
      return regeneratorRuntime.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              _context19.t0 = lo(_this134);

              if (!_context19.t0) {
                _context19.next = 5;
                break;
              }

              x("RemoteStore", "Restarting streams for network reachability change.");
              _context19.next = 5;
              return function () {
                var _ref25 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(t) {
                  var e;
                  return regeneratorRuntime.wrap(function _callee18$(_context18) {
                    while (1) {
                      switch (_context18.prev = _context18.next) {
                        case 0:
                          e = B(t);
                          e.Kr.add(4
                          /* ConnectivityChange */
                          );
                          _context18.next = 4;
                          return io(e);

                        case 4:
                          e.Wr.set("Unknown"
                          /* Unknown */
                          );
                          e.Kr.delete(4
                          /* ConnectivityChange */
                          );
                          _context18.next = 8;
                          return so(e);

                        case 8:
                        case "end":
                          return _context18.stop();
                      }
                    }
                  }, _callee18);
                }));

                return function (_x24) {
                  return _ref25.apply(this, arguments);
                };
              }()(_this134);

            case 5:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19);
    })));
  }), this.Wr = new eo(n, s);
};

function so(_x25) {
  return _so.apply(this, arguments);
}
/**
 * Temporarily disables the network. The network can be re-enabled using
 * enableNetwork().
 */


function _so() {
  _so = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee76(t) {
    var _iterator63, _step63, _e74;

    return regeneratorRuntime.wrap(function _callee76$(_context76) {
      while (1) {
        switch (_context76.prev = _context76.next) {
          case 0:
            if (!lo(t)) {
              _context76.next = 18;
              break;
            }

            _iterator63 = _createForOfIteratorHelper(t.jr);
            _context76.prev = 2;

            _iterator63.s();

          case 4:
            if ((_step63 = _iterator63.n()).done) {
              _context76.next = 10;
              break;
            }

            _e74 = _step63.value;
            _context76.next = 8;
            return _e74(
            /* enabled= */
            !0);

          case 8:
            _context76.next = 4;
            break;

          case 10:
            _context76.next = 15;
            break;

          case 12:
            _context76.prev = 12;
            _context76.t0 = _context76["catch"](2);

            _iterator63.e(_context76.t0);

          case 15:
            _context76.prev = 15;

            _iterator63.f();

            return _context76.finish(15);

          case 18:
          case "end":
            return _context76.stop();
        }
      }
    }, _callee76, null, [[2, 12, 15, 18]]);
  }));
  return _so.apply(this, arguments);
}

function io(_x26) {
  return _io.apply(this, arguments);
}
/**
 * Starts new listen for the given target. Uses resume token if provided. It
 * is a no-op if the target of given `TargetData` is already being listened to.
 */


function _io() {
  _io = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee77(t) {
    var _iterator64, _step64, _e75;

    return regeneratorRuntime.wrap(function _callee77$(_context77) {
      while (1) {
        switch (_context77.prev = _context77.next) {
          case 0:
            _iterator64 = _createForOfIteratorHelper(t.jr);
            _context77.prev = 1;

            _iterator64.s();

          case 3:
            if ((_step64 = _iterator64.n()).done) {
              _context77.next = 9;
              break;
            }

            _e75 = _step64.value;
            _context77.next = 7;
            return _e75(
            /* enabled= */
            !1);

          case 7:
            _context77.next = 3;
            break;

          case 9:
            _context77.next = 14;
            break;

          case 11:
            _context77.prev = 11;
            _context77.t0 = _context77["catch"](1);

            _iterator64.e(_context77.t0);

          case 14:
            _context77.prev = 14;

            _iterator64.f();

            return _context77.finish(14);

          case 17:
          case "end":
            return _context77.stop();
        }
      }
    }, _callee77, null, [[1, 11, 14, 17]]);
  }));
  return _io.apply(this, arguments);
}

function ro(t, e) {
  var n = B(t);
  n.qr.has(e.targetId) || ( // Mark this as something the client is currently listening for.
  n.qr.set(e.targetId, e), ho(n) ? // The listen will be sent in onWatchStreamOpen
  uo(n) : So(n).cr() && ao(n, e));
}
/**
 * Removes the listen from server. It is a no-op if the given target id is
 * not being listened to.
 */


function oo(t, e) {
  var n = B(t),
      s = So(n);
  n.qr.delete(e), s.cr() && co(n, e), 0 === n.qr.size && (s.cr() ? s.lr() : lo(n) && // Revert to OnlineState.Unknown if the watch stream is not open and we
  // have no listeners, since without any listens to send we cannot
  // confirm if the stream is healthy and upgrade to OnlineState.Online.
  n.Wr.set("Unknown"
  /* Unknown */
  ));
}
/**
 * We need to increment the the expected number of pending responses we're due
 * from watch so we wait for the ack to process any messages from this target.
 */


function ao(t, e) {
  t.Gr.Y(e.targetId), So(t).Ir(e);
}
/**
 * We need to increment the expected number of pending responses we're due
 * from watch so we wait for the removal on the server before we process any
 * messages from this target.
 */


function co(t, e) {
  t.Gr.Y(e), So(t).Ar(e);
}

function uo(t) {
  t.Gr = new xn({
    getRemoteKeysForTarget: function getRemoteKeysForTarget(e) {
      return t.remoteSyncer.getRemoteKeysForTarget(e);
    },
    Et: function Et(e) {
      return t.qr.get(e) || null;
    }
  }), So(t).start(), t.Wr.Or();
}
/**
 * Returns whether the watch stream should be started because it's necessary
 * and has not yet been started.
 */


function ho(t) {
  return lo(t) && !So(t).ar() && t.qr.size > 0;
}

function lo(t) {
  return 0 === B(t).Kr.size;
}

function fo(t) {
  t.Gr = void 0;
}

function wo(_x27) {
  return _wo.apply(this, arguments);
}

function _wo() {
  _wo = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee78(t) {
    return regeneratorRuntime.wrap(function _callee78$(_context78) {
      while (1) {
        switch (_context78.prev = _context78.next) {
          case 0:
            t.qr.forEach(function (e, n) {
              ao(t, e);
            });

          case 1:
          case "end":
            return _context78.stop();
        }
      }
    }, _callee78);
  }));
  return _wo.apply(this, arguments);
}

function _o(_x28, _x29) {
  return _o10.apply(this, arguments);
}

function _o10() {
  _o10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee79(t, e) {
    return regeneratorRuntime.wrap(function _callee79$(_context79) {
      while (1) {
        switch (_context79.prev = _context79.next) {
          case 0:
            fo(t), // If we still need the watch stream, retry the connection.
            ho(t) ? (t.Wr.Lr(e), uo(t)) : // No need to restart watch stream because there are no active targets.
            // The online state is set to unknown because there is no active attempt
            // at establishing a connection
            t.Wr.set("Unknown"
            /* Unknown */
            );

          case 1:
          case "end":
            return _context79.stop();
        }
      }
    }, _callee79);
  }));
  return _o10.apply(this, arguments);
}

function mo(_x30, _x31, _x32) {
  return _mo.apply(this, arguments);
}
/**
 * Recovery logic for IndexedDB errors that takes the network offline until
 * `op` succeeds. Retries are scheduled with backoff using
 * `enqueueRetryable()`. If `op()` is not provided, IndexedDB access is
 * validated via a generic operation.
 *
 * The returned Promise is resolved once the network is disabled and before
 * any retry attempt.
 */


function _mo() {
  _mo = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee81(t, e, n) {
    var _e76;

    return regeneratorRuntime.wrap(function _callee81$(_context81) {
      while (1) {
        switch (_context81.prev = _context81.next) {
          case 0:
            if (!( // Mark the client as online since we got a message from the server
            t.Wr.set("Online"
            /* Online */
            ), e instanceof Cn && 2
            /* Removed */
            === e.state && e.cause)) {
              _context81.next = 13;
              break;
            }

            _context81.prev = 1;
            _context81.next = 4;
            return (
              /** Handles an error on a target */
              function () {
                var _ref59 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee80(t, e) {
                  var n, _iterator65, _step65, _s63;

                  return regeneratorRuntime.wrap(function _callee80$(_context80) {
                    while (1) {
                      switch (_context80.prev = _context80.next) {
                        case 0:
                          n = e.cause;
                          _iterator65 = _createForOfIteratorHelper(e.targetIds);
                          _context80.prev = 2;

                          _iterator65.s();

                        case 4:
                          if ((_step65 = _iterator65.n()).done) {
                            _context80.next = 14;
                            break;
                          }

                          _s63 = _step65.value;
                          _context80.t0 = t.qr.has(_s63);

                          if (!_context80.t0) {
                            _context80.next = 12;
                            break;
                          }

                          _context80.next = 10;
                          return t.remoteSyncer.rejectListen(_s63, n);

                        case 10:
                          t.qr.delete(_s63);
                          t.Gr.removeTarget(_s63);

                        case 12:
                          _context80.next = 4;
                          break;

                        case 14:
                          _context80.next = 19;
                          break;

                        case 16:
                          _context80.prev = 16;
                          _context80.t1 = _context80["catch"](2);

                          _iterator65.e(_context80.t1);

                        case 19:
                          _context80.prev = 19;

                          _iterator65.f();

                          return _context80.finish(19);

                        case 22:
                        case "end":
                          return _context80.stop();
                      }
                    }
                  }, _callee80, null, [[2, 16, 19, 22]]);
                }));

                return function (_x131, _x132) {
                  return _ref59.apply(this, arguments);
                };
              }()
              /**
              * Attempts to fill our write pipeline with writes from the LocalStore.
              *
              * Called internally to bootstrap or refill the write pipeline and by
              * SyncEngine whenever there are new mutations to process.
              *
              * Starts the write stream if necessary.
              */
              (t, e)
            );

          case 4:
            _context81.next = 11;
            break;

          case 6:
            _context81.prev = 6;
            _context81.t0 = _context81["catch"](1);
            x("RemoteStore", "Failed to remove targets %s: %s ", e.targetIds.join(","), _context81.t0);
            _context81.next = 11;
            return go(t, _context81.t0);

          case 11:
            _context81.next = 29;
            break;

          case 13:
            if (!(e instanceof Sn ? t.Gr.rt(e) : e instanceof Dn ? t.Gr.ft(e) : t.Gr.ct(e), !n.isEqual(st.min()))) {
              _context81.next = 29;
              break;
            }

            _context81.prev = 14;
            _context81.next = 17;
            return hr(t.localStore);

          case 17:
            _e76 = _context81.sent;
            _context81.t1 = n.compareTo(_e76) >= 0;

            if (!_context81.t1) {
              _context81.next = 22;
              break;
            }

            _context81.next = 22;
            return (
              /**
              * Takes a batch of changes from the Datastore, repackages them as a
              * RemoteEvent, and passes that on to the listener, which is typically the
              * SyncEngine.
              */
              function (t, e) {
                var n = t.Gr._t(e); // Update in-memory resume tokens. LocalStore will update the
                // persistent view of these when applying the completed RemoteEvent.


                // Update in-memory resume tokens. LocalStore will update the
                // persistent view of these when applying the completed RemoteEvent.
                return n.targetChanges.forEach(function (n, s) {
                  if (n.resumeToken.approximateByteSize() > 0) {
                    var _i32 = t.qr.get(s); // A watched target might have been removed already.


                    // A watched target might have been removed already.
                    _i32 && t.qr.set(s, _i32.withResumeToken(n.resumeToken, e));
                  }
                }), // Re-establish listens for the targets that have been invalidated by
                // existence filter mismatches.
                n.targetMismatches.forEach(function (e) {
                  var n = t.qr.get(e);
                  if (!n) // A watched target might have been removed already.
                    return; // Clear the resume token for the target, since we're in a known mismatch
                  // state.

                  // Clear the resume token for the target, since we're in a known mismatch
                  // state.
                  t.qr.set(e, n.withResumeToken(dt.EMPTY_BYTE_STRING, n.snapshotVersion)), // Cause a hard reset by unwatching and rewatching immediately, but
                  // deliberately don't send a resume token so that we get a full update.
                  co(t, e); // Mark the target we send as being on behalf of an existence filter
                  // mismatch, but don't actually retain that in listenTargets. This ensures
                  // that we flag the first re-listen this way without impacting future
                  // listens of this target (that might happen e.g. on reconnect).

                  // Mark the target we send as being on behalf of an existence filter
                  // mismatch, but don't actually retain that in listenTargets. This ensures
                  // that we flag the first re-listen this way without impacting future
                  // listens of this target (that might happen e.g. on reconnect).
                  var s = new ni(n.target, e, 1
                  /* ExistenceFilterMismatch */
                  , n.sequenceNumber);
                  ao(t, s);
                }), t.remoteSyncer.applyRemoteEvent(n);
              }(t, n)
            );

          case 22:
            _context81.next = 29;
            break;

          case 24:
            _context81.prev = 24;
            _context81.t2 = _context81["catch"](14);
            x("RemoteStore", "Failed to raise snapshot:", _context81.t2);
            _context81.next = 29;
            return go(t, _context81.t2);

          case 29:
          case "end":
            return _context81.stop();
        }
      }
    }, _callee81, null, [[1, 6], [14, 24]]);
  }));
  return _mo.apply(this, arguments);
}

function go(_x33, _x34, _x35) {
  return _go.apply(this, arguments);
}
/**
 * Executes `op`. If `op` fails, takes the network offline until `op`
 * succeeds. Returns after the first attempt.
 */


function _go() {
  _go = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee83(t, e, n) {
    return regeneratorRuntime.wrap(function _callee83$(_context83) {
      while (1) {
        switch (_context83.prev = _context83.next) {
          case 0:
            if (Gs(e)) {
              _context83.next = 2;
              break;
            }

            throw e;

          case 2:
            t.Kr.add(1
            /* IndexedDbFailed */
            );
            _context83.next = 5;
            return io(t);

          case 5:
            t.Wr.set("Offline"
            /* Offline */
            );
            n || ( // Use a simple read operation to determine if IndexedDB recovered.
            // Ideally, we would expose a health check directly on SimpleDb, but
            // RemoteStore only has access to persistence through LocalStore.
            n = function n() {
              return hr(t.localStore);
            });
            // Probe IndexedDB periodically and re-enable network
            t.asyncQueue.enqueueRetryable( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee82() {
              return regeneratorRuntime.wrap(function _callee82$(_context82) {
                while (1) {
                  switch (_context82.prev = _context82.next) {
                    case 0:
                      x("RemoteStore", "Retrying IndexedDB access");
                      _context82.next = 3;
                      return n();

                    case 3:
                      t.Kr.delete(1
                      /* IndexedDbFailed */
                      );
                      _context82.next = 6;
                      return so(t);

                    case 6:
                    case "end":
                      return _context82.stop();
                  }
                }
              }, _callee82);
            })));

          case 8:
          case "end":
            return _context83.stop();
        }
      }
    }, _callee83);
  }));
  return _go.apply(this, arguments);
}

function yo(t, e) {
  return e().catch(function (n) {
    return go(t, n, e);
  });
}

function po(_x36) {
  return _po.apply(this, arguments);
}
/**
 * Returns true if we can add to the write pipeline (i.e. the network is
 * enabled and the write pipeline is not full).
 */


function _po() {
  _po = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee84(t) {
    var e, n, s, _t93;

    return regeneratorRuntime.wrap(function _callee84$(_context84) {
      while (1) {
        switch (_context84.prev = _context84.next) {
          case 0:
            e = B(t), n = Do(e);
            s = e.Ur.length > 0 ? e.Ur[e.Ur.length - 1].batchId : -1;

          case 2:
            if (!Eo(e)) {
              _context84.next = 19;
              break;
            }

            _context84.prev = 3;
            _context84.next = 6;
            return dr(e.localStore, s);

          case 6:
            _t93 = _context84.sent;

            if (!(null === _t93)) {
              _context84.next = 10;
              break;
            }

            0 === e.Ur.length && n.lr();
            return _context84.abrupt("break", 19);

          case 10:
            s = _t93.batchId, To(e, _t93);
            _context84.next = 17;
            break;

          case 13:
            _context84.prev = 13;
            _context84.t0 = _context84["catch"](3);
            _context84.next = 17;
            return go(e, _context84.t0);

          case 17:
            _context84.next = 2;
            break;

          case 19:
            Io(e) && Ao(e);

          case 20:
          case "end":
            return _context84.stop();
        }
      }
    }, _callee84, null, [[3, 13]]);
  }));
  return _po.apply(this, arguments);
}

function Eo(t) {
  return lo(t) && t.Ur.length < 10;
}
/**
 * Queues additional writes to be sent to the write stream, sending them
 * immediately if the write stream is established.
 */


function To(t, e) {
  t.Ur.push(e);
  var n = Do(t);
  n.cr() && n.br && n.Pr(e.mutations);
}

function Io(t) {
  return lo(t) && !Do(t).ar() && t.Ur.length > 0;
}

function Ao(t) {
  Do(t).start();
}

function Ro(_x37) {
  return _Ro.apply(this, arguments);
}

function _Ro() {
  _Ro = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee85(t) {
    return regeneratorRuntime.wrap(function _callee85$(_context85) {
      while (1) {
        switch (_context85.prev = _context85.next) {
          case 0:
            Do(t).Sr();

          case 1:
          case "end":
            return _context85.stop();
        }
      }
    }, _callee85);
  }));
  return _Ro.apply(this, arguments);
}

function bo(_x38) {
  return _bo.apply(this, arguments);
}

function _bo() {
  _bo = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee86(t) {
    var e, _iterator66, _step66, _n77;

    return regeneratorRuntime.wrap(function _callee86$(_context86) {
      while (1) {
        switch (_context86.prev = _context86.next) {
          case 0:
            e = Do(t); // Send the write pipeline now that the stream is established.

            _iterator66 = _createForOfIteratorHelper(t.Ur);

            try {
              for (_iterator66.s(); !(_step66 = _iterator66.n()).done;) {
                _n77 = _step66.value;
                e.Pr(_n77.mutations);
              }
            } catch (err) {
              _iterator66.e(err);
            } finally {
              _iterator66.f();
            }

          case 3:
          case "end":
            return _context86.stop();
        }
      }
    }, _callee86);
  }));
  return _bo.apply(this, arguments);
}

function Po(_x39, _x40, _x41) {
  return _Po.apply(this, arguments);
}

function _Po() {
  _Po = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee87(t, e, n) {
    var s, i;
    return regeneratorRuntime.wrap(function _callee87$(_context87) {
      while (1) {
        switch (_context87.prev = _context87.next) {
          case 0:
            s = t.Ur.shift(), i = ei.from(s, e, n);
            _context87.next = 3;
            return yo(t, function () {
              return t.remoteSyncer.applySuccessfulWrite(i);
            });

          case 3:
            _context87.next = 5;
            return po(t);

          case 5:
          case "end":
            return _context87.stop();
        }
      }
    }, _callee87);
  }));
  return _Po.apply(this, arguments);
}

function vo(_x42, _x43) {
  return _vo.apply(this, arguments);
}
/**
 * Toggles the network state when the client gains or loses its primary lease.
 */


function _vo() {
  _vo = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee89(t, e) {
    return regeneratorRuntime.wrap(function _callee89$(_context89) {
      while (1) {
        switch (_context89.prev = _context89.next) {
          case 0:
            _context89.t0 = e && Do(t).br;

            if (!_context89.t0) {
              _context89.next = 4;
              break;
            }

            _context89.next = 4;
            return function () {
              var _ref61 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee88(t, e) {
                var _n78, n;

                return regeneratorRuntime.wrap(function _callee88$(_context88) {
                  while (1) {
                    switch (_context88.prev = _context88.next) {
                      case 0:
                        if (!(n = e.code, hn(n) && n !== U.ABORTED)) {
                          _context88.next = 7;
                          break;
                        }

                        // This was a permanent error, the request itself was the problem
                        // so it's not going to succeed if we resend it.
                        _n78 = t.Ur.shift(); // In this case it's also unlikely that the server itself is melting
                        // down -- this was just a bad request so inhibit backoff on the next
                        // restart.

                        Do(t).hr();
                        _context88.next = 5;
                        return yo(t, function () {
                          return t.remoteSyncer.rejectFailedWrite(_n78.batchId, e);
                        });

                      case 5:
                        _context88.next = 7;
                        return po(t);

                      case 7:
                      case "end":
                        return _context88.stop();
                    }
                  }
                }, _callee88);
              }));

              return function (_x133, _x134) {
                return _ref61.apply(this, arguments);
              };
            }()(t, e);

          case 4:
            // The write stream might have been started by refilling the write
            // pipeline for failed writes
            Io(t) && Ao(t);

          case 5:
          case "end":
            return _context89.stop();
        }
      }
    }, _callee89);
  }));
  return _vo.apply(this, arguments);
}

function Vo(_x44, _x45) {
  return _Vo.apply(this, arguments);
}
/**
 * If not yet initialized, registers the WatchStream and its network state
 * callback with `remoteStoreImpl`. Returns the existing stream if one is
 * already available.
 *
 * PORTING NOTE: On iOS and Android, the WatchStream gets registered on startup.
 * This is not done on Web to allow it to be tree-shaken.
 */


function _Vo() {
  _Vo = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee90(t, e) {
    var n;
    return regeneratorRuntime.wrap(function _callee90$(_context90) {
      while (1) {
        switch (_context90.prev = _context90.next) {
          case 0:
            n = B(t);

            if (!e) {
              _context90.next = 7;
              break;
            }

            n.Kr.delete(2
            /* IsSecondary */
            );
            _context90.next = 5;
            return so(n);

          case 5:
            _context90.next = 13;
            break;

          case 7:
            _context90.t0 = e;

            if (_context90.t0) {
              _context90.next = 13;
              break;
            }

            n.Kr.add(2
            /* IsSecondary */
            );
            _context90.next = 12;
            return io(n);

          case 12:
            n.Wr.set("Unknown"
            /* Unknown */
            );

          case 13:
          case "end":
            return _context90.stop();
        }
      }
    }, _callee90);
  }));
  return _Vo.apply(this, arguments);
}

function So(t) {
  return t.zr || ( // Create stream (but note that it is not started yet).
  t.zr = function (t, e, n) {
    var s = B(t);
    return s.Cr(), new Xr(e, s.nr, s.credentials, s.N, n);
  }
  /**
  * @license
  * Copyright 2018 Google LLC
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
  (t.datastore, t.asyncQueue, {
    Si: wo.bind(null, t),
    Ci: _o.bind(null, t),
    Tr: mo.bind(null, t)
  }), t.jr.push( /*#__PURE__*/function () {
    var _ref26 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20(e) {
      return regeneratorRuntime.wrap(function _callee20$(_context20) {
        while (1) {
          switch (_context20.prev = _context20.next) {
            case 0:
              if (!e) {
                _context20.next = 4;
                break;
              }

              t.zr.hr(), ho(t) ? uo(t) : t.Wr.set("Unknown"
              /* Unknown */
              );
              _context20.next = 7;
              break;

            case 4:
              _context20.next = 6;
              return t.zr.stop();

            case 6:
              fo(t);

            case 7:
            case "end":
              return _context20.stop();
          }
        }
      }, _callee20);
    }));

    return function (_x46) {
      return _ref26.apply(this, arguments);
    };
  }())), t.zr;
}
/**
 * If not yet initialized, registers the WriteStream and its network state
 * callback with `remoteStoreImpl`. Returns the existing stream if one is
 * already available.
 *
 * PORTING NOTE: On iOS and Android, the WriteStream gets registered on startup.
 * This is not done on Web to allow it to be tree-shaken.
 */


function Do(t) {
  return t.Hr || ( // Create stream (but note that it is not started yet).
  t.Hr = function (t, e, n) {
    var s = B(t);
    return s.Cr(), new Zr(e, s.nr, s.credentials, s.N, n);
  }(t.datastore, t.asyncQueue, {
    Si: Ro.bind(null, t),
    Ci: vo.bind(null, t),
    Vr: bo.bind(null, t),
    vr: Po.bind(null, t)
  }), t.jr.push( /*#__PURE__*/function () {
    var _ref27 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21(e) {
      return regeneratorRuntime.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              if (!e) {
                _context21.next = 6;
                break;
              }

              t.Hr.hr();
              _context21.next = 4;
              return po(t);

            case 4:
              _context21.next = 9;
              break;

            case 6:
              _context21.next = 8;
              return t.Hr.stop();

            case 8:
              t.Ur.length > 0 && (x("RemoteStore", "Stopping write stream with ".concat(t.Ur.length, " pending writes")), t.Ur = []);

            case 9:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21);
    }));

    return function (_x47) {
      return _ref27.apply(this, arguments);
    };
  }())), t.Hr;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Represents an operation scheduled to be run in the future on an AsyncQueue.
 *
 * It is created via DelayedOperation.createAndSchedule().
 *
 * Supports cancellation (via cancel()) and early execution (via skipDelay()).
 *
 * Note: We implement `PromiseLike` instead of `Promise`, as the `Promise` type
 * in newer versions of TypeScript defines `finally`, which is not available in
 * IE.
 */


var Co = /*#__PURE__*/function () {
  function Co(t, e, n, s, i) {
    _classCallCheck(this, Co);

    this.asyncQueue = t, this.timerId = e, this.targetTimeMs = n, this.op = s, this.removalCallback = i, this.deferred = new K(), this.then = this.deferred.promise.then.bind(this.deferred.promise), // It's normal for the deferred promise to be canceled (due to cancellation)
    // and so we attach a dummy catch callback to avoid
    // 'UnhandledPromiseRejectionWarning' log spam.
    this.deferred.promise.catch(function (t) {});
  }
  /**
   * Creates and returns a DelayedOperation that has been scheduled to be
   * executed on the provided asyncQueue after the provided delayMs.
   *
   * @param asyncQueue - The queue to schedule the operation on.
   * @param id - A Timer ID identifying the type of operation this is.
   * @param delayMs - The delay (ms) before the operation should be scheduled.
   * @param op - The operation to run.
   * @param removalCallback - A callback to be called synchronously once the
   *   operation is executed or canceled, notifying the AsyncQueue to remove it
   *   from its delayedOperations list.
   *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and
   *   the DelayedOperation class public.
   */


  _createClass(Co, [{
    key: "start",
    value:
    /**
     * Starts the timer. This is called immediately after construction by
     * createAndSchedule().
     */
    function start(t) {
      var _this135 = this;

      this.timerHandle = setTimeout(function () {
        return _this135.handleDelayElapsed();
      }, t);
    }
    /**
     * Queues the operation to run immediately (if it hasn't already been run or
     * canceled).
     */

  }, {
    key: "skipDelay",
    value: function skipDelay() {
      return this.handleDelayElapsed();
    }
    /**
     * Cancels the operation if it hasn't already been executed or canceled. The
     * promise will be rejected.
     *
     * As long as the operation has not yet been run, calling cancel() provides a
     * guarantee that the operation will not be run.
     */

  }, {
    key: "cancel",
    value: function cancel(t) {
      null !== this.timerHandle && (this.clearTimeout(), this.deferred.reject(new q(U.CANCELLED, "Operation cancelled" + (t ? ": " + t : ""))));
    }
  }, {
    key: "handleDelayElapsed",
    value: function handleDelayElapsed() {
      var _this136 = this;

      this.asyncQueue.enqueueAndForget(function () {
        return null !== _this136.timerHandle ? (_this136.clearTimeout(), _this136.op().then(function (t) {
          return _this136.deferred.resolve(t);
        })) : Promise.resolve();
      });
    }
  }, {
    key: "clearTimeout",
    value: function (_clearTimeout) {
      function clearTimeout() {
        return _clearTimeout.apply(this, arguments);
      }

      clearTimeout.toString = function () {
        return _clearTimeout.toString();
      };

      return clearTimeout;
    }(function () {
      null !== this.timerHandle && (this.removalCallback(this), clearTimeout(this.timerHandle), this.timerHandle = null);
    })
  }], [{
    key: "createAndSchedule",
    value: function createAndSchedule(t, e, n, s, i) {
      var r = Date.now() + n,
          o = new Co(t, e, r, s, i);
      return o.start(n), o;
    }
  }]);

  return Co;
}();
/**
 * Returns a FirestoreError that can be surfaced to the user if the provided
 * error is an IndexedDbTransactionError. Re-throws the error otherwise.
 */


function No(t, e) {
  if (k("AsyncQueue", "".concat(e, ": ").concat(t)), Gs(t)) return new q(U.UNAVAILABLE, "".concat(e, ": ").concat(t));
  throw t;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * DocumentSet is an immutable (copy-on-write) collection that holds documents
 * in order specified by the provided comparator. We always add a document key
 * comparator on top of what is provided to guarantee document equality based on
 * the key.
 */


var xo = /*#__PURE__*/function () {
  /** The default ordering is by key if the comparator is omitted */
  function xo(t) {
    _classCallCheck(this, xo);

    // We are adding document key comparator to the end as it's the only
    // guaranteed unique property of a document.
    this.comparator = t ? function (e, n) {
      return t(e, n) || Rt.comparator(e.key, n.key);
    } : function (t, e) {
      return Rt.comparator(t.key, e.key);
    }, this.keyedMap = En(), this.sortedSet = new fn(this.comparator);
  }
  /**
   * Returns an empty copy of the existing DocumentSet, using the same
   * comparator.
   */


  _createClass(xo, [{
    key: "has",
    value: function has(t) {
      return null != this.keyedMap.get(t);
    }
  }, {
    key: "get",
    value: function get(t) {
      return this.keyedMap.get(t);
    }
  }, {
    key: "first",
    value: function first() {
      return this.sortedSet.minKey();
    }
  }, {
    key: "last",
    value: function last() {
      return this.sortedSet.maxKey();
    }
  }, {
    key: "isEmpty",
    value: function isEmpty() {
      return this.sortedSet.isEmpty();
    }
    /**
     * Returns the index of the provided key in the document set, or -1 if the
     * document key is not present in the set;
     */

  }, {
    key: "indexOf",
    value: function indexOf(t) {
      var e = this.keyedMap.get(t);
      return e ? this.sortedSet.indexOf(e) : -1;
    }
  }, {
    key: "size",
    get: function get() {
      return this.sortedSet.size;
    }
    /** Iterates documents in order defined by "comparator" */

  }, {
    key: "forEach",
    value: function forEach(t) {
      this.sortedSet.inorderTraversal(function (e, n) {
        return t(e), !1;
      });
    }
    /** Inserts or updates a document with the same key */

  }, {
    key: "add",
    value: function add(t) {
      // First remove the element if we have it.
      var e = this.delete(t.key);
      return e.copy(e.keyedMap.insert(t.key, t), e.sortedSet.insert(t, null));
    }
    /** Deletes a document with a given key */

  }, {
    key: "delete",
    value: function _delete(t) {
      var e = this.get(t);
      return e ? this.copy(this.keyedMap.remove(t), this.sortedSet.remove(e)) : this;
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      if (!(t instanceof xo)) return !1;
      if (this.size !== t.size) return !1;
      var e = this.sortedSet.getIterator(),
          n = t.sortedSet.getIterator();

      for (; e.hasNext();) {
        var _t64 = e.getNext().key,
            _s37 = n.getNext().key;
        if (!_t64.isEqual(_s37)) return !1;
      }

      return !0;
    }
  }, {
    key: "toString",
    value: function toString() {
      var t = [];
      return this.forEach(function (e) {
        t.push(e.toString());
      }), 0 === t.length ? "DocumentSet ()" : "DocumentSet (\n  " + t.join("  \n") + "\n)";
    }
  }, {
    key: "copy",
    value: function copy(t, e) {
      var n = new xo();
      return n.comparator = this.comparator, n.keyedMap = t, n.sortedSet = e, n;
    }
  }], [{
    key: "emptySet",
    value: function emptySet(t) {
      return new xo(t.comparator);
    }
  }]);

  return xo;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * DocumentChangeSet keeps track of a set of changes to docs in a query, merging
 * duplicate events for the same doc.
 */


var ko = /*#__PURE__*/function () {
  function ko() {
    _classCallCheck(this, ko);

    this.Jr = new fn(Rt.comparator);
  }

  _createClass(ko, [{
    key: "track",
    value: function track(t) {
      var e = t.doc.key,
          n = this.Jr.get(e);
      n ? // Merge the new change with the existing change.
      0
      /* Added */
      !== t.type && 3
      /* Metadata */
      === n.type ? this.Jr = this.Jr.insert(e, t) : 3
      /* Metadata */
      === t.type && 1
      /* Removed */
      !== n.type ? this.Jr = this.Jr.insert(e, {
        type: n.type,
        doc: t.doc
      }) : 2
      /* Modified */
      === t.type && 2
      /* Modified */
      === n.type ? this.Jr = this.Jr.insert(e, {
        type: 2
        /* Modified */
        ,
        doc: t.doc
      }) : 2
      /* Modified */
      === t.type && 0
      /* Added */
      === n.type ? this.Jr = this.Jr.insert(e, {
        type: 0
        /* Added */
        ,
        doc: t.doc
      }) : 1
      /* Removed */
      === t.type && 0
      /* Added */
      === n.type ? this.Jr = this.Jr.remove(e) : 1
      /* Removed */
      === t.type && 2
      /* Modified */
      === n.type ? this.Jr = this.Jr.insert(e, {
        type: 1
        /* Removed */
        ,
        doc: n.doc
      }) : 0
      /* Added */
      === t.type && 1
      /* Removed */
      === n.type ? this.Jr = this.Jr.insert(e, {
        type: 2
        /* Modified */
        ,
        doc: t.doc
      }) : // This includes these cases, which don't make sense:
      // Added->Added
      // Removed->Removed
      // Modified->Added
      // Removed->Modified
      // Metadata->Added
      // Removed->Metadata
      F() : this.Jr = this.Jr.insert(e, t);
    }
  }, {
    key: "Yr",
    value: function Yr() {
      var t = [];
      return this.Jr.inorderTraversal(function (e, n) {
        t.push(n);
      }), t;
    }
  }]);

  return ko;
}();

var $o = /*#__PURE__*/function () {
  function $o(t, e, n, s, i, r, o, a) {
    _classCallCheck(this, $o);

    this.query = t, this.docs = e, this.oldDocs = n, this.docChanges = s, this.mutatedKeys = i, this.fromCache = r, this.syncStateChanged = o, this.excludesMetadataChanges = a;
  }
  /** Returns a view snapshot as if all documents in the snapshot were added. */


  _createClass($o, [{
    key: "hasPendingWrites",
    get: function get() {
      return !this.mutatedKeys.isEmpty();
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      if (!(this.fromCache === t.fromCache && this.syncStateChanged === t.syncStateChanged && this.mutatedKeys.isEqual(t.mutatedKeys) && Te(this.query, t.query) && this.docs.isEqual(t.docs) && this.oldDocs.isEqual(t.oldDocs))) return !1;
      var e = this.docChanges,
          n = t.docChanges;
      if (e.length !== n.length) return !1;

      for (var _t65 = 0; _t65 < e.length; _t65++) {
        if (e[_t65].type !== n[_t65].type || !e[_t65].doc.isEqual(n[_t65].doc)) return !1;
      }

      return !0;
    }
  }], [{
    key: "fromInitialDocuments",
    value: function fromInitialDocuments(t, e, n, s) {
      var i = [];
      return e.forEach(function (t) {
        i.push({
          type: 0
          /* Added */
          ,
          doc: t
        });
      }), new $o(t, e, xo.emptySet(e), i, n, s,
      /* syncStateChanged= */
      !0,
      /* excludesMetadataChanges= */
      !1);
    }
  }]);

  return $o;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Holds the listeners and the last received ViewSnapshot for a query being
 * tracked by EventManager.
 */


var Oo = function Oo() {
  _classCallCheck(this, Oo);

  this.Xr = void 0, this.listeners = [];
};

var Fo = function Fo() {
  _classCallCheck(this, Fo);

  this.queries = new qi(function (t) {
    return Ie(t);
  }, Te), this.onlineState = "Unknown"
  /* Unknown */
  , this.Zr = new Set();
};

function Mo(_x48, _x49) {
  return _Mo.apply(this, arguments);
}

function _Mo() {
  _Mo = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee91(t, e) {
    var n, s, i, r, _n79;

    return regeneratorRuntime.wrap(function _callee91$(_context91) {
      while (1) {
        switch (_context91.prev = _context91.next) {
          case 0:
            n = B(t), s = e.query;
            i = !1, r = n.queries.get(s);

            if (!(r || (i = !0, r = new Oo()), i)) {
              _context91.next = 13;
              break;
            }

            _context91.prev = 3;
            _context91.next = 6;
            return n.onListen(s);

          case 6:
            r.Xr = _context91.sent;
            _context91.next = 13;
            break;

          case 9:
            _context91.prev = 9;
            _context91.t0 = _context91["catch"](3);
            _n79 = No(_context91.t0, "Initialization of query '".concat(Ae(e.query), "' failed"));
            return _context91.abrupt("return", void e.onError(_n79));

          case 13:
            if (n.queries.set(s, r), r.listeners.push(e), // Run global snapshot listeners if a consistent snapshot has been emitted.
            e.eo(n.onlineState), r.Xr) {
              e.no(r.Xr) && qo(n);
            }

          case 14:
          case "end":
            return _context91.stop();
        }
      }
    }, _callee91, null, [[3, 9]]);
  }));
  return _Mo.apply(this, arguments);
}

function Lo(_x50, _x51) {
  return _Lo.apply(this, arguments);
}

function _Lo() {
  _Lo = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee92(t, e) {
    var n, s, i, r, _t94;

    return regeneratorRuntime.wrap(function _callee92$(_context92) {
      while (1) {
        switch (_context92.prev = _context92.next) {
          case 0:
            n = B(t), s = e.query;
            i = !1;
            r = n.queries.get(s);

            if (r) {
              _t94 = r.listeners.indexOf(e);
              _t94 >= 0 && (r.listeners.splice(_t94, 1), i = 0 === r.listeners.length);
            }

            if (!i) {
              _context92.next = 6;
              break;
            }

            return _context92.abrupt("return", (n.queries.delete(s), n.onUnlisten(s)));

          case 6:
          case "end":
            return _context92.stop();
        }
      }
    }, _callee92);
  }));
  return _Lo.apply(this, arguments);
}

function Bo(t, e) {
  var n = B(t);
  var s = !1;

  var _iterator39 = _createForOfIteratorHelper(e),
      _step39;

  try {
    for (_iterator39.s(); !(_step39 = _iterator39.n()).done;) {
      var _t66 = _step39.value;

      var _e50 = _t66.query,
          _i24 = n.queries.get(_e50);

      if (_i24) {
        var _iterator40 = _createForOfIteratorHelper(_i24.listeners),
            _step40;

        try {
          for (_iterator40.s(); !(_step40 = _iterator40.n()).done;) {
            var _e51 = _step40.value;
            _e51.no(_t66) && (s = !0);
          }
        } catch (err) {
          _iterator40.e(err);
        } finally {
          _iterator40.f();
        }

        _i24.Xr = _t66;
      }
    }
  } catch (err) {
    _iterator39.e(err);
  } finally {
    _iterator39.f();
  }

  s && qo(n);
}

function Uo(t, e, n) {
  var s = B(t),
      i = s.queries.get(e);

  if (i) {
    var _iterator41 = _createForOfIteratorHelper(i.listeners),
        _step41;

    try {
      for (_iterator41.s(); !(_step41 = _iterator41.n()).done;) {
        var _t67 = _step41.value;

        _t67.onError(n);
      }
    } catch (err) {
      _iterator41.e(err);
    } finally {
      _iterator41.f();
    }
  } // Remove all listeners. NOTE: We don't need to call syncEngine.unlisten()
  // after an error.


  s.queries.delete(e);
} // Call all global snapshot listeners that have been set.


function qo(t) {
  t.Zr.forEach(function (t) {
    t.next();
  });
}
/**
 * QueryListener takes a series of internal view snapshots and determines
 * when to raise the event.
 *
 * It uses an Observer to dispatch events.
 */


var Ko = /*#__PURE__*/function () {
  function Ko(t, e, n) {
    _classCallCheck(this, Ko);

    this.query = t, this.so = e,
    /**
     * Initial snapshots (e.g. from cache) may not be propagated to the wrapped
     * observer. This flag is set to true once we've actually raised an event.
     */
    this.io = !1, this.ro = null, this.onlineState = "Unknown"
    /* Unknown */
    , this.options = n || {};
  }
  /**
   * Applies the new ViewSnapshot to this listener, raising a user-facing event
   * if applicable (depending on what changed, whether the user has opted into
   * metadata-only changes, etc.). Returns true if a user-facing event was
   * indeed raised.
   */


  _createClass(Ko, [{
    key: "no",
    value: function no(t) {
      if (!this.options.includeMetadataChanges) {
        // Remove the metadata only changes.
        var _e52 = [];

        var _iterator42 = _createForOfIteratorHelper(t.docChanges),
            _step42;

        try {
          for (_iterator42.s(); !(_step42 = _iterator42.n()).done;) {
            var _n55 = _step42.value;
            3
            /* Metadata */
            !== _n55.type && _e52.push(_n55);
          }
        } catch (err) {
          _iterator42.e(err);
        } finally {
          _iterator42.f();
        }

        t = new $o(t.query, t.docs, t.oldDocs, _e52, t.mutatedKeys, t.fromCache, t.syncStateChanged,
        /* excludesMetadataChanges= */
        !0);
      }

      var e = !1;
      return this.io ? this.oo(t) && (this.so.next(t), e = !0) : this.ao(t, this.onlineState) && (this.co(t), e = !0), this.ro = t, e;
    }
  }, {
    key: "onError",
    value: function onError(t) {
      this.so.error(t);
    }
    /** Returns whether a snapshot was raised. */

  }, {
    key: "eo",
    value: function eo(t) {
      this.onlineState = t;
      var e = !1;
      return this.ro && !this.io && this.ao(this.ro, t) && (this.co(this.ro), e = !0), e;
    }
  }, {
    key: "ao",
    value: function ao(t, e) {
      // Always raise the first event when we're synced
      if (!t.fromCache) return !0; // NOTE: We consider OnlineState.Unknown as online (it should become Offline
      // or Online if we wait long enough).

      var n = "Offline"
      /* Offline */
      !== e; // Don't raise the event if we're online, aren't synced yet (checked
      // above) and are waiting for a sync.

      return (!this.options.uo || !n) && (!t.docs.isEmpty() || "Offline"
      /* Offline */
      === e); // Raise data from cache if we have any documents or we are offline
    }
  }, {
    key: "oo",
    value: function oo(t) {
      // We don't need to handle includeDocumentMetadataChanges here because
      // the Metadata only changes have already been stripped out if needed.
      // At this point the only changes we will see are the ones we should
      // propagate.
      if (t.docChanges.length > 0) return !0;
      var e = this.ro && this.ro.hasPendingWrites !== t.hasPendingWrites;
      return !(!t.syncStateChanged && !e) && !0 === this.options.includeMetadataChanges; // Generally we should have hit one of the cases above, but it's possible
      // to get here if there were only metadata docChanges and they got
      // stripped out.
    }
  }, {
    key: "co",
    value: function co(t) {
      t = $o.fromInitialDocuments(t.query, t.docs, t.mutatedKeys, t.fromCache), this.io = !0, this.so.next(t);
    }
  }]);

  return Ko;
}();
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A complete element in the bundle stream, together with the byte length it
 * occupies in the stream.
 */


var jo = /*#__PURE__*/function () {
  function jo(t, // How many bytes this element takes to store in the bundle.
  e) {
    _classCallCheck(this, jo);

    this.payload = t, this.byteLength = e;
  }

  _createClass(jo, [{
    key: "ho",
    value: function ho() {
      return "metadata" in this.payload;
    }
  }]);

  return jo;
}();
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Helper to convert objects from bundles to model objects in the SDK.
 */


var Qo = /*#__PURE__*/function () {
  function Qo(t) {
    _classCallCheck(this, Qo);

    this.N = t;
  }

  _createClass(Qo, [{
    key: "zn",
    value: function zn(t) {
      return Wn(this.N, t);
    }
    /**
     * Converts a BundleDocument to a MutableDocument.
     */

  }, {
    key: "Hn",
    value: function Hn(t) {
      return t.metadata.exists ? Xn(this.N, t.document, !1) : Ut.newNoDocument(this.zn(t.metadata.name), this.Jn(t.metadata.readTime));
    }
  }, {
    key: "Jn",
    value: function Jn(t) {
      return qn(t);
    }
  }]);

  return Qo;
}();
/**
 * A class to process the elements from a bundle, load them into local
 * storage and provide progress update while loading.
 */


var Wo = /*#__PURE__*/function () {
  function Wo(t, e, n) {
    _classCallCheck(this, Wo);

    this.lo = t, this.localStore = e, this.N = n,
    /** Batched queries to be saved into storage */
    this.queries = [],
    /** Batched documents to be saved into storage */
    this.documents = [], this.progress = Go(t);
  }
  /**
   * Adds an element from the bundle to the loader.
   *
   * Returns a new progress if adding the element leads to a new progress,
   * otherwise returns null.
   */


  _createClass(Wo, [{
    key: "fo",
    value: function fo(t) {
      this.progress.bytesLoaded += t.byteLength;
      var e = this.progress.documentsLoaded;
      return t.payload.namedQuery ? this.queries.push(t.payload.namedQuery) : t.payload.documentMetadata ? (this.documents.push({
        metadata: t.payload.documentMetadata
      }), t.payload.documentMetadata.exists || ++e) : t.payload.document && (this.documents[this.documents.length - 1].document = t.payload.document, ++e), e !== this.progress.documentsLoaded ? (this.progress.documentsLoaded = e, Object.assign({}, this.progress)) : null;
    }
  }, {
    key: "wo",
    value: function wo(t) {
      var e = new Map(),
          n = new Qo(this.N);

      var _iterator43 = _createForOfIteratorHelper(t),
          _step43;

      try {
        for (_iterator43.s(); !(_step43 = _iterator43.n()).done;) {
          var _s38 = _step43.value;

          if (_s38.metadata.queries) {
            var _t68 = n.zn(_s38.metadata.name);

            var _iterator44 = _createForOfIteratorHelper(_s38.metadata.queries),
                _step44;

            try {
              for (_iterator44.s(); !(_step44 = _iterator44.n()).done;) {
                var _n56 = _step44.value;

                var _s39 = (e.get(_n56) || Rn()).add(_t68);

                e.set(_n56, _s39);
              }
            } catch (err) {
              _iterator44.e(err);
            } finally {
              _iterator44.f();
            }
          }
        }
      } catch (err) {
        _iterator43.e(err);
      } finally {
        _iterator43.f();
      }

      return e;
    }
    /**
     * Update the progress to 'Success' and return the updated progress.
     */

  }, {
    key: "complete",
    value: function () {
      var _complete = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22() {
        var t, e, _iterator45, _step45, _t69;

        return regeneratorRuntime.wrap(function _callee22$(_context22) {
          while (1) {
            switch (_context22.prev = _context22.next) {
              case 0:
                _context22.next = 2;
                return Er(this.localStore, new Qo(this.N), this.documents, this.lo.id);

              case 2:
                t = _context22.sent;
                e = this.wo(this.documents);
                _iterator45 = _createForOfIteratorHelper(this.queries);
                _context22.prev = 5;

                _iterator45.s();

              case 7:
                if ((_step45 = _iterator45.n()).done) {
                  _context22.next = 13;
                  break;
                }

                _t69 = _step45.value;
                _context22.next = 11;
                return Tr(this.localStore, _t69, e.get(_t69.name));

              case 11:
                _context22.next = 7;
                break;

              case 13:
                _context22.next = 18;
                break;

              case 15:
                _context22.prev = 15;
                _context22.t0 = _context22["catch"](5);

                _iterator45.e(_context22.t0);

              case 18:
                _context22.prev = 18;

                _iterator45.f();

                return _context22.finish(18);

              case 21:
                return _context22.abrupt("return", (this.progress.taskState = "Success", new nr(Object.assign({}, this.progress), t)));

              case 22:
              case "end":
                return _context22.stop();
            }
          }
        }, _callee22, this, [[5, 15, 18, 21]]);
      }));

      function complete() {
        return _complete.apply(this, arguments);
      }

      return complete;
    }()
  }]);

  return Wo;
}();
/**
 * Returns a `LoadBundleTaskProgress` representing the initial progress of
 * loading a bundle.
 */


function Go(t) {
  return {
    taskState: "Running",
    documentsLoaded: 0,
    bytesLoaded: 0,
    totalDocuments: t.totalDocuments,
    totalBytes: t.totalBytes
  };
}
/**
 * Returns a `LoadBundleTaskProgress` representing the progress that the loading
 * has succeeded.
 */

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var zo = function zo(t) {
  _classCallCheck(this, zo);

  this.key = t;
};

var Ho = function Ho(t) {
  _classCallCheck(this, Ho);

  this.key = t;
};
/**
 * View is responsible for computing the final merged truth of what docs are in
 * a query. It gets notified of local and remote changes to docs, and applies
 * the query filters and limits to determine the most correct possible results.
 */


var Jo = /*#__PURE__*/function () {
  function Jo(t,
  /** Documents included in the remote target */
  e) {
    _classCallCheck(this, Jo);

    this.query = t, this._o = e, this.mo = null,
    /**
     * A flag whether the view is current with the backend. A view is considered
     * current after it has seen the current flag from the backend and did not
     * lose consistency within the watch stream (e.g. because of an existence
     * filter mismatch).
     */
    this.current = !1,
    /** Documents in the view but not in the remote target */
    this.yo = Rn(),
    /** Document Keys that have local changes */
    this.mutatedKeys = Rn(), this.po = be(t), this.Eo = new xo(this.po);
  }
  /**
   * The set of remote documents that the server has told us belongs to the target associated with
   * this view.
   */


  _createClass(Jo, [{
    key: "To",
    get: function get() {
      return this._o;
    }
    /**
     * Iterates over a set of doc changes, applies the query limit, and computes
     * what the new results should be, what the changes were, and whether we may
     * need to go back to the local cache for more results. Does not make any
     * changes to the view.
     * @param docChanges - The doc changes to apply to this view.
     * @param previousChanges - If this is being called with a refill, then start
     *        with this set of docs and changes instead of the current view.
     * @returns a new set of docs, changes, and refill flag.
     */

  }, {
    key: "Io",
    value: function Io(t, e) {
      var _this137 = this;

      var n = e ? e.Ao : new ko(),
          s = e ? e.Eo : this.Eo;
      var i = e ? e.mutatedKeys : this.mutatedKeys,
          r = s,
          o = !1; // Track the last doc in a (full) limit. This is necessary, because some
      // update (a delete, or an update moving a doc past the old limit) might
      // mean there is some other document in the local cache that either should
      // come (1) between the old last limit doc and the new last document, in the
      // case of updates, or (2) after the new last document, in the case of
      // deletes. So we keep this doc at the old limit to compare the updates to.
      // Note that this should never get used in a refill (when previousChanges is
      // set), because there will only be adds -- no deletes or updates.

      var a = de(this.query) && s.size === this.query.limit ? s.last() : null,
          c = we(this.query) && s.size === this.query.limit ? s.first() : null; // Drop documents out to meet limit/limitToLast requirement.

      if (t.inorderTraversal(function (t, e) {
        var u = s.get(t),
            h = Re(_this137.query, e) ? e : null,
            l = !!u && _this137.mutatedKeys.has(u.key),
            f = !!h && (h.hasLocalMutations || // We only consider committed mutations for documents that were
        // mutated during the lifetime of the view.
        _this137.mutatedKeys.has(h.key) && h.hasCommittedMutations);

        var d = !1; // Calculate change

        if (u && h) {
          u.data.isEqual(h.data) ? l !== f && (n.track({
            type: 3
            /* Metadata */
            ,
            doc: h
          }), d = !0) : _this137.Ro(u, h) || (n.track({
            type: 2
            /* Modified */
            ,
            doc: h
          }), d = !0, (a && _this137.po(h, a) > 0 || c && _this137.po(h, c) < 0) && ( // This doc moved from inside the limit to outside the limit.
          // That means there may be some other doc in the local cache
          // that should be included instead.
          o = !0));
        } else !u && h ? (n.track({
          type: 0
          /* Added */
          ,
          doc: h
        }), d = !0) : u && !h && (n.track({
          type: 1
          /* Removed */
          ,
          doc: u
        }), d = !0, (a || c) && ( // A doc was removed from a full limit query. We'll need to
        // requery from the local cache to see if we know about some other
        // doc that should be in the results.
        o = !0));

        d && (h ? (r = r.add(h), i = f ? i.add(t) : i.delete(t)) : (r = r.delete(t), i = i.delete(t)));
      }), de(this.query) || we(this.query)) for (; r.size > this.query.limit;) {
        var _t70 = de(this.query) ? r.last() : r.first();

        r = r.delete(_t70.key), i = i.delete(_t70.key), n.track({
          type: 1
          /* Removed */
          ,
          doc: _t70
        });
      }
      return {
        Eo: r,
        Ao: n,
        Ln: o,
        mutatedKeys: i
      };
    }
  }, {
    key: "Ro",
    value: function Ro(t, e) {
      // We suppress the initial change event for documents that were modified as
      // part of a write acknowledgment (e.g. when the value of a server transform
      // is applied) as Watch will send us the same document again.
      // By suppressing the event, we only raise two user visible events (one with
      // `hasPendingWrites` and the final state of the document) instead of three
      // (one with `hasPendingWrites`, the modified document with
      // `hasPendingWrites` and the final state of the document).
      return t.hasLocalMutations && e.hasCommittedMutations && !e.hasLocalMutations;
    }
    /**
     * Updates the view with the given ViewDocumentChanges and optionally updates
     * limbo docs and sync state from the provided target change.
     * @param docChanges - The set of changes to make to the view's docs.
     * @param updateLimboDocuments - Whether to update limbo documents based on
     *        this change.
     * @param targetChange - A target change to apply for computing limbo docs and
     *        sync state.
     * @returns A new ViewChange with the given docs, changes, and sync state.
     */
    // PORTING NOTE: The iOS/Android clients always compute limbo document changes.

  }, {
    key: "applyChanges",
    value: function applyChanges(t, e, n) {
      var _this138 = this;

      var s = this.Eo;
      this.Eo = t.Eo, this.mutatedKeys = t.mutatedKeys; // Sort changes based on type and query comparator

      var i = t.Ao.Yr();
      i.sort(function (t, e) {
        return function (t, e) {
          var n = function n(t) {
            switch (t) {
              case 0
              /* Added */
              :
                return 1;

              case 2
              /* Modified */
              :
              case 3
              /* Metadata */
              :
                // A metadata change is converted to a modified change at the public
                // api layer.  Since we sort by document key and then change type,
                // metadata and modified changes must be sorted equivalently.
                return 2;

              case 1
              /* Removed */
              :
                return 0;

              default:
                return F();
            }
          };

          return n(t) - n(e);
        }
        /**
        * @license
        * Copyright 2020 Google LLC
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *   http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
        (t.type, e.type) || _this138.po(t.doc, e.doc);
      }), this.bo(n);
      var r = e ? this.Po() : [],
          o = 0 === this.yo.size && this.current ? 1
      /* Synced */
      : 0
      /* Local */
      ,
          a = o !== this.mo;

      if (this.mo = o, 0 !== i.length || a) {
        return {
          snapshot: new $o(this.query, t.Eo, s, i, t.mutatedKeys, 0
          /* Local */
          === o, a,
          /* excludesMetadataChanges= */
          !1),
          vo: r
        };
      } // no changes


      return {
        vo: r
      };
    }
    /**
     * Applies an OnlineState change to the view, potentially generating a
     * ViewChange if the view's syncState changes as a result.
     */

  }, {
    key: "eo",
    value: function eo(t) {
      return this.current && "Offline"
      /* Offline */
      === t ? ( // If we're offline, set `current` to false and then call applyChanges()
      // to refresh our syncState and generate a ViewChange as appropriate. We
      // are guaranteed to get a new TargetChange that sets `current` back to
      // true once the client is back online.
      this.current = !1, this.applyChanges({
        Eo: this.Eo,
        Ao: new ko(),
        mutatedKeys: this.mutatedKeys,
        Ln: !1
      },
      /* updateLimboDocuments= */
      !1)) : {
        vo: []
      };
    }
    /**
     * Returns whether the doc for the given key should be in limbo.
     */

  }, {
    key: "Vo",
    value: function Vo(t) {
      // If the remote end says it's part of this query, it's not in limbo.
      return !this._o.has(t) && // The local store doesn't think it's a result, so it shouldn't be in limbo.
      !!this.Eo.has(t) && !this.Eo.get(t).hasLocalMutations;
    }
    /**
     * Updates syncedDocuments, current, and limbo docs based on the given change.
     * Returns the list of changes to which docs are in limbo.
     */

  }, {
    key: "bo",
    value: function bo(t) {
      var _this139 = this;

      t && (t.addedDocuments.forEach(function (t) {
        return _this139._o = _this139._o.add(t);
      }), t.modifiedDocuments.forEach(function (t) {}), t.removedDocuments.forEach(function (t) {
        return _this139._o = _this139._o.delete(t);
      }), this.current = t.current);
    }
  }, {
    key: "Po",
    value: function Po() {
      var _this140 = this;

      // We can only determine limbo documents when we're in-sync with the server.
      if (!this.current) return []; // TODO(klimt): Do this incrementally so that it's not quadratic when
      // updating many documents.

      var t = this.yo;
      this.yo = Rn(), this.Eo.forEach(function (t) {
        _this140.Vo(t.key) && (_this140.yo = _this140.yo.add(t.key));
      }); // Diff the new limbo docs with the old limbo docs.

      var e = [];
      return t.forEach(function (t) {
        _this140.yo.has(t) || e.push(new Ho(t));
      }), this.yo.forEach(function (n) {
        t.has(n) || e.push(new zo(n));
      }), e;
    }
    /**
     * Update the in-memory state of the current view with the state read from
     * persistence.
     *
     * We update the query view whenever a client's primary status changes:
     * - When a client transitions from primary to secondary, it can miss
     *   LocalStorage updates and its query views may temporarily not be
     *   synchronized with the state on disk.
     * - For secondary to primary transitions, the client needs to update the list
     *   of `syncedDocuments` since secondary clients update their query views
     *   based purely on synthesized RemoteEvents.
     *
     * @param queryResult.documents - The documents that match the query according
     * to the LocalStore.
     * @param queryResult.remoteKeys - The keys of the documents that match the
     * query according to the backend.
     *
     * @returns The ViewChange that resulted from this synchronization.
     */
    // PORTING NOTE: Multi-tab only.

  }, {
    key: "So",
    value: function So(t) {
      this._o = t.Gn, this.yo = Rn();
      var e = this.Io(t.documents);
      return this.applyChanges(e,
      /*updateLimboDocuments=*/
      !0);
    }
    /**
     * Returns a view snapshot as if this query was just listened to. Contains
     * a document add for every existing document and the `fromCache` and
     * `hasPendingWrites` status of the already established view.
     */
    // PORTING NOTE: Multi-tab only.

  }, {
    key: "Do",
    value: function Do() {
      return $o.fromInitialDocuments(this.query, this.Eo, this.mutatedKeys, 0
      /* Local */
      === this.mo);
    }
  }]);

  return Jo;
}();
/**
 * QueryView contains all of the data that SyncEngine needs to keep track of for
 * a particular query.
 */


var Yo = function Yo(
/**
 * The query itself.
 */
t,
/**
 * The target number created by the client that is used in the watch
 * stream to identify this query.
 */
e,
/**
 * The view is responsible for computing the final merged truth of what
 * docs are in the query. It gets notified of local and remote changes,
 * and applies the query filters and limits to determine the most correct
 * possible results.
 */
n) {
  _classCallCheck(this, Yo);

  this.query = t, this.targetId = e, this.view = n;
};
/** Tracks a limbo resolution. */


var Xo = function Xo(t) {
  _classCallCheck(this, Xo);

  this.key = t,
  /**
   * Set to true once we've received a document. This is used in
   * getRemoteKeysForTarget() and ultimately used by WatchChangeAggregator to
   * decide whether it needs to manufacture a delete event for the target once
   * the target is CURRENT.
   */
  this.Co = !1;
};
/**
 * An implementation of `SyncEngine` coordinating with other parts of SDK.
 *
 * The parts of SyncEngine that act as a callback to RemoteStore need to be
 * registered individually. This is done in `syncEngineWrite()` and
 * `syncEngineListen()` (as well as `applyPrimaryState()`) as these methods
 * serve as entry points to RemoteStore's functionality.
 *
 * Note: some field defined in this class might have public access level, but
 * the class is not exported so they are only accessible from this module.
 * This is useful to implement optional features (like bundles) in free
 * functions, such that they are tree-shakeable.
 */


var Zo = /*#__PURE__*/function () {
  function Zo(t, e, n, // PORTING NOTE: Manages state synchronization in multi-tab environments.
  s, i, r) {
    _classCallCheck(this, Zo);

    this.localStore = t, this.remoteStore = e, this.eventManager = n, this.sharedClientState = s, this.currentUser = i, this.maxConcurrentLimboResolutions = r, this.No = {}, this.xo = new qi(function (t) {
      return Ie(t);
    }, Te), this.ko = new Map(),
    /**
     * The keys of documents that are in limbo for which we haven't yet started a
     * limbo resolution query. The strings in this set are the result of calling
     * `key.path.canonicalString()` where `key` is a `DocumentKey` object.
     *
     * The `Set` type was chosen because it provides efficient lookup and removal
     * of arbitrary elements and it also maintains insertion order, providing the
     * desired queue-like FIFO semantics.
     */
    this.$o = new Set(),
    /**
     * Keeps track of the target ID for each document that is in limbo with an
     * active target.
     */
    this.Oo = new fn(Rt.comparator),
    /**
     * Keeps track of the information about an active limbo resolution for each
     * active target ID that was started for the purpose of limbo resolution.
     */
    this.Fo = new Map(), this.Mo = new Ar(),
    /** Stores user completion handlers, indexed by User and BatchId. */
    this.Lo = {},
    /** Stores user callbacks waiting for all pending writes to be acknowledged. */
    this.Bo = new Map(), this.Uo = Di.ie(), this.onlineState = "Unknown"
    /* Unknown */
    , // The primary state is set to `true` or `false` immediately after Firestore
    // startup. In the interim, a client should only be considered primary if
    // `isPrimary` is true.
    this.qo = void 0;
  }

  _createClass(Zo, [{
    key: "isPrimaryClient",
    get: function get() {
      return !0 === this.qo;
    }
  }]);

  return Zo;
}();
/**
 * Initiates the new listen, resolves promise when listen enqueued to the
 * server. All the subsequent view snapshots or errors are sent to the
 * subscribed handlers. Returns the initial snapshot.
 */


function ta(_x52, _x53) {
  return _ta.apply(this, arguments);
}
/**
 * Registers a view for a previously unknown query and computes its initial
 * snapshot.
 */


function _ta() {
  _ta = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee93(t, e) {
    var n, s, i, r, _t95, _r19;

    return regeneratorRuntime.wrap(function _callee93$(_context93) {
      while (1) {
        switch (_context93.prev = _context93.next) {
          case 0:
            n = Sa(t);
            r = n.xo.get(e);

            if (!r) {
              _context93.next = 6;
              break;
            }

            // PORTING NOTE: With Multi-Tab Web, it is possible that a query view
            // already exists when EventManager calls us for the first time. This
            // happens when the primary tab is already listening to this query on
            // behalf of another tab and the user of the primary also starts listening
            // to the query. EventManager will not have an assigned target ID in this
            // case and calls `listen` to obtain this ID.
            s = r.targetId, n.sharedClientState.addLocalQueryTarget(s), i = r.view.Do();
            _context93.next = 15;
            break;

          case 6:
            _context93.next = 8;
            return wr(n.localStore, pe(e));

          case 8:
            _t95 = _context93.sent;
            _r19 = n.sharedClientState.addLocalQueryTarget(_t95.targetId);
            s = _t95.targetId;
            _context93.next = 13;
            return ea(n, e, s, "current" === _r19);

          case 13:
            i = _context93.sent;
            n.isPrimaryClient && ro(n.remoteStore, _t95);

          case 15:
            return _context93.abrupt("return", i);

          case 16:
          case "end":
            return _context93.stop();
        }
      }
    }, _callee93);
  }));
  return _ta.apply(this, arguments);
}

function ea(_x54, _x55, _x56, _x57) {
  return _ea.apply(this, arguments);
}
/** Stops listening to the query. */


function _ea() {
  _ea = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee95(t, e, n, s) {
    var i, r, o, a, c, u;
    return regeneratorRuntime.wrap(function _callee95$(_context95) {
      while (1) {
        switch (_context95.prev = _context95.next) {
          case 0:
            // PORTING NOTE: On Web only, we inject the code that registers new Limbo
            // targets based on view changes. This allows us to only depend on Limbo
            // changes when user code includes queries.
            t.Ko = function (e, n, s) {
              return function () {
                var _ref62 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee94(t, e, n, s) {
                  var i, r, o;
                  return regeneratorRuntime.wrap(function _callee94$(_context94) {
                    while (1) {
                      switch (_context94.prev = _context94.next) {
                        case 0:
                          i = e.view.Io(n);
                          _context94.t0 = i.Ln;

                          if (!_context94.t0) {
                            _context94.next = 6;
                            break;
                          }

                          _context94.next = 5;
                          return mr(t.localStore, e.query,
                          /* usePreviousResults= */
                          !1).then(function (_ref63) {
                            var t = _ref63.documents;
                            return e.view.Io(t, i);
                          });

                        case 5:
                          i = _context94.sent;

                        case 6:
                          r = s && s.targetChanges.get(e.targetId), o = e.view.applyChanges(i,
                          /* updateLimboDocuments= */
                          t.isPrimaryClient, r);
                          return _context94.abrupt("return", (wa(t, e.targetId, o.vo), o.snapshot));

                        case 8:
                        case "end":
                          return _context94.stop();
                      }
                    }
                  }, _callee94);
                }));

                return function (_x135, _x136, _x137, _x138) {
                  return _ref62.apply(this, arguments);
                };
              }()(t, e, n, s);
            };

            _context95.next = 3;
            return mr(t.localStore, e,
            /* usePreviousResults= */
            !0);

          case 3:
            i = _context95.sent;
            r = new Jo(e, i.Gn);
            o = r.Io(i.documents);
            a = Vn.createSynthesizedTargetChangeForCurrentChange(n, s && "Offline"
            /* Offline */
            !== t.onlineState);
            c = r.applyChanges(o,
            /* updateLimboDocuments= */
            t.isPrimaryClient, a);
            wa(t, n, c.vo);
            u = new Yo(e, n, r);
            return _context95.abrupt("return", (t.xo.set(e, u), t.ko.has(n) ? t.ko.get(n).push(e) : t.ko.set(n, [e]), c.snapshot));

          case 11:
          case "end":
            return _context95.stop();
        }
      }
    }, _callee95);
  }));
  return _ea.apply(this, arguments);
}

function na(_x58, _x59) {
  return _na.apply(this, arguments);
}
/**
 * Initiates the write of local mutation batch which involves adding the
 * writes to the mutation queue, notifying the remote store about new
 * mutations and raising events for any changes this write caused.
 *
 * The promise returned by this call is resolved when the above steps
 * have completed, *not* when the write was acked by the backend. The
 * userCallback is resolved once the write was acked/rejected by the
 * backend (or failed locally for any other reason).
 */


function _na() {
  _na = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee96(t, e) {
    var n, s, i;
    return regeneratorRuntime.wrap(function _callee96$(_context96) {
      while (1) {
        switch (_context96.prev = _context96.next) {
          case 0:
            n = B(t), s = n.xo.get(e), i = n.ko.get(s.targetId);

            if (!(i.length > 1)) {
              _context96.next = 3;
              break;
            }

            return _context96.abrupt("return", (n.ko.set(s.targetId, i.filter(function (t) {
              return !Te(t, e);
            })), void n.xo.delete(e)));

          case 3:
            if (!n.isPrimaryClient) {
              _context96.next = 11;
              break;
            }

            // We need to remove the local query target first to allow us to verify
            // whether any other client is still interested in this target.
            n.sharedClientState.removeLocalQueryTarget(s.targetId);
            _context96.t0 = n.sharedClientState.isActiveQueryTarget(s.targetId);

            if (_context96.t0) {
              _context96.next = 9;
              break;
            }

            _context96.next = 9;
            return _r(n.localStore, s.targetId,
            /*keepPersistedTargetData=*/
            !1).then(function () {
              n.sharedClientState.clearQueryState(s.targetId), oo(n.remoteStore, s.targetId), fa(n, s.targetId);
            }).catch($i);

          case 9:
            _context96.next = 14;
            break;

          case 11:
            fa(n, s.targetId);
            _context96.next = 14;
            return _r(n.localStore, s.targetId,
            /*keepPersistedTargetData=*/
            !0);

          case 14:
          case "end":
            return _context96.stop();
        }
      }
    }, _callee96);
  }));
  return _na.apply(this, arguments);
}

function sa(_x60, _x61, _x62) {
  return _sa.apply(this, arguments);
}
/**
 * Applies one remote event to the sync engine, notifying any views of the
 * changes, and releasing any pending mutation batches that would become
 * visible because of the snapshot version the remote event contains.
 */


function _sa() {
  _sa = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee97(t, e, n) {
    var s, _t96, _e78;

    return regeneratorRuntime.wrap(function _callee97$(_context97) {
      while (1) {
        switch (_context97.prev = _context97.next) {
          case 0:
            s = Da(t);
            _context97.prev = 1;
            _context97.next = 4;
            return function (t, e) {
              var n = B(t),
                  s = nt.now(),
                  i = e.reduce(function (t, e) {
                return t.add(e.key);
              }, Rn());
              var r;
              return n.persistence.runTransaction("Locally write mutations", "readwrite", function (t) {
                return n.Qn.Pn(t, i).next(function (i) {
                  r = i; // For non-idempotent mutations (such as `FieldValue.increment()`),
                  // we record the base state in a separate patch mutation. This is
                  // later used to guarantee consistent values and prevents flicker
                  // even if the backend sends us an update that already includes our
                  // transform.

                  // For non-idempotent mutations (such as `FieldValue.increment()`),
                  // we record the base state in a separate patch mutation. This is
                  // later used to guarantee consistent values and prevents flicker
                  // even if the backend sends us an update that already includes our
                  // transform.
                  var o = [];

                  var _iterator67 = _createForOfIteratorHelper(e),
                      _step67;

                  try {
                    for (_iterator67.s(); !(_step67 = _iterator67.n()).done;) {
                      var _t97 = _step67.value;

                      var _e77 = Je(_t97, r.get(_t97.key));

                      null != _e77 && // NOTE: The base state should only be applied if there's some
                      // existing document to override, so use a Precondition of
                      // exists=true
                      o.push(new tn(_t97.key, _e77, Bt(_e77.value.mapValue), Qe.exists(!0)));
                    }
                  } catch (err) {
                    _iterator67.e(err);
                  } finally {
                    _iterator67.f();
                  }

                  return n.In.addMutationBatch(t, s, o, e);
                });
              }).then(function (t) {
                return t.applyToLocalDocumentSet(r), {
                  batchId: t.batchId,
                  changes: r
                };
              });
            }(s.localStore, e);

          case 4:
            _t96 = _context97.sent;
            s.sharedClientState.addPendingMutation(_t96.batchId);

            (function (t, e, n) {
              var s = t.Lo[t.currentUser.toKey()];
              s || (s = new fn(Z));
              s = s.insert(e, n), t.Lo[t.currentUser.toKey()] = s;
            }
            /**
            * Resolves or rejects the user callback for the given batch and then discards
            * it.
            */
            )(s, _t96.batchId, n);

            _context97.next = 9;
            return ga(s, _t96.changes);

          case 9:
            _context97.next = 11;
            return po(s.remoteStore);

          case 11:
            _context97.next = 17;
            break;

          case 13:
            _context97.prev = 13;
            _context97.t0 = _context97["catch"](1);
            // If we can't persist the mutation, we reject the user callback and
            // don't send the mutation. The user can then retry the write.
            _e78 = No(_context97.t0, "Failed to persist write");
            n.reject(_e78);

          case 17:
          case "end":
            return _context97.stop();
        }
      }
    }, _callee97, null, [[1, 13]]);
  }));
  return _sa.apply(this, arguments);
}

function ia(_x63, _x64) {
  return _ia.apply(this, arguments);
}
/**
 * Applies an OnlineState change to the sync engine and notifies any views of
 * the change.
 */


function _ia() {
  _ia = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee98(t, e) {
    var n, _t98;

    return regeneratorRuntime.wrap(function _callee98$(_context98) {
      while (1) {
        switch (_context98.prev = _context98.next) {
          case 0:
            n = B(t);
            _context98.prev = 1;
            _context98.next = 4;
            return lr(n.localStore, e);

          case 4:
            _t98 = _context98.sent;
            e.targetChanges.forEach(function (t, e) {
              var s = n.Fo.get(e);
              s && ( // Since this is a limbo resolution lookup, it's for a single document
              // and it could be added, modified, or removed, but not a combination.
              M(t.addedDocuments.size + t.modifiedDocuments.size + t.removedDocuments.size <= 1), t.addedDocuments.size > 0 ? s.Co = !0 : t.modifiedDocuments.size > 0 ? M(s.Co) : t.removedDocuments.size > 0 && (M(s.Co), s.Co = !1));
            });
            _context98.next = 8;
            return ga(n, _t98, e);

          case 8:
            _context98.next = 14;
            break;

          case 10:
            _context98.prev = 10;
            _context98.t0 = _context98["catch"](1);
            _context98.next = 14;
            return $i(_context98.t0);

          case 14:
          case "end":
            return _context98.stop();
        }
      }
    }, _callee98, null, [[1, 10]]);
  }));
  return _ia.apply(this, arguments);
}

function ra(t, e, n) {
  var s = B(t); // If we are the secondary client, we explicitly ignore the remote store's
  // online state (the local client may go offline, even though the primary
  // tab remains online) and only apply the primary tab's online state from
  // SharedClientState.

  if (s.isPrimaryClient && 0
  /* RemoteStore */
  === n || !s.isPrimaryClient && 1
  /* SharedClientState */
  === n) {
    var _t71 = [];
    s.xo.forEach(function (n, s) {
      var i = s.view.eo(e);
      i.snapshot && _t71.push(i.snapshot);
    }), function (t, e) {
      var n = B(t);
      n.onlineState = e;
      var s = !1;
      n.queries.forEach(function (t, n) {
        var _iterator46 = _createForOfIteratorHelper(n.listeners),
            _step46;

        try {
          for (_iterator46.s(); !(_step46 = _iterator46.n()).done;) {
            var _t72 = _step46.value;
            // Run global snapshot listeners if a consistent snapshot has been emitted.
            _t72.eo(e) && (s = !0);
          }
        } catch (err) {
          _iterator46.e(err);
        } finally {
          _iterator46.f();
        }
      }), s && qo(n);
    }(s.eventManager, e), _t71.length && s.No.Tr(_t71), s.onlineState = e, s.isPrimaryClient && s.sharedClientState.setOnlineState(e);
  }
}
/**
 * Rejects the listen for the given targetID. This can be triggered by the
 * backend for any active target.
 *
 * @param syncEngine - The sync engine implementation.
 * @param targetId - The targetID corresponds to one previously initiated by the
 * user as part of TargetData passed to listen() on RemoteStore.
 * @param err - A description of the condition that has forced the rejection.
 * Nearly always this will be an indication that the user is no longer
 * authorized to see the data matching the target.
 */


function oa(_x65, _x66, _x67) {
  return _oa.apply(this, arguments);
}

function _oa() {
  _oa = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee99(t, e, n) {
    var s, i, r, _t99, _n80, _i33;

    return regeneratorRuntime.wrap(function _callee99$(_context99) {
      while (1) {
        switch (_context99.prev = _context99.next) {
          case 0:
            s = B(t); // PORTING NOTE: Multi-tab only.

            s.sharedClientState.updateQueryState(e, "rejected", n);
            i = s.Fo.get(e), r = i && i.key;

            if (!r) {
              _context99.next = 14;
              break;
            }

            // TODO(klimt): We really only should do the following on permission
            // denied errors, but we don't have the cause code here.
            // It's a limbo doc. Create a synthetic event saying it was deleted.
            // This is kind of a hack. Ideally, we would have a method in the local
            // store to purge a document. However, it would be tricky to keep all of
            // the local store's invariants with another method.
            _t99 = new fn(Rt.comparator);
            _t99 = _t99.insert(r, Ut.newNoDocument(r, st.min()));
            _n80 = Rn().add(r), _i33 = new vn(st.min(),
            /* targetChanges= */
            new Map(),
            /* targetMismatches= */
            new _n(Z), _t99, _n80);
            _context99.next = 9;
            return ia(s, _i33);

          case 9:
            // Since this query failed, we won't want to manually unlisten to it.
            // We only remove it from bookkeeping after we successfully applied the
            // RemoteEvent. If `applyRemoteEvent()` throws, we want to re-listen to
            // this query when the RemoteStore restarts the Watch stream, which should
            // re-trigger the target failure.
            s.Oo = s.Oo.remove(r);
            s.Fo.delete(e);
            ma(s);
            _context99.next = 16;
            break;

          case 14:
            _context99.next = 16;
            return _r(s.localStore, e,
            /* keepPersistedTargetData */
            !1).then(function () {
              return fa(s, e, n);
            }).catch($i);

          case 16:
          case "end":
            return _context99.stop();
        }
      }
    }, _callee99);
  }));
  return _oa.apply(this, arguments);
}

function aa(_x68, _x69) {
  return _aa.apply(this, arguments);
}

function _aa() {
  _aa = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee100(t, e) {
    var n, s, _t100;

    return regeneratorRuntime.wrap(function _callee100$(_context100) {
      while (1) {
        switch (_context100.prev = _context100.next) {
          case 0:
            n = B(t), s = e.batch.batchId;
            _context100.prev = 1;
            _context100.next = 4;
            return ur(n.localStore, e);

          case 4:
            _t100 = _context100.sent;
            la(n, s,
            /*error=*/
            null);
            ha(n, s);
            n.sharedClientState.updateMutationState(s, "acknowledged");
            _context100.next = 10;
            return ga(n, _t100);

          case 10:
            _context100.next = 16;
            break;

          case 12:
            _context100.prev = 12;
            _context100.t0 = _context100["catch"](1);
            _context100.next = 16;
            return $i(_context100.t0);

          case 16:
          case "end":
            return _context100.stop();
        }
      }
    }, _callee100, null, [[1, 12]]);
  }));
  return _aa.apply(this, arguments);
}

function ca(_x70, _x71, _x72) {
  return _ca.apply(this, arguments);
}
/**
 * Registers a user callback that resolves when all pending mutations at the moment of calling
 * are acknowledged .
 */


function _ca() {
  _ca = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee101(t, e, n) {
    var s, _t101;

    return regeneratorRuntime.wrap(function _callee101$(_context101) {
      while (1) {
        switch (_context101.prev = _context101.next) {
          case 0:
            s = B(t);
            _context101.prev = 1;
            _context101.next = 4;
            return function (t, e) {
              var n = B(t);
              return n.persistence.runTransaction("Reject batch", "readwrite-primary", function (t) {
                var s;
                return n.In.lookupMutationBatch(t, e).next(function (e) {
                  return M(null !== e), s = e.keys(), n.In.removeMutationBatch(t, e);
                }).next(function () {
                  return n.In.performConsistencyCheck(t);
                }).next(function () {
                  return n.Qn.Pn(t, s);
                });
              });
            }
            /**
            * Returns the largest (latest) batch id in mutation queue that is pending
            * server response.
            *
            * Returns `BATCHID_UNKNOWN` if the queue is empty.
            */
            (s.localStore, e);

          case 4:
            _t101 = _context101.sent;
            la(s, e, n);
            ha(s, e);
            s.sharedClientState.updateMutationState(e, "rejected", n);
            _context101.next = 10;
            return ga(s, _t101);

          case 10:
            _context101.next = 16;
            break;

          case 12:
            _context101.prev = 12;
            _context101.t0 = _context101["catch"](1);
            _context101.next = 16;
            return $i(_context101.t0);

          case 16:
          case "end":
            return _context101.stop();
        }
      }
    }, _callee101, null, [[1, 12]]);
  }));
  return _ca.apply(this, arguments);
}

function ua(_x73, _x74) {
  return _ua.apply(this, arguments);
}
/**
 * Triggers the callbacks that are waiting for this batch id to get acknowledged by server,
 * if there are any.
 */


function _ua() {
  _ua = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee102(t, e) {
    var n, _t102, s, _n81;

    return regeneratorRuntime.wrap(function _callee102$(_context102) {
      while (1) {
        switch (_context102.prev = _context102.next) {
          case 0:
            n = B(t);
            lo(n.remoteStore) || x("SyncEngine", "The network is disabled. The task returned by 'awaitPendingWrites()' will not complete until the network is enabled.");
            _context102.prev = 2;
            _context102.next = 5;
            return function (t) {
              var e = B(t);
              return e.persistence.runTransaction("Get highest unacknowledged batch id", "readonly", function (t) {
                return e.In.getHighestUnacknowledgedBatchId(t);
              });
            }(n.localStore);

          case 5:
            _t102 = _context102.sent;

            if (!(-1 === _t102)) {
              _context102.next = 8;
              break;
            }

            return _context102.abrupt("return", void e.resolve());

          case 8:
            s = n.Bo.get(_t102) || [];
            s.push(e), n.Bo.set(_t102, s);
            _context102.next = 16;
            break;

          case 12:
            _context102.prev = 12;
            _context102.t0 = _context102["catch"](2);
            _n81 = No(_context102.t0, "Initialization of waitForPendingWrites() operation failed");
            e.reject(_n81);

          case 16:
          case "end":
            return _context102.stop();
        }
      }
    }, _callee102, null, [[2, 12]]);
  }));
  return _ua.apply(this, arguments);
}

function ha(t, e) {
  (t.Bo.get(e) || []).forEach(function (t) {
    t.resolve();
  }), t.Bo.delete(e);
}
/** Reject all outstanding callbacks waiting for pending writes to complete. */


function la(t, e, n) {
  var s = B(t);
  var i = s.Lo[s.currentUser.toKey()]; // NOTE: Mutations restored from persistence won't have callbacks, so it's
  // okay for there to be no callback for this ID.

  if (i) {
    var _t73 = i.get(e);

    _t73 && (n ? _t73.reject(n) : _t73.resolve(), i = i.remove(e)), s.Lo[s.currentUser.toKey()] = i;
  }
}

function fa(t, e) {
  var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  t.sharedClientState.removeLocalQueryTarget(e);

  var _iterator47 = _createForOfIteratorHelper(t.ko.get(e)),
      _step47;

  try {
    for (_iterator47.s(); !(_step47 = _iterator47.n()).done;) {
      var _s40 = _step47.value;
      t.xo.delete(_s40), n && t.No.jo(_s40, n);
    }
  } catch (err) {
    _iterator47.e(err);
  } finally {
    _iterator47.f();
  }

  if (t.ko.delete(e), t.isPrimaryClient) {
    t.Mo.cs(e).forEach(function (e) {
      t.Mo.containsKey(e) || // We removed the last reference for this key
      da(t, e);
    });
  }
}

function da(t, e) {
  t.$o.delete(e.path.canonicalString()); // It's possible that the target already got removed because the query failed. In that case,
  // the key won't exist in `limboTargetsByKey`. Only do the cleanup if we still have the target.

  var n = t.Oo.get(e);
  null !== n && (oo(t.remoteStore, n), t.Oo = t.Oo.remove(e), t.Fo.delete(n), ma(t));
}

function wa(t, e, n) {
  var _iterator48 = _createForOfIteratorHelper(n),
      _step48;

  try {
    for (_iterator48.s(); !(_step48 = _iterator48.n()).done;) {
      var _s41 = _step48.value;
      if (_s41 instanceof zo) t.Mo.addReference(_s41.key, e), _a(t, _s41);else if (_s41 instanceof Ho) {
        x("SyncEngine", "Document no longer in limbo: " + _s41.key), t.Mo.removeReference(_s41.key, e);
        t.Mo.containsKey(_s41.key) || // We removed the last reference for this key
        da(t, _s41.key);
      } else F();
    }
  } catch (err) {
    _iterator48.e(err);
  } finally {
    _iterator48.f();
  }
}

function _a(t, e) {
  var n = e.key,
      s = n.path.canonicalString();
  t.Oo.get(n) || t.$o.has(s) || (x("SyncEngine", "New document in limbo: " + n), t.$o.add(s), ma(t));
}
/**
 * Starts listens for documents in limbo that are enqueued for resolution,
 * subject to a maximum number of concurrent resolutions.
 *
 * Without bounding the number of concurrent resolutions, the server can fail
 * with "resource exhausted" errors which can lead to pathological client
 * behavior as seen in https://github.com/firebase/firebase-js-sdk/issues/2683.
 */


function ma(t) {
  for (; t.$o.size > 0 && t.Oo.size < t.maxConcurrentLimboResolutions;) {
    var _e53 = t.$o.values().next().value;
    t.$o.delete(_e53);

    var _n57 = new Rt(ct.fromString(_e53)),
        _s42 = t.Uo.next();

    t.Fo.set(_s42, new Xo(_n57)), t.Oo = t.Oo.insert(_n57, _s42), ro(t.remoteStore, new ni(pe(fe(_n57.path)), _s42, 2
    /* LimboResolution */
    , J.T));
  }
}

function ga(_x75, _x76, _x77) {
  return _ga.apply(this, arguments);
}

function _ga() {
  _ga = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee104(t, e, n) {
    var s, i, r, o;
    return regeneratorRuntime.wrap(function _callee104$(_context104) {
      while (1) {
        switch (_context104.prev = _context104.next) {
          case 0:
            s = B(t), i = [], r = [], o = [];
            _context104.t0 = s.xo.isEmpty();

            if (_context104.t0) {
              _context104.next = 9;
              break;
            }

            s.xo.forEach(function (t, a) {
              o.push(s.Ko(a, e, n).then(function (t) {
                if (t) {
                  s.isPrimaryClient && s.sharedClientState.updateQueryState(a.targetId, t.fromCache ? "not-current" : "current"), i.push(t);

                  var _e79 = ir.kn(a.targetId, t);

                  r.push(_e79);
                }
              }));
            });
            _context104.next = 6;
            return Promise.all(o);

          case 6:
            s.No.Tr(i);
            _context104.next = 9;
            return function () {
              var _ref64 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee103(t, e) {
                var n, _iterator68, _step68, _t103, _e80, _t104, _s64, _i34;

                return regeneratorRuntime.wrap(function _callee103$(_context103) {
                  while (1) {
                    switch (_context103.prev = _context103.next) {
                      case 0:
                        n = B(t);
                        _context103.prev = 1;
                        _context103.next = 4;
                        return n.persistence.runTransaction("notifyLocalViewChanges", "readwrite", function (t) {
                          return qs.forEach(e, function (e) {
                            return qs.forEach(e.Nn, function (s) {
                              return n.persistence.referenceDelegate.addReference(t, e.targetId, s);
                            }).next(function () {
                              return qs.forEach(e.xn, function (s) {
                                return n.persistence.referenceDelegate.removeReference(t, e.targetId, s);
                              });
                            });
                          });
                        });

                      case 4:
                        _context103.next = 11;
                        break;

                      case 6:
                        _context103.prev = 6;
                        _context103.t0 = _context103["catch"](1);

                        if (Gs(_context103.t0)) {
                          _context103.next = 10;
                          break;
                        }

                        throw _context103.t0;

                      case 10:
                        // If `notifyLocalViewChanges` fails, we did not advance the sequence
                        // number for the documents that were included in this transaction.
                        // This might trigger them to be deleted earlier than they otherwise
                        // would have, but it should not invalidate the integrity of the data.
                        x("LocalStore", "Failed to update sequence numbers: " + _context103.t0);

                      case 11:
                        _iterator68 = _createForOfIteratorHelper(e);

                        try {
                          for (_iterator68.s(); !(_step68 = _iterator68.n()).done;) {
                            _t103 = _step68.value;
                            _e80 = _t103.targetId;

                            if (!_t103.fromCache) {
                              _t104 = n.Un.get(_e80), _s64 = _t104.snapshotVersion, _i34 = _t104.withLastLimboFreeSnapshotVersion(_s64); // Advance the last limbo free snapshot version

                              // Advance the last limbo free snapshot version
                              n.Un = n.Un.insert(_e80, _i34);
                            }
                          }
                        } catch (err) {
                          _iterator68.e(err);
                        } finally {
                          _iterator68.f();
                        }

                      case 13:
                      case "end":
                        return _context103.stop();
                    }
                  }
                }, _callee103, null, [[1, 6]]);
              }));

              return function (_x139, _x140) {
                return _ref64.apply(this, arguments);
              };
            }()(s.localStore, r);

          case 9:
          case "end":
            return _context104.stop();
        }
      }
    }, _callee104);
  }));
  return _ga.apply(this, arguments);
}

function ya(_x78, _x79) {
  return _ya.apply(this, arguments);
}

function _ya() {
  _ya = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee105(t, e) {
    var n, _t105;

    return regeneratorRuntime.wrap(function _callee105$(_context105) {
      while (1) {
        switch (_context105.prev = _context105.next) {
          case 0:
            n = B(t);

            if (n.currentUser.isEqual(e)) {
              _context105.next = 11;
              break;
            }

            x("SyncEngine", "User change. New user:", e.toKey());
            _context105.next = 5;
            return cr(n.localStore, e);

          case 5:
            _t105 = _context105.sent;
            n.currentUser = e;

            // Fails tasks waiting for pending writes requested by previous user.
            (function (t, e) {
              t.Bo.forEach(function (t) {
                t.forEach(function (t) {
                  t.reject(new q(U.CANCELLED, e));
                });
              }), t.Bo.clear();
            })(n, "'waitForPendingWrites' promise is rejected due to a user change.");

            // TODO(b/114226417): Consider calling this only in the primary tab.
            n.sharedClientState.handleUserChange(e, _t105.removedBatchIds, _t105.addedBatchIds);
            _context105.next = 11;
            return ga(n, _t105.Wn);

          case 11:
          case "end":
            return _context105.stop();
        }
      }
    }, _callee105);
  }));
  return _ya.apply(this, arguments);
}

function pa(t, e) {
  var n = B(t),
      s = n.Fo.get(e);
  if (s && s.Co) return Rn().add(s.key);
  {
    var _t74 = Rn();

    var _s43 = n.ko.get(e);

    if (!_s43) return _t74;

    var _iterator49 = _createForOfIteratorHelper(_s43),
        _step49;

    try {
      for (_iterator49.s(); !(_step49 = _iterator49.n()).done;) {
        var _e54 = _step49.value;

        var _s44 = n.xo.get(_e54);

        _t74 = _t74.unionWith(_s44.view.To);
      }
    } catch (err) {
      _iterator49.e(err);
    } finally {
      _iterator49.f();
    }

    return _t74;
  }
}
/**
 * Reconcile the list of synced documents in an existing view with those
 * from persistence.
 */


function Ea(_x80, _x81) {
  return _Ea.apply(this, arguments);
}
/**
 * Retrieves newly changed documents from remote document cache and raises
 * snapshots if needed.
 */
// PORTING NOTE: Multi-Tab only.


function _Ea() {
  _Ea = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee106(t, e) {
    var n, s, i;
    return regeneratorRuntime.wrap(function _callee106$(_context106) {
      while (1) {
        switch (_context106.prev = _context106.next) {
          case 0:
            n = B(t);
            _context106.next = 3;
            return mr(n.localStore, e.query,
            /* usePreviousResults= */
            !0);

          case 3:
            s = _context106.sent;
            i = e.view.So(s);
            return _context106.abrupt("return", (n.isPrimaryClient && wa(n, e.targetId, i.vo), i));

          case 6:
          case "end":
            return _context106.stop();
        }
      }
    }, _callee106);
  }));
  return _Ea.apply(this, arguments);
}

function Ta(_x82) {
  return _Ta.apply(this, arguments);
}
/** Applies a mutation state to an existing batch.  */
// PORTING NOTE: Multi-Tab only.


function _Ta() {
  _Ta = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee107(t) {
    var e;
    return regeneratorRuntime.wrap(function _callee107$(_context107) {
      while (1) {
        switch (_context107.prev = _context107.next) {
          case 0:
            e = B(t);
            return _context107.abrupt("return", yr(e.localStore).then(function (t) {
              return ga(e, t);
            }));

          case 2:
          case "end":
            return _context107.stop();
        }
      }
    }, _callee107);
  }));
  return _Ta.apply(this, arguments);
}

function Ia(_x83, _x84, _x85, _x86) {
  return _Ia.apply(this, arguments);
}
/** Applies a query target change from a different tab. */
// PORTING NOTE: Multi-Tab only.


function _Ia() {
  _Ia = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee108(t, e, n, s) {
    var i, r;
    return regeneratorRuntime.wrap(function _callee108$(_context108) {
      while (1) {
        switch (_context108.prev = _context108.next) {
          case 0:
            i = B(t);
            _context108.next = 3;
            return function (t, e) {
              var n = B(t),
                  s = B(n.In);
              return n.persistence.runTransaction("Lookup mutation documents", "readonly", function (t) {
                return s.Xt(t, e).next(function (e) {
                  return e ? n.Qn.Pn(t, e) : qs.resolve(null);
                });
              });
            } // PORTING NOTE: Multi-Tab only.
            (i.localStore, e);

          case 3:
            r = _context108.sent;

            if (!(null !== r)) {
              _context108.next = 15;
              break;
            }

            if (!("pending" === n)) {
              _context108.next = 10;
              break;
            }

            _context108.next = 8;
            return po(i.remoteStore);

          case 8:
            _context108.next = 11;
            break;

          case 10:
            "acknowledged" === n || "rejected" === n ? ( // NOTE: Both these methods are no-ops for batches that originated from
            // other clients.
            la(i, e, s || null), ha(i, e), function (t, e) {
              B(B(t).In).te(e);
            } // PORTING NOTE: Multi-Tab only.
            (i.localStore, e)) : F();

          case 11:
            _context108.next = 13;
            return ga(i, r);

          case 13:
            _context108.next = 16;
            break;

          case 15:
            // A throttled tab may not have seen the mutation before it was completed
            // and removed from the mutation queue, in which case we won't have cached
            // the affected documents. In this case we can safely ignore the update
            // since that means we didn't apply the mutation locally at all (if we
            // had, we would have cached the affected documents), and so we will just
            // see any resulting document changes via normal remote document updates
            // as applicable.
            x("SyncEngine", "Cannot apply mutation batch with id: " + e);

          case 16:
          case "end":
            return _context108.stop();
        }
      }
    }, _callee108);
  }));
  return _Ia.apply(this, arguments);
}

function Aa(_x87, _x88) {
  return _Aa.apply(this, arguments);
}

function _Aa() {
  _Aa = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee109(t, e) {
    var n, _t106, _e81, _iterator69, _step69, _t107, _t108, _e82;

    return regeneratorRuntime.wrap(function _callee109$(_context109) {
      while (1) {
        switch (_context109.prev = _context109.next) {
          case 0:
            n = B(t);

            if (!(Sa(n), Da(n), !0 === e && !0 !== n.qo)) {
              _context109.next = 13;
              break;
            }

            _t106 = n.sharedClientState.getAllActiveQueryTargets();
            _context109.next = 5;
            return Ra(n, _t106.toArray());

          case 5:
            _e81 = _context109.sent;
            n.qo = !0;
            _context109.next = 9;
            return Vo(n.remoteStore, !0);

          case 9:
            _iterator69 = _createForOfIteratorHelper(_e81);

            try {
              for (_iterator69.s(); !(_step69 = _iterator69.n()).done;) {
                _t107 = _step69.value;
                ro(n.remoteStore, _t107);
              }
            } catch (err) {
              _iterator69.e(err);
            } finally {
              _iterator69.f();
            }

            _context109.next = 25;
            break;

          case 13:
            if (!(!1 === e && !1 !== n.qo)) {
              _context109.next = 25;
              break;
            }

            _t108 = [];
            _e82 = Promise.resolve();
            n.ko.forEach(function (s, i) {
              n.sharedClientState.isLocalQueryTarget(i) ? _t108.push(i) : _e82 = _e82.then(function () {
                return fa(n, i), _r(n.localStore, i,
                /*keepPersistedTargetData=*/
                !0);
              }), oo(n.remoteStore, i);
            });
            _context109.next = 19;
            return _e82;

          case 19:
            _context109.next = 21;
            return Ra(n, _t108);

          case 21:
            // PORTING NOTE: Multi-Tab only.
            (function (t) {
              var e = B(t);
              e.Fo.forEach(function (t, n) {
                oo(e.remoteStore, n);
              }), e.Mo.us(), e.Fo = new Map(), e.Oo = new fn(Rt.comparator);
            }
            /**
            * Reconcile the query views of the provided query targets with the state from
            * persistence. Raises snapshots for any changes that affect the local
            * client and returns the updated state of all target's query data.
            *
            * @param syncEngine - The sync engine implementation
            * @param targets - the list of targets with views that need to be recomputed
            * @param transitionToPrimary - `true` iff the tab transitions from a secondary
            * tab to a primary tab
            */
            // PORTING NOTE: Multi-Tab only.
            )(n);

            n.qo = !1;
            _context109.next = 25;
            return Vo(n.remoteStore, !1);

          case 25:
          case "end":
            return _context109.stop();
        }
      }
    }, _callee109);
  }));
  return _Aa.apply(this, arguments);
}

function Ra(_x89, _x90, _x91) {
  return _Ra.apply(this, arguments);
}
/**
 * Creates a `Query` object from the specified `Target`. There is no way to
 * obtain the original `Query`, so we synthesize a `Query` from the `Target`
 * object.
 *
 * The synthesized result might be different from the original `Query`, but
 * since the synthesized `Query` should return the same results as the
 * original one (only the presentation of results might differ), the potential
 * difference will not cause issues.
 */
// PORTING NOTE: Multi-Tab only.


function _Ra() {
  _Ra = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee110(t, e, n) {
    var s, i, r, _iterator70, _step70, _t109, _e83, _n82, _iterator71, _step71, _t110, _e84, _n83, _n84;

    return regeneratorRuntime.wrap(function _callee110$(_context110) {
      while (1) {
        switch (_context110.prev = _context110.next) {
          case 0:
            s = B(t), i = [], r = [];
            _iterator70 = _createForOfIteratorHelper(e);
            _context110.prev = 2;

            _iterator70.s();

          case 4:
            if ((_step70 = _iterator70.n()).done) {
              _context110.next = 45;
              break;
            }

            _t109 = _step70.value;
            _e83 = void 0;
            _n82 = s.ko.get(_t109);

            if (!(_n82 && 0 !== _n82.length)) {
              _context110.next = 34;
              break;
            }

            _context110.next = 11;
            return wr(s.localStore, pe(_n82[0]));

          case 11:
            _e83 = _context110.sent;
            _iterator71 = _createForOfIteratorHelper(_n82);
            _context110.prev = 13;

            _iterator71.s();

          case 15:
            if ((_step71 = _iterator71.n()).done) {
              _context110.next = 24;
              break;
            }

            _t110 = _step71.value;
            _e84 = s.xo.get(_t110);
            _context110.next = 20;
            return Ea(s, _e84);

          case 20:
            _n83 = _context110.sent;
            _n83.snapshot && r.push(_n83.snapshot);

          case 22:
            _context110.next = 15;
            break;

          case 24:
            _context110.next = 29;
            break;

          case 26:
            _context110.prev = 26;
            _context110.t0 = _context110["catch"](13);

            _iterator71.e(_context110.t0);

          case 29:
            _context110.prev = 29;

            _iterator71.f();

            return _context110.finish(29);

          case 32:
            _context110.next = 42;
            break;

          case 34:
            _context110.next = 36;
            return gr(s.localStore, _t109);

          case 36:
            _n84 = _context110.sent;
            _context110.next = 39;
            return wr(s.localStore, _n84);

          case 39:
            _e83 = _context110.sent;
            _context110.next = 42;
            return ea(s, ba(_n84), _t109,
            /*current=*/
            !1);

          case 42:
            i.push(_e83);

          case 43:
            _context110.next = 4;
            break;

          case 45:
            _context110.next = 50;
            break;

          case 47:
            _context110.prev = 47;
            _context110.t1 = _context110["catch"](2);

            _iterator70.e(_context110.t1);

          case 50:
            _context110.prev = 50;

            _iterator70.f();

            return _context110.finish(50);

          case 53:
            return _context110.abrupt("return", (s.No.Tr(r), i));

          case 54:
          case "end":
            return _context110.stop();
        }
      }
    }, _callee110, null, [[2, 47, 50, 53], [13, 26, 29, 32]]);
  }));
  return _Ra.apply(this, arguments);
}

function ba(t) {
  return le(t.path, t.collectionGroup, t.orderBy, t.filters, t.limit, "F"
  /* First */
  , t.startAt, t.endAt);
}
/** Returns the IDs of the clients that are currently active. */
// PORTING NOTE: Multi-Tab only.


function Pa(t) {
  var e = B(t);
  return B(B(e.localStore).persistence).pn();
}
/** Applies a query target change from a different tab. */
// PORTING NOTE: Multi-Tab only.


function va(_x92, _x93, _x94, _x95) {
  return _va.apply(this, arguments);
}
/** Adds or removes Watch targets for queries from different tabs. */


function _va() {
  _va = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee111(t, e, n, s) {
    var i, _t111, _s65;

    return regeneratorRuntime.wrap(function _callee111$(_context111) {
      while (1) {
        switch (_context111.prev = _context111.next) {
          case 0:
            i = B(t);

            if (!i.qo) {
              _context111.next = 5;
              break;
            }

            // If we receive a target state notification via WebStorage, we are
            // either already secondary or another tab has taken the primary lease.
            x("SyncEngine", "Ignoring unexpected query state notification.");
            _context111.next = 21;
            break;

          case 5:
            if (!i.ko.has(e)) {
              _context111.next = 21;
              break;
            }

            _context111.t0 = n;
            _context111.next = _context111.t0 === "current" ? 9 : _context111.t0 === "not-current" ? 9 : _context111.t0 === "rejected" ? 16 : 20;
            break;

          case 9:
            _context111.next = 11;
            return yr(i.localStore);

          case 11:
            _t111 = _context111.sent;
            _s65 = vn.createSynthesizedRemoteEventForCurrentChange(e, "current" === n);
            _context111.next = 15;
            return ga(i, _t111, _s65);

          case 15:
            return _context111.abrupt("break", 21);

          case 16:
            _context111.next = 18;
            return _r(i.localStore, e,
            /* keepPersistedTargetData */
            !0);

          case 18:
            fa(i, e, s);
            return _context111.abrupt("break", 21);

          case 20:
            F();

          case 21:
          case "end":
            return _context111.stop();
        }
      }
    }, _callee111);
  }));
  return _va.apply(this, arguments);
}

function Va(_x96, _x97, _x98) {
  return _Va.apply(this, arguments);
}

function _Va() {
  _Va = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee112(t, e, n) {
    var s, _iterator72, _step72, _t112, _e85, _n85, _iterator73, _step73, _loop4;

    return regeneratorRuntime.wrap(function _callee112$(_context113) {
      while (1) {
        switch (_context113.prev = _context113.next) {
          case 0:
            s = Sa(t);

            if (!s.qo) {
              _context113.next = 45;
              break;
            }

            _iterator72 = _createForOfIteratorHelper(e);
            _context113.prev = 3;

            _iterator72.s();

          case 5:
            if ((_step72 = _iterator72.n()).done) {
              _context113.next = 21;
              break;
            }

            _t112 = _step72.value;

            if (!s.ko.has(_t112)) {
              _context113.next = 10;
              break;
            }

            // A target might have been added in a previous attempt
            x("SyncEngine", "Adding an already active target " + _t112);
            return _context113.abrupt("continue", 19);

          case 10:
            _context113.next = 12;
            return gr(s.localStore, _t112);

          case 12:
            _e85 = _context113.sent;
            _context113.next = 15;
            return wr(s.localStore, _e85);

          case 15:
            _n85 = _context113.sent;
            _context113.next = 18;
            return ea(s, ba(_e85), _n85.targetId,
            /*current=*/
            !1);

          case 18:
            ro(s.remoteStore, _n85);

          case 19:
            _context113.next = 5;
            break;

          case 21:
            _context113.next = 26;
            break;

          case 23:
            _context113.prev = 23;
            _context113.t0 = _context113["catch"](3);

            _iterator72.e(_context113.t0);

          case 26:
            _context113.prev = 26;

            _iterator72.f();

            return _context113.finish(26);

          case 29:
            _iterator73 = _createForOfIteratorHelper(n);
            _context113.prev = 30;
            _loop4 = /*#__PURE__*/regeneratorRuntime.mark(function _loop4() {
              var t;
              return regeneratorRuntime.wrap(function _loop4$(_context112) {
                while (1) {
                  switch (_context112.prev = _context112.next) {
                    case 0:
                      t = _step73.value;
                      _context112.t0 = s.ko.has(t);

                      if (!_context112.t0) {
                        _context112.next = 5;
                        break;
                      }

                      _context112.next = 5;
                      return _r(s.localStore, t,
                      /* keepPersistedTargetData */
                      !1).then(function () {
                        oo(s.remoteStore, t), fa(s, t);
                      }).catch($i);

                    case 5:
                    case "end":
                      return _context112.stop();
                  }
                }
              }, _loop4);
            });

            _iterator73.s();

          case 33:
            if ((_step73 = _iterator73.n()).done) {
              _context113.next = 37;
              break;
            }

            return _context113.delegateYield(_loop4(), "t1", 35);

          case 35:
            _context113.next = 33;
            break;

          case 37:
            _context113.next = 42;
            break;

          case 39:
            _context113.prev = 39;
            _context113.t2 = _context113["catch"](30);

            _iterator73.e(_context113.t2);

          case 42:
            _context113.prev = 42;

            _iterator73.f();

            return _context113.finish(42);

          case 45:
          case "end":
            return _context113.stop();
        }
      }
    }, _callee112, null, [[3, 23, 26, 29], [30, 39, 42, 45]]);
  }));
  return _Va.apply(this, arguments);
}

function Sa(t) {
  var e = B(t);
  return e.remoteStore.remoteSyncer.applyRemoteEvent = ia.bind(null, e), e.remoteStore.remoteSyncer.getRemoteKeysForTarget = pa.bind(null, e), e.remoteStore.remoteSyncer.rejectListen = oa.bind(null, e), e.No.Tr = Bo.bind(null, e.eventManager), e.No.jo = Uo.bind(null, e.eventManager), e;
}

function Da(t) {
  var e = B(t);
  return e.remoteStore.remoteSyncer.applySuccessfulWrite = aa.bind(null, e), e.remoteStore.remoteSyncer.rejectFailedWrite = ca.bind(null, e), e;
}
/**
 * Loads a Firestore bundle into the SDK. The returned promise resolves when
 * the bundle finished loading.
 *
 * @param syncEngine - SyncEngine to use.
 * @param bundleReader - Bundle to load into the SDK.
 * @param task - LoadBundleTask used to update the loading progress to public API.
 */


function Ca(t, e, n) {
  var s = B(t); // eslint-disable-next-line @typescript-eslint/no-floating-promises

  (function () {
    var _ref28 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee23(t, e, n) {
      var _s45, _i25, _r15, _t75, _o11;

      return regeneratorRuntime.wrap(function _callee23$(_context23) {
        while (1) {
          switch (_context23.prev = _context23.next) {
            case 0:
              _context23.prev = 0;
              _context23.next = 3;
              return e.getMetadata();

            case 3:
              _s45 = _context23.sent;
              _context23.next = 6;
              return function (t, e) {
                var n = B(t),
                    s = qn(e.createTime);
                return n.persistence.runTransaction("hasNewerBundle", "readonly", function (t) {
                  return n.Je.getBundleMetadata(t, e.id);
                }).then(function (t) {
                  return !!t && t.createTime.compareTo(s) >= 0;
                });
              }
              /**
              * Saves the given `BundleMetadata` to local persistence.
              */
              (t.localStore, _s45);

            case 6:
              if (!_context23.sent) {
                _context23.next = 10;
                break;
              }

              _context23.next = 9;
              return e.close();

            case 9:
              return _context23.abrupt("return", void n._completeWith(function (t) {
                return {
                  taskState: "Success",
                  documentsLoaded: t.totalDocuments,
                  bytesLoaded: t.totalBytes,
                  totalDocuments: t.totalDocuments,
                  totalBytes: t.totalBytes
                };
              }(_s45)));

            case 10:
              n._updateProgress(Go(_s45));

              _i25 = new Wo(_s45, t.localStore, e.N);
              _context23.next = 14;
              return e.Qo();

            case 14:
              _r15 = _context23.sent;

            case 15:
              if (!_r15) {
                _context23.next = 25;
                break;
              }

              _context23.next = 18;
              return _i25.fo(_r15);

            case 18:
              _t75 = _context23.sent;
              _t75 && n._updateProgress(_t75);
              _context23.next = 22;
              return e.Qo();

            case 22:
              _r15 = _context23.sent;

            case 23:
              _context23.next = 15;
              break;

            case 25:
              _context23.next = 27;
              return _i25.complete();

            case 27:
              _o11 = _context23.sent;
              _context23.next = 30;
              return ga(t, _o11.Tn,
              /* remoteEvent */
              void 0);

            case 30:
              _context23.next = 32;
              return function (t, e) {
                var n = B(t);
                return n.persistence.runTransaction("Save bundle", "readwrite", function (t) {
                  return n.Je.saveBundleMetadata(t, e);
                });
              }
              /**
              * Returns a promise of a `NamedQuery` associated with given query name. Promise
              * resolves to undefined if no persisted data can be found.
              */
              (t.localStore, _s45);

            case 32:
              n._completeWith(_o11.progress);

              _context23.next = 38;
              break;

            case 35:
              _context23.prev = 35;
              _context23.t0 = _context23["catch"](0);
              $("SyncEngine", "Loading bundle failed with ".concat(_context23.t0)), n._failWith(_context23.t0);

            case 38:
            case "end":
              return _context23.stop();
          }
        }
      }, _callee23, null, [[0, 35]]);
    }));

    return function (_x99, _x100, _x101) {
      return _ref28.apply(this, arguments);
    };
  })()
  /**
  * @license
  * Copyright 2020 Google LLC
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */

  /**
  * Provides all components needed for Firestore with in-memory persistence.
  * Uses EagerGC garbage collection.
  */
  (s, e, n).then(function () {
    s.sharedClientState.notifyBundleLoaded();
  });
}

var Na = /*#__PURE__*/function () {
  function Na() {
    _classCallCheck(this, Na);

    this.synchronizeTabs = !1;
  }

  _createClass(Na, [{
    key: "initialize",
    value: function () {
      var _initialize = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee24(t) {
        return regeneratorRuntime.wrap(function _callee24$(_context24) {
          while (1) {
            switch (_context24.prev = _context24.next) {
              case 0:
                this.N = Hr(t.databaseInfo.databaseId);
                this.sharedClientState = this.Wo(t);
                this.persistence = this.Go(t);
                _context24.next = 5;
                return this.persistence.start();

              case 5:
                this.gcScheduler = this.zo(t);
                this.localStore = this.Ho(t);

              case 7:
              case "end":
                return _context24.stop();
            }
          }
        }, _callee24, this);
      }));

      function initialize(_x102) {
        return _initialize.apply(this, arguments);
      }

      return initialize;
    }()
  }, {
    key: "zo",
    value: function zo(t) {
      return null;
    }
  }, {
    key: "Ho",
    value: function Ho(t) {
      return ar(this.persistence, new rr(), t.initialUser, this.N);
    }
  }, {
    key: "Go",
    value: function Go(t) {
      return new Sr(Cr.Ns, this.N);
    }
  }, {
    key: "Wo",
    value: function Wo(t) {
      return new Ur();
    }
  }, {
    key: "terminate",
    value: function () {
      var _terminate = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee25() {
        return regeneratorRuntime.wrap(function _callee25$(_context25) {
          while (1) {
            switch (_context25.prev = _context25.next) {
              case 0:
                this.gcScheduler && this.gcScheduler.stop();
                _context25.next = 3;
                return this.sharedClientState.shutdown();

              case 3:
                _context25.next = 5;
                return this.persistence.shutdown();

              case 5:
              case "end":
                return _context25.stop();
            }
          }
        }, _callee25, this);
      }));

      function terminate() {
        return _terminate.apply(this, arguments);
      }

      return terminate;
    }()
  }]);

  return Na;
}();
/**
 * Provides all components needed for Firestore with IndexedDB persistence.
 */


var xa = /*#__PURE__*/function (_Na) {
  _inherits(xa, _Na);

  var _super29 = _createSuper(xa);

  function xa(t, e, n) {
    var _this141;

    _classCallCheck(this, xa);

    _this141 = _super29.call(this), _this141.Jo = t, _this141.cacheSizeBytes = e, _this141.forceOwnership = n, _this141.synchronizeTabs = !1;
    return _this141;
  }

  _createClass(xa, [{
    key: "initialize",
    value: function () {
      var _initialize2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee26(t) {
        var _this142 = this;

        return regeneratorRuntime.wrap(function _callee26$(_context26) {
          while (1) {
            switch (_context26.prev = _context26.next) {
              case 0:
                _context26.next = 2;
                return _get(_getPrototypeOf(xa.prototype), "initialize", this).call(this, t);

              case 2:
                _context26.next = 4;
                return pr(this.localStore);

              case 4:
                _context26.next = 6;
                return this.Jo.initialize(this, t);

              case 6:
                _context26.next = 8;
                return Da(this.Jo.syncEngine);

              case 8:
                _context26.next = 10;
                return po(this.Jo.remoteStore);

              case 10:
                _context26.next = 12;
                return this.persistence.nn(function () {
                  return _this142.gcScheduler && !_this142.gcScheduler.started && _this142.gcScheduler.start(_this142.localStore), Promise.resolve();
                });

              case 12:
              case "end":
                return _context26.stop();
            }
          }
        }, _callee26, this);
      }));

      function initialize(_x103) {
        return _initialize2.apply(this, arguments);
      }

      return initialize;
    }()
  }, {
    key: "Ho",
    value: function Ho(t) {
      return ar(this.persistence, new rr(), t.initialUser, this.N);
    }
  }, {
    key: "zo",
    value: function zo(t) {
      var e = this.persistence.referenceDelegate.garbageCollector;
      return new Mi(e, t.asyncQueue);
    }
  }, {
    key: "Go",
    value: function Go(t) {
      var e = er(t.databaseInfo.databaseId, t.databaseInfo.persistenceKey),
          n = void 0 !== this.cacheSizeBytes ? Ii.withCacheSize(this.cacheSizeBytes) : Ii.DEFAULT;
      return new Xi(this.synchronizeTabs, e, t.clientId, n, t.asyncQueue, Gr(), zr(), this.N, this.sharedClientState, !!this.forceOwnership);
    }
  }, {
    key: "Wo",
    value: function Wo(t) {
      return new Ur();
    }
  }]);

  return xa;
}(Na);
/**
 * Provides all components needed for Firestore with multi-tab IndexedDB
 * persistence.
 *
 * In the legacy client, this provider is used to provide both multi-tab and
 * non-multi-tab persistence since we cannot tell at build time whether
 * `synchronizeTabs` will be enabled.
 */


var ka = /*#__PURE__*/function (_xa) {
  _inherits(ka, _xa);

  var _super30 = _createSuper(ka);

  function ka(t, e) {
    var _this143;

    _classCallCheck(this, ka);

    _this143 = _super30.call(this, t, e,
    /* forceOwnership= */
    !1), _this143.Jo = t, _this143.cacheSizeBytes = e, _this143.synchronizeTabs = !0;
    return _this143;
  }

  _createClass(ka, [{
    key: "initialize",
    value: function () {
      var _initialize3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee28(t) {
        var _this144 = this;

        var e;
        return regeneratorRuntime.wrap(function _callee28$(_context28) {
          while (1) {
            switch (_context28.prev = _context28.next) {
              case 0:
                _context28.next = 2;
                return _get(_getPrototypeOf(ka.prototype), "initialize", this).call(this, t);

              case 2:
                e = this.Jo.syncEngine;
                _context28.t0 = this.sharedClientState instanceof Br;

                if (!_context28.t0) {
                  _context28.next = 8;
                  break;
                }

                this.sharedClientState.syncEngine = {
                  _i: Ia.bind(null, e),
                  mi: va.bind(null, e),
                  gi: Va.bind(null, e),
                  pn: Pa.bind(null, e),
                  wi: Ta.bind(null, e)
                };
                _context28.next = 8;
                return this.sharedClientState.start();

              case 8:
                _context28.next = 10;
                return this.persistence.nn( /*#__PURE__*/function () {
                  var _ref29 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee27(t) {
                    return regeneratorRuntime.wrap(function _callee27$(_context27) {
                      while (1) {
                        switch (_context27.prev = _context27.next) {
                          case 0:
                            _context27.next = 2;
                            return Aa(_this144.Jo.syncEngine, t);

                          case 2:
                            _this144.gcScheduler && (t && !_this144.gcScheduler.started ? _this144.gcScheduler.start(_this144.localStore) : t || _this144.gcScheduler.stop());

                          case 3:
                          case "end":
                            return _context27.stop();
                        }
                      }
                    }, _callee27);
                  }));

                  return function (_x105) {
                    return _ref29.apply(this, arguments);
                  };
                }());

              case 10:
              case "end":
                return _context28.stop();
            }
          }
        }, _callee28, this);
      }));

      function initialize(_x104) {
        return _initialize3.apply(this, arguments);
      }

      return initialize;
    }()
  }, {
    key: "Wo",
    value: function Wo(t) {
      var e = Gr();
      if (!Br.bt(e)) throw new q(U.UNIMPLEMENTED, "IndexedDB persistence is only available on platforms that support LocalStorage.");
      var n = er(t.databaseInfo.databaseId, t.databaseInfo.persistenceKey);
      return new Br(e, t.asyncQueue, n, t.clientId, t.initialUser);
    }
  }]);

  return ka;
}(xa);
/**
 * Initializes and wires the components that are needed to interface with the
 * network.
 */


var $a = /*#__PURE__*/function () {
  function $a() {
    _classCallCheck(this, $a);
  }

  _createClass($a, [{
    key: "initialize",
    value: function () {
      var _initialize4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee29(t, e) {
        var _this145 = this;

        return regeneratorRuntime.wrap(function _callee29$(_context29) {
          while (1) {
            switch (_context29.prev = _context29.next) {
              case 0:
                _context29.t0 = this.localStore;

                if (_context29.t0) {
                  _context29.next = 12;
                  break;
                }

                this.localStore = t.localStore;
                this.sharedClientState = t.sharedClientState;
                this.datastore = this.createDatastore(e);
                this.remoteStore = this.createRemoteStore(e);
                this.eventManager = this.createEventManager(e);
                this.syncEngine = this.createSyncEngine(e,
                /* startAsPrimary=*/
                !t.synchronizeTabs);

                this.sharedClientState.onlineStateHandler = function (t) {
                  return ra(_this145.syncEngine, t, 1
                  /* SharedClientState */
                  );
                };

                this.remoteStore.remoteSyncer.handleCredentialChange = ya.bind(null, this.syncEngine);
                _context29.next = 12;
                return Vo(this.remoteStore, this.syncEngine.isPrimaryClient);

              case 12:
              case "end":
                return _context29.stop();
            }
          }
        }, _callee29, this);
      }));

      function initialize(_x106, _x107) {
        return _initialize4.apply(this, arguments);
      }

      return initialize;
    }()
  }, {
    key: "createEventManager",
    value: function createEventManager(t) {
      return new Fo();
    }
  }, {
    key: "createDatastore",
    value: function createDatastore(t) {
      var e = Hr(t.databaseInfo.databaseId),
          n = (s = t.databaseInfo, new Wr(s));
      var s;
      /** Return the Platform-specific connectivity monitor. */

      return function (t, e, n) {
        return new to(t, e, n);
      }(t.credentials, n, e);
    }
  }, {
    key: "createRemoteStore",
    value: function createRemoteStore(t) {
      var _this146 = this;

      return e = this.localStore, n = this.datastore, s = t.asyncQueue, i = function i(t) {
        return ra(_this146.syncEngine, t, 0
        /* RemoteStore */
        );
      }, r = Kr.bt() ? new Kr() : new qr(), new no(e, n, s, i, r);
      var e, n, s, i, r;
      /** Re-enables the network. Idempotent. */
    }
  }, {
    key: "createSyncEngine",
    value: function createSyncEngine(t, e) {
      return function (t, e, n, // PORTING NOTE: Manages state synchronization in multi-tab environments.
      s, i, r, o) {
        var a = new Zo(t, e, n, s, i, r);
        return o && (a.qo = !0), a;
      }(this.localStore, this.remoteStore, this.eventManager, this.sharedClientState, t.initialUser, t.maxConcurrentLimboResolutions, e);
    }
  }, {
    key: "terminate",
    value: function terminate() {
      return function () {
        var _ref30 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee30(t) {
          var e;
          return regeneratorRuntime.wrap(function _callee30$(_context30) {
            while (1) {
              switch (_context30.prev = _context30.next) {
                case 0:
                  e = B(t);
                  x("RemoteStore", "RemoteStore shutting down.");
                  e.Kr.add(5
                  /* Shutdown */
                  );
                  _context30.next = 5;
                  return io(e);

                case 5:
                  e.Qr.shutdown();
                  // Set the OnlineState to Unknown (rather than Offline) to avoid potentially
                  // triggering spurious listener events with cached data, etc.
                  e.Wr.set("Unknown"
                  /* Unknown */
                  );

                case 7:
                case "end":
                  return _context30.stop();
              }
            }
          }, _callee30);
        }));

        return function (_x108) {
          return _ref30.apply(this, arguments);
        };
      }()(this.remoteStore);
    }
  }]);

  return $a;
}();
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * How many bytes to read each time when `ReadableStreamReader.read()` is
 * called. Only applicable for byte streams that we control (e.g. those backed
 * by an UInt8Array).
 */

/**
 * Builds a `ByteStreamReader` from a UInt8Array.
 * @param source - The data source to use.
 * @param bytesPerRead - How many bytes each `read()` from the returned reader
 *        will read.
 */


function Oa(t) {
  var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10240;
  var n = 0; // The TypeScript definition for ReadableStreamReader changed. We use
  // `any` here to allow this code to compile with different versions.
  // See https://github.com/microsoft/TypeScript/issues/42970
  // eslint-disable-next-line @typescript-eslint/no-explicit-any

  return {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    read: function read() {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee31() {
        var _s46;

        return regeneratorRuntime.wrap(function _callee31$(_context31) {
          while (1) {
            switch (_context31.prev = _context31.next) {
              case 0:
                if (!(n < t.byteLength)) {
                  _context31.next = 3;
                  break;
                }

                _s46 = {
                  value: t.slice(n, n + e),
                  done: !1
                };
                return _context31.abrupt("return", (n += e, _s46));

              case 3:
                return _context31.abrupt("return", {
                  done: !0
                });

              case 4:
              case "end":
                return _context31.stop();
            }
          }
        }, _callee31);
      }))();
    },
    cancel: function cancel() {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee32() {
        return regeneratorRuntime.wrap(function _callee32$(_context32) {
          while (1) {
            switch (_context32.prev = _context32.next) {
              case 0:
              case "end":
                return _context32.stop();
            }
          }
        }, _callee32);
      }))();
    },
    releaseLock: function releaseLock() {},
    closed: Promise.reject("unimplemented")
  };
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * On web, a `ReadableStream` is wrapped around by a `ByteStreamReader`.
 */

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * A wrapper implementation of Observer<T> that will dispatch events
 * asynchronously. To allow immediate silencing, a mute call is added which
 * causes events scheduled to no longer be raised.
 */


var Fa = /*#__PURE__*/function () {
  function Fa(t) {
    _classCallCheck(this, Fa);

    this.observer = t,
    /**
     * When set to true, will not raise future events. Necessary to deal with
     * async detachment of listener.
     */
    this.muted = !1;
  }

  _createClass(Fa, [{
    key: "next",
    value: function next(t) {
      this.observer.next && this.Yo(this.observer.next, t);
    }
  }, {
    key: "error",
    value: function error(t) {
      this.observer.error ? this.Yo(this.observer.error, t) : console.error("Uncaught Error in snapshot listener:", t);
    }
  }, {
    key: "Xo",
    value: function Xo() {
      this.muted = !0;
    }
  }, {
    key: "Yo",
    value: function Yo(t, e) {
      var _this147 = this;

      this.muted || setTimeout(function () {
        _this147.muted || t(e);
      }, 0);
    }
  }]);

  return Fa;
}();
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A class representing a bundle.
 *
 * Takes a bundle stream or buffer, and presents abstractions to read bundled
 * elements out of the underlying content.
 */


var Ma = /*#__PURE__*/function () {
  function Ma(
  /** The reader to read from underlying binary bundle data source. */
  t, e) {
    var _this148 = this;

    _classCallCheck(this, Ma);

    this.Zo = t, this.N = e,
    /** Cached bundle metadata. */
    this.metadata = new K(),
    /**
     * Internal buffer to hold bundle content, accumulating incomplete element
     * content.
     */
    this.buffer = new Uint8Array(), this.ta = new TextDecoder("utf-8"), // Read the metadata (which is the first element).
    this.ea().then(function (t) {
      t && t.ho() ? _this148.metadata.resolve(t.payload.metadata) : _this148.metadata.reject(new Error("The first element of the bundle is not a metadata, it is\n             ".concat(JSON.stringify(null == t ? void 0 : t.payload))));
    }, function (t) {
      return _this148.metadata.reject(t);
    });
  }

  _createClass(Ma, [{
    key: "close",
    value: function close() {
      return this.Zo.cancel();
    }
  }, {
    key: "getMetadata",
    value: function () {
      var _getMetadata = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee33() {
        return regeneratorRuntime.wrap(function _callee33$(_context33) {
          while (1) {
            switch (_context33.prev = _context33.next) {
              case 0:
                return _context33.abrupt("return", this.metadata.promise);

              case 1:
              case "end":
                return _context33.stop();
            }
          }
        }, _callee33, this);
      }));

      function getMetadata() {
        return _getMetadata.apply(this, arguments);
      }

      return getMetadata;
    }()
  }, {
    key: "Qo",
    value: function () {
      var _Qo = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee34() {
        return regeneratorRuntime.wrap(function _callee34$(_context34) {
          while (1) {
            switch (_context34.prev = _context34.next) {
              case 0:
                _context34.next = 2;
                return this.getMetadata();

              case 2:
                return _context34.abrupt("return", this.ea());

              case 3:
              case "end":
                return _context34.stop();
            }
          }
        }, _callee34, this);
      }));

      function Qo() {
        return _Qo.apply(this, arguments);
      }

      return Qo;
    }()
    /**
     * Reads from the head of internal buffer, and pulling more data from
     * underlying stream if a complete element cannot be found, until an
     * element(including the prefixed length and the JSON string) is found.
     *
     * Once a complete element is read, it is dropped from internal buffer.
     *
     * Returns either the bundled element, or null if we have reached the end of
     * the stream.
     */

  }, {
    key: "ea",
    value: function () {
      var _ea2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee35() {
        var t, e, n, s;
        return regeneratorRuntime.wrap(function _callee35$(_context35) {
          while (1) {
            switch (_context35.prev = _context35.next) {
              case 0:
                _context35.next = 2;
                return this.na();

              case 2:
                t = _context35.sent;

                if (!(null === t)) {
                  _context35.next = 5;
                  break;
                }

                return _context35.abrupt("return", null);

              case 5:
                e = this.ta.decode(t), n = Number(e);
                isNaN(n) && this.sa("length string (".concat(e, ") is not valid number"));
                _context35.next = 9;
                return this.ia(n);

              case 9:
                s = _context35.sent;
                return _context35.abrupt("return", new jo(JSON.parse(s), t.length + n));

              case 11:
              case "end":
                return _context35.stop();
            }
          }
        }, _callee35, this);
      }));

      function ea() {
        return _ea2.apply(this, arguments);
      }

      return ea;
    }()
    /** First index of '{' from the underlying buffer. */

  }, {
    key: "ra",
    value: function ra() {
      return this.buffer.findIndex(function (t) {
        return t === "{".charCodeAt(0);
      });
    }
    /**
     * Reads from the beginning of the internal buffer, until the first '{', and
     * return the content.
     *
     * If reached end of the stream, returns a null.
     */

  }, {
    key: "na",
    value: function () {
      var _na2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee36() {
        var t, e;
        return regeneratorRuntime.wrap(function _callee36$(_context36) {
          while (1) {
            switch (_context36.prev = _context36.next) {
              case 0:
                if (!(this.ra() < 0)) {
                  _context36.next = 7;
                  break;
                }

                _context36.next = 3;
                return this.oa();

              case 3:
                if (!_context36.sent) {
                  _context36.next = 5;
                  break;
                }

                return _context36.abrupt("break", 7);

              case 5:
                _context36.next = 0;
                break;

              case 7:
                if (!(0 === this.buffer.length)) {
                  _context36.next = 9;
                  break;
                }

                return _context36.abrupt("return", null);

              case 9:
                t = this.ra(); // Broke out of the loop because underlying stream is closed, but still
                // cannot find an open bracket.

                t < 0 && this.sa("Reached the end of bundle when a length string is expected.");
                e = this.buffer.slice(0, t); // Update the internal buffer to drop the read length.

                return _context36.abrupt("return", (this.buffer = this.buffer.slice(t), e));

              case 13:
              case "end":
                return _context36.stop();
            }
          }
        }, _callee36, this);
      }));

      function na() {
        return _na2.apply(this, arguments);
      }

      return na;
    }()
    /**
     * Reads from a specified position from the internal buffer, for a specified
     * number of bytes, pulling more data from the underlying stream if needed.
     *
     * Returns a string decoded from the read bytes.
     */

  }, {
    key: "ia",
    value: function () {
      var _ia2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee37(t) {
        var e;
        return regeneratorRuntime.wrap(function _callee37$(_context37) {
          while (1) {
            switch (_context37.prev = _context37.next) {
              case 0:
                if (!(this.buffer.length < t)) {
                  _context37.next = 8;
                  break;
                }

                _context37.next = 3;
                return this.oa();

              case 3:
                _context37.t0 = _context37.sent;

                if (!_context37.t0) {
                  _context37.next = 6;
                  break;
                }

                this.sa("Reached the end of bundle when more is expected.");

              case 6:
                _context37.next = 0;
                break;

              case 8:
                e = this.ta.decode(this.buffer.slice(0, t)); // Update the internal buffer to drop the read json string.

                return _context37.abrupt("return", (this.buffer = this.buffer.slice(t), e));

              case 10:
              case "end":
                return _context37.stop();
            }
          }
        }, _callee37, this);
      }));

      function ia(_x109) {
        return _ia2.apply(this, arguments);
      }

      return ia;
    }()
  }, {
    key: "sa",
    value: function sa(t) {
      // eslint-disable-next-line @typescript-eslint/no-floating-promises
      throw this.Zo.cancel(), new Error("Invalid bundle format: ".concat(t));
    }
    /**
     * Pulls more data from underlying stream to internal buffer.
     * Returns a boolean indicating whether the stream is finished.
     */

  }, {
    key: "oa",
    value: function () {
      var _oa2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee38() {
        var t, _e55;

        return regeneratorRuntime.wrap(function _callee38$(_context38) {
          while (1) {
            switch (_context38.prev = _context38.next) {
              case 0:
                _context38.next = 2;
                return this.Zo.read();

              case 2:
                t = _context38.sent;

                if (!t.done) {
                  _e55 = new Uint8Array(this.buffer.length + t.value.length);
                  _e55.set(this.buffer), _e55.set(t.value, this.buffer.length), this.buffer = _e55;
                }

                return _context38.abrupt("return", t.done);

              case 5:
              case "end":
                return _context38.stop();
            }
          }
        }, _callee38, this);
      }));

      function oa() {
        return _oa2.apply(this, arguments);
      }

      return oa;
    }()
  }]);

  return Ma;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Internal transaction object responsible for accumulating the mutations to
 * perform and the base versions for any documents read.
 */


var La = /*#__PURE__*/function () {
  function La(t) {
    _classCallCheck(this, La);

    this.datastore = t, // The version of each document that was read during this transaction.
    this.readVersions = new Map(), this.mutations = [], this.committed = !1,
    /**
     * A deferred usage error that occurred previously in this transaction that
     * will cause the transaction to fail once it actually commits.
     */
    this.lastWriteError = null,
    /**
     * Set of documents that have been written in the transaction.
     *
     * When there's more than one write to the same key in a transaction, any
     * writes after the first are handled differently.
     */
    this.writtenDocs = new Set();
  }

  _createClass(La, [{
    key: "lookup",
    value: function () {
      var _lookup = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee40(t) {
        var _this149 = this;

        var e;
        return regeneratorRuntime.wrap(function _callee40$(_context40) {
          while (1) {
            switch (_context40.prev = _context40.next) {
              case 0:
                if (!(this.ensureCommitNotCalled(), this.mutations.length > 0)) {
                  _context40.next = 2;
                  break;
                }

                throw new q(U.INVALID_ARGUMENT, "Firestore transactions require all reads to be executed before all writes.");

              case 2:
                _context40.next = 4;
                return function () {
                  var _ref31 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee39(t, e) {
                    var n, s, i, r, o, a;
                    return regeneratorRuntime.wrap(function _callee39$(_context39) {
                      while (1) {
                        switch (_context39.prev = _context39.next) {
                          case 0:
                            n = B(t);
                            s = Hn(n.N) + "/documents";
                            i = {
                              documents: e.map(function (t) {
                                return Qn(n.N, t);
                              })
                            };
                            _context39.next = 5;
                            return n.Ki("BatchGetDocuments", s, i);

                          case 5:
                            r = _context39.sent;
                            o = new Map();
                            r.forEach(function (t) {
                              var e = Zn(n.N, t);
                              o.set(e.key.toString(), e);
                            });
                            a = [];
                            return _context39.abrupt("return", (e.forEach(function (t) {
                              var e = o.get(t.toString());
                              M(!!e), a.push(e);
                            }), a));

                          case 10:
                          case "end":
                            return _context39.stop();
                        }
                      }
                    }, _callee39);
                  }));

                  return function (_x111, _x112) {
                    return _ref31.apply(this, arguments);
                  };
                }()(this.datastore, t);

              case 4:
                e = _context40.sent;
                return _context40.abrupt("return", (e.forEach(function (t) {
                  return _this149.recordVersion(t);
                }), e));

              case 6:
              case "end":
                return _context40.stop();
            }
          }
        }, _callee40, this);
      }));

      function lookup(_x110) {
        return _lookup.apply(this, arguments);
      }

      return lookup;
    }()
  }, {
    key: "set",
    value: function set(t, e) {
      this.write(e.toMutation(t, this.precondition(t))), this.writtenDocs.add(t.toString());
    }
  }, {
    key: "update",
    value: function update(t, e) {
      try {
        this.write(e.toMutation(t, this.preconditionForUpdate(t)));
      } catch (t) {
        this.lastWriteError = t;
      }

      this.writtenDocs.add(t.toString());
    }
  }, {
    key: "delete",
    value: function _delete(t) {
      this.write(new rn(t, this.precondition(t))), this.writtenDocs.add(t.toString());
    }
  }, {
    key: "commit",
    value: function () {
      var _commit = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee42() {
        var _this150 = this;

        var t;
        return regeneratorRuntime.wrap(function _callee42$(_context42) {
          while (1) {
            switch (_context42.prev = _context42.next) {
              case 0:
                if (!(this.ensureCommitNotCalled(), this.lastWriteError)) {
                  _context42.next = 2;
                  break;
                }

                throw this.lastWriteError;

              case 2:
                t = this.readVersions; // For each mutation, note that the doc was written.

                this.mutations.forEach(function (e) {
                  t.delete(e.key.toString());
                });
                // For each document that was read but not written to, we want to perform
                // a `verify` operation.
                t.forEach(function (t, e) {
                  var n = Rt.fromPath(e);

                  _this150.mutations.push(new on(n, _this150.precondition(n)));
                });
                _context42.next = 7;
                return function () {
                  var _ref32 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee41(t, e) {
                    var n, s, i;
                    return regeneratorRuntime.wrap(function _callee41$(_context41) {
                      while (1) {
                        switch (_context41.prev = _context41.next) {
                          case 0:
                            n = B(t), s = Hn(n.N) + "/documents", i = {
                              writes: e.map(function (t) {
                                return es(n.N, t);
                              })
                            };
                            _context41.next = 3;
                            return n.Li("Commit", s, i);

                          case 3:
                          case "end":
                            return _context41.stop();
                        }
                      }
                    }, _callee41);
                  }));

                  return function (_x113, _x114) {
                    return _ref32.apply(this, arguments);
                  };
                }()(this.datastore, this.mutations);

              case 7:
                this.committed = !0;

              case 8:
              case "end":
                return _context42.stop();
            }
          }
        }, _callee42, this);
      }));

      function commit() {
        return _commit.apply(this, arguments);
      }

      return commit;
    }()
  }, {
    key: "recordVersion",
    value: function recordVersion(t) {
      var e;
      if (t.isFoundDocument()) e = t.version;else {
        if (!t.isNoDocument()) throw F(); // For deleted docs, we must use baseVersion 0 when we overwrite them.

        e = st.min();
      }
      var n = this.readVersions.get(t.key.toString());

      if (n) {
        if (!e.isEqual(n)) // This transaction will fail no matter what.
          throw new q(U.ABORTED, "Document version changed between two reads.");
      } else this.readVersions.set(t.key.toString(), e);
    }
    /**
     * Returns the version of this document when it was read in this transaction,
     * as a precondition, or no precondition if it was not read.
     */

  }, {
    key: "precondition",
    value: function precondition(t) {
      var e = this.readVersions.get(t.toString());
      return !this.writtenDocs.has(t.toString()) && e ? Qe.updateTime(e) : Qe.none();
    }
    /**
     * Returns the precondition for a document if the operation is an update.
     */

  }, {
    key: "preconditionForUpdate",
    value: function preconditionForUpdate(t) {
      var e = this.readVersions.get(t.toString()); // The first time a document is written, we want to take into account the
      // read time and existence

      if (!this.writtenDocs.has(t.toString()) && e) {
        if (e.isEqual(st.min())) // The document doesn't exist, so fail the transaction.
          // This has to be validated locally because you can't send a
          // precondition that a document does not exist without changing the
          // semantics of the backend write to be an insert. This is the reverse
          // of what we want, since we want to assert that the document doesn't
          // exist but then send the update and have it fail. Since we can't
          // express that to the backend, we have to validate locally.
          // Note: this can change once we can send separate verify writes in the
          // transaction.
          throw new q(U.INVALID_ARGUMENT, "Can't update a document that doesn't exist."); // Document exists, base precondition on document update time.

        return Qe.updateTime(e);
      } // Document was not read, so we just use the preconditions for a blind
      // update.


      return Qe.exists(!0);
    }
  }, {
    key: "write",
    value: function write(t) {
      this.ensureCommitNotCalled(), this.mutations.push(t);
    }
  }, {
    key: "ensureCommitNotCalled",
    value: function ensureCommitNotCalled() {}
  }]);

  return La;
}();
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * TransactionRunner encapsulates the logic needed to run and retry transactions
 * with backoff.
 */


var Ba = /*#__PURE__*/function () {
  function Ba(t, e, n, s) {
    _classCallCheck(this, Ba);

    this.asyncQueue = t, this.datastore = e, this.updateFunction = n, this.deferred = s, this.aa = 5, this.rr = new Jr(this.asyncQueue, "transaction_retry"
    /* TransactionRetry */
    );
  }
  /** Runs the transaction and sets the result on deferred. */


  _createClass(Ba, [{
    key: "run",
    value: function run() {
      this.aa -= 1, this.ca();
    }
  }, {
    key: "ca",
    value: function ca() {
      var _this151 = this;

      this.rr.Xi( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee43() {
        var t, e;
        return regeneratorRuntime.wrap(function _callee43$(_context43) {
          while (1) {
            switch (_context43.prev = _context43.next) {
              case 0:
                t = new La(_this151.datastore), e = _this151.ua(t);
                e && e.then(function (e) {
                  _this151.asyncQueue.enqueueAndForget(function () {
                    return t.commit().then(function () {
                      _this151.deferred.resolve(e);
                    }).catch(function (t) {
                      _this151.ha(t);
                    });
                  });
                }).catch(function (t) {
                  _this151.ha(t);
                });

              case 2:
              case "end":
                return _context43.stop();
            }
          }
        }, _callee43);
      })));
    }
  }, {
    key: "ua",
    value: function ua(t) {
      try {
        var _e56 = this.updateFunction(t);

        return !Tt(_e56) && _e56.catch && _e56.then ? _e56 : (this.deferred.reject(Error("Transaction callback must return a Promise")), null);
      } catch (t) {
        // Do not retry errors thrown by user provided updateFunction.
        return this.deferred.reject(t), null;
      }
    }
  }, {
    key: "ha",
    value: function ha(t) {
      var _this152 = this;

      this.aa > 0 && this.la(t) ? (this.aa -= 1, this.asyncQueue.enqueueAndForget(function () {
        return _this152.ca(), Promise.resolve();
      })) : this.deferred.reject(t);
    }
  }, {
    key: "la",
    value: function la(t) {
      if ("FirebaseError" === t.name) {
        // In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and
        // non-matching document versions with ABORTED. These errors should be retried.
        var _e57 = t.code;
        return "aborted" === _e57 || "failed-precondition" === _e57 || !hn(_e57);
      }

      return !1;
    }
  }]);

  return Ba;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * FirestoreClient is a top-level class that constructs and owns all of the
 * pieces of the client SDK architecture. It is responsible for creating the
 * async queue that is shared by all of the other components in the system.
 */


var Ua = /*#__PURE__*/function () {
  function Ua(t,
  /**
   * Asynchronous queue responsible for all of our internal processing. When
   * we get incoming work from the user (via public API) or the network
   * (incoming GRPC messages), we should always schedule onto this queue.
   * This ensures all of our work is properly serialized (e.g. we don't
   * start processing a new operation while the previous one is waiting for
   * an async I/O to complete).
   */
  e, n) {
    var _this153 = this;

    _classCallCheck(this, Ua);

    this.credentials = t, this.asyncQueue = e, this.databaseInfo = n, this.user = V.UNAUTHENTICATED, this.clientId = X.I(), this.credentialListener = function () {
      return Promise.resolve();
    }, this.credentials.start(e, /*#__PURE__*/function () {
      var _ref34 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee44(t) {
        return regeneratorRuntime.wrap(function _callee44$(_context44) {
          while (1) {
            switch (_context44.prev = _context44.next) {
              case 0:
                x("FirestoreClient", "Received user=", t.uid);
                _context44.next = 3;
                return _this153.credentialListener(t);

              case 3:
                _this153.user = t;

              case 4:
              case "end":
                return _context44.stop();
            }
          }
        }, _callee44);
      }));

      return function (_x115) {
        return _ref34.apply(this, arguments);
      };
    }());
  }

  _createClass(Ua, [{
    key: "getConfiguration",
    value: function () {
      var _getConfiguration = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee45() {
        return regeneratorRuntime.wrap(function _callee45$(_context45) {
          while (1) {
            switch (_context45.prev = _context45.next) {
              case 0:
                return _context45.abrupt("return", {
                  asyncQueue: this.asyncQueue,
                  databaseInfo: this.databaseInfo,
                  clientId: this.clientId,
                  credentials: this.credentials,
                  initialUser: this.user,
                  maxConcurrentLimboResolutions: 100
                });

              case 1:
              case "end":
                return _context45.stop();
            }
          }
        }, _callee45, this);
      }));

      function getConfiguration() {
        return _getConfiguration.apply(this, arguments);
      }

      return getConfiguration;
    }()
  }, {
    key: "setCredentialChangeListener",
    value: function setCredentialChangeListener(t) {
      this.credentialListener = t;
    }
    /**
     * Checks that the client has not been terminated. Ensures that other methods on
     * this class cannot be called after the client is terminated.
     */

  }, {
    key: "verifyNotTerminated",
    value: function verifyNotTerminated() {
      if (this.asyncQueue.isShuttingDown) throw new q(U.FAILED_PRECONDITION, "The client has already been terminated.");
    }
  }, {
    key: "terminate",
    value: function terminate() {
      var _this154 = this;

      this.asyncQueue.enterRestrictedMode();
      var t = new K();
      return this.asyncQueue.enqueueAndForgetEvenWhileRestricted( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee46() {
        var _n58;

        return regeneratorRuntime.wrap(function _callee46$(_context46) {
          while (1) {
            switch (_context46.prev = _context46.next) {
              case 0:
                _context46.prev = 0;
                _context46.t0 = _this154.onlineComponents;

                if (!_context46.t0) {
                  _context46.next = 5;
                  break;
                }

                _context46.next = 5;
                return _this154.onlineComponents.terminate();

              case 5:
                _context46.t1 = _this154.offlineComponents;

                if (!_context46.t1) {
                  _context46.next = 9;
                  break;
                }

                _context46.next = 9;
                return _this154.offlineComponents.terminate();

              case 9:
                // The credentials provider must be terminated after shutting down the
                // RemoteStore as it will prevent the RemoteStore from retrieving auth
                // tokens.
                _this154.credentials.shutdown();

                t.resolve();
                _context46.next = 17;
                break;

              case 13:
                _context46.prev = 13;
                _context46.t2 = _context46["catch"](0);
                _n58 = No(_context46.t2, "Failed to shutdown persistence");
                t.reject(_n58);

              case 17:
              case "end":
                return _context46.stop();
            }
          }
        }, _callee46, null, [[0, 13]]);
      }))), t.promise;
    }
  }]);

  return Ua;
}();

function qa(_x116, _x117) {
  return _qa.apply(this, arguments);
}

function _qa() {
  _qa = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee114(t, e) {
    var n, s;
    return regeneratorRuntime.wrap(function _callee114$(_context115) {
      while (1) {
        switch (_context115.prev = _context115.next) {
          case 0:
            t.asyncQueue.verifyOperationInProgress(), x("FirestoreClient", "Initializing OfflineComponentProvider");
            _context115.next = 3;
            return t.getConfiguration();

          case 3:
            n = _context115.sent;
            _context115.next = 6;
            return e.initialize(n);

          case 6:
            s = n.initialUser;
            t.setCredentialChangeListener( /*#__PURE__*/function () {
              var _ref65 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee113(t) {
                return regeneratorRuntime.wrap(function _callee113$(_context114) {
                  while (1) {
                    switch (_context114.prev = _context114.next) {
                      case 0:
                        _context114.t0 = s.isEqual(t);

                        if (_context114.t0) {
                          _context114.next = 5;
                          break;
                        }

                        _context114.next = 4;
                        return cr(e.localStore, t);

                      case 4:
                        s = t;

                      case 5:
                      case "end":
                        return _context114.stop();
                    }
                  }
                }, _callee113);
              }));

              return function (_x141) {
                return _ref65.apply(this, arguments);
              };
            }()), // When a user calls clearPersistence() in one client, all other clients
            // need to be terminated to allow the delete to succeed.
            e.persistence.setDatabaseDeletedListener(function () {
              return t.terminate();
            }), t.offlineComponents = e;

          case 8:
          case "end":
            return _context115.stop();
        }
      }
    }, _callee114);
  }));
  return _qa.apply(this, arguments);
}

function Ka(_x118, _x119) {
  return _Ka.apply(this, arguments);
}

function _Ka() {
  _Ka = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee116(t, e) {
    var n, s;
    return regeneratorRuntime.wrap(function _callee116$(_context117) {
      while (1) {
        switch (_context117.prev = _context117.next) {
          case 0:
            t.asyncQueue.verifyOperationInProgress();
            _context117.next = 3;
            return ja(t);

          case 3:
            n = _context117.sent;
            x("FirestoreClient", "Initializing OnlineComponentProvider");
            _context117.next = 7;
            return t.getConfiguration();

          case 7:
            s = _context117.sent;
            _context117.next = 10;
            return e.initialize(n, s);

          case 10:
            // The CredentialChangeListener of the online component provider takes
            // precedence over the offline component provider.
            t.setCredentialChangeListener(function (t) {
              return function () {
                var _ref66 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee115(t, e) {
                  var n, s;
                  return regeneratorRuntime.wrap(function _callee115$(_context116) {
                    while (1) {
                      switch (_context116.prev = _context116.next) {
                        case 0:
                          n = B(t);
                          n.asyncQueue.verifyOperationInProgress(), x("RemoteStore", "RemoteStore received new credentials");
                          s = lo(n); // Tear down and re-create our network streams. This will ensure we get a
                          // fresh auth token for the new user and re-fill the write pipeline with
                          // new mutations from the LocalStore (since mutations are per-user).

                          n.Kr.add(3
                          /* CredentialChange */
                          );
                          _context116.next = 6;
                          return io(n);

                        case 6:
                          s && // Don't set the network status to Unknown if we are offline.
                          n.Wr.set("Unknown"
                          /* Unknown */
                          );
                          _context116.next = 9;
                          return n.remoteSyncer.handleCredentialChange(e);

                        case 9:
                          n.Kr.delete(3
                          /* CredentialChange */
                          );
                          _context116.next = 12;
                          return so(n);

                        case 12:
                        case "end":
                          return _context116.stop();
                      }
                    }
                  }, _callee115);
                }));

                return function (_x142, _x143) {
                  return _ref66.apply(this, arguments);
                };
              }()(e.remoteStore, t);
            });
            t.onlineComponents = e;

          case 12:
          case "end":
            return _context117.stop();
        }
      }
    }, _callee116);
  }));
  return _Ka.apply(this, arguments);
}

function ja(_x120) {
  return _ja.apply(this, arguments);
}

function _ja() {
  _ja = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee117(t) {
    return regeneratorRuntime.wrap(function _callee117$(_context118) {
      while (1) {
        switch (_context118.prev = _context118.next) {
          case 0:
            _context118.t0 = t.offlineComponents;

            if (_context118.t0) {
              _context118.next = 5;
              break;
            }

            x("FirestoreClient", "Using default OfflineComponentProvider");
            _context118.next = 5;
            return qa(t, new Na());

          case 5:
            return _context118.abrupt("return", t.offlineComponents);

          case 6:
          case "end":
            return _context118.stop();
        }
      }
    }, _callee117);
  }));
  return _ja.apply(this, arguments);
}

function Qa(_x121) {
  return _Qa.apply(this, arguments);
}

function _Qa() {
  _Qa = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee118(t) {
    return regeneratorRuntime.wrap(function _callee118$(_context119) {
      while (1) {
        switch (_context119.prev = _context119.next) {
          case 0:
            _context119.t0 = t.onlineComponents;

            if (_context119.t0) {
              _context119.next = 5;
              break;
            }

            x("FirestoreClient", "Using default OnlineComponentProvider");
            _context119.next = 5;
            return Ka(t, new $a());

          case 5:
            return _context119.abrupt("return", t.onlineComponents);

          case 6:
          case "end":
            return _context119.stop();
        }
      }
    }, _callee118);
  }));
  return _Qa.apply(this, arguments);
}

function Wa(t) {
  return ja(t).then(function (t) {
    return t.persistence;
  });
}

function Ga(t) {
  return ja(t).then(function (t) {
    return t.localStore;
  });
}

function za(t) {
  return Qa(t).then(function (t) {
    return t.remoteStore;
  });
}

function Ha(t) {
  return Qa(t).then(function (t) {
    return t.syncEngine;
  });
}

function Ja(_x122) {
  return _Ja.apply(this, arguments);
}
/** Enables the network connection and re-enqueues all pending operations. */


function _Ja() {
  _Ja = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee119(t) {
    var e, n;
    return regeneratorRuntime.wrap(function _callee119$(_context120) {
      while (1) {
        switch (_context120.prev = _context120.next) {
          case 0:
            _context120.next = 2;
            return Qa(t);

          case 2:
            e = _context120.sent;
            n = e.eventManager;
            return _context120.abrupt("return", (n.onListen = ta.bind(null, e.syncEngine), n.onUnlisten = na.bind(null, e.syncEngine), n));

          case 5:
          case "end":
            return _context120.stop();
        }
      }
    }, _callee119);
  }));
  return _Ja.apply(this, arguments);
}

function Ya(t) {
  return t.asyncQueue.enqueue( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee47() {
    var e, n;
    return regeneratorRuntime.wrap(function _callee47$(_context47) {
      while (1) {
        switch (_context47.prev = _context47.next) {
          case 0:
            _context47.next = 2;
            return Wa(t);

          case 2:
            e = _context47.sent;
            _context47.next = 5;
            return za(t);

          case 5:
            n = _context47.sent;
            return _context47.abrupt("return", (e.setNetworkEnabled(!0), function (t) {
              var e = B(t);
              return e.Kr.delete(0
              /* UserDisabled */
              ), so(e);
            }(n)));

          case 7:
          case "end":
            return _context47.stop();
        }
      }
    }, _callee47);
  })));
}
/** Disables the network connection. Pending operations will not complete. */


function Xa(t) {
  return t.asyncQueue.enqueue( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee49() {
    var e, n;
    return regeneratorRuntime.wrap(function _callee49$(_context49) {
      while (1) {
        switch (_context49.prev = _context49.next) {
          case 0:
            _context49.next = 2;
            return Wa(t);

          case 2:
            e = _context49.sent;
            _context49.next = 5;
            return za(t);

          case 5:
            n = _context49.sent;
            return _context49.abrupt("return", (e.setNetworkEnabled(!1), function () {
              var _ref38 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee48(t) {
                var e;
                return regeneratorRuntime.wrap(function _callee48$(_context48) {
                  while (1) {
                    switch (_context48.prev = _context48.next) {
                      case 0:
                        e = B(t);
                        e.Kr.add(0
                        /* UserDisabled */
                        );
                        _context48.next = 4;
                        return io(e);

                      case 4:
                        // Set the OnlineState to Offline so get()s return from cache, etc.
                        e.Wr.set("Offline"
                        /* Offline */
                        );

                      case 5:
                      case "end":
                        return _context48.stop();
                    }
                  }
                }, _callee48);
              }));

              return function (_x123) {
                return _ref38.apply(this, arguments);
              };
            }()(n)));

          case 7:
          case "end":
            return _context49.stop();
        }
      }
    }, _callee49);
  })));
}
/**
 * Returns a Promise that resolves when all writes that were pending at the time
 * this method was called received server acknowledgement. An acknowledgement
 * can be either acceptance or rejection.
 */


function Za(t, e) {
  var n = new K();
  return t.asyncQueue.enqueueAndForget( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee51() {
    return regeneratorRuntime.wrap(function _callee51$(_context51) {
      while (1) {
        switch (_context51.prev = _context51.next) {
          case 0:
            _context51.t0 = function () {
              var _ref40 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee50(t, e, n) {
                var _s47, _s48;

                return regeneratorRuntime.wrap(function _callee50$(_context50) {
                  while (1) {
                    switch (_context50.prev = _context50.next) {
                      case 0:
                        _context50.prev = 0;
                        _context50.next = 3;
                        return function (t, e) {
                          var n = B(t);
                          return n.persistence.runTransaction("read document", "readonly", function (t) {
                            return n.Qn.An(t, e);
                          });
                        }(t, e);

                      case 3:
                        _s47 = _context50.sent;
                        _s47.isFoundDocument() ? n.resolve(_s47) : _s47.isNoDocument() ? n.resolve(null) : n.reject(new q(U.UNAVAILABLE, "Failed to get document from cache. (However, this document may exist on the server. Run again without setting 'source' in the GetOptions to attempt to retrieve the document from the server.)"));
                        _context50.next = 11;
                        break;

                      case 7:
                        _context50.prev = 7;
                        _context50.t0 = _context50["catch"](0);
                        _s48 = No(_context50.t0, "Failed to get document '".concat(e, " from cache"));
                        n.reject(_s48);

                      case 11:
                      case "end":
                        return _context50.stop();
                    }
                  }
                }, _callee50, null, [[0, 7]]);
              }));

              return function (_x124, _x125, _x126) {
                return _ref40.apply(this, arguments);
              };
            }()
            /**
            * Retrieves a latency-compensated document from the backend via a
            * SnapshotListener.
            */
            ;

            _context51.next = 3;
            return Ga(t);

          case 3:
            _context51.t1 = _context51.sent;
            _context51.t2 = e;
            _context51.t3 = n;
            return _context51.abrupt("return", (0, _context51.t0)(_context51.t1, _context51.t2, _context51.t3));

          case 7:
          case "end":
            return _context51.stop();
        }
      }
    }, _callee51);
  }))), n.promise;
}

function tc(t, e) {
  var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var s = new K();
  return t.asyncQueue.enqueueAndForget( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee52() {
    return regeneratorRuntime.wrap(function _callee52$(_context52) {
      while (1) {
        switch (_context52.prev = _context52.next) {
          case 0:
            _context52.t0 = function (t, e, n, s, i) {
              var r = new Fa({
                next: function next(r) {
                  // Remove query first before passing event to user to avoid
                  // user actions affecting the now stale query.
                  e.enqueueAndForget(function () {
                    return Lo(t, o);
                  });
                  var a = r.docs.has(n);
                  !a && r.fromCache ? // TODO(dimond): If we're online and the document doesn't
                  // exist then we resolve with a doc.exists set to false. If
                  // we're offline however, we reject the Promise in this
                  // case. Two options: 1) Cache the negative response from
                  // the server so we can deliver that even when you're
                  // offline 2) Actually reject the Promise in the online case
                  // if the document doesn't exist.
                  i.reject(new q(U.UNAVAILABLE, "Failed to get document because the client is offline.")) : a && r.fromCache && s && "server" === s.source ? i.reject(new q(U.UNAVAILABLE, 'Failed to get document from server. (However, this document does exist in the local cache. Run again without setting source to "server" to retrieve the cached document.)')) : i.resolve(r);
                },
                error: function error(t) {
                  return i.reject(t);
                }
              }),
                  o = new Ko(fe(n.path), r, {
                includeMetadataChanges: !0,
                uo: !0
              });
              return Mo(t, o);
            };

            _context52.next = 3;
            return Ja(t);

          case 3:
            _context52.t1 = _context52.sent;
            _context52.t2 = t.asyncQueue;
            _context52.t3 = e;
            _context52.t4 = n;
            _context52.t5 = s;
            return _context52.abrupt("return", (0, _context52.t0)(_context52.t1, _context52.t2, _context52.t3, _context52.t4, _context52.t5));

          case 9:
          case "end":
            return _context52.stop();
        }
      }
    }, _callee52);
  }))), s.promise;
}

function ec(t, e) {
  var n = new K();
  return t.asyncQueue.enqueueAndForget( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee54() {
    return regeneratorRuntime.wrap(function _callee54$(_context54) {
      while (1) {
        switch (_context54.prev = _context54.next) {
          case 0:
            _context54.t0 = function () {
              var _ref43 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee53(t, e, n) {
                var _s49, _i26, _r16, _o12, _s50;

                return regeneratorRuntime.wrap(function _callee53$(_context53) {
                  while (1) {
                    switch (_context53.prev = _context53.next) {
                      case 0:
                        _context53.prev = 0;
                        _context53.next = 3;
                        return mr(t, e,
                        /* usePreviousResults= */
                        !0);

                      case 3:
                        _s49 = _context53.sent;
                        _i26 = new Jo(e, _s49.Gn);
                        _r16 = _i26.Io(_s49.documents);
                        _o12 = _i26.applyChanges(_r16,
                        /* updateLimboDocuments= */
                        !1);
                        n.resolve(_o12.snapshot);
                        _context53.next = 14;
                        break;

                      case 10:
                        _context53.prev = 10;
                        _context53.t0 = _context53["catch"](0);
                        _s50 = No(_context53.t0, "Failed to execute query '".concat(e, " against cache"));
                        n.reject(_s50);

                      case 14:
                      case "end":
                        return _context53.stop();
                    }
                  }
                }, _callee53, null, [[0, 10]]);
              }));

              return function (_x127, _x128, _x129) {
                return _ref43.apply(this, arguments);
              };
            }()
            /**
            * Retrieves a latency-compensated query snapshot from the backend via a
            * SnapshotListener.
            */
            ;

            _context54.next = 3;
            return Ga(t);

          case 3:
            _context54.t1 = _context54.sent;
            _context54.t2 = e;
            _context54.t3 = n;
            return _context54.abrupt("return", (0, _context54.t0)(_context54.t1, _context54.t2, _context54.t3));

          case 7:
          case "end":
            return _context54.stop();
        }
      }
    }, _callee54);
  }))), n.promise;
}

function nc(t, e) {
  var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var s = new K();
  return t.asyncQueue.enqueueAndForget( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee55() {
    return regeneratorRuntime.wrap(function _callee55$(_context55) {
      while (1) {
        switch (_context55.prev = _context55.next) {
          case 0:
            _context55.t0 = function (t, e, n, s, i) {
              var r = new Fa({
                next: function next(n) {
                  // Remove query first before passing event to user to avoid
                  // user actions affecting the now stale query.
                  e.enqueueAndForget(function () {
                    return Lo(t, o);
                  }), n.fromCache && "server" === s.source ? i.reject(new q(U.UNAVAILABLE, 'Failed to get documents from server. (However, these documents may exist in the local cache. Run again without setting source to "server" to retrieve the cached documents.)')) : i.resolve(n);
                },
                error: function error(t) {
                  return i.reject(t);
                }
              }),
                  o = new Ko(n, r, {
                includeMetadataChanges: !0,
                uo: !0
              });
              return Mo(t, o);
            };

            _context55.next = 3;
            return Ja(t);

          case 3:
            _context55.t1 = _context55.sent;
            _context55.t2 = t.asyncQueue;
            _context55.t3 = e;
            _context55.t4 = n;
            _context55.t5 = s;
            return _context55.abrupt("return", (0, _context55.t0)(_context55.t1, _context55.t2, _context55.t3, _context55.t4, _context55.t5));

          case 9:
          case "end":
            return _context55.stop();
        }
      }
    }, _callee55);
  }))), s.promise;
}

function sc(t, e) {
  var n = new Fa(e);
  return t.asyncQueue.enqueueAndForget( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee56() {
    return regeneratorRuntime.wrap(function _callee56$(_context56) {
      while (1) {
        switch (_context56.prev = _context56.next) {
          case 0:
            _context56.t0 = function (t, e) {
              B(t).Zr.add(e), // Immediately fire an initial event, indicating all existing listeners
              // are in-sync.
              e.next();
            };

            _context56.next = 3;
            return Ja(t);

          case 3:
            _context56.t1 = _context56.sent;
            _context56.t2 = n;
            return _context56.abrupt("return", (0, _context56.t0)(_context56.t1, _context56.t2));

          case 6:
          case "end":
            return _context56.stop();
        }
      }
    }, _callee56);
  }))), function () {
    n.Xo(), t.asyncQueue.enqueueAndForget( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee57() {
      return regeneratorRuntime.wrap(function _callee57$(_context57) {
        while (1) {
          switch (_context57.prev = _context57.next) {
            case 0:
              _context57.t0 = function (t, e) {
                B(t).Zr.delete(e);
              };

              _context57.next = 3;
              return Ja(t);

            case 3:
              _context57.t1 = _context57.sent;
              _context57.t2 = n;
              return _context57.abrupt("return", (0, _context57.t0)(_context57.t1, _context57.t2));

            case 6:
            case "end":
              return _context57.stop();
          }
        }
      }, _callee57);
    })));
  };
}
/**
 * Takes an updateFunction in which a set of reads and writes can be performed
 * atomically. In the updateFunction, the client can read and write values
 * using the supplied transaction object. After the updateFunction, all
 * changes will be committed. If a retryable error occurs (ex: some other
 * client has changed any of the data referenced), then the updateFunction
 * will be called again after a backoff. If the updateFunction still fails
 * after all retries, then the transaction will be rejected.
 *
 * The transaction object passed to the updateFunction contains methods for
 * accessing documents and collections. Unlike other datastore access, data
 * accessed with the transaction will not reflect local changes that have not
 * been committed. For this reason, it is required that all reads are
 * performed before any writes. Transactions must be performed while online.
 */


function ic(t, e) {
  var n = new K();
  return t.asyncQueue.enqueueAndForget( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee58() {
    var s;
    return regeneratorRuntime.wrap(function _callee58$(_context58) {
      while (1) {
        switch (_context58.prev = _context58.next) {
          case 0:
            _context58.next = 2;
            return function (t) {
              return Qa(t).then(function (t) {
                return t.datastore;
              });
            }(t);

          case 2:
            s = _context58.sent;
            new Ba(t.asyncQueue, s, e, n).run();

          case 4:
          case "end":
            return _context58.stop();
        }
      }
    }, _callee58);
  }))), n.promise;
}

function rc(t, e, n, s) {
  var i = function (t, e) {
    var n;
    n = "string" == typeof t ? new TextEncoder().encode(t) : t;
    return function (t, e) {
      return new Ma(t, e);
    }(function (t, e) {
      if (t instanceof Uint8Array) return Oa(t, e);
      if (t instanceof ArrayBuffer) return Oa(new Uint8Array(t), e);
      if (t instanceof ReadableStream) return t.getReader();
      throw new Error("Source of `toByteStreamReader` has to be a ArrayBuffer or ReadableStream");
    }(n), e);
  }
  /**
  * @license
  * Copyright 2017 Google LLC
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
  (n, Hr(e));

  t.asyncQueue.enqueueAndForget( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee59() {
    return regeneratorRuntime.wrap(function _callee59$(_context59) {
      while (1) {
        switch (_context59.prev = _context59.next) {
          case 0:
            _context59.t0 = Ca;
            _context59.next = 3;
            return Ha(t);

          case 3:
            _context59.t1 = _context59.sent;
            _context59.t2 = i;
            _context59.t3 = s;
            (0, _context59.t0)(_context59.t1, _context59.t2, _context59.t3);

          case 7:
          case "end":
            return _context59.stop();
        }
      }
    }, _callee59);
  })));
}

function oc(t, e) {
  return t.asyncQueue.enqueue( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee60() {
    return regeneratorRuntime.wrap(function _callee60$(_context60) {
      while (1) {
        switch (_context60.prev = _context60.next) {
          case 0:
            _context60.t0 = function (t, e) {
              var n = B(t);
              return n.persistence.runTransaction("Get named query", "readonly", function (t) {
                return n.Je.getNamedQuery(t, e);
              });
            };

            _context60.next = 3;
            return Ga(t);

          case 3:
            _context60.t1 = _context60.sent;
            _context60.t2 = e;
            return _context60.abrupt("return", (0, _context60.t0)(_context60.t1, _context60.t2));

          case 6:
          case "end":
            return _context60.stop();
        }
      }
    }, _callee60);
  })));
}

var ac =
/**
 * Constructs a DatabaseInfo using the provided host, databaseId and
 * persistenceKey.
 *
 * @param databaseId - The database to use.
 * @param appId - The Firebase App Id.
 * @param persistenceKey - A unique identifier for this Firestore's local
 * storage (used in conjunction with the databaseId).
 * @param host - The Firestore backend host to connect to.
 * @param ssl - Whether to use SSL when connecting.
 * @param forceLongPolling - Whether to use the forceLongPolling option
 * when using WebChannel as the network transport.
 * @param autoDetectLongPolling - Whether to use the detectBufferingProxy
 * option when using WebChannel as the network transport.
 * @param useFetchStreams Whether to use the Fetch API instead of
 * XMLHTTPRequest
 */
function ac(t, e, n, s, i, r, o, a) {
  _classCallCheck(this, ac);

  this.databaseId = t, this.appId = e, this.persistenceKey = n, this.host = s, this.ssl = i, this.forceLongPolling = r, this.autoDetectLongPolling = o, this.useFetchStreams = a;
};
/** The default database name for a project. */

/**
 * Represents the database ID a Firestore client is associated with.
 * @internal
 */


var cc = /*#__PURE__*/function () {
  function cc(t, e) {
    _classCallCheck(this, cc);

    this.projectId = t, this.database = e || "(default)";
  }

  _createClass(cc, [{
    key: "isDefaultDatabase",
    get: function get() {
      return "(default)" === this.database;
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return t instanceof cc && t.projectId === this.projectId && t.database === this.database;
    }
  }]);

  return cc;
}();
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


exports._DatabaseId = cc;
var uc = new Map();
/**
 * An instance map that ensures only one Datastore exists per Firestore
 * instance.
 */

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function hc(t, e, n) {
  if (!n) throw new q(U.INVALID_ARGUMENT, "Function ".concat(t, "() cannot be called with an empty ").concat(e, "."));
}
/**
 * Validates that two boolean options are not set at the same time.
 * @internal
 */


function lc(t, e, n, s) {
  if (!0 === e && !0 === s) throw new q(U.INVALID_ARGUMENT, "".concat(t, " and ").concat(n, " cannot be used together."));
}
/**
 * Validates that `path` refers to a document (indicated by the fact it contains
 * an even numbers of segments).
 */


function fc(t) {
  if (!Rt.isDocumentKey(t)) throw new q(U.INVALID_ARGUMENT, "Invalid document reference. Document references must have an even number of segments, but ".concat(t, " has ").concat(t.length, "."));
}
/**
 * Validates that `path` refers to a collection (indicated by the fact it
 * contains an odd numbers of segments).
 */


function dc(t) {
  if (Rt.isDocumentKey(t)) throw new q(U.INVALID_ARGUMENT, "Invalid collection reference. Collection references must have an odd number of segments, but ".concat(t, " has ").concat(t.length, "."));
}
/**
 * Returns true if it's a non-null object without a custom prototype
 * (i.e. excludes Array, Date, etc.).
 */

/** Returns a string describing the type / value of the provided input. */


function wc(t) {
  if (void 0 === t) return "undefined";
  if (null === t) return "null";
  if ("string" == typeof t) return t.length > 20 && (t = "".concat(t.substring(0, 20), "...")), JSON.stringify(t);
  if ("number" == typeof t || "boolean" == typeof t) return "" + t;

  if ("object" == _typeof(t)) {
    if (t instanceof Array) return "an array";
    {
      var _e58 =
      /** Hacky method to try to get the constructor name for an object. */
      function (t) {
        if (t.constructor) {
          var _e59 = /function\s+([^\s(]+)\s*\(/.exec(t.constructor.toString());

          if (_e59 && _e59.length > 1) return _e59[1];
        }

        return null;
      }
      /**
      * Casts `obj` to `T`, optionally unwrapping Compat types to expose the
      * underlying instance. Throws if  `obj` is not an instance of `T`.
      *
      * This cast is used in the Lite and Full SDK to verify instance types for
      * arguments passed to the public API.
      * @internal
      */
      (t);

      return _e58 ? "a custom ".concat(_e58, " object") : "an object";
    }
  }

  return "function" == typeof t ? "a function" : F();
}

function _c(t, // eslint-disable-next-line @typescript-eslint/no-explicit-any
e) {
  if ("_delegate" in t && ( // Unwrap Compat types
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  t = t._delegate), !(t instanceof e)) {
    if (e.name === t.constructor.name) throw new q(U.INVALID_ARGUMENT, "Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");
    {
      var _n59 = wc(t);

      throw new q(U.INVALID_ARGUMENT, "Expected type '".concat(e.name, "', but it was: ").concat(_n59));
    }
  }

  return t;
}

function mc(t, e) {
  if (e <= 0) throw new q(U.INVALID_ARGUMENT, "Function ".concat(t, "() requires a positive number, but it was: ").concat(e, "."));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// settings() defaults:

/**
 * A concrete type describing all the values that can be applied via a
 * user-supplied `FirestoreSettings` object. This is a separate type so that
 * defaults can be supplied and the value can be checked for equality.
 */


var gc = /*#__PURE__*/function () {
  function gc(t) {
    _classCallCheck(this, gc);

    var e;

    if (void 0 === t.host) {
      if (void 0 !== t.ssl) throw new q(U.INVALID_ARGUMENT, "Can't provide ssl option if host option is not set");
      this.host = "firestore.googleapis.com", this.ssl = true;
    } else this.host = t.host, this.ssl = null === (e = t.ssl) || void 0 === e || e;

    if (this.credentials = t.credentials, this.ignoreUndefinedProperties = !!t.ignoreUndefinedProperties, void 0 === t.cacheSizeBytes) this.cacheSizeBytes = 41943040;else {
      if (-1 !== t.cacheSizeBytes && t.cacheSizeBytes < 1048576) throw new q(U.INVALID_ARGUMENT, "cacheSizeBytes must be at least 1048576");
      this.cacheSizeBytes = t.cacheSizeBytes;
    }
    this.experimentalForceLongPolling = !!t.experimentalForceLongPolling, this.experimentalAutoDetectLongPolling = !!t.experimentalAutoDetectLongPolling, this.useFetchStreams = !!t.useFetchStreams, lc("experimentalForceLongPolling", t.experimentalForceLongPolling, "experimentalAutoDetectLongPolling", t.experimentalAutoDetectLongPolling);
  }

  _createClass(gc, [{
    key: "isEqual",
    value: function isEqual(t) {
      return this.host === t.host && this.ssl === t.ssl && this.credentials === t.credentials && this.cacheSizeBytes === t.cacheSizeBytes && this.experimentalForceLongPolling === t.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === t.experimentalAutoDetectLongPolling && this.ignoreUndefinedProperties === t.ignoreUndefinedProperties && this.useFetchStreams === t.useFetchStreams;
    }
  }]);

  return gc;
}();
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The Cloud Firestore service interface.
 *
 * Do not call this constructor directly. Instead, use {@link getFirestore}.
 */


var yc = /*#__PURE__*/function () {
  /** @hideconstructor */
  function yc(t, e) {
    _classCallCheck(this, yc);

    this._credentials = e,
    /**
     * Whether it's a Firestore or Firestore Lite instance.
     */
    this.type = "firestore-lite", this._persistenceKey = "(lite)", this._settings = new gc({}), this._settingsFrozen = !1, t instanceof cc ? this._databaseId = t : (this._app = t, this._databaseId = function (t) {
      if (!Object.prototype.hasOwnProperty.apply(t.options, ["projectId"])) throw new q(U.INVALID_ARGUMENT, '"projectId" not provided in firebase.initializeApp.');
      return new cc(t.options.projectId);
    }
    /**
    * Modify this instance to communicate with the Cloud Firestore emulator.
    *
    * Note: This must be called before this instance has been used to do any
    * operations.
    *
    * @param firestore - The `Firestore` instance to configure to connect to the
    * emulator.
    * @param host - the emulator host (ex: localhost).
    * @param port - the emulator port (ex: 9000).
    * @param options.mockUserToken - the mock auth token to use for unit testing
    * Security Rules.
    */
    (t));
  }
  /**
   * The {@link @firebase/app#FirebaseApp} associated with this `Firestore` service
   * instance.
   */


  _createClass(yc, [{
    key: "app",
    get: function get() {
      if (!this._app) throw new q(U.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
      return this._app;
    }
  }, {
    key: "_initialized",
    get: function get() {
      return this._settingsFrozen;
    }
  }, {
    key: "_terminated",
    get: function get() {
      return void 0 !== this._terminateTask;
    }
  }, {
    key: "_setSettings",
    value: function _setSettings(t) {
      if (this._settingsFrozen) throw new q(U.FAILED_PRECONDITION, "Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");
      this._settings = new gc(t), void 0 !== t.credentials && (this._credentials = function (t) {
        if (!t) return new Q();

        switch (t.type) {
          case "gapi":
            var _e60 = t.client; // Make sure this really is a Gapi client.

            return M(!("object" != _typeof(_e60) || null === _e60 || !_e60.auth || !_e60.auth.getAuthHeaderValueForFirstParty)), new H(_e60, t.sessionIndex || "0", t.iamToken || null);

          case "provider":
            return t.client;

          default:
            throw new q(U.INVALID_ARGUMENT, "makeCredentialsProvider failed due to invalid credential type");
        }
      }(t.credentials));
    }
  }, {
    key: "_getSettings",
    value: function _getSettings() {
      return this._settings;
    }
  }, {
    key: "_freezeSettings",
    value: function _freezeSettings() {
      return this._settingsFrozen = !0, this._settings;
    }
  }, {
    key: "_delete",
    value: function _delete() {
      return this._terminateTask || (this._terminateTask = this._terminate()), this._terminateTask;
    }
    /** Returns a JSON-serializable representation of this `Firestore` instance. */

  }, {
    key: "toJSON",
    value: function toJSON() {
      return {
        app: this._app,
        databaseId: this._databaseId,
        settings: this._settings
      };
    }
    /**
     * Terminates all components used by this client. Subclasses can override
     * this method to clean up their own dependencies, but must also call this
     * method.
     *
     * Only ever called once.
     */

  }, {
    key: "_terminate",
    value: function _terminate() {
      /**
      * Removes all components associated with the provided instance. Must be called
      * when the `Firestore` instance is terminated.
      */
      return function (t) {
        var e = uc.get(t);
        e && (x("ComponentProvider", "Removing Datastore"), uc.delete(t), e.terminate());
      }(this), Promise.resolve();
    }
  }]);

  return yc;
}();

function pc(t, e, n) {
  var s = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var i;

  var r = (t = _c(t, yc))._getSettings();

  if ("firestore.googleapis.com" !== r.host && r.host !== e && $("Host has been set in both settings() and useEmulator(), emulator host will be used"), t._setSettings(Object.assign(Object.assign({}, r), {
    host: "".concat(e, ":").concat(n),
    ssl: !1
  })), s.mockUserToken) {
    var _e61, _n60;

    if ("string" == typeof s.mockUserToken) _e61 = s.mockUserToken, _n60 = V.MOCK_USER;else {
      // Let createMockUserToken validate first (catches common mistakes like
      // invalid field "uid" and missing field "sub" / "user_id".)
      _e61 = (0, _util.createMockUserToken)(s.mockUserToken, null === (i = t._app) || void 0 === i ? void 0 : i.options.projectId);

      var _r17 = s.mockUserToken.sub || s.mockUserToken.user_id;

      if (!_r17) throw new q(U.INVALID_ARGUMENT, "mockUserToken must contain 'sub' or 'user_id' field!");
      _n60 = new V(_r17);
    }
    t._credentials = new W(new j(_e61, _n60));
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A `DocumentReference` refers to a document location in a Firestore database
 * and can be used to write, read, or listen to the location. The document at
 * the referenced location may or may not exist.
 */


var Ec = /*#__PURE__*/function () {
  /** @hideconstructor */
  function Ec(t,
  /**
   * If provided, the `FirestoreDataConverter` associated with this instance.
   */
  e, n) {
    _classCallCheck(this, Ec);

    this.converter = e, this._key = n,
    /** The type of this Firestore reference. */
    this.type = "document", this.firestore = t;
  }

  _createClass(Ec, [{
    key: "_path",
    get: function get() {
      return this._key.path;
    }
    /**
     * The document's identifier within its collection.
     */

  }, {
    key: "id",
    get: function get() {
      return this._key.path.lastSegment();
    }
    /**
     * A string representing the path of the referenced document (relative
     * to the root of the database).
     */

  }, {
    key: "path",
    get: function get() {
      return this._key.path.canonicalString();
    }
    /**
     * The collection this `DocumentReference` belongs to.
     */

  }, {
    key: "parent",
    get: function get() {
      return new Ic(this.firestore, this.converter, this._key.path.popLast());
    }
  }, {
    key: "withConverter",
    value: function withConverter(t) {
      return new Ec(this.firestore, t, this._key);
    }
  }]);

  return Ec;
}();
/**
 * A `Query` refers to a query which you can read or listen to. You can also
 * construct refined `Query` objects by adding filters and ordering.
 */


exports.DocumentReference = Ec;

var Tc = /*#__PURE__*/function () {
  // This is the lite version of the Query class in the main SDK.

  /** @hideconstructor protected */
  function Tc(t,
  /**
   * If provided, the `FirestoreDataConverter` associated with this instance.
   */
  e, n) {
    _classCallCheck(this, Tc);

    this.converter = e, this._query = n,
    /** The type of this Firestore reference. */
    this.type = "query", this.firestore = t;
  }

  _createClass(Tc, [{
    key: "withConverter",
    value: function withConverter(t) {
      return new Tc(this.firestore, t, this._query);
    }
  }]);

  return Tc;
}();
/**
 * A `CollectionReference` object can be used for adding documents, getting
 * document references, and querying for documents (using {@link query}).
 */


exports.Query = Tc;

var Ic = /*#__PURE__*/function (_Tc) {
  _inherits(Ic, _Tc);

  var _super31 = _createSuper(Ic);

  /** @hideconstructor */
  function Ic(t, e, n) {
    var _this155;

    _classCallCheck(this, Ic);

    _this155 = _super31.call(this, t, e, fe(n)), _this155._path = n,
    /** The type of this Firestore reference. */
    _this155.type = "collection";
    return _this155;
  }
  /** The collection's identifier. */


  _createClass(Ic, [{
    key: "id",
    get: function get() {
      return this._query.path.lastSegment();
    }
    /**
     * A string representing the path of the referenced collection (relative
     * to the root of the database).
     */

  }, {
    key: "path",
    get: function get() {
      return this._query.path.canonicalString();
    }
    /**
     * A reference to the containing `DocumentReference` if this is a
     * subcollection. If this isn't a subcollection, the reference is null.
     */

  }, {
    key: "parent",
    get: function get() {
      var t = this._path.popLast();

      return t.isEmpty() ? null : new Ec(this.firestore,
      /* converter= */
      null, new Rt(t));
    }
  }, {
    key: "withConverter",
    value: function withConverter(t) {
      return new Ic(this.firestore, t, this._path);
    }
  }]);

  return Ic;
}(Tc);

exports.CollectionReference = Ic;

function Ac(t, e) {
  for (var _len6 = arguments.length, n = new Array(_len6 > 2 ? _len6 - 2 : 0), _key6 = 2; _key6 < _len6; _key6++) {
    n[_key6 - 2] = arguments[_key6];
  }

  if (t = (0, _util.getModularInstance)(t), hc("collection", "path", e), t instanceof yc) {
    var _s51 = ct.fromString.apply(ct, [e].concat(n));

    return dc(_s51), new Ic(t,
    /* converter= */
    null, _s51);
  }

  {
    if (!(t instanceof Ec || t instanceof Ic)) throw new q(U.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");

    var _s52 = t._path.child(ct.fromString.apply(ct, [e].concat(n)));

    return dc(_s52), new Ic(t.firestore,
    /* converter= */
    null, _s52);
  }
} // TODO(firestorelite): Consider using ErrorFactory -
// https://github.com/firebase/firebase-js-sdk/blob/0131e1f/packages/util/src/errors.ts#L106

/**
 * Creates and returns a new `Query` instance that includes all documents in the
 * database that are contained in a collection or subcollection with the
 * given `collectionId`.
 *
 * @param firestore - A reference to the root `Firestore` instance.
 * @param collectionId - Identifies the collections to query over. Every
 * collection or subcollection with this ID as the last segment of its path
 * will be included. Cannot contain a slash.
 * @returns The created `Query`.
 */


function Rc(t, e) {
  if (t = _c(t, yc), hc("collectionGroup", "collection id", e), e.indexOf("/") >= 0) throw new q(U.INVALID_ARGUMENT, "Invalid collection ID '".concat(e, "' passed to function collectionGroup(). Collection IDs must not contain '/'."));
  return new Tc(t,
  /* converter= */
  null,
  /**
  * Creates a new Query for a collection group query that matches all documents
  * within the provided collection group.
  */
  function (t) {
    return new he(ct.emptyPath(), t);
  }(e));
}

function bc(t, e) {
  for (var _len7 = arguments.length, n = new Array(_len7 > 2 ? _len7 - 2 : 0), _key7 = 2; _key7 < _len7; _key7++) {
    n[_key7 - 2] = arguments[_key7];
  }

  if (t = (0, _util.getModularInstance)(t), // We allow omission of 'pathString' but explicitly prohibit passing in both
  // 'undefined' and 'null'.
  1 === arguments.length && (e = X.I()), hc("doc", "path", e), t instanceof yc) {
    var _s53 = ct.fromString.apply(ct, [e].concat(n));

    return fc(_s53), new Ec(t,
    /* converter= */
    null, new Rt(_s53));
  }

  {
    if (!(t instanceof Ec || t instanceof Ic)) throw new q(U.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");

    var _s54 = t._path.child(ct.fromString.apply(ct, [e].concat(n)));

    return fc(_s54), new Ec(t.firestore, t instanceof Ic ? t.converter : null, new Rt(_s54));
  }
}
/**
 * Returns true if the provided references are equal.
 *
 * @param left - A reference to compare.
 * @param right - A reference to compare.
 * @returns true if the references point to the same location in the same
 * Firestore database.
 */


function Pc(t, e) {
  return t = (0, _util.getModularInstance)(t), e = (0, _util.getModularInstance)(e), (t instanceof Ec || t instanceof Ic) && (e instanceof Ec || e instanceof Ic) && t.firestore === e.firestore && t.path === e.path && t.converter === e.converter;
}
/**
 * Returns true if the provided queries point to the same collection and apply
 * the same constraints.
 *
 * @param left - A `Query` to compare.
 * @param right - A `Query` to compare.
 * @returns true if the references point to the same location in the same
 * Firestore database.
 */


function vc(t, e) {
  return t = (0, _util.getModularInstance)(t), e = (0, _util.getModularInstance)(e), t instanceof Tc && e instanceof Tc && t.firestore === e.firestore && Te(t._query, e._query) && t.converter === e.converter;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var Vc = /*#__PURE__*/function () {
  function Vc() {
    var _this156 = this;

    _classCallCheck(this, Vc);

    // The last promise in the queue.
    this.fa = Promise.resolve(), // A list of retryable operations. Retryable operations are run in order and
    // retried with backoff.
    this.da = [], // Is this AsyncQueue being shut down? Once it is set to true, it will not
    // be changed again.
    this.wa = !1, // Operations scheduled to be queued in the future. Operations are
    // automatically removed after they are run or canceled.
    this._a = [], // visible for testing
    this.ma = null, // Flag set while there's an outstanding AsyncQueue operation, used for
    // assertion sanity-checks.
    this.ga = !1, // Enabled during shutdown on Safari to prevent future access to IndexedDB.
    this.ya = !1, // List of TimerIds to fast-forward delays for.
    this.pa = [], // Backoff timer used to schedule retries for retryable operations
    this.rr = new Jr(this, "async_queue_retry"
    /* AsyncQueueRetry */
    ), // Visibility handler that triggers an immediate retry of all retryable
    // operations. Meant to speed up recovery when we regain file system access
    // after page comes into foreground.
    this.Ea = function () {
      var t = zr();
      t && x("AsyncQueue", "Visibility state changed to " + t.visibilityState), _this156.rr.tr();
    };
    var t = zr();
    t && "function" == typeof t.addEventListener && t.addEventListener("visibilitychange", this.Ea);
  }

  _createClass(Vc, [{
    key: "isShuttingDown",
    get: function get() {
      return this.wa;
    }
    /**
     * Adds a new operation to the queue without waiting for it to complete (i.e.
     * we ignore the Promise result).
     */

  }, {
    key: "enqueueAndForget",
    value: function enqueueAndForget(t) {
      // eslint-disable-next-line @typescript-eslint/no-floating-promises
      this.enqueue(t);
    }
  }, {
    key: "enqueueAndForgetEvenWhileRestricted",
    value: function enqueueAndForgetEvenWhileRestricted(t) {
      this.Ta(), // eslint-disable-next-line @typescript-eslint/no-floating-promises
      this.Ia(t);
    }
  }, {
    key: "enterRestrictedMode",
    value: function enterRestrictedMode(t) {
      if (!this.wa) {
        this.wa = !0, this.ya = t || !1;

        var _e62 = zr();

        _e62 && "function" == typeof _e62.removeEventListener && _e62.removeEventListener("visibilitychange", this.Ea);
      }
    }
  }, {
    key: "enqueue",
    value: function enqueue(t) {
      var _this157 = this;

      if (this.Ta(), this.wa) // Return a Promise which never resolves.
        return new Promise(function () {}); // Create a deferred Promise that we can return to the callee. This
      // allows us to return a "hanging Promise" only to the callee and still
      // advance the queue even when the operation is not run.

      var e = new K();
      return this.Ia(function () {
        return _this157.wa && _this157.ya ? Promise.resolve() : (t().then(e.resolve, e.reject), e.promise);
      }).then(function () {
        return e.promise;
      });
    }
  }, {
    key: "enqueueRetryable",
    value: function enqueueRetryable(t) {
      var _this158 = this;

      this.enqueueAndForget(function () {
        return _this158.da.push(t), _this158.Aa();
      });
    }
    /**
     * Runs the next operation from the retryable queue. If the operation fails,
     * reschedules with backoff.
     */

  }, {
    key: "Aa",
    value: function () {
      var _Aa2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee61() {
        var _this159 = this;

        return regeneratorRuntime.wrap(function _callee61$(_context61) {
          while (1) {
            switch (_context61.prev = _context61.next) {
              case 0:
                if (!(0 !== this.da.length)) {
                  _context61.next = 14;
                  break;
                }

                _context61.prev = 1;
                _context61.next = 4;
                return this.da[0]();

              case 4:
                this.da.shift();
                this.rr.reset();
                _context61.next = 13;
                break;

              case 8:
                _context61.prev = 8;
                _context61.t0 = _context61["catch"](1);

                if (Gs(_context61.t0)) {
                  _context61.next = 12;
                  break;
                }

                throw _context61.t0;

              case 12:
                // Failure will be handled by AsyncQueue
                x("AsyncQueue", "Operation failed with retryable error: " + _context61.t0);

              case 13:
                this.da.length > 0 && // If there are additional operations, we re-schedule `retryNextOp()`.
                // This is necessary to run retryable operations that failed during
                // their initial attempt since we don't know whether they are already
                // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`
                // needs to  be re-run, we will run `op1`, `op1`, `op2` using the
                // already enqueued calls to `retryNextOp()`. `op3()` will then run in the
                // call scheduled here.
                // Since `backoffAndRun()` cancels an existing backoff and schedules a
                // new backoff on every call, there is only ever a single additional
                // operation in the queue.
                this.rr.Xi(function () {
                  return _this159.Aa();
                });

              case 14:
              case "end":
                return _context61.stop();
            }
          }
        }, _callee61, this, [[1, 8]]);
      }));

      function Aa() {
        return _Aa2.apply(this, arguments);
      }

      return Aa;
    }()
  }, {
    key: "Ia",
    value: function Ia(t) {
      var _this160 = this;

      var e = this.fa.then(function () {
        return _this160.ga = !0, t().catch(function (t) {
          _this160.ma = t, _this160.ga = !1; // Re-throw the error so that this.tail becomes a rejected Promise and
          // all further attempts to chain (via .then) will just short-circuit
          // and return the rejected Promise.

          throw k("INTERNAL UNHANDLED ERROR: ",
          /**
          * Chrome includes Error.message in Error.stack. Other browsers do not.
          * This returns expected output of message + stack when available.
          * @param error - Error or FirestoreError
          */
          function (t) {
            var e = t.message || "";
            t.stack && (e = t.stack.includes(t.message) ? t.stack : t.message + "\n" + t.stack);
            return e;
          }
          /**
          * @license
          * Copyright 2017 Google LLC
          *
          * Licensed under the Apache License, Version 2.0 (the "License");
          * you may not use this file except in compliance with the License.
          * You may obtain a copy of the License at
          *
          *   http://www.apache.org/licenses/LICENSE-2.0
          *
          * Unless required by applicable law or agreed to in writing, software
          * distributed under the License is distributed on an "AS IS" BASIS,
          * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
          * See the License for the specific language governing permissions and
          * limitations under the License.
          */
          (t)), t;
        }).then(function (t) {
          return _this160.ga = !1, t;
        });
      });
      return this.fa = e, e;
    }
  }, {
    key: "enqueueAfterDelay",
    value: function enqueueAfterDelay(t, e, n) {
      var _this161 = this;

      this.Ta(), // Fast-forward delays for timerIds that have been overriden.
      this.pa.indexOf(t) > -1 && (e = 0);
      var s = Co.createAndSchedule(this, t, e, n, function (t) {
        return _this161.Ra(t);
      });
      return this._a.push(s), s;
    }
  }, {
    key: "Ta",
    value: function Ta() {
      this.ma && F();
    }
  }, {
    key: "verifyOperationInProgress",
    value: function verifyOperationInProgress() {}
    /**
     * Waits until all currently queued tasks are finished executing. Delayed
     * operations are not run.
     */

  }, {
    key: "ba",
    value: function () {
      var _ba = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee62() {
        var t;
        return regeneratorRuntime.wrap(function _callee62$(_context62) {
          while (1) {
            switch (_context62.prev = _context62.next) {
              case 0:
                t = this.fa;
                _context62.next = 3;
                return t;

              case 3:
                if (t !== this.fa) {
                  _context62.next = 0;
                  break;
                }

              case 4:
              case "end":
                return _context62.stop();
            }
          }
        }, _callee62, this);
      }));

      function ba() {
        return _ba.apply(this, arguments);
      }

      return ba;
    }()
    /**
     * For Tests: Determine if a delayed operation with a particular TimerId
     * exists.
     */

  }, {
    key: "Pa",
    value: function Pa(t) {
      var _iterator50 = _createForOfIteratorHelper(this._a),
          _step50;

      try {
        for (_iterator50.s(); !(_step50 = _iterator50.n()).done;) {
          var _e63 = _step50.value;
          if (_e63.timerId === t) return !0;
        }
      } catch (err) {
        _iterator50.e(err);
      } finally {
        _iterator50.f();
      }

      return !1;
    }
    /**
     * For Tests: Runs some or all delayed operations early.
     *
     * @param lastTimerId - Delayed operations up to and including this TimerId
     * will be drained. Pass TimerId.All to run all delayed operations.
     * @returns a Promise that resolves once all operations have been run.
     */

  }, {
    key: "va",
    value: function va(t) {
      var _this162 = this;

      // Note that draining may generate more delayed ops, so we do that first.
      return this.ba().then(function () {
        // Run ops in the same order they'd run if they ran naturally.
        _this162._a.sort(function (t, e) {
          return t.targetTimeMs - e.targetTimeMs;
        });

        var _iterator51 = _createForOfIteratorHelper(_this162._a),
            _step51;

        try {
          for (_iterator51.s(); !(_step51 = _iterator51.n()).done;) {
            var _e64 = _step51.value;
            if (_e64.skipDelay(), "all"
            /* All */
            !== t && _e64.timerId === t) break;
          }
        } catch (err) {
          _iterator51.e(err);
        } finally {
          _iterator51.f();
        }

        return _this162.ba();
      });
    }
    /**
     * For Tests: Skip all subsequent delays for a timer id.
     */

  }, {
    key: "Va",
    value: function Va(t) {
      this.pa.push(t);
    }
    /** Called once a DelayedOperation is run or canceled. */

  }, {
    key: "Ra",
    value: function Ra(t) {
      // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.
      var e = this._a.indexOf(t);

      this._a.splice(e, 1);
    }
  }]);

  return Vc;
}();

function Sc(t) {
  /**
  * Returns true if obj is an object and contains at least one of the specified
  * methods.
  */
  return function (t, e) {
    if ("object" != _typeof(t) || null === t) return !1;
    var n = t;

    var _iterator52 = _createForOfIteratorHelper(e),
        _step52;

    try {
      for (_iterator52.s(); !(_step52 = _iterator52.n()).done;) {
        var _t76 = _step52.value;
        if (_t76 in n && "function" == typeof n[_t76]) return !0;
      }
    } catch (err) {
      _iterator52.e(err);
    } finally {
      _iterator52.f();
    }

    return !1;
  }
  /**
  * @license
  * Copyright 2020 Google LLC
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */

  /**
  * Represents the task of loading a Firestore bundle. It provides progress of bundle
  * loading, as well as task completion and error events.
  *
  * The API is compatible with `Promise<LoadBundleTaskProgress>`.
  */
  (t, ["next", "error", "complete"]);
}

var Dc = /*#__PURE__*/function () {
  function Dc() {
    _classCallCheck(this, Dc);

    this._progressObserver = {}, this._taskCompletionResolver = new K(), this._lastProgress = {
      taskState: "Running",
      totalBytes: 0,
      totalDocuments: 0,
      bytesLoaded: 0,
      documentsLoaded: 0
    };
  }
  /**
   * Registers functions to listen to bundle loading progress events.
   * @param next - Called when there is a progress update from bundle loading. Typically `next` calls occur
   *   each time a Firestore document is loaded from the bundle.
   * @param error - Called when an error occurs during bundle loading. The task aborts after reporting the
   *   error, and there should be no more updates after this.
   * @param complete - Called when the loading task is complete.
   */


  _createClass(Dc, [{
    key: "onProgress",
    value: function onProgress(t, e, n) {
      this._progressObserver = {
        next: t,
        error: e,
        complete: n
      };
    }
    /**
     * Implements the `Promise<LoadBundleTaskProgress>.catch` interface.
     *
     * @param onRejected - Called when an error occurs during bundle loading.
     */

  }, {
    key: "catch",
    value: function _catch(t) {
      return this._taskCompletionResolver.promise.catch(t);
    }
    /**
     * Implements the `Promise<LoadBundleTaskProgress>.then` interface.
     *
     * @param onFulfilled - Called on the completion of the loading task with a final `LoadBundleTaskProgress` update.
     *   The update will always have its `taskState` set to `"Success"`.
     * @param onRejected - Called when an error occurs during bundle loading.
     */

  }, {
    key: "then",
    value: function then(t, e) {
      return this._taskCompletionResolver.promise.then(t, e);
    }
    /**
     * Notifies all observers that bundle loading has completed, with a provided
     * `LoadBundleTaskProgress` object.
     *
     * @private
     */

  }, {
    key: "_completeWith",
    value: function _completeWith(t) {
      this._updateProgress(t), this._progressObserver.complete && this._progressObserver.complete(), this._taskCompletionResolver.resolve(t);
    }
    /**
     * Notifies all observers that bundle loading has failed, with a provided
     * `Error` as the reason.
     *
     * @private
     */

  }, {
    key: "_failWith",
    value: function _failWith(t) {
      this._lastProgress.taskState = "Error", this._progressObserver.next && this._progressObserver.next(this._lastProgress), this._progressObserver.error && this._progressObserver.error(t), this._taskCompletionResolver.reject(t);
    }
    /**
     * Notifies a progress update of loading a bundle.
     * @param progress - The new progress.
     *
     * @private
     */

  }, {
    key: "_updateProgress",
    value: function _updateProgress(t) {
      this._lastProgress = t, this._progressObserver.next && this._progressObserver.next(t);
    }
  }]);

  return Dc;
}();
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** DOMException error code constants. */


exports.LoadBundleTask = Dc;
var Cc = -1;
/**
 * The Cloud Firestore service interface.
 *
 * Do not call this constructor directly. Instead, use {@link getFirestore}.
 */

exports.CACHE_SIZE_UNLIMITED = Cc;

var Nc = /*#__PURE__*/function (_yc) {
  _inherits(Nc, _yc);

  var _super32 = _createSuper(Nc);

  /** @hideconstructor */
  function Nc(t, e) {
    var _this163;

    _classCallCheck(this, Nc);

    _this163 = _super32.call(this, t, e),
    /**
     * Whether it's a {@link Firestore} or Firestore Lite instance.
     */
    _this163.type = "firestore", _this163._queue = new Vc(), _this163._persistenceKey = "name" in t ? t.name : "[DEFAULT]";
    return _this163;
  }

  _createClass(Nc, [{
    key: "_terminate",
    value: function _terminate() {
      return this._firestoreClient || // The client must be initialized to ensure that all subsequent API
      // usage throws an exception.
      Oc(this), this._firestoreClient.terminate();
    }
  }]);

  return Nc;
}(yc);
/**
 * Initializes a new instance of {@link Firestore} with the provided settings.
 * Can only be called before any other function, including
 * {@link getFirestore}. If the custom settings are empty, this function is
 * equivalent to calling {@link getFirestore}.
 *
 * @param app - The {@link @firebase/app#FirebaseApp} with which the {@link Firestore} instance will
 * be associated.
 * @param settings - A settings object to configure the {@link Firestore} instance.
 * @returns A newly initialized {@link Firestore} instance.
 */


exports.Firestore = Nc;

function xc(t, e) {
  var n = (0, _app._getProvider)(t, "firestore");

  if (n.isInitialized()) {
    var _t77 = n.getImmediate(),
        _s55 = n.getOptions();

    if ((0, _util.deepEqual)(_s55, e)) return _t77;
    throw new q(U.FAILED_PRECONDITION, "initializeFirestore() has already been called with different options. To avoid this error, call initializeFirestore() with the same options as when it was originally called, or call getFirestore() to return the already initialized instance.");
  }

  if (void 0 !== e.cacheSizeBytes && -1 !== e.cacheSizeBytes && e.cacheSizeBytes < 1048576) throw new q(U.INVALID_ARGUMENT, "cacheSizeBytes must be at least 1048576");
  return n.initialize({
    options: e
  });
}
/**
 * Returns the existing {@link Firestore} instance that is associated with the
 * provided {@link @firebase/app#FirebaseApp}. If no instance exists, initializes a new
 * instance with default settings.
 *
 * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned {@link Firestore}
 * instance is associated with.
 * @returns The {@link Firestore} instance of the provided app.
 */


function kc() {
  var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0, _app.getApp)();
  return (0, _app._getProvider)(e, "firestore").getImmediate();
}
/**
 * @internal
 */


function $c(t) {
  return t._firestoreClient || Oc(t), t._firestoreClient.verifyNotTerminated(), t._firestoreClient;
}

function Oc(t) {
  var e;

  var n = t._freezeSettings(),
      s = function (t, e, n, s) {
    return new ac(t, e, n, s.host, s.ssl, s.experimentalForceLongPolling, s.experimentalAutoDetectLongPolling, s.useFetchStreams);
  }(t._databaseId, (null === (e = t._app) || void 0 === e ? void 0 : e.options.appId) || "", t._persistenceKey, n);

  t._firestoreClient = new Ua(t._credentials, t._queue, s);
}
/**
 * Attempts to enable persistent storage, if possible.
 *
 * Must be called before any other functions (other than
 * {@link initializeFirestore}, {@link getFirestore} or
 * {@link clearIndexedDbPersistence}.
 *
 * If this fails, `enableIndexedDbPersistence()` will reject the promise it
 * returns. Note that even after this failure, the {@link Firestore} instance will
 * remain usable, however offline persistence will be disabled.
 *
 * There are several reasons why this can fail, which can be identified by
 * the `code` on the error.
 *
 *   * failed-precondition: The app is already open in another browser tab.
 *   * unimplemented: The browser is incompatible with the offline
 *     persistence implementation.
 *
 * @param firestore - The {@link Firestore} instance to enable persistence for.
 * @param persistenceSettings - Optional settings object to configure
 * persistence.
 * @returns A `Promise` that represents successfully enabling persistent storage.
 */


function Fc(t, e) {
  Gc(t = _c(t, Nc));

  var n = $c(t),
      s = t._freezeSettings(),
      i = new $a();

  return Lc(n, i, new xa(i, s.cacheSizeBytes, null == e ? void 0 : e.forceOwnership));
}
/**
 * Attempts to enable multi-tab persistent storage, if possible. If enabled
 * across all tabs, all operations share access to local persistence, including
 * shared execution of queries and latency-compensated local document updates
 * across all connected instances.
 *
 * If this fails, `enableMultiTabIndexedDbPersistence()` will reject the promise
 * it returns. Note that even after this failure, the {@link Firestore} instance will
 * remain usable, however offline persistence will be disabled.
 *
 * There are several reasons why this can fail, which can be identified by
 * the `code` on the error.
 *
 *   * failed-precondition: The app is already open in another browser tab and
 *     multi-tab is not enabled.
 *   * unimplemented: The browser is incompatible with the offline
 *     persistence implementation.
 *
 * @param firestore - The {@link Firestore} instance to enable persistence for.
 * @returns A `Promise` that represents successfully enabling persistent
 * storage.
 */


function Mc(t) {
  Gc(t = _c(t, Nc));

  var e = $c(t),
      n = t._freezeSettings(),
      s = new $a();

  return Lc(e, s, new ka(s, n.cacheSizeBytes));
}
/**
 * Registers both the `OfflineComponentProvider` and `OnlineComponentProvider`.
 * If the operation fails with a recoverable error (see
 * `canRecoverFromIndexedDbError()` below), the returned Promise is rejected
 * but the client remains usable.
 */


function Lc(t, e, n) {
  var s = new K();
  return t.asyncQueue.enqueue( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee63() {
    return regeneratorRuntime.wrap(function _callee63$(_context63) {
      while (1) {
        switch (_context63.prev = _context63.next) {
          case 0:
            _context63.prev = 0;
            _context63.next = 3;
            return qa(t, n);

          case 3:
            _context63.next = 5;
            return Ka(t, e);

          case 5:
            s.resolve();
            _context63.next = 13;
            break;

          case 8:
            _context63.prev = 8;
            _context63.t0 = _context63["catch"](0);

            if (
            /**
            * Decides whether the provided error allows us to gracefully disable
            * persistence (as opposed to crashing the client).
            */
            function (t) {
              if ("FirebaseError" === t.name) return t.code === U.FAILED_PRECONDITION || t.code === U.UNIMPLEMENTED;
              if ("undefined" != typeof DOMException && t instanceof DOMException) // There are a few known circumstances where we can open IndexedDb but
                // trying to read/write will fail (e.g. quota exceeded). For
                // well-understood cases, we attempt to detect these and then gracefully
                // fall back to memory persistence.
                // NOTE: Rather than continue to add to this list, we could decide to
                // always fall back, with the risk that we might accidentally hide errors
                // representing actual SDK bugs.
                // When the browser is out of quota we could get either quota exceeded
                // or an aborted error depending on whether the error happened during
                // schema migration.
                return 22 === t.code || 20 === t.code || // Firefox Private Browsing mode disables IndexedDb and returns
                // INVALID_STATE for any usage.
                11 === t.code;
              return !0;
            }
            /**
            * Clears the persistent storage. This includes pending writes and cached
            * documents.
            *
            * Must be called while the {@link Firestore} instance is not started (after the app is
            * terminated or when the app is first initialized). On startup, this function
            * must be called before other functions (other than {@link
            * initializeFirestore} or {@link getFirestore})). If the {@link Firestore}
            * instance is still running, the promise will be rejected with the error code
            * of `failed-precondition`.
            *
            * Note: `clearIndexedDbPersistence()` is primarily intended to help write
            * reliable tests that use Cloud Firestore. It uses an efficient mechanism for
            * dropping existing data but does not attempt to securely overwrite or
            * otherwise make cached data unrecoverable. For applications that are sensitive
            * to the disclosure of cached data in between user sessions, we strongly
            * recommend not enabling persistence at all.
            *
            * @param firestore - The {@link Firestore} instance to clear persistence for.
            * @returns A `Promise` that is resolved when the persistent storage is
            * cleared. Otherwise, the promise is rejected with an error.
            */
            (_context63.t0)) {
              _context63.next = 12;
              break;
            }

            throw _context63.t0;

          case 12:
            console.warn("Error enabling offline persistence. Falling back to persistence disabled: " + _context63.t0), s.reject(_context63.t0);

          case 13:
          case "end":
            return _context63.stop();
        }
      }
    }, _callee63, null, [[0, 8]]);
  }))).then(function () {
    return s.promise;
  });
}

function Bc(t) {
  if (t._initialized && !t._terminated) throw new q(U.FAILED_PRECONDITION, "Persistence can only be cleared before a Firestore instance is initialized or after it is terminated.");
  var e = new K();
  return t._queue.enqueueAndForgetEvenWhileRestricted( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee65() {
    return regeneratorRuntime.wrap(function _callee65$(_context65) {
      while (1) {
        switch (_context65.prev = _context65.next) {
          case 0:
            _context65.prev = 0;
            _context65.next = 3;
            return function () {
              var _ref52 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee64(t) {
                var e;
                return regeneratorRuntime.wrap(function _callee64$(_context64) {
                  while (1) {
                    switch (_context64.prev = _context64.next) {
                      case 0:
                        if (js.bt()) {
                          _context64.next = 2;
                          break;
                        }

                        return _context64.abrupt("return", Promise.resolve());

                      case 2:
                        e = t + "main";
                        _context64.next = 5;
                        return js.delete(e);

                      case 5:
                      case "end":
                        return _context64.stop();
                    }
                  }
                }, _callee64);
              }));

              return function (_x130) {
                return _ref52.apply(this, arguments);
              };
            }()(er(t._databaseId, t._persistenceKey));

          case 3:
            e.resolve();
            _context65.next = 9;
            break;

          case 6:
            _context65.prev = 6;
            _context65.t0 = _context65["catch"](0);
            e.reject(_context65.t0);

          case 9:
          case "end":
            return _context65.stop();
        }
      }
    }, _callee65, null, [[0, 6]]);
  }))), e.promise;
}
/**
 * Waits until all currently pending writes for the active user have been
 * acknowledged by the backend.
 *
 * The returned promise resolves immediately if there are no outstanding writes.
 * Otherwise, the promise waits for all previously issued writes (including
 * those written in a previous app session), but it does not wait for writes
 * that were added after the function is called. If you want to wait for
 * additional writes, call `waitForPendingWrites()` again.
 *
 * Any outstanding `waitForPendingWrites()` promises are rejected during user
 * changes.
 *
 * @returns A `Promise` which resolves when all currently pending writes have been
 * acknowledged by the backend.
 */


function Uc(t) {
  return function (t) {
    var e = new K();
    return t.asyncQueue.enqueueAndForget( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee66() {
      return regeneratorRuntime.wrap(function _callee66$(_context66) {
        while (1) {
          switch (_context66.prev = _context66.next) {
            case 0:
              _context66.t0 = ua;
              _context66.next = 3;
              return Ha(t);

            case 3:
              _context66.t1 = _context66.sent;
              _context66.t2 = e;
              return _context66.abrupt("return", (0, _context66.t0)(_context66.t1, _context66.t2));

            case 6:
            case "end":
              return _context66.stop();
          }
        }
      }, _callee66);
    }))), e.promise;
  }($c(t = _c(t, Nc)));
}
/**
 * Re-enables use of the network for this {@link Firestore} instance after a prior
 * call to {@link disableNetwork}.
 *
 * @returns A `Promise` that is resolved once the network has been enabled.
 */


function qc(t) {
  return Ya($c(t = _c(t, Nc)));
}
/**
 * Disables network usage for this instance. It can be re-enabled via {@link
 * enableNetwork}. While the network is disabled, any snapshot listeners,
 * `getDoc()` or `getDocs()` calls will return results from cache, and any write
 * operations will be queued until the network is restored.
 *
 * @returns A `Promise` that is resolved once the network has been disabled.
 */


function Kc(t) {
  return Xa($c(t = _c(t, Nc)));
}
/**
 * Terminates the provided {@link Firestore} instance.
 *
 * After calling `terminate()` only the `clearIndexedDbPersistence()` function
 * may be used. Any other function will throw a `FirestoreError`.
 *
 * To restart after termination, create a new instance of FirebaseFirestore with
 * {@link getFirestore}.
 *
 * Termination does not cancel any pending writes, and any promises that are
 * awaiting a response from the server will not be resolved. If you have
 * persistence enabled, the next time you start this instance, it will resume
 * sending these writes to the server.
 *
 * Note: Under normal circumstances, calling `terminate()` is not required. This
 * function is useful only when you want to force this instance to release all
 * of its resources or in combination with `clearIndexedDbPersistence()` to
 * ensure that all local state is destroyed between test runs.
 *
 * @returns A `Promise` that is resolved when the instance has been successfully
 * terminated.
 */


function jc(t) {
  return (0, _app._removeServiceInstance)(t.app, "firestore"), t._delete();
}
/**
 * Loads a Firestore bundle into the local cache.
 *
 * @param firestore - The {@link Firestore} instance to load bundles for for.
 * @param bundleData - An object representing the bundle to be loaded. Valid objects are
 *   `ArrayBuffer`, `ReadableStream<Uint8Array>` or `string`.
 *
 * @returns
 *   A `LoadBundleTask` object, which notifies callers with progress updates, and completion
 *   or error events. It can be used as a `Promise<LoadBundleTaskProgress>`.
 */


function Qc(t, e) {
  var n = $c(t = _c(t, Nc)),
      s = new Dc();
  return rc(n, t._databaseId, e, s), s;
}
/**
 * Reads a Firestore {@link Query} from local cache, identified by the given name.
 *
 * The named queries are packaged  into bundles on the server side (along
 * with resulting documents), and loaded to local cache using `loadBundle`. Once in local
 * cache, use this method to extract a {@link Query} by name.
 */


function Wc(t, e) {
  return oc($c(t = _c(t, Nc)), e).then(function (e) {
    return e ? new Tc(t, null, e.query) : null;
  });
}

function Gc(t) {
  if (t._initialized || t._terminated) throw new q(U.FAILED_PRECONDITION, "Firestore has already been started and persistence can no longer be enabled. You can only enable persistence before calling any other methods on a Firestore object.");
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A `FieldPath` refers to a field in a document. The path may consist of a
 * single field name (referring to a top-level field in the document), or a
 * list of field names (referring to a nested field in the document).
 *
 * Create a `FieldPath` by providing field names. If more than one field
 * name is provided, the path will point to a nested field in a document.
 */


var zc = /*#__PURE__*/function () {
  /**
   * Creates a `FieldPath` from the provided field names. If more than one field
   * name is provided, the path will point to a nested field in a document.
   *
   * @param fieldNames - A list of field names.
   */
  function zc() {
    _classCallCheck(this, zc);

    for (var _len8 = arguments.length, t = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
      t[_key8] = arguments[_key8];
    }

    for (var _e65 = 0; _e65 < t.length; ++_e65) {
      if (0 === t[_e65].length) throw new q(U.INVALID_ARGUMENT, "Invalid field name at argument $(i + 1). Field names must not be empty.");
    }

    this._internalPath = new ht(t);
  }
  /**
   * Returns true if this `FieldPath` is equal to the provided one.
   *
   * @param other - The `FieldPath` to compare against.
   * @returns true if this `FieldPath` is equal to the provided one.
   */


  _createClass(zc, [{
    key: "isEqual",
    value: function isEqual(t) {
      return this._internalPath.isEqual(t._internalPath);
    }
  }]);

  return zc;
}();
/**
 * Returns a special sentinel `FieldPath` to refer to the ID of a document.
 * It can be used in queries to sort or filter by the document ID.
 */


exports.FieldPath = zc;

function Hc() {
  return new zc("__name__");
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An immutable object representing an array of bytes.
 */


var Jc = /*#__PURE__*/function () {
  /** @hideconstructor */
  function Jc(t) {
    _classCallCheck(this, Jc);

    this._byteString = t;
  }
  /**
   * Creates a new `Bytes` object from the given Base64 string, converting it to
   * bytes.
   *
   * @param base64 - The Base64 string used to create the `Bytes` object.
   */


  _createClass(Jc, [{
    key: "toBase64",
    value:
    /**
     * Returns the underlying bytes as a Base64-encoded string.
     *
     * @returns The Base64-encoded string created from the `Bytes` object.
     */
    function toBase64() {
      return this._byteString.toBase64();
    }
    /**
     * Returns the underlying bytes in a new `Uint8Array`.
     *
     * @returns The Uint8Array created from the `Bytes` object.
     */

  }, {
    key: "toUint8Array",
    value: function toUint8Array() {
      return this._byteString.toUint8Array();
    }
    /**
     * Returns a string representation of the `Bytes` object.
     *
     * @returns A string representation of the `Bytes` object.
     */

  }, {
    key: "toString",
    value: function toString() {
      return "Bytes(base64: " + this.toBase64() + ")";
    }
    /**
     * Returns true if this `Bytes` object is equal to the provided one.
     *
     * @param other - The `Bytes` object to compare against.
     * @returns true if this `Bytes` object is equal to the provided one.
     */

  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return this._byteString.isEqual(t._byteString);
    }
  }], [{
    key: "fromBase64String",
    value: function fromBase64String(t) {
      try {
        return new Jc(dt.fromBase64String(t));
      } catch (t) {
        throw new q(U.INVALID_ARGUMENT, "Failed to construct data from Base64 string: " + t);
      }
    }
    /**
     * Creates a new `Bytes` object from the given Uint8Array.
     *
     * @param array - The Uint8Array used to create the `Bytes` object.
     */

  }, {
    key: "fromUint8Array",
    value: function fromUint8Array(t) {
      return new Jc(dt.fromUint8Array(t));
    }
  }]);

  return Jc;
}();
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Sentinel values that can be used when writing document fields with `set()`
 * or `update()`.
 */


exports.Bytes = Jc;

var Yc =
/**
 * @param _methodName - The public API endpoint that returns this class.
 * @hideconstructor
 */
function Yc(t) {
  _classCallCheck(this, Yc);

  this._methodName = t;
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An immutable object representing a geographic location in Firestore. The
 * location is represented as latitude/longitude pair.
 *
 * Latitude values are in the range of [-90, 90].
 * Longitude values are in the range of [-180, 180].
 */


exports.FieldValue = Yc;

var Xc = /*#__PURE__*/function () {
  /**
   * Creates a new immutable `GeoPoint` object with the provided latitude and
   * longitude values.
   * @param latitude - The latitude as number between -90 and 90.
   * @param longitude - The longitude as number between -180 and 180.
   */
  function Xc(t, e) {
    _classCallCheck(this, Xc);

    if (!isFinite(t) || t < -90 || t > 90) throw new q(U.INVALID_ARGUMENT, "Latitude must be a number between -90 and 90, but was: " + t);
    if (!isFinite(e) || e < -180 || e > 180) throw new q(U.INVALID_ARGUMENT, "Longitude must be a number between -180 and 180, but was: " + e);
    this._lat = t, this._long = e;
  }
  /**
   * The latitude of this `GeoPoint` instance.
   */


  _createClass(Xc, [{
    key: "latitude",
    get: function get() {
      return this._lat;
    }
    /**
     * The longitude of this `GeoPoint` instance.
     */

  }, {
    key: "longitude",
    get: function get() {
      return this._long;
    }
    /**
     * Returns true if this `GeoPoint` is equal to the provided one.
     *
     * @param other - The `GeoPoint` to compare against.
     * @returns true if this `GeoPoint` is equal to the provided one.
     */

  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return this._lat === t._lat && this._long === t._long;
    }
    /** Returns a JSON-serializable representation of this GeoPoint. */

  }, {
    key: "toJSON",
    value: function toJSON() {
      return {
        latitude: this._lat,
        longitude: this._long
      };
    }
    /**
     * Actually private to JS consumers of our API, so this function is prefixed
     * with an underscore.
     */

  }, {
    key: "_compareTo",
    value: function _compareTo(t) {
      return Z(this._lat, t._lat) || Z(this._long, t._long);
    }
  }]);

  return Xc;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


exports.GeoPoint = Xc;
var Zc = /^__.*__$/;
/** The result of parsing document data (e.g. for a setData call). */

var tu = /*#__PURE__*/function () {
  function tu(t, e, n) {
    _classCallCheck(this, tu);

    this.data = t, this.fieldMask = e, this.fieldTransforms = n;
  }

  _createClass(tu, [{
    key: "toMutation",
    value: function toMutation(t, e) {
      return null !== this.fieldMask ? new tn(t, this.data, this.fieldMask, e, this.fieldTransforms) : new Ze(t, this.data, e, this.fieldTransforms);
    }
  }]);

  return tu;
}();
/** The result of parsing "update" data (i.e. for an updateData call). */


var eu = /*#__PURE__*/function () {
  function eu(t, // The fieldMask does not include document transforms.
  e, n) {
    _classCallCheck(this, eu);

    this.data = t, this.fieldMask = e, this.fieldTransforms = n;
  }

  _createClass(eu, [{
    key: "toMutation",
    value: function toMutation(t, e) {
      return new tn(t, this.data, this.fieldMask, e, this.fieldTransforms);
    }
  }]);

  return eu;
}();

function nu(t) {
  switch (t) {
    case 0
    /* Set */
    : // fall through

    case 2
    /* MergeSet */
    : // fall through

    case 1
    /* Update */
    :
      return !0;

    case 3
    /* Argument */
    :
    case 4
    /* ArrayArgument */
    :
      return !1;

    default:
      throw F();
  }
}
/** A "context" object passed around while parsing user data. */


var su = /*#__PURE__*/function () {
  /**
   * Initializes a ParseContext with the given source and path.
   *
   * @param settings - The settings for the parser.
   * @param databaseId - The database ID of the Firestore instance.
   * @param serializer - The serializer to use to generate the Value proto.
   * @param ignoreUndefinedProperties - Whether to ignore undefined properties
   * rather than throw.
   * @param fieldTransforms - A mutable list of field transforms encountered
   * while parsing the data.
   * @param fieldMask - A mutable list of field paths encountered while parsing
   * the data.
   *
   * TODO(b/34871131): We don't support array paths right now, so path can be
   * null to indicate the context represents any location within an array (in
   * which case certain features will not work and errors will be somewhat
   * compromised).
   */
  function su(t, e, n, s, i, r) {
    _classCallCheck(this, su);

    this.settings = t, this.databaseId = e, this.N = n, this.ignoreUndefinedProperties = s, // Minor hack: If fieldTransforms is undefined, we assume this is an
    // external call and we need to validate the entire path.
    void 0 === i && this.Sa(), this.fieldTransforms = i || [], this.fieldMask = r || [];
  }

  _createClass(su, [{
    key: "path",
    get: function get() {
      return this.settings.path;
    }
  }, {
    key: "Da",
    get: function get() {
      return this.settings.Da;
    }
    /** Returns a new context with the specified settings overwritten. */

  }, {
    key: "Ca",
    value: function Ca(t) {
      return new su(Object.assign(Object.assign({}, this.settings), t), this.databaseId, this.N, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);
    }
  }, {
    key: "Na",
    value: function Na(t) {
      var e;
      var n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t),
          s = this.Ca({
        path: n,
        xa: !1
      });
      return s.ka(t), s;
    }
  }, {
    key: "$a",
    value: function $a(t) {
      var e;
      var n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t),
          s = this.Ca({
        path: n,
        xa: !1
      });
      return s.Sa(), s;
    }
  }, {
    key: "Oa",
    value: function Oa(t) {
      // TODO(b/34871131): We don't support array paths right now; so make path
      // undefined.
      return this.Ca({
        path: void 0,
        xa: !0
      });
    }
  }, {
    key: "Fa",
    value: function Fa(t) {
      return Au(t, this.settings.methodName, this.settings.Ma || !1, this.path, this.settings.La);
    }
    /** Returns 'true' if 'fieldPath' was traversed when creating this context. */

  }, {
    key: "contains",
    value: function contains(t) {
      return void 0 !== this.fieldMask.find(function (e) {
        return t.isPrefixOf(e);
      }) || void 0 !== this.fieldTransforms.find(function (e) {
        return t.isPrefixOf(e.field);
      });
    }
  }, {
    key: "Sa",
    value: function Sa() {
      // TODO(b/34871131): Remove null check once we have proper paths for fields
      // within arrays.
      if (this.path) for (var _t78 = 0; _t78 < this.path.length; _t78++) {
        this.ka(this.path.get(_t78));
      }
    }
  }, {
    key: "ka",
    value: function ka(t) {
      if (0 === t.length) throw this.Fa("Document fields must not be empty");
      if (nu(this.Da) && Zc.test(t)) throw this.Fa('Document fields cannot begin and end with "__"');
    }
  }]);

  return su;
}();
/**
 * Helper for parsing raw user input (provided via the API) into internal model
 * classes.
 */


var iu = /*#__PURE__*/function () {
  function iu(t, e, n) {
    _classCallCheck(this, iu);

    this.databaseId = t, this.ignoreUndefinedProperties = e, this.N = n || Hr(t);
  }
  /** Creates a new top-level parse context. */


  _createClass(iu, [{
    key: "Ba",
    value: function Ba(t, e, n) {
      var s = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : !1;
      return new su({
        Da: t,
        methodName: e,
        La: n,
        path: ht.emptyPath(),
        xa: !1,
        Ma: s
      }, this.databaseId, this.N, this.ignoreUndefinedProperties);
    }
  }]);

  return iu;
}();

function ru(t) {
  var e = t._freezeSettings(),
      n = Hr(t._databaseId);

  return new iu(t._databaseId, !!e.ignoreUndefinedProperties, n);
}
/** Parse document data from a set() call. */


function ou(t, e, n, s, i) {
  var r = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
  var o = t.Ba(r.merge || r.mergeFields ? 2
  /* MergeSet */
  : 0
  /* Set */
  , e, n, i);
  pu("Data must be an object, but it was:", o, s);
  var a = gu(s, o);
  var c, u;
  if (r.merge) c = new lt(o.fieldMask), u = o.fieldTransforms;else if (r.mergeFields) {
    var _t79 = [];

    var _iterator53 = _createForOfIteratorHelper(r.mergeFields),
        _step53;

    try {
      for (_iterator53.s(); !(_step53 = _iterator53.n()).done;) {
        var _s56 = _step53.value;

        var _i27 = Eu(e, _s56, n);

        if (!o.contains(_i27)) throw new q(U.INVALID_ARGUMENT, "Field '".concat(_i27, "' is specified in your field mask but missing from your input data."));
        Ru(_t79, _i27) || _t79.push(_i27);
      }
    } catch (err) {
      _iterator53.e(err);
    } finally {
      _iterator53.f();
    }

    c = new lt(_t79), u = o.fieldTransforms.filter(function (t) {
      return c.covers(t.field);
    });
  } else c = null, u = o.fieldTransforms;
  return new tu(new Lt(a), c, u);
}

var au = /*#__PURE__*/function (_Yc) {
  _inherits(au, _Yc);

  var _super33 = _createSuper(au);

  function au() {
    _classCallCheck(this, au);

    return _super33.apply(this, arguments);
  }

  _createClass(au, [{
    key: "_toFieldTransform",
    value: function _toFieldTransform(t) {
      if (2
      /* MergeSet */
      !== t.Da) throw 1
      /* Update */
      === t.Da ? t.Fa("".concat(this._methodName, "() can only appear at the top level of your update data")) : t.Fa("".concat(this._methodName, "() cannot be used with set() unless you pass {merge:true}")); // No transform to add for a delete, but we need to add it to our
      // fieldMask so it gets deleted.

      return t.fieldMask.push(t.path), null;
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return t instanceof au;
    }
  }]);

  return au;
}(Yc);
/**
 * Creates a child context for parsing SerializableFieldValues.
 *
 * This is different than calling `ParseContext.contextWith` because it keeps
 * the fieldTransforms and fieldMask separate.
 *
 * The created context has its `dataSource` set to `UserDataSource.Argument`.
 * Although these values are used with writes, any elements in these FieldValues
 * are not considered writes since they cannot contain any FieldValue sentinels,
 * etc.
 *
 * @param fieldValue - The sentinel FieldValue for which to create a child
 *     context.
 * @param context - The parent context.
 * @param arrayElement - Whether or not the FieldValue has an array.
 */


function cu(t, e, n) {
  return new su({
    Da: 3
    /* Argument */
    ,
    La: e.settings.La,
    methodName: t._methodName,
    xa: n
  }, e.databaseId, e.N, e.ignoreUndefinedProperties);
}

var uu = /*#__PURE__*/function (_Yc2) {
  _inherits(uu, _Yc2);

  var _super34 = _createSuper(uu);

  function uu() {
    _classCallCheck(this, uu);

    return _super34.apply(this, arguments);
  }

  _createClass(uu, [{
    key: "_toFieldTransform",
    value: function _toFieldTransform(t) {
      return new qe(t.path, new ke());
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return t instanceof uu;
    }
  }]);

  return uu;
}(Yc);

var hu = /*#__PURE__*/function (_Yc3) {
  _inherits(hu, _Yc3);

  var _super35 = _createSuper(hu);

  function hu(t, e) {
    var _this164;

    _classCallCheck(this, hu);

    _this164 = _super35.call(this, t), _this164.Ua = e;
    return _this164;
  }

  _createClass(hu, [{
    key: "_toFieldTransform",
    value: function _toFieldTransform(t) {
      var e = cu(this, t,
      /*array=*/
      !0),
          n = this.Ua.map(function (t) {
        return mu(t, e);
      }),
          s = new $e(n);
      return new qe(t.path, s);
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      // TODO(mrschmidt): Implement isEquals
      return this === t;
    }
  }]);

  return hu;
}(Yc);

var lu = /*#__PURE__*/function (_Yc4) {
  _inherits(lu, _Yc4);

  var _super36 = _createSuper(lu);

  function lu(t, e) {
    var _this165;

    _classCallCheck(this, lu);

    _this165 = _super36.call(this, t), _this165.Ua = e;
    return _this165;
  }

  _createClass(lu, [{
    key: "_toFieldTransform",
    value: function _toFieldTransform(t) {
      var e = cu(this, t,
      /*array=*/
      !0),
          n = this.Ua.map(function (t) {
        return mu(t, e);
      }),
          s = new Fe(n);
      return new qe(t.path, s);
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      // TODO(mrschmidt): Implement isEquals
      return this === t;
    }
  }]);

  return lu;
}(Yc);

var fu = /*#__PURE__*/function (_Yc5) {
  _inherits(fu, _Yc5);

  var _super37 = _createSuper(fu);

  function fu(t, e) {
    var _this166;

    _classCallCheck(this, fu);

    _this166 = _super37.call(this, t), _this166.qa = e;
    return _this166;
  }

  _createClass(fu, [{
    key: "_toFieldTransform",
    value: function _toFieldTransform(t) {
      var e = new Le(t.N, Se(t.N, this.qa));
      return new qe(t.path, e);
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      // TODO(mrschmidt): Implement isEquals
      return this === t;
    }
  }]);

  return fu;
}(Yc);
/** Parse update data from an update() call. */


function du(t, e, n, s) {
  var i = t.Ba(1
  /* Update */
  , e, n);
  pu("Data must be an object, but it was:", i, s);
  var r = [],
      o = Lt.empty();
  rt(s, function (t, s) {
    var a = Iu(e, t, n); // For Compat types, we have to "extract" the underlying types before
    // performing validation.

    s = (0, _util.getModularInstance)(s);
    var c = i.$a(a);
    if (s instanceof au) // Add it to the field mask, but don't add anything to updateData.
      r.push(a);else {
      var _t80 = mu(s, c);

      null != _t80 && (r.push(a), o.set(a, _t80));
    }
  });
  var a = new lt(r);
  return new eu(o, a, i.fieldTransforms);
}
/** Parse update data from a list of field/value arguments. */


function wu(t, e, n, s, i, r) {
  var o = t.Ba(1
  /* Update */
  , e, n),
      a = [Eu(e, s, n)],
      c = [i];
  if (r.length % 2 != 0) throw new q(U.INVALID_ARGUMENT, "Function ".concat(e, "() needs to be called with an even number of arguments that alternate between field names and values."));

  for (var _t81 = 0; _t81 < r.length; _t81 += 2) {
    a.push(Eu(e, r[_t81])), c.push(r[_t81 + 1]);
  }

  var u = [],
      h = Lt.empty(); // We iterate in reverse order to pick the last value for a field if the
  // user specified the field multiple times.

  for (var _t82 = a.length - 1; _t82 >= 0; --_t82) {
    if (!Ru(u, a[_t82])) {
      var _e66 = a[_t82];
      var _n61 = c[_t82]; // For Compat types, we have to "extract" the underlying types before
      // performing validation.

      _n61 = (0, _util.getModularInstance)(_n61);

      var _s57 = o.$a(_e66);

      if (_n61 instanceof au) // Add it to the field mask, but don't add anything to updateData.
        u.push(_e66);else {
        var _t83 = mu(_n61, _s57);

        null != _t83 && (u.push(_e66), h.set(_e66, _t83));
      }
    }
  }

  var l = new lt(u);
  return new eu(h, l, o.fieldTransforms);
}
/**
 * Parse a "query value" (e.g. value in a where filter or a value in a cursor
 * bound).
 *
 * @param allowArrays - Whether the query value is an array that may directly
 * contain additional arrays (e.g. the operand of an `in` query).
 */


function _u(t, e, n) {
  var s = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : !1;
  return mu(n, t.Ba(s ? 4
  /* ArrayArgument */
  : 3
  /* Argument */
  , e));
}
/**
 * Parses user data to Protobuf Values.
 *
 * @param input - Data to be parsed.
 * @param context - A context object representing the current path being parsed,
 * the source of the data being parsed, etc.
 * @returns The parsed value, or null if the value was a FieldValue sentinel
 * that should not be included in the resulting parsed data.
 */


function mu(t, e) {
  if (yu( // Unwrap the API type from the Compat SDK. This will return the API type
  // from firestore-exp.
  t = (0, _util.getModularInstance)(t))) return pu("Unsupported field value:", e, t), gu(t, e);
  if (t instanceof Yc) // FieldValues usually parse into transforms (except FieldValue.delete())
    // in which case we do not want to include this field in our parsed data
    // (as doing so will overwrite the field directly prior to the transform
    // trying to transform it). So we don't add this location to
    // context.fieldMask and we return null as our parsing result.

    /**
    * "Parses" the provided FieldValueImpl, adding any necessary transforms to
    * context.fieldTransforms.
    */
    return function (t, e) {
      // Sentinels are only supported with writes, and not within arrays.
      if (!nu(e.Da)) throw e.Fa("".concat(t._methodName, "() can only be used with update() and set()"));
      if (!e.path) throw e.Fa("".concat(t._methodName, "() is not currently supported inside arrays"));

      var n = t._toFieldTransform(e);

      n && e.fieldTransforms.push(n);
    }
    /**
    * Helper to parse a scalar value (i.e. not an Object, Array, or FieldValue)
    *
    * @returns The parsed value
    */
    (t, e), null;
  if (void 0 === t && e.ignoreUndefinedProperties) // If the input is undefined it can never participate in the fieldMask, so
    // don't handle this below. If `ignoreUndefinedProperties` is false,
    // `parseScalarValue` will reject an undefined value.
    return null;

  if ( // If context.path is null we are inside an array and we don't support
  // field mask paths more granular than the top-level array.
  e.path && e.fieldMask.push(e.path), t instanceof Array) {
    // TODO(b/34871131): Include the path containing the array in the error
    // message.
    // In the case of IN queries, the parsed data is an array (representing
    // the set of values to be included for the IN query) that may directly
    // contain additional arrays (each representing an individual field
    // value), so we disable this validation.
    if (e.settings.xa && 4
    /* ArrayArgument */
    !== e.Da) throw e.Fa("Nested arrays are not supported");
    return function (t, e) {
      var n = [];
      var s = 0;

      var _iterator54 = _createForOfIteratorHelper(t),
          _step54;

      try {
        for (_iterator54.s(); !(_step54 = _iterator54.n()).done;) {
          var _i28 = _step54.value;

          var _t84 = mu(_i28, e.Oa(s));

          null == _t84 && ( // Just include nulls in the array for fields being replaced with a
          // sentinel.
          _t84 = {
            nullValue: "NULL_VALUE"
          }), n.push(_t84), s++;
        }
      } catch (err) {
        _iterator54.e(err);
      } finally {
        _iterator54.f();
      }

      return {
        arrayValue: {
          values: n
        }
      };
    }(t, e);
  }

  return function (t, e) {
    if (null === (t = (0, _util.getModularInstance)(t))) return {
      nullValue: "NULL_VALUE"
    };
    if ("number" == typeof t) return Se(e.N, t);
    if ("boolean" == typeof t) return {
      booleanValue: t
    };
    if ("string" == typeof t) return {
      stringValue: t
    };

    if (t instanceof Date) {
      var _n62 = nt.fromDate(t);

      return {
        timestampValue: Ln(e.N, _n62)
      };
    }

    if (t instanceof nt) {
      // Firestore backend truncates precision down to microseconds. To ensure
      // offline mode works the same with regards to truncation, perform the
      // truncation immediately without waiting for the backend to do that.
      var _n63 = new nt(t.seconds, 1e3 * Math.floor(t.nanoseconds / 1e3));

      return {
        timestampValue: Ln(e.N, _n63)
      };
    }

    if (t instanceof Xc) return {
      geoPointValue: {
        latitude: t.latitude,
        longitude: t.longitude
      }
    };
    if (t instanceof Jc) return {
      bytesValue: Bn(e.N, t._byteString)
    };

    if (t instanceof Ec) {
      var _n64 = e.databaseId,
          _s58 = t.firestore._databaseId;
      if (!_s58.isEqual(_n64)) throw e.Fa("Document reference is for database ".concat(_s58.projectId, "/").concat(_s58.database, " but should be for database ").concat(_n64.projectId, "/").concat(_n64.database));
      return {
        referenceValue: Kn(t.firestore._databaseId || e.databaseId, t._key.path)
      };
    }

    throw e.Fa("Unsupported field value: ".concat(wc(t)));
  }
  /**
  * Checks whether an object looks like a JSON object that should be converted
  * into a struct. Normal class/prototype instances are considered to look like
  * JSON objects since they should be converted to a struct value. Arrays, Dates,
  * GeoPoints, etc. are not considered to look like JSON objects since they map
  * to specific FieldValue types other than ObjectValue.
  */
  (t, e);
}

function gu(t, e) {
  var n = {};
  return ot(t) ? // If we encounter an empty object, we explicitly add it to the update
  // mask to ensure that the server creates a map entry.
  e.path && e.path.length > 0 && e.fieldMask.push(e.path) : rt(t, function (t, s) {
    var i = mu(s, e.Na(t));
    null != i && (n[t] = i);
  }), {
    mapValue: {
      fields: n
    }
  };
}

function yu(t) {
  return !("object" != _typeof(t) || null === t || t instanceof Array || t instanceof Date || t instanceof nt || t instanceof Xc || t instanceof Jc || t instanceof Ec || t instanceof Yc);
}

function pu(t, e, n) {
  if (!yu(n) || !function (t) {
    return "object" == _typeof(t) && null !== t && (Object.getPrototypeOf(t) === Object.prototype || null === Object.getPrototypeOf(t));
  }(n)) {
    var _s59 = wc(n);

    throw "an object" === _s59 ? e.Fa(t + " a custom object") : e.Fa(t + " " + _s59);
  }
}
/**
 * Helper that calls fromDotSeparatedString() but wraps any error thrown.
 */


function Eu(t, e, n) {
  if (( // If required, replace the FieldPath Compat class with with the firestore-exp
  // FieldPath.
  e = (0, _util.getModularInstance)(e)) instanceof zc) return e._internalPath;
  if ("string" == typeof e) return Iu(t, e);
  throw Au("Field path arguments must be of type string or FieldPath.", t,
  /* hasConverter= */
  !1,
  /* path= */
  void 0, n);
}
/**
 * Matches any characters in a field path string that are reserved.
 */


var Tu = new RegExp("[~\\*/\\[\\]]");
/**
 * Wraps fromDotSeparatedString with an error message about the method that
 * was thrown.
 * @param methodName - The publicly visible method name
 * @param path - The dot-separated string form of a field path which will be
 * split on dots.
 * @param targetDoc - The document against which the field path will be
 * evaluated.
 */

function Iu(t, e, n) {
  if (e.search(Tu) >= 0) throw Au("Invalid field path (".concat(e, "). Paths must not contain '~', '*', '/', '[', or ']'"), t,
  /* hasConverter= */
  !1,
  /* path= */
  void 0, n);

  try {
    return _construct(zc, _toConsumableArray(e.split(".")))._internalPath;
  } catch (s) {
    throw Au("Invalid field path (".concat(e, "). Paths must not be empty, begin with '.', end with '.', or contain '..'"), t,
    /* hasConverter= */
    !1,
    /* path= */
    void 0, n);
  }
}

function Au(t, e, n, s, i) {
  var r = s && !s.isEmpty(),
      o = void 0 !== i;
  var a = "Function ".concat(e, "() called with invalid data");
  n && (a += " (via `toFirestore()`)"), a += ". ";
  var c = "";
  return (r || o) && (c += " (found", r && (c += " in field ".concat(s)), o && (c += " in document ".concat(i)), c += ")"), new q(U.INVALID_ARGUMENT, a + t + c);
}
/** Checks `haystack` if FieldPath `needle` is present. Runs in O(n). */


function Ru(t, e) {
  return t.some(function (t) {
    return t.isEqual(e);
  });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A `DocumentSnapshot` contains data read from a document in your Firestore
 * database. The data can be extracted with `.data()` or `.get(<field>)` to
 * get a specific field.
 *
 * For a `DocumentSnapshot` that points to a non-existing document, any data
 * access will return 'undefined'. You can use the `exists()` method to
 * explicitly verify a document's existence.
 */


var bu = /*#__PURE__*/function () {
  // Note: This class is stripped down version of the DocumentSnapshot in
  // the legacy SDK. The changes are:
  // - No support for SnapshotMetadata.
  // - No support for SnapshotOptions.

  /** @hideconstructor protected */
  function bu(t, e, n, s, i) {
    _classCallCheck(this, bu);

    this._firestore = t, this._userDataWriter = e, this._key = n, this._document = s, this._converter = i;
  }
  /** Property of the `DocumentSnapshot` that provides the document's ID. */


  _createClass(bu, [{
    key: "id",
    get: function get() {
      return this._key.path.lastSegment();
    }
    /**
     * The `DocumentReference` for the document included in the `DocumentSnapshot`.
     */

  }, {
    key: "ref",
    get: function get() {
      return new Ec(this._firestore, this._converter, this._key);
    }
    /**
     * Signals whether or not the document at the snapshot's location exists.
     *
     * @returns true if the document exists.
     */

  }, {
    key: "exists",
    value: function exists() {
      return null !== this._document;
    }
    /**
     * Retrieves all fields in the document as an `Object`. Returns `undefined` if
     * the document doesn't exist.
     *
     * @returns An `Object` containing all fields in the document or `undefined`
     * if the document doesn't exist.
     */

  }, {
    key: "data",
    value: function data() {
      if (this._document) {
        if (this._converter) {
          // We only want to use the converter and create a new DocumentSnapshot
          // if a converter has been provided.
          var _t85 = new Pu(this._firestore, this._userDataWriter, this._key, this._document,
          /* converter= */
          null);

          return this._converter.fromFirestore(_t85);
        }

        return this._userDataWriter.convertValue(this._document.data.value);
      }
    }
    /**
     * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
     * document or field doesn't exist.
     *
     * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
     * field.
     * @returns The data at the specified field location or undefined if no such
     * field exists in the document.
     */
    // We are using `any` here to avoid an explicit cast by our users.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any

  }, {
    key: "get",
    value: function get(t) {
      if (this._document) {
        var _e67 = this._document.data.field(vu("DocumentSnapshot.get", t));

        if (null !== _e67) return this._userDataWriter.convertValue(_e67);
      }
    }
  }]);

  return bu;
}();
/**
 * A `QueryDocumentSnapshot` contains data read from a document in your
 * Firestore database as part of a query. The document is guaranteed to exist
 * and its data can be extracted with `.data()` or `.get(<field>)` to get a
 * specific field.
 *
 * A `QueryDocumentSnapshot` offers the same API surface as a
 * `DocumentSnapshot`. Since query results contain only existing documents, the
 * `exists` property will always be true and `data()` will never return
 * 'undefined'.
 */


var Pu = /*#__PURE__*/function (_bu) {
  _inherits(Pu, _bu);

  var _super38 = _createSuper(Pu);

  function Pu() {
    _classCallCheck(this, Pu);

    return _super38.apply(this, arguments);
  }

  _createClass(Pu, [{
    key: "data",
    value:
    /**
     * Retrieves all fields in the document as an `Object`.
     *
     * @override
     * @returns An `Object` containing all fields in the document.
     */
    function data() {
      return _get(_getPrototypeOf(Pu.prototype), "data", this).call(this);
    }
  }]);

  return Pu;
}(bu);
/**
 * Helper that calls `fromDotSeparatedString()` but wraps any error thrown.
 */


function vu(t, e) {
  return "string" == typeof e ? Iu(t, e) : e instanceof zc ? e._internalPath : e._delegate._internalPath;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Metadata about a snapshot, describing the state of the snapshot.
 */


var Vu = /*#__PURE__*/function () {
  /** @hideconstructor */
  function Vu(t, e) {
    _classCallCheck(this, Vu);

    this.hasPendingWrites = t, this.fromCache = e;
  }
  /**
   * Returns true if this `SnapshotMetadata` is equal to the provided one.
   *
   * @param other - The `SnapshotMetadata` to compare against.
   * @returns true if this `SnapshotMetadata` is equal to the provided one.
   */


  _createClass(Vu, [{
    key: "isEqual",
    value: function isEqual(t) {
      return this.hasPendingWrites === t.hasPendingWrites && this.fromCache === t.fromCache;
    }
  }]);

  return Vu;
}();
/**
 * A `DocumentSnapshot` contains data read from a document in your Firestore
 * database. The data can be extracted with `.data()` or `.get(<field>)` to
 * get a specific field.
 *
 * For a `DocumentSnapshot` that points to a non-existing document, any data
 * access will return 'undefined'. You can use the `exists()` method to
 * explicitly verify a document's existence.
 */


exports.SnapshotMetadata = Vu;

var Su = /*#__PURE__*/function (_bu2) {
  _inherits(Su, _bu2);

  var _super39 = _createSuper(Su);

  /** @hideconstructor protected */
  function Su(t, e, n, s, i, r) {
    var _this167;

    _classCallCheck(this, Su);

    _this167 = _super39.call(this, t, e, n, s, r), _this167._firestore = t, _this167._firestoreImpl = t, _this167.metadata = i;
    return _this167;
  }
  /**
   * Property of the `DocumentSnapshot` that signals whether or not the data
   * exists. True if the document exists.
   */


  _createClass(Su, [{
    key: "exists",
    value: function exists() {
      return _get(_getPrototypeOf(Su.prototype), "exists", this).call(this);
    }
    /**
     * Retrieves all fields in the document as an `Object`. Returns `undefined` if
     * the document doesn't exist.
     *
     * By default, `FieldValue.serverTimestamp()` values that have not yet been
     * set to their final value will be returned as `null`. You can override
     * this by passing an options object.
     *
     * @param options - An options object to configure how data is retrieved from
     * the snapshot (for example the desired behavior for server timestamps that
     * have not yet been set to their final value).
     * @returns An `Object` containing all fields in the document or `undefined` if
     * the document doesn't exist.
     */

  }, {
    key: "data",
    value: function data() {
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (this._document) {
        if (this._converter) {
          // We only want to use the converter and create a new DocumentSnapshot
          // if a converter has been provided.
          var _e68 = new Du(this._firestore, this._userDataWriter, this._key, this._document, this.metadata,
          /* converter= */
          null);

          return this._converter.fromFirestore(_e68, t);
        }

        return this._userDataWriter.convertValue(this._document.data.value, t.serverTimestamps);
      }
    }
    /**
     * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
     * document or field doesn't exist.
     *
     * By default, a `FieldValue.serverTimestamp()` that has not yet been set to
     * its final value will be returned as `null`. You can override this by
     * passing an options object.
     *
     * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
     * field.
     * @param options - An options object to configure how the field is retrieved
     * from the snapshot (for example the desired behavior for server timestamps
     * that have not yet been set to their final value).
     * @returns The data at the specified field location or undefined if no such
     * field exists in the document.
     */
    // We are using `any` here to avoid an explicit cast by our users.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any

  }, {
    key: "get",
    value: function get(t) {
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (this._document) {
        var _n65 = this._document.data.field(vu("DocumentSnapshot.get", t));

        if (null !== _n65) return this._userDataWriter.convertValue(_n65, e.serverTimestamps);
      }
    }
  }]);

  return Su;
}(bu);
/**
 * A `QueryDocumentSnapshot` contains data read from a document in your
 * Firestore database as part of a query. The document is guaranteed to exist
 * and its data can be extracted with `.data()` or `.get(<field>)` to get a
 * specific field.
 *
 * A `QueryDocumentSnapshot` offers the same API surface as a
 * `DocumentSnapshot`. Since query results contain only existing documents, the
 * `exists` property will always be true and `data()` will never return
 * 'undefined'.
 */


exports.DocumentSnapshot = Su;

var Du = /*#__PURE__*/function (_Su) {
  _inherits(Du, _Su);

  var _super40 = _createSuper(Du);

  function Du() {
    _classCallCheck(this, Du);

    return _super40.apply(this, arguments);
  }

  _createClass(Du, [{
    key: "data",
    value:
    /**
     * Retrieves all fields in the document as an `Object`.
     *
     * By default, `FieldValue.serverTimestamp()` values that have not yet been
     * set to their final value will be returned as `null`. You can override
     * this by passing an options object.
     *
     * @override
     * @param options - An options object to configure how data is retrieved from
     * the snapshot (for example the desired behavior for server timestamps that
     * have not yet been set to their final value).
     * @returns An `Object` containing all fields in the document.
     */
    function data() {
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return _get(_getPrototypeOf(Du.prototype), "data", this).call(this, t);
    }
  }]);

  return Du;
}(Su);
/**
 * A `QuerySnapshot` contains zero or more `DocumentSnapshot` objects
 * representing the results of a query. The documents can be accessed as an
 * array via the `docs` property or enumerated using the `forEach` method. The
 * number of documents can be determined via the `empty` and `size`
 * properties.
 */


exports.QueryDocumentSnapshot = Du;

var Cu = /*#__PURE__*/function () {
  /** @hideconstructor */
  function Cu(t, e, n, s) {
    _classCallCheck(this, Cu);

    this._firestore = t, this._userDataWriter = e, this._snapshot = s, this.metadata = new Vu(s.hasPendingWrites, s.fromCache), this.query = n;
  }
  /** An array of all the documents in the `QuerySnapshot`. */


  _createClass(Cu, [{
    key: "docs",
    get: function get() {
      var t = [];
      return this.forEach(function (e) {
        return t.push(e);
      }), t;
    }
    /** The number of documents in the `QuerySnapshot`. */

  }, {
    key: "size",
    get: function get() {
      return this._snapshot.docs.size;
    }
    /** True if there are no documents in the `QuerySnapshot`. */

  }, {
    key: "empty",
    get: function get() {
      return 0 === this.size;
    }
    /**
     * Enumerates all of the documents in the `QuerySnapshot`.
     *
     * @param callback - A callback to be called with a `QueryDocumentSnapshot` for
     * each document in the snapshot.
     * @param thisArg - The `this` binding for the callback.
     */

  }, {
    key: "forEach",
    value: function forEach(t, e) {
      var _this168 = this;

      this._snapshot.docs.forEach(function (n) {
        t.call(e, new Du(_this168._firestore, _this168._userDataWriter, n.key, n, new Vu(_this168._snapshot.mutatedKeys.has(n.key), _this168._snapshot.fromCache), _this168.query.converter));
      });
    }
    /**
     * Returns an array of the documents changes since the last snapshot. If this
     * is the first snapshot, all documents will be in the list as 'added'
     * changes.
     *
     * @param options - `SnapshotListenOptions` that control whether metadata-only
     * changes (i.e. only `DocumentSnapshot.metadata` changed) should trigger
     * snapshot events.
     */

  }, {
    key: "docChanges",
    value: function docChanges() {
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var e = !!t.includeMetadataChanges;
      if (e && this._snapshot.excludesMetadataChanges) throw new q(U.INVALID_ARGUMENT, "To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");
      return this._cachedChanges && this._cachedChangesIncludeMetadataChanges === e || (this._cachedChanges =
      /** Calculates the array of `DocumentChange`s for a given `ViewSnapshot`. */
      function (t, e) {
        if (t._snapshot.oldDocs.isEmpty()) {
          var _e69 = 0;
          return t._snapshot.docChanges.map(function (n) {
            return {
              type: "added",
              doc: new Du(t._firestore, t._userDataWriter, n.doc.key, n.doc, new Vu(t._snapshot.mutatedKeys.has(n.doc.key), t._snapshot.fromCache), t.query.converter),
              oldIndex: -1,
              newIndex: _e69++
            };
          });
        }

        {
          // A `DocumentSet` that is updated incrementally as changes are applied to use
          // to lookup the index of a document.
          var _n66 = t._snapshot.oldDocs;
          return t._snapshot.docChanges.filter(function (t) {
            return e || 3
            /* Metadata */
            !== t.type;
          }).map(function (e) {
            var s = new Du(t._firestore, t._userDataWriter, e.doc.key, e.doc, new Vu(t._snapshot.mutatedKeys.has(e.doc.key), t._snapshot.fromCache), t.query.converter);
            var i = -1,
                r = -1;
            return 0
            /* Added */
            !== e.type && (i = _n66.indexOf(e.doc.key), _n66 = _n66.delete(e.doc.key)), 1
            /* Removed */
            !== e.type && (_n66 = _n66.add(e.doc), r = _n66.indexOf(e.doc.key)), {
              type: Nu(e.type),
              doc: s,
              oldIndex: i,
              newIndex: r
            };
          });
        }
      }(this, e), this._cachedChangesIncludeMetadataChanges = e), this._cachedChanges;
    }
  }]);

  return Cu;
}();

exports.QuerySnapshot = Cu;

function Nu(t) {
  switch (t) {
    case 0
    /* Added */
    :
      return "added";

    case 2
    /* Modified */
    :
    case 3
    /* Metadata */
    :
      return "modified";

    case 1
    /* Removed */
    :
      return "removed";

    default:
      return F();
  }
} // TODO(firestoreexp): Add tests for snapshotEqual with different snapshot
// metadata

/**
 * Returns true if the provided snapshots are equal.
 *
 * @param left - A snapshot to compare.
 * @param right - A snapshot to compare.
 * @returns true if the snapshots are equal.
 */


function xu(t, e) {
  return t instanceof Su && e instanceof Su ? t._firestore === e._firestore && t._key.isEqual(e._key) && (null === t._document ? null === e._document : t._document.isEqual(e._document)) && t._converter === e._converter : t instanceof Cu && e instanceof Cu && t._firestore === e._firestore && vc(t.query, e.query) && t.metadata.isEqual(e.metadata) && t._snapshot.isEqual(e._snapshot);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function ku(t) {
  if (we(t) && 0 === t.explicitOrderBy.length) throw new q(U.UNIMPLEMENTED, "limitToLast() queries require specifying at least one orderBy() clause");
}
/**
 * A `QueryConstraint` is used to narrow the set of documents returned by a
 * Firestore query. `QueryConstraint`s are created by invoking {@link where},
 * {@link orderBy}, {@link (startAt:1)}, {@link (startAfter:1)}, {@link
 * endBefore:1}, {@link (endAt:1)}, {@link limit} or {@link limitToLast} and
 * can then be passed to {@link query} to create a new query instance that
 * also contains this `QueryConstraint`.
 */


var $u = function $u() {
  _classCallCheck(this, $u);
};
/**
 * Creates a new immutable instance of {@link Query} that is extended to also include
 * additional query constraints.
 *
 * @param query - The {@link Query} instance to use as a base for the new constraints.
 * @param queryConstraints - The list of {@link QueryConstraint}s to apply.
 * @throws if any of the provided query constraints cannot be combined with the
 * existing or new constraints.
 */


exports.QueryConstraint = $u;

function Ou(t) {
  for (var _len9 = arguments.length, e = new Array(_len9 > 1 ? _len9 - 1 : 0), _key9 = 1; _key9 < _len9; _key9++) {
    e[_key9 - 1] = arguments[_key9];
  }

  for (var _i29 = 0, _e70 = e; _i29 < _e70.length; _i29++) {
    var _n67 = _e70[_i29];
    t = _n67._apply(t);
  }

  return t;
}

var Fu = /*#__PURE__*/function (_$u) {
  _inherits(Fu, _$u);

  var _super41 = _createSuper(Fu);

  function Fu(t, e, n) {
    var _this169;

    _classCallCheck(this, Fu);

    _this169 = _super41.call(this), _this169.Ka = t, _this169.ja = e, _this169.Qa = n, _this169.type = "where";
    return _this169;
  }

  _createClass(Fu, [{
    key: "_apply",
    value: function _apply(t) {
      var e = ru(t.firestore),
          n = function (t, e, n, s, i, r, o) {
        var a;

        if (i.isKeyField()) {
          if ("array-contains"
          /* ARRAY_CONTAINS */
          === r || "array-contains-any"
          /* ARRAY_CONTAINS_ANY */
          === r) throw new q(U.INVALID_ARGUMENT, "Invalid Query. You can't perform '".concat(r, "' queries on FieldPath.documentId()."));

          if ("in"
          /* IN */
          === r || "not-in"
          /* NOT_IN */
          === r) {
            Xu(o, r);
            var _e71 = [];

            var _iterator55 = _createForOfIteratorHelper(o),
                _step55;

            try {
              for (_iterator55.s(); !(_step55 = _iterator55.n()).done;) {
                var _n68 = _step55.value;

                _e71.push(Yu(s, t, _n68));
              }
            } catch (err) {
              _iterator55.e(err);
            } finally {
              _iterator55.f();
            }

            a = {
              arrayValue: {
                values: _e71
              }
            };
          } else a = Yu(s, t, o);
        } else "in"
        /* IN */
        !== r && "not-in"
        /* NOT_IN */
        !== r && "array-contains-any"
        /* ARRAY_CONTAINS_ANY */
        !== r || Xu(o, r), a = _u(n, e, o,
        /* allowArrays= */
        "in"
        /* IN */
        === r || "not-in"
        /* NOT_IN */
        === r);

        var c = zt.create(i, r, a);
        return function (t, e) {
          if (e.v()) {
            var _n69 = me(t);

            if (null !== _n69 && !_n69.isEqual(e.field)) throw new q(U.INVALID_ARGUMENT, "Invalid query. All where filters with an inequality (<, <=, !=, not-in, >, or >=) must be on the same field. But you have inequality filters on '".concat(_n69.toString(), "' and '").concat(e.field.toString(), "'"));

            var _s60 = _e(t);

            null !== _s60 && Zu(t, e.field, _s60);
          }

          var n = function (t, e) {
            var _iterator56 = _createForOfIteratorHelper(t.filters),
                _step56;

            try {
              for (_iterator56.s(); !(_step56 = _iterator56.n()).done;) {
                var _n70 = _step56.value;
                if (e.indexOf(_n70.op) >= 0) return _n70.op;
              }
            } catch (err) {
              _iterator56.e(err);
            } finally {
              _iterator56.f();
            }

            return null;
          }(t,
          /**
          * Given an operator, returns the set of operators that cannot be used with it.
          *
          * Operators in a query must adhere to the following set of rules:
          * 1. Only one array operator is allowed.
          * 2. Only one disjunctive operator is allowed.
          * 3. `NOT_EQUAL` cannot be used with another `NOT_EQUAL` operator.
          * 4. `NOT_IN` cannot be used with array, disjunctive, or `NOT_EQUAL` operators.
          *
          * Array operators: `ARRAY_CONTAINS`, `ARRAY_CONTAINS_ANY`
          * Disjunctive operators: `IN`, `ARRAY_CONTAINS_ANY`, `NOT_IN`
          */
          function (t) {
            switch (t) {
              case "!="
              /* NOT_EQUAL */
              :
                return ["!="
                /* NOT_EQUAL */
                , "not-in"
                /* NOT_IN */
                ];

              case "array-contains"
              /* ARRAY_CONTAINS */
              :
                return ["array-contains"
                /* ARRAY_CONTAINS */
                , "array-contains-any"
                /* ARRAY_CONTAINS_ANY */
                , "not-in"
                /* NOT_IN */
                ];

              case "in"
              /* IN */
              :
                return ["array-contains-any"
                /* ARRAY_CONTAINS_ANY */
                , "in"
                /* IN */
                , "not-in"
                /* NOT_IN */
                ];

              case "array-contains-any"
              /* ARRAY_CONTAINS_ANY */
              :
                return ["array-contains"
                /* ARRAY_CONTAINS */
                , "array-contains-any"
                /* ARRAY_CONTAINS_ANY */
                , "in"
                /* IN */
                , "not-in"
                /* NOT_IN */
                ];

              case "not-in"
              /* NOT_IN */
              :
                return ["array-contains"
                /* ARRAY_CONTAINS */
                , "array-contains-any"
                /* ARRAY_CONTAINS_ANY */
                , "in"
                /* IN */
                , "not-in"
                /* NOT_IN */
                , "!="
                /* NOT_EQUAL */
                ];

              default:
                return [];
            }
          }(e.op));

          if (null !== n) // Special case when it's a duplicate op to give a slightly clearer error message.
            throw n === e.op ? new q(U.INVALID_ARGUMENT, "Invalid query. You cannot use more than one '".concat(e.op.toString(), "' filter.")) : new q(U.INVALID_ARGUMENT, "Invalid query. You cannot use '".concat(e.op.toString(), "' filters with '").concat(n.toString(), "' filters."));
        }(t, c), c;
      }(t._query, "where", e, t.firestore._databaseId, this.Ka, this.ja, this.Qa);

      return new Tc(t.firestore, t.converter, function (t, e) {
        var n = t.filters.concat([e]);
        return new he(t.path, t.collectionGroup, t.explicitOrderBy.slice(), n, t.limit, t.limitType, t.startAt, t.endAt);
      }(t._query, n));
    }
  }]);

  return Fu;
}($u);
/**
 * Creates a {@link QueryConstraint} that enforces that documents must contain the
 * specified field and that the value should satisfy the relation constraint
 * provided.
 *
 * @param fieldPath - The path to compare
 * @param opStr - The operation string (e.g "&lt;", "&lt;=", "==", "&lt;",
 *   "&lt;=", "!=").
 * @param value - The value for comparison
 * @returns The created {@link Query}.
 */


function Mu(t, e, n) {
  var s = e,
      i = vu("where", t);
  return new Fu(i, s, n);
}

var Lu = /*#__PURE__*/function (_$u2) {
  _inherits(Lu, _$u2);

  var _super42 = _createSuper(Lu);

  function Lu(t, e) {
    var _this170;

    _classCallCheck(this, Lu);

    _this170 = _super42.call(this), _this170.Ka = t, _this170.Wa = e, _this170.type = "orderBy";
    return _this170;
  }

  _createClass(Lu, [{
    key: "_apply",
    value: function _apply(t) {
      var e = function (t, e, n) {
        if (null !== t.startAt) throw new q(U.INVALID_ARGUMENT, "Invalid query. You must not call startAt() or startAfter() before calling orderBy().");
        if (null !== t.endAt) throw new q(U.INVALID_ARGUMENT, "Invalid query. You must not call endAt() or endBefore() before calling orderBy().");
        var s = new oe(e, n);
        return function (t, e) {
          if (null === _e(t)) {
            // This is the first order by. It must match any inequality.
            var _n71 = me(t);

            null !== _n71 && Zu(t, _n71, e.field);
          }
        }(t, s), s;
      }
      /**
      * Create a `Bound` from a query and a document.
      *
      * Note that the `Bound` will always include the key of the document
      * and so only the provided document will compare equal to the returned
      * position.
      *
      * Will throw if the document does not contain all fields of the order by
      * of the query or if any of the fields in the order by are an uncommitted
      * server timestamp.
      */
      (t._query, this.Ka, this.Wa);

      return new Tc(t.firestore, t.converter, function (t, e) {
        // TODO(dimond): validate that orderBy does not list the same key twice.
        var n = t.explicitOrderBy.concat([e]);
        return new he(t.path, t.collectionGroup, n, t.filters.slice(), t.limit, t.limitType, t.startAt, t.endAt);
      }(t._query, e));
    }
  }]);

  return Lu;
}($u);
/**
 * Creates a {@link QueryConstraint} that sorts the query result by the
 * specified field, optionally in descending order instead of ascending.
 *
 * @param fieldPath - The field to sort by.
 * @param directionStr - Optional direction to sort by ('asc' or 'desc'). If
 * not specified, order will be ascending.
 * @returns The created {@link Query}.
 */


function Bu(t) {
  var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "asc";
  var n = e,
      s = vu("orderBy", t);
  return new Lu(s, n);
}

var Uu = /*#__PURE__*/function (_$u3) {
  _inherits(Uu, _$u3);

  var _super43 = _createSuper(Uu);

  function Uu(t, e, n) {
    var _this171;

    _classCallCheck(this, Uu);

    _this171 = _super43.call(this), _this171.type = t, _this171.Ga = e, _this171.za = n;
    return _this171;
  }

  _createClass(Uu, [{
    key: "_apply",
    value: function _apply(t) {
      return new Tc(t.firestore, t.converter, Ee(t._query, this.Ga, this.za));
    }
  }]);

  return Uu;
}($u);
/**
 * Creates a {@link QueryConstraint} that only returns the first matching documents.
 *
 * @param limit - The maximum number of items to return.
 * @returns The created {@link Query}.
 */


function qu(t) {
  return mc("limit", t), new Uu("limit", t, "F"
  /* First */
  );
}
/**
 * Creates a {@link QueryConstraint} that only returns the last matching documents.
 *
 * You must specify at least one `orderBy` clause for `limitToLast` queries,
 * otherwise an exception will be thrown during execution.
 *
 * @param limit - The maximum number of items to return.
 * @returns The created {@link Query}.
 */


function Ku(t) {
  return mc("limitToLast", t), new Uu("limitToLast", t, "L"
  /* Last */
  );
}

var ju = /*#__PURE__*/function (_$u4) {
  _inherits(ju, _$u4);

  var _super44 = _createSuper(ju);

  function ju(t, e, n) {
    var _this172;

    _classCallCheck(this, ju);

    _this172 = _super44.call(this), _this172.type = t, _this172.Ha = e, _this172.Ja = n;
    return _this172;
  }

  _createClass(ju, [{
    key: "_apply",
    value: function _apply(t) {
      var e = Ju(t, this.type, this.Ha, this.Ja);
      return new Tc(t.firestore, t.converter, function (t, e) {
        return new he(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, e, t.endAt);
      }(t._query, e));
    }
  }]);

  return ju;
}($u);

function Qu() {
  for (var _len10 = arguments.length, t = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
    t[_key10] = arguments[_key10];
  }

  return new ju("startAt", t,
  /*before=*/
  !0);
}

function Wu() {
  for (var _len11 = arguments.length, t = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
    t[_key11] = arguments[_key11];
  }

  return new ju("startAfter", t,
  /*before=*/
  !1);
}

var Gu = /*#__PURE__*/function (_$u5) {
  _inherits(Gu, _$u5);

  var _super45 = _createSuper(Gu);

  function Gu(t, e, n) {
    var _this173;

    _classCallCheck(this, Gu);

    _this173 = _super45.call(this), _this173.type = t, _this173.Ha = e, _this173.Ja = n;
    return _this173;
  }

  _createClass(Gu, [{
    key: "_apply",
    value: function _apply(t) {
      var e = Ju(t, this.type, this.Ha, this.Ja);
      return new Tc(t.firestore, t.converter, function (t, e) {
        return new he(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, t.startAt, e);
      }(t._query, e));
    }
  }]);

  return Gu;
}($u);

function zu() {
  for (var _len12 = arguments.length, t = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {
    t[_key12] = arguments[_key12];
  }

  return new Gu("endBefore", t,
  /*before=*/
  !0);
}

function Hu() {
  for (var _len13 = arguments.length, t = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {
    t[_key13] = arguments[_key13];
  }

  return new Gu("endAt", t,
  /*before=*/
  !1);
}
/** Helper function to create a bound from a document or fields */


function Ju(t, e, n, s) {
  if (n[0] = (0, _util.getModularInstance)(n[0]), n[0] instanceof bu) return function (t, e, n, s, i) {
    if (!s) throw new q(U.NOT_FOUND, "Can't use a DocumentSnapshot that doesn't exist for ".concat(n, "()."));
    var r = []; // Because people expect to continue/end a query at the exact document
    // provided, we need to use the implicit sort order rather than the explicit
    // sort order, because it's guaranteed to contain the document key. That way
    // the position becomes unambiguous and the query continues/ends exactly at
    // the provided document. Without the key (by using the explicit sort
    // orders), multiple documents could match the position, yielding duplicate
    // results.

    var _iterator57 = _createForOfIteratorHelper(ye(t)),
        _step57;

    try {
      for (_iterator57.s(); !(_step57 = _iterator57.n()).done;) {
        var _n72 = _step57.value;
        if (_n72.field.isKeyField()) r.push(Nt(e, s.key));else {
          var _t86 = s.data.field(_n72.field);

          if (yt(_t86)) throw new q(U.INVALID_ARGUMENT, 'Invalid query. You are trying to start or end a query using a document for which the field "' + _n72.field + '" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');

          if (null === _t86) {
            var _t87 = _n72.field.canonicalString();

            throw new q(U.INVALID_ARGUMENT, "Invalid query. You are trying to start or end a query using a document for which the field '".concat(_t87, "' (used as the orderBy) does not exist."));
          }

          r.push(_t86);
        }
      }
    } catch (err) {
      _iterator57.e(err);
    } finally {
      _iterator57.f();
    }

    return new ie(r, i);
  }
  /**
  * Converts a list of field values to a `Bound` for the given query.
  */
  (t._query, t.firestore._databaseId, e, n[0]._document, s);
  {
    var _i30 = ru(t.firestore);

    return function (t, e, n, s, i, r) {
      // Use explicit order by's because it has to match the query the user made
      var o = t.explicitOrderBy;
      if (i.length > o.length) throw new q(U.INVALID_ARGUMENT, "Too many arguments provided to ".concat(s, "(). The number of arguments must be less than or equal to the number of orderBy() clauses"));
      var a = [];

      for (var _r18 = 0; _r18 < i.length; _r18++) {
        var _c4 = i[_r18];

        if (o[_r18].field.isKeyField()) {
          if ("string" != typeof _c4) throw new q(U.INVALID_ARGUMENT, "Invalid query. Expected a string for document ID in ".concat(s, "(), but got a ").concat(_typeof(_c4)));
          if (!ge(t) && -1 !== _c4.indexOf("/")) throw new q(U.INVALID_ARGUMENT, "Invalid query. When querying a collection and ordering by FieldPath.documentId(), the value passed to ".concat(s, "() must be a plain document ID, but '").concat(_c4, "' contains a slash."));

          var _n73 = t.path.child(ct.fromString(_c4));

          if (!Rt.isDocumentKey(_n73)) throw new q(U.INVALID_ARGUMENT, "Invalid query. When querying a collection group and ordering by FieldPath.documentId(), the value passed to ".concat(s, "() must result in a valid document path, but '").concat(_n73, "' is not because it contains an odd number of segments."));

          var _i31 = new Rt(_n73);

          a.push(Nt(e, _i31));
        } else {
          var _t88 = _u(n, s, _c4);

          a.push(_t88);
        }
      }

      return new ie(a, r);
    }
    /**
    * Parses the given `documentIdValue` into a `ReferenceValue`, throwing
    * appropriate errors if the value is anything other than a `DocumentReference`
    * or `string`, or if the string is malformed.
    */
    (t._query, t.firestore._databaseId, _i30, e, n, s);
  }
}

function Yu(t, e, n) {
  if ("string" == typeof (n = (0, _util.getModularInstance)(n))) {
    if ("" === n) throw new q(U.INVALID_ARGUMENT, "Invalid query. When querying with FieldPath.documentId(), you must provide a valid document ID, but it was an empty string.");
    if (!ge(e) && -1 !== n.indexOf("/")) throw new q(U.INVALID_ARGUMENT, "Invalid query. When querying a collection by FieldPath.documentId(), you must provide a plain document ID, but '".concat(n, "' contains a '/' character."));

    var _s61 = e.path.child(ct.fromString(n));

    if (!Rt.isDocumentKey(_s61)) throw new q(U.INVALID_ARGUMENT, "Invalid query. When querying a collection group by FieldPath.documentId(), the value provided must result in a valid document path, but '".concat(_s61, "' is not because it has an odd number of segments (").concat(_s61.length, ")."));
    return Nt(t, new Rt(_s61));
  }

  if (n instanceof Ec) return Nt(t, n._key);
  throw new q(U.INVALID_ARGUMENT, "Invalid query. When querying with FieldPath.documentId(), you must provide a valid string or a DocumentReference, but it was: ".concat(wc(n), "."));
}
/**
 * Validates that the value passed into a disjunctive filter satisfies all
 * array requirements.
 */


function Xu(t, e) {
  if (!Array.isArray(t) || 0 === t.length) throw new q(U.INVALID_ARGUMENT, "Invalid Query. A non-empty array is required for '".concat(e.toString(), "' filters."));
  if (t.length > 10) throw new q(U.INVALID_ARGUMENT, "Invalid Query. '".concat(e.toString(), "' filters support a maximum of 10 elements in the value array."));
}

function Zu(t, e, n) {
  if (!n.isEqual(e)) throw new q(U.INVALID_ARGUMENT, "Invalid query. You have a where filter with an inequality (<, <=, !=, not-in, >, or >=) on field '".concat(e.toString(), "' and so you must also use '").concat(e.toString(), "' as your first argument to orderBy(), but your first orderBy() is on field '").concat(n.toString(), "' instead."));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Converts Firestore's internal types to the JavaScript types that we expose
 * to the user.
 *
 * @internal
 */


var th = /*#__PURE__*/function () {
  function th() {
    _classCallCheck(this, th);
  }

  _createClass(th, [{
    key: "convertValue",
    value: function convertValue(t) {
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "none";

      switch (bt(t)) {
        case 0
        /* NullValue */
        :
          return null;

        case 1
        /* BooleanValue */
        :
          return t.booleanValue;

        case 2
        /* NumberValue */
        :
          return mt(t.integerValue || t.doubleValue);

        case 3
        /* TimestampValue */
        :
          return this.convertTimestamp(t.timestampValue);

        case 4
        /* ServerTimestampValue */
        :
          return this.convertServerTimestamp(t, e);

        case 5
        /* StringValue */
        :
          return t.stringValue;

        case 6
        /* BlobValue */
        :
          return this.convertBytes(gt(t.bytesValue));

        case 7
        /* RefValue */
        :
          return this.convertReference(t.referenceValue);

        case 8
        /* GeoPointValue */
        :
          return this.convertGeoPoint(t.geoPointValue);

        case 9
        /* ArrayValue */
        :
          return this.convertArray(t.arrayValue, e);

        case 10
        /* ObjectValue */
        :
          return this.convertObject(t.mapValue, e);

        default:
          throw F();
      }
    }
  }, {
    key: "convertObject",
    value: function convertObject(t, e) {
      var _this174 = this;

      var n = {};
      return rt(t.fields, function (t, s) {
        n[t] = _this174.convertValue(s, e);
      }), n;
    }
  }, {
    key: "convertGeoPoint",
    value: function convertGeoPoint(t) {
      return new Xc(mt(t.latitude), mt(t.longitude));
    }
  }, {
    key: "convertArray",
    value: function convertArray(t, e) {
      var _this175 = this;

      return (t.values || []).map(function (t) {
        return _this175.convertValue(t, e);
      });
    }
  }, {
    key: "convertServerTimestamp",
    value: function convertServerTimestamp(t, e) {
      switch (e) {
        case "previous":
          var _n74 = pt(t);

          return null == _n74 ? null : this.convertValue(_n74, e);

        case "estimate":
          return this.convertTimestamp(Et(t));

        default:
          return null;
      }
    }
  }, {
    key: "convertTimestamp",
    value: function convertTimestamp(t) {
      var e = _t(t);

      return new nt(e.seconds, e.nanos);
    }
  }, {
    key: "convertDocumentKey",
    value: function convertDocumentKey(t, e) {
      var n = ct.fromString(t);
      M(ys(n));
      var s = new cc(n.get(1), n.get(3)),
          i = new Rt(n.popFirst(5));
      return s.isEqual(e) || // TODO(b/64130202): Somehow support foreign references.
      k("Document ".concat(i, " contains a document reference within a different database (").concat(s.projectId, "/").concat(s.database, ") which is not supported. It will be treated as a reference in the current database (").concat(e.projectId, "/").concat(e.database, ") instead.")), i;
    }
  }]);

  return th;
}();
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Converts custom model object of type T into `DocumentData` by applying the
 * converter if it exists.
 *
 * This function is used when converting user objects to `DocumentData`
 * because we want to provide the user with a more specific error message if
 * their `set()` or fails due to invalid data originating from a `toFirestore()`
 * call.
 */


exports.AbstractUserDataWriter = th;

function eh(t, e, n) {
  var s; // Cast to `any` in order to satisfy the union type constraint on
  // toFirestore().
  // eslint-disable-next-line @typescript-eslint/no-explicit-any

  return s = t ? n && (n.merge || n.mergeFields) ? t.toFirestore(e, n) : t.toFirestore(e) : e, s;
}

var nh = /*#__PURE__*/function (_th) {
  _inherits(nh, _th);

  var _super46 = _createSuper(nh);

  function nh(t) {
    var _this176;

    _classCallCheck(this, nh);

    _this176 = _super46.call(this), _this176.firestore = t;
    return _this176;
  }

  _createClass(nh, [{
    key: "convertBytes",
    value: function convertBytes(t) {
      return new Jc(t);
    }
  }, {
    key: "convertReference",
    value: function convertReference(t) {
      var e = this.convertDocumentKey(t, this.firestore._databaseId);
      return new Ec(this.firestore,
      /* converter= */
      null, e);
    }
  }]);

  return nh;
}(th);
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A write batch, used to perform multiple writes as a single atomic unit.
 *
 * A `WriteBatch` object can be acquired by calling {@link writeBatch}. It
 * provides methods for adding writes to the write batch. None of the writes
 * will be committed (or visible locally) until {@link WriteBatch.commit} is
 * called.
 */


var sh = /*#__PURE__*/function () {
  /** @hideconstructor */
  function sh(t, e) {
    _classCallCheck(this, sh);

    this._firestore = t, this._commitHandler = e, this._mutations = [], this._committed = !1, this._dataReader = ru(t);
  }

  _createClass(sh, [{
    key: "set",
    value: function set(t, e, n) {
      this._verifyNotCommitted();

      var s = ih(t, this._firestore),
          i = eh(s.converter, e, n),
          r = ou(this._dataReader, "WriteBatch.set", s._key, i, null !== s.converter, n);
      return this._mutations.push(r.toMutation(s._key, Qe.none())), this;
    }
  }, {
    key: "update",
    value: function update(t, e, n) {
      this._verifyNotCommitted();

      var i = ih(t, this._firestore); // For Compat types, we have to "extract" the underlying types before
      // performing validation.

      var r;

      for (var _len14 = arguments.length, s = new Array(_len14 > 3 ? _len14 - 3 : 0), _key14 = 3; _key14 < _len14; _key14++) {
        s[_key14 - 3] = arguments[_key14];
      }

      return r = "string" == typeof (e = (0, _util.getModularInstance)(e)) || e instanceof zc ? wu(this._dataReader, "WriteBatch.update", i._key, e, n, s) : du(this._dataReader, "WriteBatch.update", i._key, e), this._mutations.push(r.toMutation(i._key, Qe.exists(!0))), this;
    }
    /**
     * Deletes the document referred to by the provided {@link DocumentReference}.
     *
     * @param documentRef - A reference to the document to be deleted.
     * @returns This `WriteBatch` instance. Used for chaining method calls.
     */

  }, {
    key: "delete",
    value: function _delete(t) {
      this._verifyNotCommitted();

      var e = ih(t, this._firestore);
      return this._mutations = this._mutations.concat(new rn(e._key, Qe.none())), this;
    }
    /**
     * Commits all of the writes in this write batch as a single atomic unit.
     *
     * The result of these writes will only be reflected in document reads that
     * occur after the returned promise resolves. If the client is offline, the
     * write fails. If you would like to see local modifications or buffer writes
     * until the client is online, use the full Firestore SDK.
     *
     * @returns A `Promise` resolved once all of the writes in the batch have been
     * successfully written to the backend as an atomic unit (note that it won't
     * resolve while you're offline).
     */

  }, {
    key: "commit",
    value: function commit() {
      return this._verifyNotCommitted(), this._committed = !0, this._mutations.length > 0 ? this._commitHandler(this._mutations) : Promise.resolve();
    }
  }, {
    key: "_verifyNotCommitted",
    value: function _verifyNotCommitted() {
      if (this._committed) throw new q(U.FAILED_PRECONDITION, "A write batch can no longer be used after commit() has been called.");
    }
  }]);

  return sh;
}();

exports.WriteBatch = sh;

function ih(t, e) {
  if ((t = (0, _util.getModularInstance)(t)).firestore !== e) throw new q(U.INVALID_ARGUMENT, "Provided document reference is from a different Firestore instance.");
  return t;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// TODO(mrschmidt) Consider using `BaseTransaction` as the base class in the
// legacy SDK.

/**
 * A reference to a transaction.
 *
 * The `Transaction` object passed to a transaction's `updateFunction` provides
 * the methods to read and write data within the transaction context. See
 * {@link runTransaction}.
 */

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Reads the document referred to by this `DocumentReference`.
 *
 * Note: `getDoc()` attempts to provide up-to-date data when possible by waiting
 * for data from the server, but it may return cached data or fail if you are
 * offline and the server cannot be reached. To specify this behavior, invoke
 * {@link getDocFromCache} or {@link getDocFromServer}.
 *
 * @param reference - The reference of the document to fetch.
 * @returns A Promise resolved with a `DocumentSnapshot` containing the
 * current document contents.
 */


function rh(t) {
  t = _c(t, Ec);

  var e = _c(t.firestore, Nc);

  return tc($c(e), t._key).then(function (n) {
    return ph(e, t, n);
  });
}

var oh = /*#__PURE__*/function (_th2) {
  _inherits(oh, _th2);

  var _super47 = _createSuper(oh);

  function oh(t) {
    var _this177;

    _classCallCheck(this, oh);

    _this177 = _super47.call(this), _this177.firestore = t;
    return _this177;
  }

  _createClass(oh, [{
    key: "convertBytes",
    value: function convertBytes(t) {
      return new Jc(t);
    }
  }, {
    key: "convertReference",
    value: function convertReference(t) {
      var e = this.convertDocumentKey(t, this.firestore._databaseId);
      return new Ec(this.firestore,
      /* converter= */
      null, e);
    }
  }]);

  return oh;
}(th);
/**
 * Reads the document referred to by this `DocumentReference` from cache.
 * Returns an error if the document is not currently cached.
 *
 * @returns A `Promise` resolved with a `DocumentSnapshot` containing the
 * current document contents.
 */


function ah(t) {
  t = _c(t, Ec);

  var e = _c(t.firestore, Nc),
      n = $c(e),
      s = new oh(e);

  return Za(n, t._key).then(function (n) {
    return new Su(e, s, t._key, n, new Vu(null !== n && n.hasLocalMutations,
    /* fromCache= */
    !0), t.converter);
  });
}
/**
 * Reads the document referred to by this `DocumentReference` from the server.
 * Returns an error if the network is not available.
 *
 * @returns A `Promise` resolved with a `DocumentSnapshot` containing the
 * current document contents.
 */


function ch(t) {
  t = _c(t, Ec);

  var e = _c(t.firestore, Nc);

  return tc($c(e), t._key, {
    source: "server"
  }).then(function (n) {
    return ph(e, t, n);
  });
}
/**
 * Executes the query and returns the results as a `QuerySnapshot`.
 *
 * Note: `getDocs()` attempts to provide up-to-date data when possible by
 * waiting for data from the server, but it may return cached data or fail if
 * you are offline and the server cannot be reached. To specify this behavior,
 * invoke {@link getDocsFromCache} or {@link getDocsFromServer}.
 *
 * @returns A `Promise` that will be resolved with the results of the query.
 */


function uh(t) {
  t = _c(t, Tc);

  var e = _c(t.firestore, Nc),
      n = $c(e),
      s = new oh(e);

  return ku(t._query), nc(n, t._query).then(function (n) {
    return new Cu(e, s, t, n);
  });
}
/**
 * Executes the query and returns the results as a `QuerySnapshot` from cache.
 * Returns an error if the document is not currently cached.
 *
 * @returns A `Promise` that will be resolved with the results of the query.
 */


function hh(t) {
  t = _c(t, Tc);

  var e = _c(t.firestore, Nc),
      n = $c(e),
      s = new oh(e);

  return ec(n, t._query).then(function (n) {
    return new Cu(e, s, t, n);
  });
}
/**
 * Executes the query and returns the results as a `QuerySnapshot` from the
 * server. Returns an error if the network is not available.
 *
 * @returns A `Promise` that will be resolved with the results of the query.
 */


function lh(t) {
  t = _c(t, Tc);

  var e = _c(t.firestore, Nc),
      n = $c(e),
      s = new oh(e);

  return nc(n, t._query, {
    source: "server"
  }).then(function (n) {
    return new Cu(e, s, t, n);
  });
}

function fh(t, e, n) {
  t = _c(t, Ec);

  var s = _c(t.firestore, Nc),
      i = eh(t.converter, e, n);

  return yh(s, [ou(ru(s), "setDoc", t._key, i, null !== t.converter, n).toMutation(t._key, Qe.none())]);
}

function dh(t, e, n) {
  t = _c(t, Ec);

  var i = _c(t.firestore, Nc),
      r = ru(i);

  var o;

  for (var _len15 = arguments.length, s = new Array(_len15 > 3 ? _len15 - 3 : 0), _key15 = 3; _key15 < _len15; _key15++) {
    s[_key15 - 3] = arguments[_key15];
  }

  o = "string" == typeof ( // For Compat types, we have to "extract" the underlying types before
  // performing validation.
  e = (0, _util.getModularInstance)(e)) || e instanceof zc ? wu(r, "updateDoc", t._key, e, n, s) : du(r, "updateDoc", t._key, e);
  return yh(i, [o.toMutation(t._key, Qe.exists(!0))]);
}
/**
 * Deletes the document referred to by the specified `DocumentReference`.
 *
 * @param reference - A reference to the document to delete.
 * @returns A Promise resolved once the document has been successfully
 * deleted from the backend (note that it won't resolve while you're offline).
 */


function wh(t) {
  return yh(_c(t.firestore, Nc), [new rn(t._key, Qe.none())]);
}
/**
 * Add a new document to specified `CollectionReference` with the given data,
 * assigning it a document ID automatically.
 *
 * @param reference - A reference to the collection to add this document to.
 * @param data - An Object containing the data for the new document.
 * @returns A `Promise` resolved with a `DocumentReference` pointing to the
 * newly created document after it has been written to the backend (Note that it
 * won't resolve while you're offline).
 */


function _h(t, e) {
  var n = _c(t.firestore, Nc),
      s = bc(t),
      i = eh(t.converter, e);

  return yh(n, [ou(ru(t.firestore), "addDoc", s._key, i, null !== t.converter, {}).toMutation(s._key, Qe.exists(!1))]).then(function () {
    return s;
  });
}

function mh(t) {
  for (var _len16 = arguments.length, e = new Array(_len16 > 1 ? _len16 - 1 : 0), _key16 = 1; _key16 < _len16; _key16++) {
    e[_key16 - 1] = arguments[_key16];
  }

  var n, s, i;
  t = (0, _util.getModularInstance)(t);
  var r = {
    includeMetadataChanges: !1
  },
      o = 0;
  "object" != _typeof(e[o]) || Sc(e[o]) || (r = e[o], o++);
  var a = {
    includeMetadataChanges: r.includeMetadataChanges
  };

  if (Sc(e[o])) {
    var _t89 = e[o];
    e[o] = null === (n = _t89.next) || void 0 === n ? void 0 : n.bind(_t89), e[o + 1] = null === (s = _t89.error) || void 0 === s ? void 0 : s.bind(_t89), e[o + 2] = null === (i = _t89.complete) || void 0 === i ? void 0 : i.bind(_t89);
  }

  var c, u, h;
  if (t instanceof Ec) u = _c(t.firestore, Nc), h = fe(t._key.path), c = {
    next: function next(n) {
      e[o] && e[o](ph(u, t, n));
    },
    error: e[o + 1],
    complete: e[o + 2]
  };else {
    var _n75 = _c(t, Tc);

    u = _c(_n75.firestore, Nc), h = _n75._query;

    var _s62 = new oh(u);

    c = {
      next: function next(t) {
        e[o] && e[o](new Cu(u, _s62, _n75, t));
      },
      error: e[o + 1],
      complete: e[o + 2]
    }, ku(t._query);
  }
  return function (t, e, n, s) {
    var i = new Fa(s),
        r = new Ko(e, i, n);
    return t.asyncQueue.enqueueAndForget( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee67() {
      return regeneratorRuntime.wrap(function _callee67$(_context67) {
        while (1) {
          switch (_context67.prev = _context67.next) {
            case 0:
              _context67.t0 = Mo;
              _context67.next = 3;
              return Ja(t);

            case 3:
              _context67.t1 = _context67.sent;
              _context67.t2 = r;
              return _context67.abrupt("return", (0, _context67.t0)(_context67.t1, _context67.t2));

            case 6:
            case "end":
              return _context67.stop();
          }
        }
      }, _callee67);
    }))), function () {
      i.Xo(), t.asyncQueue.enqueueAndForget( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee68() {
        return regeneratorRuntime.wrap(function _callee68$(_context68) {
          while (1) {
            switch (_context68.prev = _context68.next) {
              case 0:
                _context68.t0 = Lo;
                _context68.next = 3;
                return Ja(t);

              case 3:
                _context68.t1 = _context68.sent;
                _context68.t2 = r;
                return _context68.abrupt("return", (0, _context68.t0)(_context68.t1, _context68.t2));

              case 6:
              case "end":
                return _context68.stop();
            }
          }
        }, _callee68);
      })));
    };
  }($c(u), h, a, c);
}

function gh(t, e) {
  return sc($c(t = _c(t, Nc)), Sc(e) ? e : {
    next: e
  });
}
/**
 * Locally writes `mutations` on the async queue.
 * @internal
 */


function yh(t, e) {
  return function (t, e) {
    var n = new K();
    return t.asyncQueue.enqueueAndForget( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee69() {
      return regeneratorRuntime.wrap(function _callee69$(_context69) {
        while (1) {
          switch (_context69.prev = _context69.next) {
            case 0:
              _context69.t0 = sa;
              _context69.next = 3;
              return Ha(t);

            case 3:
              _context69.t1 = _context69.sent;
              _context69.t2 = e;
              _context69.t3 = n;
              return _context69.abrupt("return", (0, _context69.t0)(_context69.t1, _context69.t2, _context69.t3));

            case 7:
            case "end":
              return _context69.stop();
          }
        }
      }, _callee69);
    }))), n.promise;
  }($c(t), e);
}
/**
 * Converts a {@link ViewSnapshot} that contains the single document specified by `ref`
 * to a {@link DocumentSnapshot}.
 */


function ph(t, e, n) {
  var s = n.docs.get(e._key),
      i = new oh(t);
  return new Su(t, i, e._key, s, new Vu(n.hasPendingWrites, n.fromCache), e.converter);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A reference to a transaction.
 *
 * The `Transaction` object passed to a transaction's `updateFunction` provides
 * the methods to read and write data within the transaction context. See
 * {@link runTransaction}.
 */


var Eh = /*#__PURE__*/function (_ref57) {
  _inherits(Eh, _ref57);

  var _super48 = _createSuper(Eh);

  // This class implements the same logic as the Transaction API in the Lite SDK
  // but is subclassed in order to return its own DocumentSnapshot types.

  /** @hideconstructor */
  function Eh(t, e) {
    var _this178;

    _classCallCheck(this, Eh);

    _this178 = _super48.call(this, t, e), _this178._firestore = t;
    return _this178;
  }
  /**
   * Reads the document referenced by the provided {@link DocumentReference}.
   *
   * @param documentRef - A reference to the document to be read.
   * @returns A `DocumentSnapshot` with the read data.
   */


  _createClass(Eh, [{
    key: "get",
    value: function get(t) {
      var _this179 = this;

      var e = ih(t, this._firestore),
          n = new oh(this._firestore);
      return _get(_getPrototypeOf(Eh.prototype), "get", this).call(this, t).then(function (t) {
        return new Su(_this179._firestore, n, e._key, t._document, new Vu(
        /* hasPendingWrites= */
        !1,
        /* fromCache= */
        !1), e.converter);
      });
    }
  }]);

  return Eh;
}( /*#__PURE__*/function () {
  /** @hideconstructor */
  function _class5(t, e) {
    _classCallCheck(this, _class5);

    this._firestore = t, this._transaction = e, this._dataReader = ru(t);
  }
  /**
   * Reads the document referenced by the provided {@link DocumentReference}.
   *
   * @param documentRef - A reference to the document to be read.
   * @returns A `DocumentSnapshot` with the read data.
   */


  _createClass(_class5, [{
    key: "get",
    value:
    /**
     * Reads the document referenced by the provided {@link DocumentReference}.
     *
     * @param documentRef - A reference to the document to be read.
     * @returns A `DocumentSnapshot` with the read data.
     */
    function get(t) {
      var _this180 = this;

      var e = ih(t, this._firestore),
          n = new nh(this._firestore);
      return this._transaction.lookup([e._key]).then(function (t) {
        if (!t || 1 !== t.length) return F();
        var s = t[0];
        if (s.isFoundDocument()) return new bu(_this180._firestore, n, s.key, s, e.converter);
        if (s.isNoDocument()) return new bu(_this180._firestore, n, e._key, null, e.converter);
        throw F();
      });
    }
  }, {
    key: "set",
    value: function set(t, e, n) {
      var s = ih(t, this._firestore),
          i = eh(s.converter, e, n),
          r = ou(this._dataReader, "Transaction.set", s._key, i, null !== s.converter, n);
      return this._transaction.set(s._key, r), this;
    }
  }, {
    key: "update",
    value: function update(t, e, n) {
      var i = ih(t, this._firestore); // For Compat types, we have to "extract" the underlying types before
      // performing validation.

      // For Compat types, we have to "extract" the underlying types before
      // performing validation.
      var r;

      for (var _len17 = arguments.length, s = new Array(_len17 > 3 ? _len17 - 3 : 0), _key17 = 3; _key17 < _len17; _key17++) {
        s[_key17 - 3] = arguments[_key17];
      }

      return r = "string" == typeof (e = (0, _util.getModularInstance)(e)) || e instanceof zc ? wu(this._dataReader, "Transaction.update", i._key, e, n, s) : du(this._dataReader, "Transaction.update", i._key, e), this._transaction.update(i._key, r), this;
    }
    /**
     * Deletes the document referred to by the provided {@link DocumentReference}.
     *
     * @param documentRef - A reference to the document to be deleted.
     * @returns This `Transaction` instance. Used for chaining method calls.
     */

  }, {
    key: "delete",
    value:
    /**
     * Deletes the document referred to by the provided {@link DocumentReference}.
     *
     * @param documentRef - A reference to the document to be deleted.
     * @returns This `Transaction` instance. Used for chaining method calls.
     */
    function _delete(t) {
      var e = ih(t, this._firestore);
      return this._transaction.delete(e._key), this;
    }
  }]);

  return _class5;
}());
/**
 * Executes the given `updateFunction` and then attempts to commit the changes
 * applied within the transaction. If any document read within the transaction
 * has changed, Cloud Firestore retries the `updateFunction`. If it fails to
 * commit after 5 attempts, the transaction fails.
 *
 * The maximum number of writes allowed in a single transaction is 500.
 *
 * @param firestore - A reference to the Firestore database to run this
 * transaction against.
 * @param updateFunction - The function to execute within the transaction
 * context.
 * @returns If the transaction completed successfully or was explicitly aborted
 * (the `updateFunction` returned a failed promise), the promise returned by the
 * `updateFunction `is returned here. Otherwise, if the transaction failed, a
 * rejected promise with the corresponding failure error is returned.
 */


exports.Transaction = Eh;

function Th(t, e) {
  return ic($c(t), function (n) {
    return e(new Eh(t, n));
  });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns a sentinel for use with {@link @firebase/firestore/lite#(updateDoc:1)} or
 * {@link @firebase/firestore/lite#(setDoc:1)} with `{merge: true}` to mark a field for deletion.
 */


function Ih() {
  return new au("deleteField");
}
/**
 * Returns a sentinel used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link @firebase/firestore/lite#(updateDoc:1)} to
 * include a server-generated timestamp in the written data.
 */


function Ah() {
  return new uu("serverTimestamp");
}
/**
 * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link
 * @firebase/firestore/lite#(updateDoc:1)} that tells the server to union the given elements with any array
 * value that already exists on the server. Each specified element that doesn't
 * already exist in the array will be added to the end. If the field being
 * modified is not already an array it will be overwritten with an array
 * containing exactly the specified elements.
 *
 * @param elements - The elements to union into the array.
 * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or
 * `updateDoc()`.
 */


function Rh() {
  for (var _len18 = arguments.length, t = new Array(_len18), _key18 = 0; _key18 < _len18; _key18++) {
    t[_key18] = arguments[_key18];
  }

  // NOTE: We don't actually parse the data until it's used in set() or
  // update() since we'd need the Firestore instance to do this.
  return new hu("arrayUnion", t);
}
/**
 * Returns a special value that can be used with {@link (setDoc:1)} or {@link
 * updateDoc:1} that tells the server to remove the given elements from any
 * array value that already exists on the server. All instances of each element
 * specified will be removed from the array. If the field being modified is not
 * already an array it will be overwritten with an empty array.
 *
 * @param elements - The elements to remove from the array.
 * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or
 * `updateDoc()`
 */


function bh() {
  for (var _len19 = arguments.length, t = new Array(_len19), _key19 = 0; _key19 < _len19; _key19++) {
    t[_key19] = arguments[_key19];
  }

  // NOTE: We don't actually parse the data until it's used in set() or
  // update() since we'd need the Firestore instance to do this.
  return new lu("arrayRemove", t);
}
/**
 * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link
 * @firebase/firestore/lite#(updateDoc:1)} that tells the server to increment the field's current value by
 * the given value.
 *
 * If either the operand or the current field value uses floating point
 * precision, all arithmetic follows IEEE 754 semantics. If both values are
 * integers, values outside of JavaScript's safe number range
 * (`Number.MIN_SAFE_INTEGER` to `Number.MAX_SAFE_INTEGER`) are also subject to
 * precision loss. Furthermore, once processed by the Firestore backend, all
 * integer operations are capped between -2^63 and 2^63-1.
 *
 * If the current field value is not of type `number`, or if the field does not
 * yet exist, the transformation sets the field to the given value.
 *
 * @param n - The value to increment by.
 * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or
 * `updateDoc()`
 */


function Ph(t) {
  return new fu("increment", t);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Creates a write batch, used for performing multiple writes as a single
 * atomic operation. The maximum number of writes allowed in a single {@link WriteBatch}
 * is 500.
 *
 * Unlike transactions, write batches are persisted offline and therefore are
 * preferable when you don't need to condition your writes on read data.
 *
 * @returns A {@link WriteBatch} that can be used to atomically execute multiple
 * writes.
 */


function vh(t) {
  return $c(t = _c(t, Nc)), new sh(t, function (e) {
    return yh(t, e);
  });
}
/**
 * Cloud Firestore
 *
 * @packageDocumentation
 */


var Vh;
!function (t) {
  S = t;
}(_app.SDK_VERSION), (0, _app._registerComponent)(new _component.Component("firestore", function (t, _ref58) {
  var e = _ref58.options;
  var n = t.getProvider("app").getImmediate(),
      s = new Nc(n, new G(t.getProvider("auth-internal")));
  return e = Object.assign({
    useFetchStreams: !0
  }, e), s._setSettings(e), s;
}, "PUBLIC"
/* PUBLIC */
)), (0, _app.registerVersion)("@firebase/firestore", "3.0.2", Vh);
},{"@firebase/app":"node_modules/@firebase/app/dist/index.esm2017.js","@firebase/component":"node_modules/@firebase/component/dist/index.esm.js","@firebase/logger":"node_modules/@firebase/logger/dist/index.esm.js","@firebase/util":"node_modules/@firebase/util/dist/index.esm.js","@firebase/webchannel-wrapper":"node_modules/@firebase/webchannel-wrapper/dist/index.esm.js","process":"node_modules/process/browser.js"}],"node_modules/@firebase/firestore-compat/dist/index.esm2017.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.registerFirestore = registerFirestore;

var _appCompat = _interopRequireDefault(require("@firebase/app-compat"));

var _firestore2 = require("@firebase/firestore");

var _util = require("@firebase/util");

var _component = require("@firebase/component");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const name = "@firebase/firestore-compat";
const version = "0.1.2";
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function validateSetOptions(methodName, options) {
  if (options === undefined) {
    return {
      merge: false
    };
  }

  if (options.mergeFields !== undefined && options.merge !== undefined) {
    throw new _firestore2.FirestoreError('invalid-argument', `Invalid options passed to function ${methodName}(): You cannot ` + 'specify both "merge" and "mergeFields".');
  }

  return options;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Helper function to assert Uint8Array is available at runtime. */


function assertUint8ArrayAvailable() {
  if (typeof Uint8Array === 'undefined') {
    throw new _firestore2.FirestoreError('unimplemented', 'Uint8Arrays are not available in this environment.');
  }
}
/** Helper function to assert Base64 functions are available at runtime. */


function assertBase64Available() {
  if (!(0, _firestore2._isBase64Available)()) {
    throw new _firestore2.FirestoreError('unimplemented', 'Blobs are unavailable in Firestore in this environment.');
  }
}
/** Immutable class holding a blob (binary data) */


class Blob {
  constructor(_delegate) {
    this._delegate = _delegate;
  }

  static fromBase64String(base64) {
    assertBase64Available();
    return new Blob(_firestore2.Bytes.fromBase64String(base64));
  }

  static fromUint8Array(array) {
    assertUint8ArrayAvailable();
    return new Blob(_firestore2.Bytes.fromUint8Array(array));
  }

  toBase64() {
    assertBase64Available();
    return this._delegate.toBase64();
  }

  toUint8Array() {
    assertUint8ArrayAvailable();
    return this._delegate.toUint8Array();
  }

  isEqual(other) {
    return this._delegate.isEqual(other._delegate);
  }

  toString() {
    return 'Blob(base64: ' + this.toBase64() + ')';
  }

}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function isPartialObserver(obj) {
  return implementsAnyMethods(obj, ['next', 'error', 'complete']);
}
/**
 * Returns true if obj is an object and contains at least one of the specified
 * methods.
 */


function implementsAnyMethods(obj, methods) {
  if (typeof obj !== 'object' || obj === null) {
    return false;
  }

  const object = obj;

  for (const method of methods) {
    if (method in object && typeof object[method] === 'function') {
      return true;
    }
  }

  return false;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The persistence provider included with the full Firestore SDK.
 */


class IndexedDbPersistenceProvider {
  enableIndexedDbPersistence(firestore, forceOwnership) {
    return (0, _firestore2.enableIndexedDbPersistence)(firestore._delegate, {
      forceOwnership
    });
  }

  enableMultiTabIndexedDbPersistence(firestore) {
    return (0, _firestore2.enableMultiTabIndexedDbPersistence)(firestore._delegate);
  }

  clearIndexedDbPersistence(firestore) {
    return (0, _firestore2.clearIndexedDbPersistence)(firestore._delegate);
  }

}
/**
 * Compat class for Firestore. Exposes Firestore Legacy API, but delegates
 * to the functional API of firestore-exp.
 */


class Firestore {
  constructor(databaseIdOrApp, _delegate, _persistenceProvider) {
    this._delegate = _delegate;
    this._persistenceProvider = _persistenceProvider;
    this.INTERNAL = {
      delete: () => this.terminate()
    };

    if (!(databaseIdOrApp instanceof _firestore2._DatabaseId)) {
      this._appCompat = databaseIdOrApp;
    }
  }

  get _databaseId() {
    return this._delegate._databaseId;
  }

  settings(settingsLiteral) {
    const currentSettings = this._delegate._getSettings();

    if (!settingsLiteral.merge && currentSettings.host !== settingsLiteral.host) {
      (0, _firestore2._logWarn)('You are overriding the original host. If you did not intend ' + 'to override your settings, use {merge: true}.');
    }

    if (settingsLiteral.merge) {
      settingsLiteral = Object.assign(Object.assign({}, currentSettings), settingsLiteral); // Remove the property from the settings once the merge is completed

      delete settingsLiteral.merge;
    }

    this._delegate._setSettings(settingsLiteral);
  }

  useEmulator(host, port, options = {}) {
    (0, _firestore2.connectFirestoreEmulator)(this._delegate, host, port, options);
  }

  enableNetwork() {
    return (0, _firestore2.enableNetwork)(this._delegate);
  }

  disableNetwork() {
    return (0, _firestore2.disableNetwork)(this._delegate);
  }

  enablePersistence(settings) {
    let synchronizeTabs = false;
    let experimentalForceOwningTab = false;

    if (settings) {
      synchronizeTabs = !!settings.synchronizeTabs;
      experimentalForceOwningTab = !!settings.experimentalForceOwningTab;
      (0, _firestore2._validateIsNotUsedTogether)('synchronizeTabs', synchronizeTabs, 'experimentalForceOwningTab', experimentalForceOwningTab);
    }

    return synchronizeTabs ? this._persistenceProvider.enableMultiTabIndexedDbPersistence(this) : this._persistenceProvider.enableIndexedDbPersistence(this, experimentalForceOwningTab);
  }

  clearPersistence() {
    return this._persistenceProvider.clearIndexedDbPersistence(this);
  }

  terminate() {
    if (this._appCompat) {
      this._appCompat._removeServiceInstance('firestore-compat');

      this._appCompat._removeServiceInstance('firestore');
    }

    return this._delegate._delete();
  }

  waitForPendingWrites() {
    return (0, _firestore2.waitForPendingWrites)(this._delegate);
  }

  onSnapshotsInSync(arg) {
    return (0, _firestore2.onSnapshotsInSync)(this._delegate, arg);
  }

  get app() {
    if (!this._appCompat) {
      throw new _firestore2.FirestoreError('failed-precondition', "Firestore was not initialized using the Firebase SDK. 'app' is " + 'not available');
    }

    return this._appCompat;
  }

  collection(pathString) {
    try {
      return new CollectionReference(this, (0, _firestore2.collection)(this._delegate, pathString));
    } catch (e) {
      throw replaceFunctionName(e, 'collection()', 'Firestore.collection()');
    }
  }

  doc(pathString) {
    try {
      return new DocumentReference(this, (0, _firestore2.doc)(this._delegate, pathString));
    } catch (e) {
      throw replaceFunctionName(e, 'doc()', 'Firestore.doc()');
    }
  }

  collectionGroup(collectionId) {
    try {
      return new Query(this, (0, _firestore2.collectionGroup)(this._delegate, collectionId));
    } catch (e) {
      throw replaceFunctionName(e, 'collectionGroup()', 'Firestore.collectionGroup()');
    }
  }

  runTransaction(updateFunction) {
    return (0, _firestore2.runTransaction)(this._delegate, transaction => updateFunction(new Transaction(this, transaction)));
  }

  batch() {
    (0, _firestore2.ensureFirestoreConfigured)(this._delegate);
    return new WriteBatch(new _firestore2.WriteBatch(this._delegate, mutations => (0, _firestore2.executeWrite)(this._delegate, mutations)));
  }

  loadBundle(bundleData) {
    return (0, _firestore2.loadBundle)(this._delegate, bundleData);
  }

  namedQuery(name) {
    return (0, _firestore2.namedQuery)(this._delegate, name).then(expQuery => {
      if (!expQuery) {
        return null;
      }

      return new Query(this, // We can pass `expQuery` here directly since named queries don't have a UserDataConverter.
      // Otherwise, we would have to create a new ExpQuery and pass the old UserDataConverter.
      expQuery);
    });
  }

}

class UserDataWriter extends _firestore2.AbstractUserDataWriter {
  constructor(firestore) {
    super();
    this.firestore = firestore;
  }

  convertBytes(bytes) {
    return new Blob(new _firestore2.Bytes(bytes));
  }

  convertReference(name) {
    const key = this.convertDocumentKey(name, this.firestore._databaseId);
    return DocumentReference.forKey(key, this.firestore,
    /* converter= */
    null);
  }

}

function setLogLevel(level) {
  (0, _firestore2.setLogLevel)(level);
}
/**
 * A reference to a transaction.
 */


class Transaction {
  constructor(_firestore, _delegate) {
    this._firestore = _firestore;
    this._delegate = _delegate;
    this._userDataWriter = new UserDataWriter(_firestore);
  }

  get(documentRef) {
    const ref = castReference(documentRef);
    return this._delegate.get(ref).then(result => new DocumentSnapshot(this._firestore, new _firestore2.DocumentSnapshot(this._firestore._delegate, this._userDataWriter, result._key, result._document, result.metadata, ref.converter)));
  }

  set(documentRef, data, options) {
    const ref = castReference(documentRef);

    if (options) {
      validateSetOptions('Transaction.set', options);

      this._delegate.set(ref, data, options);
    } else {
      this._delegate.set(ref, data);
    }

    return this;
  }

  update(documentRef, dataOrField, value, ...moreFieldsAndValues) {
    const ref = castReference(documentRef);

    if (arguments.length === 2) {
      this._delegate.update(ref, dataOrField);
    } else {
      this._delegate.update(ref, dataOrField, value, ...moreFieldsAndValues);
    }

    return this;
  }

  delete(documentRef) {
    const ref = castReference(documentRef);

    this._delegate.delete(ref);

    return this;
  }

}

class WriteBatch {
  constructor(_delegate) {
    this._delegate = _delegate;
  }

  set(documentRef, data, options) {
    const ref = castReference(documentRef);

    if (options) {
      validateSetOptions('WriteBatch.set', options);

      this._delegate.set(ref, data, options);
    } else {
      this._delegate.set(ref, data);
    }

    return this;
  }

  update(documentRef, dataOrField, value, ...moreFieldsAndValues) {
    const ref = castReference(documentRef);

    if (arguments.length === 2) {
      this._delegate.update(ref, dataOrField);
    } else {
      this._delegate.update(ref, dataOrField, value, ...moreFieldsAndValues);
    }

    return this;
  }

  delete(documentRef) {
    const ref = castReference(documentRef);

    this._delegate.delete(ref);

    return this;
  }

  commit() {
    return this._delegate.commit();
  }

}
/**
 * Wraps a `PublicFirestoreDataConverter` translating the types from the
 * experimental SDK into corresponding types from the Classic SDK before passing
 * them to the wrapped converter.
 */


class FirestoreDataConverter {
  constructor(_firestore, _userDataWriter, _delegate) {
    this._firestore = _firestore;
    this._userDataWriter = _userDataWriter;
    this._delegate = _delegate;
  }

  fromFirestore(snapshot, options) {
    const expSnapshot = new _firestore2.QueryDocumentSnapshot(this._firestore._delegate, this._userDataWriter, snapshot._key, snapshot._document, snapshot.metadata,
    /* converter= */
    null);
    return this._delegate.fromFirestore(new QueryDocumentSnapshot(this._firestore, expSnapshot), options !== null && options !== void 0 ? options : {});
  }

  toFirestore(modelObject, options) {
    if (!options) {
      return this._delegate.toFirestore(modelObject);
    } else {
      return this._delegate.toFirestore(modelObject, options);
    }
  } // Use the same instance of `FirestoreDataConverter` for the given instances
  // of `Firestore` and `PublicFirestoreDataConverter` so that isEqual() will
  // compare equal for two objects created with the same converter instance.


  static getInstance(firestore, converter) {
    const converterMapByFirestore = FirestoreDataConverter.INSTANCES;
    let untypedConverterByConverter = converterMapByFirestore.get(firestore);

    if (!untypedConverterByConverter) {
      untypedConverterByConverter = new WeakMap();
      converterMapByFirestore.set(firestore, untypedConverterByConverter);
    }

    let instance = untypedConverterByConverter.get(converter);

    if (!instance) {
      instance = new FirestoreDataConverter(firestore, new UserDataWriter(firestore), converter);
      untypedConverterByConverter.set(converter, instance);
    }

    return instance;
  }

}

FirestoreDataConverter.INSTANCES = new WeakMap();
/**
 * A reference to a particular document in a collection in the database.
 */

class DocumentReference {
  constructor(firestore, _delegate) {
    this.firestore = firestore;
    this._delegate = _delegate;
    this._userDataWriter = new UserDataWriter(firestore);
  }

  static forPath(path, firestore, converter) {
    if (path.length % 2 !== 0) {
      throw new _firestore2.FirestoreError('invalid-argument', 'Invalid document reference. Document ' + 'references must have an even number of segments, but ' + `${path.canonicalString()} has ${path.length}`);
    }

    return new DocumentReference(firestore, new _firestore2.DocumentReference(firestore._delegate, converter, new _firestore2._DocumentKey(path)));
  }

  static forKey(key, firestore, converter) {
    return new DocumentReference(firestore, new _firestore2.DocumentReference(firestore._delegate, converter, key));
  }

  get id() {
    return this._delegate.id;
  }

  get parent() {
    return new CollectionReference(this.firestore, this._delegate.parent);
  }

  get path() {
    return this._delegate.path;
  }

  collection(pathString) {
    try {
      return new CollectionReference(this.firestore, (0, _firestore2.collection)(this._delegate, pathString));
    } catch (e) {
      throw replaceFunctionName(e, 'collection()', 'DocumentReference.collection()');
    }
  }

  isEqual(other) {
    other = (0, _util.getModularInstance)(other);

    if (!(other instanceof _firestore2.DocumentReference)) {
      return false;
    }

    return (0, _firestore2.refEqual)(this._delegate, other);
  }

  set(value, options) {
    options = validateSetOptions('DocumentReference.set', options);

    try {
      if (options) {
        return (0, _firestore2.setDoc)(this._delegate, value, options);
      } else {
        return (0, _firestore2.setDoc)(this._delegate, value);
      }
    } catch (e) {
      throw replaceFunctionName(e, 'setDoc()', 'DocumentReference.set()');
    }
  }

  update(fieldOrUpdateData, value, ...moreFieldsAndValues) {
    try {
      if (arguments.length === 1) {
        return (0, _firestore2.updateDoc)(this._delegate, fieldOrUpdateData);
      } else {
        return (0, _firestore2.updateDoc)(this._delegate, fieldOrUpdateData, value, ...moreFieldsAndValues);
      }
    } catch (e) {
      throw replaceFunctionName(e, 'updateDoc()', 'DocumentReference.update()');
    }
  }

  delete() {
    return (0, _firestore2.deleteDoc)(this._delegate);
  }

  onSnapshot(...args) {
    const options = extractSnapshotOptions(args);
    const observer = wrapObserver(args, result => new DocumentSnapshot(this.firestore, new _firestore2.DocumentSnapshot(this.firestore._delegate, this._userDataWriter, result._key, result._document, result.metadata, this._delegate.converter)));
    return (0, _firestore2.onSnapshot)(this._delegate, options, observer);
  }

  get(options) {
    let snap;

    if ((options === null || options === void 0 ? void 0 : options.source) === 'cache') {
      snap = (0, _firestore2.getDocFromCache)(this._delegate);
    } else if ((options === null || options === void 0 ? void 0 : options.source) === 'server') {
      snap = (0, _firestore2.getDocFromServer)(this._delegate);
    } else {
      snap = (0, _firestore2.getDoc)(this._delegate);
    }

    return snap.then(result => new DocumentSnapshot(this.firestore, new _firestore2.DocumentSnapshot(this.firestore._delegate, this._userDataWriter, result._key, result._document, result.metadata, this._delegate.converter)));
  }

  withConverter(converter) {
    return new DocumentReference(this.firestore, converter ? this._delegate.withConverter(FirestoreDataConverter.getInstance(this.firestore, converter)) : this._delegate.withConverter(null));
  }

}
/**
 * Replaces the function name in an error thrown by the firestore-exp API
 * with the function names used in the classic API.
 */


function replaceFunctionName(e, original, updated) {
  e.message = e.message.replace(original, updated);
  return e;
}
/**
 * Iterates the list of arguments from an `onSnapshot` call and returns the
 * first argument that may be an `SnapshotListenOptions` object. Returns an
 * empty object if none is found.
 */


function extractSnapshotOptions(args) {
  for (const arg of args) {
    if (typeof arg === 'object' && !isPartialObserver(arg)) {
      return arg;
    }
  }

  return {};
}
/**
 * Creates an observer that can be passed to the firestore-exp SDK. The
 * observer converts all observed values into the format expected by the classic
 * SDK.
 *
 * @param args - The list of arguments from an `onSnapshot` call.
 * @param wrapper - The function that converts the firestore-exp type into the
 * type used by this shim.
 */


function wrapObserver(args, wrapper) {
  var _a, _b;

  let userObserver;

  if (isPartialObserver(args[0])) {
    userObserver = args[0];
  } else if (isPartialObserver(args[1])) {
    userObserver = args[1];
  } else if (typeof args[0] === 'function') {
    userObserver = {
      next: args[0],
      error: args[1],
      complete: args[2]
    };
  } else {
    userObserver = {
      next: args[1],
      error: args[2],
      complete: args[3]
    };
  }

  return {
    next: val => {
      if (userObserver.next) {
        userObserver.next(wrapper(val));
      }
    },
    error: (_a = userObserver.error) === null || _a === void 0 ? void 0 : _a.bind(userObserver),
    complete: (_b = userObserver.complete) === null || _b === void 0 ? void 0 : _b.bind(userObserver)
  };
}

class DocumentSnapshot {
  constructor(_firestore, _delegate) {
    this._firestore = _firestore;
    this._delegate = _delegate;
  }

  get ref() {
    return new DocumentReference(this._firestore, this._delegate.ref);
  }

  get id() {
    return this._delegate.id;
  }

  get metadata() {
    return this._delegate.metadata;
  }

  get exists() {
    return this._delegate.exists();
  }

  data(options) {
    return this._delegate.data(options);
  }

  get(fieldPath, options // We are using `any` here to avoid an explicit cast by our users.
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  ) {
    return this._delegate.get(fieldPath, options);
  }

  isEqual(other) {
    return (0, _firestore2.snapshotEqual)(this._delegate, other._delegate);
  }

}

class QueryDocumentSnapshot extends DocumentSnapshot {
  data(options) {
    const data = this._delegate.data(options);

    (0, _firestore2._debugAssert)(data !== undefined, 'Document in a QueryDocumentSnapshot should exist');
    return data;
  }

}

class Query {
  constructor(firestore, _delegate) {
    this.firestore = firestore;
    this._delegate = _delegate;
    this._userDataWriter = new UserDataWriter(firestore);
  }

  where(fieldPath, opStr, value) {
    try {
      // The "as string" cast is a little bit of a hack. `where` accepts the
      // FieldPath Compat type as input, but is not typed as such in order to
      // not expose this via our public typings file.
      return new Query(this.firestore, (0, _firestore2.query)(this._delegate, (0, _firestore2.where)(fieldPath, opStr, value)));
    } catch (e) {
      throw replaceFunctionName(e, /(orderBy|where)\(\)/, 'Query.$1()');
    }
  }

  orderBy(fieldPath, directionStr) {
    try {
      // The "as string" cast is a little bit of a hack. `orderBy` accepts the
      // FieldPath Compat type as input, but is not typed as such in order to
      // not expose this via our public typings file.
      return new Query(this.firestore, (0, _firestore2.query)(this._delegate, (0, _firestore2.orderBy)(fieldPath, directionStr)));
    } catch (e) {
      throw replaceFunctionName(e, /(orderBy|where)\(\)/, 'Query.$1()');
    }
  }

  limit(n) {
    try {
      return new Query(this.firestore, (0, _firestore2.query)(this._delegate, (0, _firestore2.limit)(n)));
    } catch (e) {
      throw replaceFunctionName(e, 'limit()', 'Query.limit()');
    }
  }

  limitToLast(n) {
    try {
      return new Query(this.firestore, (0, _firestore2.query)(this._delegate, (0, _firestore2.limitToLast)(n)));
    } catch (e) {
      throw replaceFunctionName(e, 'limitToLast()', 'Query.limitToLast()');
    }
  }

  startAt(...args) {
    try {
      return new Query(this.firestore, (0, _firestore2.query)(this._delegate, (0, _firestore2.startAt)(...args)));
    } catch (e) {
      throw replaceFunctionName(e, 'startAt()', 'Query.startAt()');
    }
  }

  startAfter(...args) {
    try {
      return new Query(this.firestore, (0, _firestore2.query)(this._delegate, (0, _firestore2.startAfter)(...args)));
    } catch (e) {
      throw replaceFunctionName(e, 'startAfter()', 'Query.startAfter()');
    }
  }

  endBefore(...args) {
    try {
      return new Query(this.firestore, (0, _firestore2.query)(this._delegate, (0, _firestore2.endBefore)(...args)));
    } catch (e) {
      throw replaceFunctionName(e, 'endBefore()', 'Query.endBefore()');
    }
  }

  endAt(...args) {
    try {
      return new Query(this.firestore, (0, _firestore2.query)(this._delegate, (0, _firestore2.endAt)(...args)));
    } catch (e) {
      throw replaceFunctionName(e, 'endAt()', 'Query.endAt()');
    }
  }

  isEqual(other) {
    return (0, _firestore2.queryEqual)(this._delegate, other._delegate);
  }

  get(options) {
    let query;

    if ((options === null || options === void 0 ? void 0 : options.source) === 'cache') {
      query = (0, _firestore2.getDocsFromCache)(this._delegate);
    } else if ((options === null || options === void 0 ? void 0 : options.source) === 'server') {
      query = (0, _firestore2.getDocsFromServer)(this._delegate);
    } else {
      query = (0, _firestore2.getDocs)(this._delegate);
    }

    return query.then(result => new QuerySnapshot(this.firestore, new _firestore2.QuerySnapshot(this.firestore._delegate, this._userDataWriter, this._delegate, result._snapshot)));
  }

  onSnapshot(...args) {
    const options = extractSnapshotOptions(args);
    const observer = wrapObserver(args, snap => new QuerySnapshot(this.firestore, new _firestore2.QuerySnapshot(this.firestore._delegate, this._userDataWriter, this._delegate, snap._snapshot)));
    return (0, _firestore2.onSnapshot)(this._delegate, options, observer);
  }

  withConverter(converter) {
    return new Query(this.firestore, converter ? this._delegate.withConverter(FirestoreDataConverter.getInstance(this.firestore, converter)) : this._delegate.withConverter(null));
  }

}

class DocumentChange {
  constructor(_firestore, _delegate) {
    this._firestore = _firestore;
    this._delegate = _delegate;
  }

  get type() {
    return this._delegate.type;
  }

  get doc() {
    return new QueryDocumentSnapshot(this._firestore, this._delegate.doc);
  }

  get oldIndex() {
    return this._delegate.oldIndex;
  }

  get newIndex() {
    return this._delegate.newIndex;
  }

}

class QuerySnapshot {
  constructor(_firestore, _delegate) {
    this._firestore = _firestore;
    this._delegate = _delegate;
  }

  get query() {
    return new Query(this._firestore, this._delegate.query);
  }

  get metadata() {
    return this._delegate.metadata;
  }

  get size() {
    return this._delegate.size;
  }

  get empty() {
    return this._delegate.empty;
  }

  get docs() {
    return this._delegate.docs.map(doc => new QueryDocumentSnapshot(this._firestore, doc));
  }

  docChanges(options) {
    return this._delegate.docChanges(options).map(docChange => new DocumentChange(this._firestore, docChange));
  }

  forEach(callback, thisArg) {
    this._delegate.forEach(snapshot => {
      callback.call(thisArg, new QueryDocumentSnapshot(this._firestore, snapshot));
    });
  }

  isEqual(other) {
    return (0, _firestore2.snapshotEqual)(this._delegate, other._delegate);
  }

}

class CollectionReference extends Query {
  constructor(firestore, _delegate) {
    super(firestore, _delegate);
    this.firestore = firestore;
    this._delegate = _delegate;
  }

  get id() {
    return this._delegate.id;
  }

  get path() {
    return this._delegate.path;
  }

  get parent() {
    const docRef = this._delegate.parent;
    return docRef ? new DocumentReference(this.firestore, docRef) : null;
  }

  doc(documentPath) {
    try {
      if (documentPath === undefined) {
        // Call `doc` without `documentPath` if `documentPath` is `undefined`
        // as `doc` validates the number of arguments to prevent users from
        // accidentally passing `undefined`.
        return new DocumentReference(this.firestore, (0, _firestore2.doc)(this._delegate));
      } else {
        return new DocumentReference(this.firestore, (0, _firestore2.doc)(this._delegate, documentPath));
      }
    } catch (e) {
      throw replaceFunctionName(e, 'doc()', 'CollectionReference.doc()');
    }
  }

  add(data) {
    return (0, _firestore2.addDoc)(this._delegate, data).then(docRef => new DocumentReference(this.firestore, docRef));
  }

  isEqual(other) {
    return (0, _firestore2.refEqual)(this._delegate, other._delegate);
  }

  withConverter(converter) {
    return new CollectionReference(this.firestore, converter ? this._delegate.withConverter(FirestoreDataConverter.getInstance(this.firestore, converter)) : this._delegate.withConverter(null));
  }

}

function castReference(documentRef) {
  return (0, _firestore2._cast)(documentRef, _firestore2.DocumentReference);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// The objects that are a part of this API are exposed to third-parties as
// compiled javascript so we want to flag our private members with a leading
// underscore to discourage their use.

/**
 * A `FieldPath` refers to a field in a document. The path may consist of a
 * single field name (referring to a top-level field in the document), or a list
 * of field names (referring to a nested field in the document).
 */


class FieldPath {
  /**
   * Creates a FieldPath from the provided field names. If more than one field
   * name is provided, the path will point to a nested field in a document.
   *
   * @param fieldNames - A list of field names.
   */
  constructor(...fieldNames) {
    this._delegate = new _firestore2.FieldPath(...fieldNames);
  }

  static documentId() {
    /**
     * Internal Note: The backend doesn't technically support querying by
     * document ID. Instead it queries by the entire document name (full path
     * included), but in the cases we currently support documentId(), the net
     * effect is the same.
     */
    return new FieldPath(_firestore2._FieldPath.keyField().canonicalString());
  }

  isEqual(other) {
    other = (0, _util.getModularInstance)(other);

    if (!(other instanceof _firestore2.FieldPath)) {
      return false;
    }

    return this._delegate._internalPath.isEqual(other._internalPath);
  }

}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


class FieldValue {
  constructor(_delegate) {
    this._delegate = _delegate;
  }

  static serverTimestamp() {
    const delegate = (0, _firestore2.serverTimestamp)();
    delegate._methodName = 'FieldValue.serverTimestamp';
    return new FieldValue(delegate);
  }

  static delete() {
    const delegate = (0, _firestore2.deleteField)();
    delegate._methodName = 'FieldValue.delete';
    return new FieldValue(delegate);
  }

  static arrayUnion(...elements) {
    const delegate = (0, _firestore2.arrayUnion)(...elements);
    delegate._methodName = 'FieldValue.arrayUnion';
    return new FieldValue(delegate);
  }

  static arrayRemove(...elements) {
    const delegate = (0, _firestore2.arrayRemove)(...elements);
    delegate._methodName = 'FieldValue.arrayRemove';
    return new FieldValue(delegate);
  }

  static increment(n) {
    const delegate = (0, _firestore2.increment)(n);
    delegate._methodName = 'FieldValue.increment';
    return new FieldValue(delegate);
  }

  isEqual(other) {
    return this._delegate.isEqual(other._delegate);
  }

}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const firestoreNamespace = {
  Firestore,
  GeoPoint: _firestore2.GeoPoint,
  Timestamp: _firestore2.Timestamp,
  Blob,
  Transaction,
  WriteBatch,
  DocumentReference,
  DocumentSnapshot,
  Query,
  QueryDocumentSnapshot,
  QuerySnapshot,
  CollectionReference,
  FieldPath,
  FieldValue,
  setLogLevel,
  CACHE_SIZE_UNLIMITED: _firestore2.CACHE_SIZE_UNLIMITED
};
/**
 * Configures Firestore as part of the Firebase SDK by calling registerComponent.
 *
 * @param firebase - The FirebaseNamespace to register Firestore with
 * @param firestoreFactory - A factory function that returns a new Firestore
 *    instance.
 */

function configureForFirebase(firebase, firestoreFactory) {
  firebase.INTERNAL.registerComponent(new _component.Component('firestore-compat', container => {
    const app = container.getProvider('app-compat').getImmediate();
    const firestoreExp = container.getProvider('firestore').getImmediate();
    return firestoreFactory(app, firestoreExp);
  }, "PUBLIC"
  /* PUBLIC */
  ).setServiceProps(Object.assign({}, firestoreNamespace)));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Registers the main Firestore build with the components framework.
 * Persistence can be enabled via `firebase.firestore().enablePersistence()`.
 */


function registerFirestore(instance) {
  configureForFirebase(instance, (app, firestoreExp) => new Firestore(app, firestoreExp, new IndexedDbPersistenceProvider()));
  instance.registerVersion(name, version);
}

registerFirestore(_appCompat.default);
},{"@firebase/app-compat":"node_modules/@firebase/app-compat/dist/index.esm2017.js","@firebase/firestore":"node_modules/@firebase/firestore/dist/index.esm2017.js","@firebase/util":"node_modules/@firebase/util/dist/index.esm.js","@firebase/component":"node_modules/@firebase/component/dist/index.esm.js"}],"node_modules/@firebase/functions/dist/index.esm2017.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.connectFunctionsEmulator = connectFunctionsEmulator;
exports.getFunctions = getFunctions;
exports.httpsCallable = httpsCallable;

var _app = require("@firebase/app");

var _util = require("@firebase/util");

var _component = require("@firebase/component");

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const LONG_TYPE = 'type.googleapis.com/google.protobuf.Int64Value';
const UNSIGNED_LONG_TYPE = 'type.googleapis.com/google.protobuf.UInt64Value';

function mapValues( // { [k: string]: unknown } is no longer a wildcard assignment target after typescript 3.5
// eslint-disable-next-line @typescript-eslint/no-explicit-any
o, f) {
  const result = {};

  for (const key in o) {
    if (o.hasOwnProperty(key)) {
      result[key] = f(o[key]);
    }
  }

  return result;
}
/**
 * Takes data and encodes it in a JSON-friendly way, such that types such as
 * Date are preserved.
 * @internal
 * @param data - Data to encode.
 */


function encode(data) {
  if (data == null) {
    return null;
  }

  if (data instanceof Number) {
    data = data.valueOf();
  }

  if (typeof data === 'number' && isFinite(data)) {
    // Any number in JS is safe to put directly in JSON and parse as a double
    // without any loss of precision.
    return data;
  }

  if (data === true || data === false) {
    return data;
  }

  if (Object.prototype.toString.call(data) === '[object String]') {
    return data;
  }

  if (data instanceof Date) {
    return data.toISOString();
  }

  if (Array.isArray(data)) {
    return data.map(x => encode(x));
  }

  if (typeof data === 'function' || typeof data === 'object') {
    return mapValues(data, x => encode(x));
  } // If we got this far, the data is not encodable.


  throw new Error('Data cannot be encoded in JSON: ' + data);
}
/**
 * Takes data that's been encoded in a JSON-friendly form and returns a form
 * with richer datatypes, such as Dates, etc.
 * @internal
 * @param json - JSON to convert.
 */


function decode(json) {
  if (json == null) {
    return json;
  }

  if (json['@type']) {
    switch (json['@type']) {
      case LONG_TYPE: // Fall through and handle this the same as unsigned.

      case UNSIGNED_LONG_TYPE:
        {
          // Technically, this could work return a valid number for malformed
          // data if there was a number followed by garbage. But it's just not
          // worth all the extra code to detect that case.
          const value = Number(json['value']);

          if (isNaN(value)) {
            throw new Error('Data cannot be decoded from JSON: ' + json);
          }

          return value;
        }

      default:
        {
          throw new Error('Data cannot be decoded from JSON: ' + json);
        }
    }
  }

  if (Array.isArray(json)) {
    return json.map(x => decode(x));
  }

  if (typeof json === 'function' || typeof json === 'object') {
    return mapValues(json, x => decode(x));
  } // Anything else is safe to return.


  return json;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Type constant for Firebase Functions.
 */


const FUNCTIONS_TYPE = 'functions';
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Standard error codes for different ways a request can fail, as defined by:
 * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto
 *
 * This map is used primarily to convert from a backend error code string to
 * a client SDK error code string, and make sure it's in the supported set.
 */

const errorCodeMap = {
  OK: 'ok',
  CANCELLED: 'cancelled',
  UNKNOWN: 'unknown',
  INVALID_ARGUMENT: 'invalid-argument',
  DEADLINE_EXCEEDED: 'deadline-exceeded',
  NOT_FOUND: 'not-found',
  ALREADY_EXISTS: 'already-exists',
  PERMISSION_DENIED: 'permission-denied',
  UNAUTHENTICATED: 'unauthenticated',
  RESOURCE_EXHAUSTED: 'resource-exhausted',
  FAILED_PRECONDITION: 'failed-precondition',
  ABORTED: 'aborted',
  OUT_OF_RANGE: 'out-of-range',
  UNIMPLEMENTED: 'unimplemented',
  INTERNAL: 'internal',
  UNAVAILABLE: 'unavailable',
  DATA_LOSS: 'data-loss'
};
/**
 * An explicit error that can be thrown from a handler to send an error to the
 * client that called the function.
 */

class FunctionsError extends _util.FirebaseError {
  constructor(
  /**
   * A standard error code that will be returned to the client. This also
   * determines the HTTP status code of the response, as defined in code.proto.
   */
  code, message,
  /**
   * Extra data to be converted to JSON and included in the error response.
   */
  details) {
    super(`${FUNCTIONS_TYPE}/${code}`, message || '');
    this.details = details;
  }

}
/**
 * Takes an HTTP status code and returns the corresponding ErrorCode.
 * This is the standard HTTP status code -> error mapping defined in:
 * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto
 *
 * @param status An HTTP status code.
 * @return The corresponding ErrorCode, or ErrorCode.UNKNOWN if none.
 */


function codeForHTTPStatus(status) {
  // Make sure any successful status is OK.
  if (status >= 200 && status < 300) {
    return 'ok';
  }

  switch (status) {
    case 0:
      // This can happen if the server returns 500.
      return 'internal';

    case 400:
      return 'invalid-argument';

    case 401:
      return 'unauthenticated';

    case 403:
      return 'permission-denied';

    case 404:
      return 'not-found';

    case 409:
      return 'aborted';

    case 429:
      return 'resource-exhausted';

    case 499:
      return 'cancelled';

    case 500:
      return 'internal';

    case 501:
      return 'unimplemented';

    case 503:
      return 'unavailable';

    case 504:
      return 'deadline-exceeded';
  }

  return 'unknown';
}
/**
 * Takes an HTTP response and returns the corresponding Error, if any.
 */


function _errorForResponse(status, bodyJSON) {
  let code = codeForHTTPStatus(status); // Start with reasonable defaults from the status code.

  let description = code;
  let details = undefined; // Then look through the body for explicit details.

  try {
    const errorJSON = bodyJSON && bodyJSON.error;

    if (errorJSON) {
      const status = errorJSON.status;

      if (typeof status === 'string') {
        if (!errorCodeMap[status]) {
          // They must've included an unknown error code in the body.
          return new FunctionsError('internal', 'internal');
        }

        code = errorCodeMap[status]; // TODO(klimt): Add better default descriptions for error enums.
        // The default description needs to be updated for the new code.

        description = status;
      }

      const message = errorJSON.message;

      if (typeof message === 'string') {
        description = message;
      }

      details = errorJSON.details;

      if (details !== undefined) {
        details = decode(details);
      }
    }
  } catch (e) {// If we couldn't parse explicit error data, that's fine.
  }

  if (code === 'ok') {
    // Technically, there's an edge case where a developer could explicitly
    // return an error code of OK, and we will treat it as success, but that
    // seems reasonable.
    return null;
  }

  return new FunctionsError(code, description, details);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Helper class to get metadata that should be included with a function call.
 * @internal
 */


class ContextProvider {
  constructor(authProvider, messagingProvider, appCheckProvider) {
    this.auth = null;
    this.messaging = null;
    this.appCheck = null;
    this.auth = authProvider.getImmediate({
      optional: true
    });
    this.messaging = messagingProvider.getImmediate({
      optional: true
    });

    if (!this.auth) {
      authProvider.get().then(auth => this.auth = auth, () => {
        /* get() never rejects */
      });
    }

    if (!this.messaging) {
      messagingProvider.get().then(messaging => this.messaging = messaging, () => {
        /* get() never rejects */
      });
    }

    if (!this.appCheck) {
      appCheckProvider.get().then(appCheck => this.appCheck = appCheck, () => {
        /* get() never rejects */
      });
    }
  }

  async getAuthToken() {
    if (!this.auth) {
      return undefined;
    }

    try {
      const token = await this.auth.getToken();
      return token === null || token === void 0 ? void 0 : token.accessToken;
    } catch (e) {
      // If there's any error when trying to get the auth token, leave it off.
      return undefined;
    }
  }

  async getMessagingToken() {
    if (!this.messaging || !('Notification' in self) || Notification.permission !== 'granted') {
      return undefined;
    }

    try {
      return await this.messaging.getToken();
    } catch (e) {
      // We don't warn on this, because it usually means messaging isn't set up.
      // console.warn('Failed to retrieve instance id token.', e);
      // If there's any error when trying to get the token, leave it off.
      return undefined;
    }
  }

  async getAppCheckToken() {
    if (this.appCheck) {
      const result = await this.appCheck.getToken();

      if (result.error) {
        // Do not send the App Check header to the functions endpoint if
        // there was an error from the App Check exchange endpoint. The App
        // Check SDK will already have logged the error to console.
        return null;
      }

      return result.token;
    }

    return null;
  }

  async getContext() {
    const authToken = await this.getAuthToken();
    const messagingToken = await this.getMessagingToken();
    const appCheckToken = await this.getAppCheckToken();
    return {
      authToken,
      messagingToken,
      appCheckToken
    };
  }

}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const DEFAULT_REGION = 'us-central1';
/**
 * Returns a Promise that will be rejected after the given duration.
 * The error will be of type FunctionsError.
 *
 * @param millis Number of milliseconds to wait before rejecting.
 */

function failAfter(millis) {
  return new Promise((_, reject) => {
    setTimeout(() => {
      reject(new FunctionsError('deadline-exceeded', 'deadline-exceeded'));
    }, millis);
  });
}
/**
 * The main class for the Firebase Functions SDK.
 * @internal
 */


class FunctionsService {
  /**
   * Creates a new Functions service for the given app.
   * @param app - The FirebaseApp to use.
   */
  constructor(app, authProvider, messagingProvider, appCheckProvider, regionOrCustomDomain = DEFAULT_REGION, fetchImpl) {
    this.app = app;
    this.fetchImpl = fetchImpl;
    this.emulatorOrigin = null;
    this.contextProvider = new ContextProvider(authProvider, messagingProvider, appCheckProvider); // Cancels all ongoing requests when resolved.

    this.cancelAllRequests = new Promise(resolve => {
      this.deleteService = () => {
        return Promise.resolve(resolve());
      };
    }); // Resolve the region or custom domain overload by attempting to parse it.

    try {
      const url = new URL(regionOrCustomDomain);
      this.customDomain = url.origin;
      this.region = DEFAULT_REGION;
    } catch (e) {
      this.customDomain = null;
      this.region = regionOrCustomDomain;
    }
  }

  _delete() {
    return this.deleteService();
  }
  /**
   * Returns the URL for a callable with the given name.
   * @param name - The name of the callable.
   * @internal
   */


  _url(name) {
    const projectId = this.app.options.projectId;

    if (this.emulatorOrigin !== null) {
      const origin = this.emulatorOrigin;
      return `${origin}/${projectId}/${this.region}/${name}`;
    }

    if (this.customDomain !== null) {
      return `${this.customDomain}/${name}`;
    }

    return `https://${this.region}-${projectId}.cloudfunctions.net/${name}`;
  }

}
/**
 * Modify this instance to communicate with the Cloud Functions emulator.
 *
 * Note: this must be called before this instance has been used to do any operations.
 *
 * @param host The emulator host (ex: localhost)
 * @param port The emulator port (ex: 5001)
 * @public
 */


function connectFunctionsEmulator$1(functionsInstance, host, port) {
  functionsInstance.emulatorOrigin = `http://${host}:${port}`;
}
/**
 * Returns a reference to the callable https trigger with the given name.
 * @param name - The name of the trigger.
 * @public
 */


function httpsCallable$1(functionsInstance, name, options) {
  return data => {
    return call(functionsInstance, name, data, options || {});
  };
}
/**
 * Does an HTTP POST and returns the completed response.
 * @param url The url to post to.
 * @param body The JSON body of the post.
 * @param headers The HTTP headers to include in the request.
 * @return A Promise that will succeed when the request finishes.
 */


async function postJSON(url, body, headers, fetchImpl) {
  headers['Content-Type'] = 'application/json';
  let response;

  try {
    response = await fetchImpl(url, {
      method: 'POST',
      body: JSON.stringify(body),
      headers
    });
  } catch (e) {
    // This could be an unhandled error on the backend, or it could be a
    // network error. There's no way to know, since an unhandled error on the
    // backend will fail to set the proper CORS header, and thus will be
    // treated as a network error by fetch.
    return {
      status: 0,
      json: null
    };
  }

  let json = null;

  try {
    json = await response.json();
  } catch (e) {// If we fail to parse JSON, it will fail the same as an empty body.
  }

  return {
    status: response.status,
    json
  };
}
/**
 * Calls a callable function asynchronously and returns the result.
 * @param name The name of the callable trigger.
 * @param data The data to pass as params to the function.s
 */


async function call(functionsInstance, name, data, options) {
  const url = functionsInstance._url(name); // Encode any special types, such as dates, in the input data.


  data = encode(data);
  const body = {
    data
  }; // Add a header for the authToken.

  const headers = {};
  const context = await functionsInstance.contextProvider.getContext();

  if (context.authToken) {
    headers['Authorization'] = 'Bearer ' + context.authToken;
  }

  if (context.messagingToken) {
    headers['Firebase-Instance-ID-Token'] = context.messagingToken;
  }

  if (context.appCheckToken !== null) {
    headers['X-Firebase-AppCheck'] = context.appCheckToken;
  } // Default timeout to 70s, but let the options override it.


  const timeout = options.timeout || 70000;
  const response = await Promise.race([postJSON(url, body, headers, functionsInstance.fetchImpl), failAfter(timeout), functionsInstance.cancelAllRequests]); // If service was deleted, interrupted response throws an error.

  if (!response) {
    throw new FunctionsError('cancelled', 'Firebase Functions instance was deleted.');
  } // Check for an error status, regardless of http status.


  const error = _errorForResponse(response.status, response.json);

  if (error) {
    throw error;
  }

  if (!response.json) {
    throw new FunctionsError('internal', 'Response is not valid JSON object.');
  }

  let responseData = response.json.data; // TODO(klimt): For right now, allow "result" instead of "data", for
  // backwards compatibility.

  if (typeof responseData === 'undefined') {
    responseData = response.json.result;
  }

  if (typeof responseData === 'undefined') {
    // Consider the response malformed.
    throw new FunctionsError('internal', 'Response is missing data field.');
  } // Decode any special types, such as dates, in the returned data.


  const decodedData = decode(responseData);
  return {
    data: decodedData
  };
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const AUTH_INTERNAL_NAME = 'auth-internal';
const APP_CHECK_INTERNAL_NAME = 'app-check-internal';
const MESSAGING_INTERNAL_NAME = 'messaging-internal';

function registerFunctions(fetchImpl) {
  const factory = (container, {
    instanceIdentifier: regionOrCustomDomain
  }) => {
    // Dependencies
    const app = container.getProvider('app').getImmediate();
    const authProvider = container.getProvider(AUTH_INTERNAL_NAME);
    const messagingProvider = container.getProvider(MESSAGING_INTERNAL_NAME);
    const appCheckProvider = container.getProvider(APP_CHECK_INTERNAL_NAME); // eslint-disable-next-line @typescript-eslint/no-explicit-any

    return new FunctionsService(app, authProvider, messagingProvider, appCheckProvider, regionOrCustomDomain, fetchImpl);
  };

  (0, _app._registerComponent)(new _component.Component(FUNCTIONS_TYPE, factory, "PUBLIC"
  /* PUBLIC */
  ).setMultipleInstances(true));
}

const name = "@firebase/functions";
const version = "0.7.1";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns a {@link Functions} instance for the given app.
 * @param app - The {@link @firebase/app#FirebaseApp} to use.
 * @param regionOrCustomDomain - one of:
 *   a) The region the callable functions are located in (ex: us-central1)
 *   b) A custom domain hosting the callable functions (ex: https://mydomain.com)
 * @public
 */

function getFunctions(app = (0, _app.getApp)(), regionOrCustomDomain = DEFAULT_REGION) {
  // Dependencies
  const functionsProvider = (0, _app._getProvider)((0, _util.getModularInstance)(app), FUNCTIONS_TYPE);
  const functionsInstance = functionsProvider.getImmediate({
    identifier: regionOrCustomDomain
  });
  return functionsInstance;
}
/**
 * Modify this instance to communicate with the Cloud Functions emulator.
 *
 * Note: this must be called before this instance has been used to do any operations.
 *
 * @param host - The emulator host (ex: localhost)
 * @param port - The emulator port (ex: 5001)
 * @public
 */


function connectFunctionsEmulator(functionsInstance, host, port) {
  connectFunctionsEmulator$1((0, _util.getModularInstance)(functionsInstance), host, port);
}
/**
 * Returns a reference to the callable HTTPS trigger with the given name.
 * @param name - The name of the trigger.
 * @public
 */


function httpsCallable(functionsInstance, name, options) {
  return httpsCallable$1((0, _util.getModularInstance)(functionsInstance), name, options);
}
/**
 * Cloud Functions for Firebase
 *
 * @packageDocumentation
 */


registerFunctions(fetch.bind(self));
(0, _app.registerVersion)(name, version);
},{"@firebase/app":"node_modules/@firebase/app/dist/index.esm2017.js","@firebase/util":"node_modules/@firebase/util/dist/index.esm.js","@firebase/component":"node_modules/@firebase/component/dist/index.esm.js"}],"node_modules/@firebase/functions-compat/dist/index.esm2017.js":[function(require,module,exports) {
"use strict";

var _appCompat = _interopRequireDefault(require("@firebase/app-compat"));

var _functions = require("@firebase/functions");

var _util = require("@firebase/util");

var _component = require("@firebase/component");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const name = "@firebase/functions-compat";
const version = "0.1.2";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

class FunctionsService {
  constructor(app, _delegate) {
    this.app = app;
    this._delegate = _delegate;
    this._region = this._delegate.region;
    this._customDomain = this._delegate.customDomain;
  }

  httpsCallable(name, options) {
    return (0, _functions.httpsCallable)(this._delegate, name, options);
  }
  /**
   * Deprecated in pre-modularized repo, does not exist in modularized
   * functions package, need to convert to "host" and "port" args that
   * `useFunctionsEmulatorExp` takes.
   * @deprecated
   */


  useFunctionsEmulator(origin) {
    const match = origin.match('[a-zA-Z]+://([a-zA-Z0-9.-]+)(?::([0-9]+))?');

    if (match == null) {
      throw new _util.FirebaseError('functions', 'No origin provided to useFunctionsEmulator()');
    }

    if (match[2] == null) {
      throw new _util.FirebaseError('functions', 'Port missing in origin provided to useFunctionsEmulator()');
    }

    return (0, _functions.connectFunctionsEmulator)(this._delegate, match[1], Number(match[2]));
  }

  useEmulator(host, port) {
    return (0, _functions.connectFunctionsEmulator)(this._delegate, host, port);
  }

}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const DEFAULT_REGION = 'us-central1';

const factory = (container, {
  instanceIdentifier: regionOrCustomDomain
}) => {
  // Dependencies
  const app = container.getProvider('app-compat').getImmediate();
  const functionsServiceExp = container.getProvider('functions').getImmediate({
    identifier: regionOrCustomDomain !== null && regionOrCustomDomain !== void 0 ? regionOrCustomDomain : DEFAULT_REGION
  });
  return new FunctionsService(app, functionsServiceExp);
};

function registerFunctions() {
  const namespaceExports = {
    Functions: FunctionsService
  };

  _appCompat.default.INTERNAL.registerComponent(new _component.Component('functions-compat', factory, "PUBLIC"
  /* PUBLIC */
  ).setServiceProps(namespaceExports).setMultipleInstances(true));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


registerFunctions();

_appCompat.default.registerVersion(name, version);
},{"@firebase/app-compat":"node_modules/@firebase/app-compat/dist/index.esm2017.js","@firebase/functions":"node_modules/@firebase/functions/dist/index.esm2017.js","@firebase/util":"node_modules/@firebase/util/dist/index.esm.js","@firebase/component":"node_modules/@firebase/component/dist/index.esm.js"}],"node_modules/@firebase/messaging/dist/index.esm2017.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deleteToken = deleteToken;
exports.getMessaging = getMessagingInWindow;
exports.getToken = getToken;
exports.isSupported = isWindowSupported;
exports.onMessage = onMessage;

require("@firebase/installations");

var _component = require("@firebase/component");

var _idb = require("idb");

var _util = require("@firebase/util");

var _app = require("@firebase/app");

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const DEFAULT_SW_PATH = '/firebase-messaging-sw.js';
const DEFAULT_SW_SCOPE = '/firebase-cloud-messaging-push-scope';
const DEFAULT_VAPID_KEY = 'BDOU99-h67HcA6JeFXHbSNMu7e2yNNu3RzoMj8TM4W88jITfq7ZmPvIM1Iv-4_l2LxQcYwhqby2xGpWwzjfAnG4';
const ENDPOINT = 'https://fcmregistrations.googleapis.com/v1';
const CONSOLE_CAMPAIGN_ID = 'google.c.a.c_id';
const CONSOLE_CAMPAIGN_NAME = 'google.c.a.c_l';
const CONSOLE_CAMPAIGN_TIME = 'google.c.a.ts';
/** Set to '1' if Analytics is enabled for the campaign */

const CONSOLE_CAMPAIGN_ANALYTICS_ENABLED = 'google.c.a.e';
var MessageType$1;

(function (MessageType) {
  MessageType[MessageType["DATA_MESSAGE"] = 1] = "DATA_MESSAGE";
  MessageType[MessageType["DISPLAY_NOTIFICATION"] = 3] = "DISPLAY_NOTIFICATION";
})(MessageType$1 || (MessageType$1 = {}));
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */


var MessageType;

(function (MessageType) {
  MessageType["PUSH_RECEIVED"] = "push-received";
  MessageType["NOTIFICATION_CLICKED"] = "notification-clicked";
})(MessageType || (MessageType = {}));
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function arrayToBase64(array) {
  const uint8Array = new Uint8Array(array);
  const base64String = btoa(String.fromCharCode(...uint8Array));
  return base64String.replace(/=/g, '').replace(/\+/g, '-').replace(/\//g, '_');
}

function base64ToArray(base64String) {
  const padding = '='.repeat((4 - base64String.length % 4) % 4);
  const base64 = (base64String + padding).replace(/\-/g, '+').replace(/_/g, '/');
  const rawData = atob(base64);
  const outputArray = new Uint8Array(rawData.length);

  for (let i = 0; i < rawData.length; ++i) {
    outputArray[i] = rawData.charCodeAt(i);
  }

  return outputArray;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const OLD_DB_NAME = 'fcm_token_details_db';
/**
 * The last DB version of 'fcm_token_details_db' was 4. This is one higher, so that the upgrade
 * callback is called for all versions of the old DB.
 */

const OLD_DB_VERSION = 5;
const OLD_OBJECT_STORE_NAME = 'fcm_token_object_Store';

async function migrateOldDatabase(senderId) {
  if ('databases' in indexedDB) {
    // indexedDb.databases() is an IndexedDB v3 API and does not exist in all browsers. TODO: Remove
    // typecast when it lands in TS types.
    const databases = await indexedDB.databases();
    const dbNames = databases.map(db => db.name);

    if (!dbNames.includes(OLD_DB_NAME)) {
      // old DB didn't exist, no need to open.
      return null;
    }
  }

  let tokenDetails = null;
  const db = await (0, _idb.openDb)(OLD_DB_NAME, OLD_DB_VERSION, async db => {
    var _a;

    if (db.oldVersion < 2) {
      // Database too old, skip migration.
      return;
    }

    if (!db.objectStoreNames.contains(OLD_OBJECT_STORE_NAME)) {
      // Database did not exist. Nothing to do.
      return;
    }

    const objectStore = db.transaction.objectStore(OLD_OBJECT_STORE_NAME);
    const value = await objectStore.index('fcmSenderId').get(senderId);
    await objectStore.clear();

    if (!value) {
      // No entry in the database, nothing to migrate.
      return;
    }

    if (db.oldVersion === 2) {
      const oldDetails = value;

      if (!oldDetails.auth || !oldDetails.p256dh || !oldDetails.endpoint) {
        return;
      }

      tokenDetails = {
        token: oldDetails.fcmToken,
        createTime: (_a = oldDetails.createTime) !== null && _a !== void 0 ? _a : Date.now(),
        subscriptionOptions: {
          auth: oldDetails.auth,
          p256dh: oldDetails.p256dh,
          endpoint: oldDetails.endpoint,
          swScope: oldDetails.swScope,
          vapidKey: typeof oldDetails.vapidKey === 'string' ? oldDetails.vapidKey : arrayToBase64(oldDetails.vapidKey)
        }
      };
    } else if (db.oldVersion === 3) {
      const oldDetails = value;
      tokenDetails = {
        token: oldDetails.fcmToken,
        createTime: oldDetails.createTime,
        subscriptionOptions: {
          auth: arrayToBase64(oldDetails.auth),
          p256dh: arrayToBase64(oldDetails.p256dh),
          endpoint: oldDetails.endpoint,
          swScope: oldDetails.swScope,
          vapidKey: arrayToBase64(oldDetails.vapidKey)
        }
      };
    } else if (db.oldVersion === 4) {
      const oldDetails = value;
      tokenDetails = {
        token: oldDetails.fcmToken,
        createTime: oldDetails.createTime,
        subscriptionOptions: {
          auth: arrayToBase64(oldDetails.auth),
          p256dh: arrayToBase64(oldDetails.p256dh),
          endpoint: oldDetails.endpoint,
          swScope: oldDetails.swScope,
          vapidKey: arrayToBase64(oldDetails.vapidKey)
        }
      };
    }
  });
  db.close(); // Delete all old databases.

  await (0, _idb.deleteDb)(OLD_DB_NAME);
  await (0, _idb.deleteDb)('fcm_vapid_details_db');
  await (0, _idb.deleteDb)('undefined');
  return checkTokenDetails(tokenDetails) ? tokenDetails : null;
}

function checkTokenDetails(tokenDetails) {
  if (!tokenDetails || !tokenDetails.subscriptionOptions) {
    return false;
  }

  const {
    subscriptionOptions
  } = tokenDetails;
  return typeof tokenDetails.createTime === 'number' && tokenDetails.createTime > 0 && typeof tokenDetails.token === 'string' && tokenDetails.token.length > 0 && typeof subscriptionOptions.auth === 'string' && subscriptionOptions.auth.length > 0 && typeof subscriptionOptions.p256dh === 'string' && subscriptionOptions.p256dh.length > 0 && typeof subscriptionOptions.endpoint === 'string' && subscriptionOptions.endpoint.length > 0 && typeof subscriptionOptions.swScope === 'string' && subscriptionOptions.swScope.length > 0 && typeof subscriptionOptions.vapidKey === 'string' && subscriptionOptions.vapidKey.length > 0;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Exported for tests.


const DATABASE_NAME = 'firebase-messaging-database';
const DATABASE_VERSION = 1;
const OBJECT_STORE_NAME = 'firebase-messaging-store';
let dbPromise = null;

function getDbPromise() {
  if (!dbPromise) {
    dbPromise = (0, _idb.openDb)(DATABASE_NAME, DATABASE_VERSION, upgradeDb => {
      // We don't use 'break' in this switch statement, the fall-through behavior is what we want,
      // because if there are multiple versions between the old version and the current version, we
      // want ALL the migrations that correspond to those versions to run, not only the last one.
      // eslint-disable-next-line default-case
      switch (upgradeDb.oldVersion) {
        case 0:
          upgradeDb.createObjectStore(OBJECT_STORE_NAME);
      }
    });
  }

  return dbPromise;
}
/** Gets record(s) from the objectStore that match the given key. */


async function dbGet(firebaseDependencies) {
  const key = getKey(firebaseDependencies);
  const db = await getDbPromise();
  const tokenDetails = await db.transaction(OBJECT_STORE_NAME).objectStore(OBJECT_STORE_NAME).get(key);

  if (tokenDetails) {
    return tokenDetails;
  } else {
    // Check if there is a tokenDetails object in the old DB.
    const oldTokenDetails = await migrateOldDatabase(firebaseDependencies.appConfig.senderId);

    if (oldTokenDetails) {
      await dbSet(firebaseDependencies, oldTokenDetails);
      return oldTokenDetails;
    }
  }
}
/** Assigns or overwrites the record for the given key with the given value. */


async function dbSet(firebaseDependencies, tokenDetails) {
  const key = getKey(firebaseDependencies);
  const db = await getDbPromise();
  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
  await tx.objectStore(OBJECT_STORE_NAME).put(tokenDetails, key);
  await tx.complete;
  return tokenDetails;
}
/** Removes record(s) from the objectStore that match the given key. */


async function dbRemove(firebaseDependencies) {
  const key = getKey(firebaseDependencies);
  const db = await getDbPromise();
  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
  await tx.objectStore(OBJECT_STORE_NAME).delete(key);
  await tx.complete;
}

function getKey({
  appConfig
}) {
  return appConfig.appId;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const ERROR_MAP = {
  ["missing-app-config-values"
  /* MISSING_APP_CONFIG_VALUES */
  ]: 'Missing App configuration value: "{$valueName}"',
  ["only-available-in-window"
  /* AVAILABLE_IN_WINDOW */
  ]: 'This method is available in a Window context.',
  ["only-available-in-sw"
  /* AVAILABLE_IN_SW */
  ]: 'This method is available in a service worker context.',
  ["permission-default"
  /* PERMISSION_DEFAULT */
  ]: 'The notification permission was not granted and dismissed instead.',
  ["permission-blocked"
  /* PERMISSION_BLOCKED */
  ]: 'The notification permission was not granted and blocked instead.',
  ["unsupported-browser"
  /* UNSUPPORTED_BROWSER */
  ]: "This browser doesn't support the API's required to use the firebase SDK.",
  ["indexed-db-unsupported"
  /* INDEXED_DB_UNSUPPORTED */
  ]: "This browser doesn't support indexedDb.open() (ex. Safari iFrame, Firefox Private Browsing, etc)",
  ["failed-service-worker-registration"
  /* FAILED_DEFAULT_REGISTRATION */
  ]: 'We are unable to register the default service worker. {$browserErrorMessage}',
  ["token-subscribe-failed"
  /* TOKEN_SUBSCRIBE_FAILED */
  ]: 'A problem occurred while subscribing the user to FCM: {$errorInfo}',
  ["token-subscribe-no-token"
  /* TOKEN_SUBSCRIBE_NO_TOKEN */
  ]: 'FCM returned no token when subscribing the user to push.',
  ["token-unsubscribe-failed"
  /* TOKEN_UNSUBSCRIBE_FAILED */
  ]: 'A problem occurred while unsubscribing the ' + 'user from FCM: {$errorInfo}',
  ["token-update-failed"
  /* TOKEN_UPDATE_FAILED */
  ]: 'A problem occurred while updating the user from FCM: {$errorInfo}',
  ["token-update-no-token"
  /* TOKEN_UPDATE_NO_TOKEN */
  ]: 'FCM returned no token when updating the user to push.',
  ["use-sw-after-get-token"
  /* USE_SW_AFTER_GET_TOKEN */
  ]: 'The useServiceWorker() method may only be called once and must be ' + 'called before calling getToken() to ensure your service worker is used.',
  ["invalid-sw-registration"
  /* INVALID_SW_REGISTRATION */
  ]: 'The input to useServiceWorker() must be a ServiceWorkerRegistration.',
  ["invalid-bg-handler"
  /* INVALID_BG_HANDLER */
  ]: 'The input to setBackgroundMessageHandler() must be a function.',
  ["invalid-vapid-key"
  /* INVALID_VAPID_KEY */
  ]: 'The public VAPID key must be a string.',
  ["use-vapid-key-after-get-token"
  /* USE_VAPID_KEY_AFTER_GET_TOKEN */
  ]: 'The usePublicVapidKey() method may only be called once and must be ' + 'called before calling getToken() to ensure your VAPID key is used.'
};
const ERROR_FACTORY = new _util.ErrorFactory('messaging', 'Messaging', ERROR_MAP);
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

async function requestGetToken(firebaseDependencies, subscriptionOptions) {
  const headers = await getHeaders(firebaseDependencies);
  const body = getBody(subscriptionOptions);
  const subscribeOptions = {
    method: 'POST',
    headers,
    body: JSON.stringify(body)
  };
  let responseData;

  try {
    const response = await fetch(getEndpoint(firebaseDependencies.appConfig), subscribeOptions);
    responseData = await response.json();
  } catch (err) {
    throw ERROR_FACTORY.create("token-subscribe-failed"
    /* TOKEN_SUBSCRIBE_FAILED */
    , {
      errorInfo: err
    });
  }

  if (responseData.error) {
    const message = responseData.error.message;
    throw ERROR_FACTORY.create("token-subscribe-failed"
    /* TOKEN_SUBSCRIBE_FAILED */
    , {
      errorInfo: message
    });
  }

  if (!responseData.token) {
    throw ERROR_FACTORY.create("token-subscribe-no-token"
    /* TOKEN_SUBSCRIBE_NO_TOKEN */
    );
  }

  return responseData.token;
}

async function requestUpdateToken(firebaseDependencies, tokenDetails) {
  const headers = await getHeaders(firebaseDependencies);
  const body = getBody(tokenDetails.subscriptionOptions);
  const updateOptions = {
    method: 'PATCH',
    headers,
    body: JSON.stringify(body)
  };
  let responseData;

  try {
    const response = await fetch(`${getEndpoint(firebaseDependencies.appConfig)}/${tokenDetails.token}`, updateOptions);
    responseData = await response.json();
  } catch (err) {
    throw ERROR_FACTORY.create("token-update-failed"
    /* TOKEN_UPDATE_FAILED */
    , {
      errorInfo: err
    });
  }

  if (responseData.error) {
    const message = responseData.error.message;
    throw ERROR_FACTORY.create("token-update-failed"
    /* TOKEN_UPDATE_FAILED */
    , {
      errorInfo: message
    });
  }

  if (!responseData.token) {
    throw ERROR_FACTORY.create("token-update-no-token"
    /* TOKEN_UPDATE_NO_TOKEN */
    );
  }

  return responseData.token;
}

async function requestDeleteToken(firebaseDependencies, token) {
  const headers = await getHeaders(firebaseDependencies);
  const unsubscribeOptions = {
    method: 'DELETE',
    headers
  };

  try {
    const response = await fetch(`${getEndpoint(firebaseDependencies.appConfig)}/${token}`, unsubscribeOptions);
    const responseData = await response.json();

    if (responseData.error) {
      const message = responseData.error.message;
      throw ERROR_FACTORY.create("token-unsubscribe-failed"
      /* TOKEN_UNSUBSCRIBE_FAILED */
      , {
        errorInfo: message
      });
    }
  } catch (err) {
    throw ERROR_FACTORY.create("token-unsubscribe-failed"
    /* TOKEN_UNSUBSCRIBE_FAILED */
    , {
      errorInfo: err
    });
  }
}

function getEndpoint({
  projectId
}) {
  return `${ENDPOINT}/projects/${projectId}/registrations`;
}

async function getHeaders({
  appConfig,
  installations
}) {
  const authToken = await installations.getToken();
  return new Headers({
    'Content-Type': 'application/json',
    Accept: 'application/json',
    'x-goog-api-key': appConfig.apiKey,
    'x-goog-firebase-installations-auth': `FIS ${authToken}`
  });
}

function getBody({
  p256dh,
  auth,
  endpoint,
  vapidKey
}) {
  const body = {
    web: {
      endpoint,
      auth,
      p256dh
    }
  };

  if (vapidKey !== DEFAULT_VAPID_KEY) {
    body.web.applicationPubKey = vapidKey;
  }

  return body;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// UpdateRegistration will be called once every week.


const TOKEN_EXPIRATION_MS = 7 * 24 * 60 * 60 * 1000; // 7 days

async function getTokenInternal(messaging) {
  const pushSubscription = await getPushSubscription(messaging.swRegistration, messaging.vapidKey);
  const subscriptionOptions = {
    vapidKey: messaging.vapidKey,
    swScope: messaging.swRegistration.scope,
    endpoint: pushSubscription.endpoint,
    auth: arrayToBase64(pushSubscription.getKey('auth')),
    p256dh: arrayToBase64(pushSubscription.getKey('p256dh'))
  };
  const tokenDetails = await dbGet(messaging.firebaseDependencies);

  if (!tokenDetails) {
    // No token, get a new one.
    return getNewToken(messaging.firebaseDependencies, subscriptionOptions);
  } else if (!isTokenValid(tokenDetails.subscriptionOptions, subscriptionOptions)) {
    // Invalid token, get a new one.
    try {
      await requestDeleteToken(messaging.firebaseDependencies, tokenDetails.token);
    } catch (e) {
      // Suppress errors because of #2364
      console.warn(e);
    }

    return getNewToken(messaging.firebaseDependencies, subscriptionOptions);
  } else if (Date.now() >= tokenDetails.createTime + TOKEN_EXPIRATION_MS) {
    // Weekly token refresh
    return updateToken(messaging, {
      token: tokenDetails.token,
      createTime: Date.now(),
      subscriptionOptions
    });
  } else {
    // Valid token, nothing to do.
    return tokenDetails.token;
  }
}
/**
 * This method deletes the token from the database, unsubscribes the token from FCM, and unregisters
 * the push subscription if it exists.
 */


async function deleteTokenInternal(messaging) {
  const tokenDetails = await dbGet(messaging.firebaseDependencies);

  if (tokenDetails) {
    await requestDeleteToken(messaging.firebaseDependencies, tokenDetails.token);
    await dbRemove(messaging.firebaseDependencies);
  } // Unsubscribe from the push subscription.


  const pushSubscription = await messaging.swRegistration.pushManager.getSubscription();

  if (pushSubscription) {
    return pushSubscription.unsubscribe();
  } // If there's no SW, consider it a success.


  return true;
}

async function updateToken(messaging, tokenDetails) {
  try {
    const updatedToken = await requestUpdateToken(messaging.firebaseDependencies, tokenDetails);
    const updatedTokenDetails = Object.assign(Object.assign({}, tokenDetails), {
      token: updatedToken,
      createTime: Date.now()
    });
    await dbSet(messaging.firebaseDependencies, updatedTokenDetails);
    return updatedToken;
  } catch (e) {
    await deleteTokenInternal(messaging);
    throw e;
  }
}

async function getNewToken(firebaseDependencies, subscriptionOptions) {
  const token = await requestGetToken(firebaseDependencies, subscriptionOptions);
  const tokenDetails = {
    token,
    createTime: Date.now(),
    subscriptionOptions
  };
  await dbSet(firebaseDependencies, tokenDetails);
  return tokenDetails.token;
}
/**
 * Gets a PushSubscription for the current user.
 */


async function getPushSubscription(swRegistration, vapidKey) {
  const subscription = await swRegistration.pushManager.getSubscription();

  if (subscription) {
    return subscription;
  }

  return swRegistration.pushManager.subscribe({
    userVisibleOnly: true,
    // Chrome <= 75 doesn't support base64-encoded VAPID key. For backward compatibility, VAPID key
    // submitted to pushManager#subscribe must be of type Uint8Array.
    applicationServerKey: base64ToArray(vapidKey)
  });
}
/**
 * Checks if the saved tokenDetails object matches the configuration provided.
 */


function isTokenValid(dbOptions, currentOptions) {
  const isVapidKeyEqual = currentOptions.vapidKey === dbOptions.vapidKey;
  const isEndpointEqual = currentOptions.endpoint === dbOptions.endpoint;
  const isAuthEqual = currentOptions.auth === dbOptions.auth;
  const isP256dhEqual = currentOptions.p256dh === dbOptions.p256dh;
  return isVapidKeyEqual && isEndpointEqual && isAuthEqual && isP256dhEqual;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function externalizePayload(internalPayload) {
  const payload = {
    from: internalPayload.from,
    // eslint-disable-next-line camelcase
    collapseKey: internalPayload.collapse_key,
    // eslint-disable-next-line camelcase
    messageId: internalPayload.fcm_message_id
  };
  propagateNotificationPayload(payload, internalPayload);
  propagateDataPayload(payload, internalPayload);
  propagateFcmOptions(payload, internalPayload);
  return payload;
}

function propagateNotificationPayload(payload, messagePayloadInternal) {
  if (!messagePayloadInternal.notification) {
    return;
  }

  payload.notification = {};
  const title = messagePayloadInternal.notification.title;

  if (!!title) {
    payload.notification.title = title;
  }

  const body = messagePayloadInternal.notification.body;

  if (!!body) {
    payload.notification.body = body;
  }

  const image = messagePayloadInternal.notification.image;

  if (!!image) {
    payload.notification.image = image;
  }
}

function propagateDataPayload(payload, messagePayloadInternal) {
  if (!messagePayloadInternal.data) {
    return;
  }

  payload.data = messagePayloadInternal.data;
}

function propagateFcmOptions(payload, messagePayloadInternal) {
  if (!messagePayloadInternal.fcmOptions) {
    return;
  }

  payload.fcmOptions = {};
  const link = messagePayloadInternal.fcmOptions.link;

  if (!!link) {
    payload.fcmOptions.link = link;
  } // eslint-disable-next-line camelcase


  const analyticsLabel = messagePayloadInternal.fcmOptions.analytics_label;

  if (!!analyticsLabel) {
    payload.fcmOptions.analyticsLabel = analyticsLabel;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function isConsoleMessage(data) {
  // This message has a campaign ID, meaning it was sent using the Firebase Console.
  return typeof data === 'object' && !!data && CONSOLE_CAMPAIGN_ID in data;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


_mergeStrings('hts/frbslgigp.ogepscmv/ieo/eaylg', 'tp:/ieaeogn-agolai.o/1frlglgc/o');

_mergeStrings('AzSCbw63g1R0nCw85jG8', 'Iaya3yLKwmgvh7cF0q4');

function _mergeStrings(s1, s2) {
  const resultArray = [];

  for (let i = 0; i < s1.length; i++) {
    resultArray.push(s1.charAt(i));

    if (i < s2.length) {
      resultArray.push(s2.charAt(i));
    }
  }

  return resultArray.join('');
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function extractAppConfig(app) {
  if (!app || !app.options) {
    throw getMissingValueError('App Configuration Object');
  }

  if (!app.name) {
    throw getMissingValueError('App Name');
  } // Required app config keys


  const configKeys = ['projectId', 'apiKey', 'appId', 'messagingSenderId'];
  const {
    options
  } = app;

  for (const keyName of configKeys) {
    if (!options[keyName]) {
      throw getMissingValueError(keyName);
    }
  }

  return {
    appName: app.name,
    projectId: options.projectId,
    apiKey: options.apiKey,
    appId: options.appId,
    senderId: options.messagingSenderId
  };
}

function getMissingValueError(valueName) {
  return ERROR_FACTORY.create("missing-app-config-values"
  /* MISSING_APP_CONFIG_VALUES */
  , {
    valueName
  });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


class MessagingService {
  constructor(app, installations, analyticsProvider) {
    // logging is only done with end user consent. Default to false.
    this.deliveryMetricsExportedToBigQueryEnabled = false;
    this.onBackgroundMessageHandler = null;
    this.onMessageHandler = null;
    this.logEvents = [];
    this.isLogServiceStarted = false;
    const appConfig = extractAppConfig(app);
    this.firebaseDependencies = {
      app,
      appConfig,
      installations,
      analyticsProvider
    };
  }

  _delete() {
    return Promise.resolve();
  }

}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


async function registerDefaultSw(messaging) {
  try {
    messaging.swRegistration = await navigator.serviceWorker.register(DEFAULT_SW_PATH, {
      scope: DEFAULT_SW_SCOPE
    }); // The timing when browser updates sw when sw has an update is unreliable from experiment. It
    // leads to version conflict when the SDK upgrades to a newer version in the main page, but sw
    // is stuck with the old version. For example,
    // https://github.com/firebase/firebase-js-sdk/issues/2590 The following line reliably updates
    // sw if there was an update.

    messaging.swRegistration.update().catch(() => {
      /* it is non blocking and we don't care if it failed */
    });
  } catch (e) {
    throw ERROR_FACTORY.create("failed-service-worker-registration"
    /* FAILED_DEFAULT_REGISTRATION */
    , {
      browserErrorMessage: e.message
    });
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


async function updateSwReg(messaging, swRegistration) {
  if (!swRegistration && !messaging.swRegistration) {
    await registerDefaultSw(messaging);
  }

  if (!swRegistration && !!messaging.swRegistration) {
    return;
  }

  if (!(swRegistration instanceof ServiceWorkerRegistration)) {
    throw ERROR_FACTORY.create("invalid-sw-registration"
    /* INVALID_SW_REGISTRATION */
    );
  }

  messaging.swRegistration = swRegistration;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


async function updateVapidKey(messaging, vapidKey) {
  if (!!vapidKey) {
    messaging.vapidKey = vapidKey;
  } else if (!messaging.vapidKey) {
    messaging.vapidKey = DEFAULT_VAPID_KEY;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


async function getToken$1(messaging, options) {
  if (!navigator) {
    throw ERROR_FACTORY.create("only-available-in-window"
    /* AVAILABLE_IN_WINDOW */
    );
  }

  if (Notification.permission === 'default') {
    await Notification.requestPermission();
  }

  if (Notification.permission !== 'granted') {
    throw ERROR_FACTORY.create("permission-blocked"
    /* PERMISSION_BLOCKED */
    );
  }

  await updateVapidKey(messaging, options === null || options === void 0 ? void 0 : options.vapidKey);
  await updateSwReg(messaging, options === null || options === void 0 ? void 0 : options.serviceWorkerRegistration);
  return getTokenInternal(messaging);
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


async function logToScion(messaging, messageType, data) {
  const eventType = getEventType(messageType);
  const analytics = await messaging.firebaseDependencies.analyticsProvider.get();
  analytics.logEvent(eventType, {
    /* eslint-disable camelcase */
    message_id: data[CONSOLE_CAMPAIGN_ID],
    message_name: data[CONSOLE_CAMPAIGN_NAME],
    message_time: data[CONSOLE_CAMPAIGN_TIME],
    message_device_time: Math.floor(Date.now() / 1000)
    /* eslint-enable camelcase */

  });
}

function getEventType(messageType) {
  switch (messageType) {
    case MessageType.NOTIFICATION_CLICKED:
      return 'notification_open';

    case MessageType.PUSH_RECEIVED:
      return 'notification_foreground';

    default:
      throw new Error();
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


async function messageEventListener(messaging, event) {
  const internalPayload = event.data;

  if (!internalPayload.isFirebaseMessaging) {
    return;
  }

  if (messaging.onMessageHandler && internalPayload.messageType === MessageType.PUSH_RECEIVED) {
    if (typeof messaging.onMessageHandler === 'function') {
      messaging.onMessageHandler(externalizePayload(internalPayload));
    } else {
      messaging.onMessageHandler.next(externalizePayload(internalPayload));
    }
  } // Log to Scion if applicable


  const dataPayload = internalPayload.data;

  if (isConsoleMessage(dataPayload) && dataPayload[CONSOLE_CAMPAIGN_ANALYTICS_ENABLED] === '1') {
    await logToScion(messaging, internalPayload.messageType, dataPayload);
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const WindowMessagingFactory = container => {
  const messaging = new MessagingService(container.getProvider('app').getImmediate(), container.getProvider('installations-internal').getImmediate(), container.getProvider('analytics-internal'));
  navigator.serviceWorker.addEventListener('message', e => messageEventListener(messaging, e));
  return messaging;
};

const WindowMessagingInternalFactory = container => {
  const messaging = container.getProvider('messaging').getImmediate();
  const messagingInternal = {
    getToken: options => getToken$1(messaging, options)
  };
  return messagingInternal;
};

function registerMessagingInWindow() {
  (0, _app._registerComponent)(new _component.Component('messaging', WindowMessagingFactory, "PUBLIC"
  /* PUBLIC */
  ));
  (0, _app._registerComponent)(new _component.Component('messaging-internal', WindowMessagingInternalFactory, "PRIVATE"
  /* PRIVATE */
  ));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


async function deleteToken$1(messaging) {
  if (!navigator) {
    throw ERROR_FACTORY.create("only-available-in-window"
    /* AVAILABLE_IN_WINDOW */
    );
  }

  if (!messaging.swRegistration) {
    await registerDefaultSw(messaging);
  }

  return deleteTokenInternal(messaging);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Checks if all required APIs exist in the browser.
 * @returns a Promise that resolves to a boolean.
 *
 * @public
 */


async function isWindowSupported() {
  // firebase-js-sdk/issues/2393 reveals that idb#open in Safari iframe and Firefox private browsing
  // might be prohibited to run. In these contexts, an error would be thrown during the messaging
  // instantiating phase, informing the developers to import/call isSupported for special handling.
  return (await (0, _util.validateIndexedDBOpenable)()) && 'indexedDB' in window && indexedDB !== null && navigator.cookieEnabled && 'serviceWorker' in navigator && 'PushManager' in window && 'Notification' in window && 'fetch' in window && ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') && PushSubscription.prototype.hasOwnProperty('getKey');
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function onMessage$1(messaging, nextOrObserver) {
  if (!navigator) {
    throw ERROR_FACTORY.create("only-available-in-window"
    /* AVAILABLE_IN_WINDOW */
    );
  }

  messaging.onMessageHandler = nextOrObserver;
  return () => {
    messaging.onMessageHandler = null;
  };
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Retrieves a Firebase Cloud Messaging instance.
 *
 * @returns The Firebase Cloud Messaging instance associated with the provided firebase app.
 *
 * @public
 */


function getMessagingInWindow(app = (0, _app.getApp)()) {
  // Conscious decision to make this async check non-blocking during the messaging instance
  // initialization phase for performance consideration. An error would be thrown latter for
  // developer's information. Developers can then choose to import and call `isSupported` for
  // special handling.
  isWindowSupported().then(isSupported => {
    // If `isWindowSupported()` resolved, but returned false.
    if (!isSupported) {
      throw ERROR_FACTORY.create("unsupported-browser"
      /* UNSUPPORTED_BROWSER */
      );
    }
  }, _ => {
    // If `isWindowSupported()` rejected.
    throw ERROR_FACTORY.create("indexed-db-unsupported"
    /* INDEXED_DB_UNSUPPORTED */
    );
  });
  return (0, _app._getProvider)((0, _util.getModularInstance)(app), 'messaging').getImmediate();
}
/**
 * Subscribes the {@link Messaging} instance to push notifications. Returns an Firebase Cloud
 * Messaging registration token that can be used to send push messages to that {@link Messaging}
 * instance.
 *
 * If a notification permission isn't already granted, this method asks the user for permission. The
 * returned promise rejects if the user does not allow the app to show notifications.
 *
 * @param messaging - The {@link Messaging} instance.
 * @param options - Provides an optional vapid key and an optinoal service worker registration
 *
 * @returns The promise resolves with an FCM registration token.
 *
 * @public
 */


async function getToken(messaging, options) {
  messaging = (0, _util.getModularInstance)(messaging);
  return getToken$1(messaging, options);
}
/**
 * Deletes the registration token associated with this {@link Messaging} instance and unsubscribes
 * the {@link Messaging} instance from the push subscription.
 *
 * @param messaging - The {@link Messaging} instance.
 *
 * @returns The promise resolves when the token has been successfully deleted.
 *
 * @public
 */


function deleteToken(messaging) {
  messaging = (0, _util.getModularInstance)(messaging);
  return deleteToken$1(messaging);
}
/**
 * When a push message is received and the user is currently on a page for your origin, the
 * message is passed to the page and an `onMessage()` event is dispatched with the payload of
 * the push message.
 *
 *
 * @param messaging - The {@link Messaging} instance.
 * @param nextOrObserver - This function, or observer object with `next` defined,
 *     is called when a message is received and the user is currently viewing your page.
 * @returns To stop listening for messages execute this returned function.
 *
 * @public
 */


function onMessage(messaging, nextOrObserver) {
  messaging = (0, _util.getModularInstance)(messaging);
  return onMessage$1(messaging, nextOrObserver);
}
/**
 * Firebase Cloud Messaging
 *
 * @packageDocumentation
 */


registerMessagingInWindow();
},{"@firebase/installations":"node_modules/@firebase/installations/dist/index.esm2017.js","@firebase/component":"node_modules/@firebase/component/dist/index.esm.js","idb":"node_modules/idb/build/idb.js","@firebase/util":"node_modules/@firebase/util/dist/index.esm.js","@firebase/app":"node_modules/@firebase/app/dist/index.esm2017.js"}],"node_modules/@firebase/messaging/dist/index.sw.esm2017.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.experimentalSetDeliveryMetricsExportedToBigQueryEnabled = setDeliveryMetricsExportedToBigQueryEnabled;
exports.getMessaging = getMessagingInSw;
exports.isSupported = isSwSupported;
exports.onBackgroundMessage = onBackgroundMessage;

require("@firebase/installations");

var _component = require("@firebase/component");

var _idb = require("idb");

var _util = require("@firebase/util");

var _app = require("@firebase/app");

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const DEFAULT_VAPID_KEY = 'BDOU99-h67HcA6JeFXHbSNMu7e2yNNu3RzoMj8TM4W88jITfq7ZmPvIM1Iv-4_l2LxQcYwhqby2xGpWwzjfAnG4';
const ENDPOINT = 'https://fcmregistrations.googleapis.com/v1';
/** Key of FCM Payload in Notification's data field. */

const FCM_MSG = 'FCM_MSG';
const CONSOLE_CAMPAIGN_ID = 'google.c.a.c_id'; // Defined as in proto/messaging_event.proto. Neglecting fields that are supported.

const SDK_PLATFORM_WEB = 3;
const EVENT_MESSAGE_DELIVERED = 1;
var MessageType$1;

(function (MessageType) {
  MessageType[MessageType["DATA_MESSAGE"] = 1] = "DATA_MESSAGE";
  MessageType[MessageType["DISPLAY_NOTIFICATION"] = 3] = "DISPLAY_NOTIFICATION";
})(MessageType$1 || (MessageType$1 = {}));
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */


var MessageType;

(function (MessageType) {
  MessageType["PUSH_RECEIVED"] = "push-received";
  MessageType["NOTIFICATION_CLICKED"] = "notification-clicked";
})(MessageType || (MessageType = {}));
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function arrayToBase64(array) {
  const uint8Array = new Uint8Array(array);
  const base64String = btoa(String.fromCharCode(...uint8Array));
  return base64String.replace(/=/g, '').replace(/\+/g, '-').replace(/\//g, '_');
}

function base64ToArray(base64String) {
  const padding = '='.repeat((4 - base64String.length % 4) % 4);
  const base64 = (base64String + padding).replace(/\-/g, '+').replace(/_/g, '/');
  const rawData = atob(base64);
  const outputArray = new Uint8Array(rawData.length);

  for (let i = 0; i < rawData.length; ++i) {
    outputArray[i] = rawData.charCodeAt(i);
  }

  return outputArray;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const OLD_DB_NAME = 'fcm_token_details_db';
/**
 * The last DB version of 'fcm_token_details_db' was 4. This is one higher, so that the upgrade
 * callback is called for all versions of the old DB.
 */

const OLD_DB_VERSION = 5;
const OLD_OBJECT_STORE_NAME = 'fcm_token_object_Store';

async function migrateOldDatabase(senderId) {
  if ('databases' in indexedDB) {
    // indexedDb.databases() is an IndexedDB v3 API and does not exist in all browsers. TODO: Remove
    // typecast when it lands in TS types.
    const databases = await indexedDB.databases();
    const dbNames = databases.map(db => db.name);

    if (!dbNames.includes(OLD_DB_NAME)) {
      // old DB didn't exist, no need to open.
      return null;
    }
  }

  let tokenDetails = null;
  const db = await (0, _idb.openDb)(OLD_DB_NAME, OLD_DB_VERSION, async db => {
    var _a;

    if (db.oldVersion < 2) {
      // Database too old, skip migration.
      return;
    }

    if (!db.objectStoreNames.contains(OLD_OBJECT_STORE_NAME)) {
      // Database did not exist. Nothing to do.
      return;
    }

    const objectStore = db.transaction.objectStore(OLD_OBJECT_STORE_NAME);
    const value = await objectStore.index('fcmSenderId').get(senderId);
    await objectStore.clear();

    if (!value) {
      // No entry in the database, nothing to migrate.
      return;
    }

    if (db.oldVersion === 2) {
      const oldDetails = value;

      if (!oldDetails.auth || !oldDetails.p256dh || !oldDetails.endpoint) {
        return;
      }

      tokenDetails = {
        token: oldDetails.fcmToken,
        createTime: (_a = oldDetails.createTime) !== null && _a !== void 0 ? _a : Date.now(),
        subscriptionOptions: {
          auth: oldDetails.auth,
          p256dh: oldDetails.p256dh,
          endpoint: oldDetails.endpoint,
          swScope: oldDetails.swScope,
          vapidKey: typeof oldDetails.vapidKey === 'string' ? oldDetails.vapidKey : arrayToBase64(oldDetails.vapidKey)
        }
      };
    } else if (db.oldVersion === 3) {
      const oldDetails = value;
      tokenDetails = {
        token: oldDetails.fcmToken,
        createTime: oldDetails.createTime,
        subscriptionOptions: {
          auth: arrayToBase64(oldDetails.auth),
          p256dh: arrayToBase64(oldDetails.p256dh),
          endpoint: oldDetails.endpoint,
          swScope: oldDetails.swScope,
          vapidKey: arrayToBase64(oldDetails.vapidKey)
        }
      };
    } else if (db.oldVersion === 4) {
      const oldDetails = value;
      tokenDetails = {
        token: oldDetails.fcmToken,
        createTime: oldDetails.createTime,
        subscriptionOptions: {
          auth: arrayToBase64(oldDetails.auth),
          p256dh: arrayToBase64(oldDetails.p256dh),
          endpoint: oldDetails.endpoint,
          swScope: oldDetails.swScope,
          vapidKey: arrayToBase64(oldDetails.vapidKey)
        }
      };
    }
  });
  db.close(); // Delete all old databases.

  await (0, _idb.deleteDb)(OLD_DB_NAME);
  await (0, _idb.deleteDb)('fcm_vapid_details_db');
  await (0, _idb.deleteDb)('undefined');
  return checkTokenDetails(tokenDetails) ? tokenDetails : null;
}

function checkTokenDetails(tokenDetails) {
  if (!tokenDetails || !tokenDetails.subscriptionOptions) {
    return false;
  }

  const {
    subscriptionOptions
  } = tokenDetails;
  return typeof tokenDetails.createTime === 'number' && tokenDetails.createTime > 0 && typeof tokenDetails.token === 'string' && tokenDetails.token.length > 0 && typeof subscriptionOptions.auth === 'string' && subscriptionOptions.auth.length > 0 && typeof subscriptionOptions.p256dh === 'string' && subscriptionOptions.p256dh.length > 0 && typeof subscriptionOptions.endpoint === 'string' && subscriptionOptions.endpoint.length > 0 && typeof subscriptionOptions.swScope === 'string' && subscriptionOptions.swScope.length > 0 && typeof subscriptionOptions.vapidKey === 'string' && subscriptionOptions.vapidKey.length > 0;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Exported for tests.


const DATABASE_NAME = 'firebase-messaging-database';
const DATABASE_VERSION = 1;
const OBJECT_STORE_NAME = 'firebase-messaging-store';
let dbPromise = null;

function getDbPromise() {
  if (!dbPromise) {
    dbPromise = (0, _idb.openDb)(DATABASE_NAME, DATABASE_VERSION, upgradeDb => {
      // We don't use 'break' in this switch statement, the fall-through behavior is what we want,
      // because if there are multiple versions between the old version and the current version, we
      // want ALL the migrations that correspond to those versions to run, not only the last one.
      // eslint-disable-next-line default-case
      switch (upgradeDb.oldVersion) {
        case 0:
          upgradeDb.createObjectStore(OBJECT_STORE_NAME);
      }
    });
  }

  return dbPromise;
}
/** Gets record(s) from the objectStore that match the given key. */


async function dbGet(firebaseDependencies) {
  const key = getKey(firebaseDependencies);
  const db = await getDbPromise();
  const tokenDetails = await db.transaction(OBJECT_STORE_NAME).objectStore(OBJECT_STORE_NAME).get(key);

  if (tokenDetails) {
    return tokenDetails;
  } else {
    // Check if there is a tokenDetails object in the old DB.
    const oldTokenDetails = await migrateOldDatabase(firebaseDependencies.appConfig.senderId);

    if (oldTokenDetails) {
      await dbSet(firebaseDependencies, oldTokenDetails);
      return oldTokenDetails;
    }
  }
}
/** Assigns or overwrites the record for the given key with the given value. */


async function dbSet(firebaseDependencies, tokenDetails) {
  const key = getKey(firebaseDependencies);
  const db = await getDbPromise();
  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
  await tx.objectStore(OBJECT_STORE_NAME).put(tokenDetails, key);
  await tx.complete;
  return tokenDetails;
}
/** Removes record(s) from the objectStore that match the given key. */


async function dbRemove(firebaseDependencies) {
  const key = getKey(firebaseDependencies);
  const db = await getDbPromise();
  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
  await tx.objectStore(OBJECT_STORE_NAME).delete(key);
  await tx.complete;
}

function getKey({
  appConfig
}) {
  return appConfig.appId;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const ERROR_MAP = {
  ["missing-app-config-values"
  /* MISSING_APP_CONFIG_VALUES */
  ]: 'Missing App configuration value: "{$valueName}"',
  ["only-available-in-window"
  /* AVAILABLE_IN_WINDOW */
  ]: 'This method is available in a Window context.',
  ["only-available-in-sw"
  /* AVAILABLE_IN_SW */
  ]: 'This method is available in a service worker context.',
  ["permission-default"
  /* PERMISSION_DEFAULT */
  ]: 'The notification permission was not granted and dismissed instead.',
  ["permission-blocked"
  /* PERMISSION_BLOCKED */
  ]: 'The notification permission was not granted and blocked instead.',
  ["unsupported-browser"
  /* UNSUPPORTED_BROWSER */
  ]: "This browser doesn't support the API's required to use the firebase SDK.",
  ["indexed-db-unsupported"
  /* INDEXED_DB_UNSUPPORTED */
  ]: "This browser doesn't support indexedDb.open() (ex. Safari iFrame, Firefox Private Browsing, etc)",
  ["failed-service-worker-registration"
  /* FAILED_DEFAULT_REGISTRATION */
  ]: 'We are unable to register the default service worker. {$browserErrorMessage}',
  ["token-subscribe-failed"
  /* TOKEN_SUBSCRIBE_FAILED */
  ]: 'A problem occurred while subscribing the user to FCM: {$errorInfo}',
  ["token-subscribe-no-token"
  /* TOKEN_SUBSCRIBE_NO_TOKEN */
  ]: 'FCM returned no token when subscribing the user to push.',
  ["token-unsubscribe-failed"
  /* TOKEN_UNSUBSCRIBE_FAILED */
  ]: 'A problem occurred while unsubscribing the ' + 'user from FCM: {$errorInfo}',
  ["token-update-failed"
  /* TOKEN_UPDATE_FAILED */
  ]: 'A problem occurred while updating the user from FCM: {$errorInfo}',
  ["token-update-no-token"
  /* TOKEN_UPDATE_NO_TOKEN */
  ]: 'FCM returned no token when updating the user to push.',
  ["use-sw-after-get-token"
  /* USE_SW_AFTER_GET_TOKEN */
  ]: 'The useServiceWorker() method may only be called once and must be ' + 'called before calling getToken() to ensure your service worker is used.',
  ["invalid-sw-registration"
  /* INVALID_SW_REGISTRATION */
  ]: 'The input to useServiceWorker() must be a ServiceWorkerRegistration.',
  ["invalid-bg-handler"
  /* INVALID_BG_HANDLER */
  ]: 'The input to setBackgroundMessageHandler() must be a function.',
  ["invalid-vapid-key"
  /* INVALID_VAPID_KEY */
  ]: 'The public VAPID key must be a string.',
  ["use-vapid-key-after-get-token"
  /* USE_VAPID_KEY_AFTER_GET_TOKEN */
  ]: 'The usePublicVapidKey() method may only be called once and must be ' + 'called before calling getToken() to ensure your VAPID key is used.'
};
const ERROR_FACTORY = new _util.ErrorFactory('messaging', 'Messaging', ERROR_MAP);
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

async function requestGetToken(firebaseDependencies, subscriptionOptions) {
  const headers = await getHeaders(firebaseDependencies);
  const body = getBody(subscriptionOptions);
  const subscribeOptions = {
    method: 'POST',
    headers,
    body: JSON.stringify(body)
  };
  let responseData;

  try {
    const response = await fetch(getEndpoint(firebaseDependencies.appConfig), subscribeOptions);
    responseData = await response.json();
  } catch (err) {
    throw ERROR_FACTORY.create("token-subscribe-failed"
    /* TOKEN_SUBSCRIBE_FAILED */
    , {
      errorInfo: err
    });
  }

  if (responseData.error) {
    const message = responseData.error.message;
    throw ERROR_FACTORY.create("token-subscribe-failed"
    /* TOKEN_SUBSCRIBE_FAILED */
    , {
      errorInfo: message
    });
  }

  if (!responseData.token) {
    throw ERROR_FACTORY.create("token-subscribe-no-token"
    /* TOKEN_SUBSCRIBE_NO_TOKEN */
    );
  }

  return responseData.token;
}

async function requestUpdateToken(firebaseDependencies, tokenDetails) {
  const headers = await getHeaders(firebaseDependencies);
  const body = getBody(tokenDetails.subscriptionOptions);
  const updateOptions = {
    method: 'PATCH',
    headers,
    body: JSON.stringify(body)
  };
  let responseData;

  try {
    const response = await fetch(`${getEndpoint(firebaseDependencies.appConfig)}/${tokenDetails.token}`, updateOptions);
    responseData = await response.json();
  } catch (err) {
    throw ERROR_FACTORY.create("token-update-failed"
    /* TOKEN_UPDATE_FAILED */
    , {
      errorInfo: err
    });
  }

  if (responseData.error) {
    const message = responseData.error.message;
    throw ERROR_FACTORY.create("token-update-failed"
    /* TOKEN_UPDATE_FAILED */
    , {
      errorInfo: message
    });
  }

  if (!responseData.token) {
    throw ERROR_FACTORY.create("token-update-no-token"
    /* TOKEN_UPDATE_NO_TOKEN */
    );
  }

  return responseData.token;
}

async function requestDeleteToken(firebaseDependencies, token) {
  const headers = await getHeaders(firebaseDependencies);
  const unsubscribeOptions = {
    method: 'DELETE',
    headers
  };

  try {
    const response = await fetch(`${getEndpoint(firebaseDependencies.appConfig)}/${token}`, unsubscribeOptions);
    const responseData = await response.json();

    if (responseData.error) {
      const message = responseData.error.message;
      throw ERROR_FACTORY.create("token-unsubscribe-failed"
      /* TOKEN_UNSUBSCRIBE_FAILED */
      , {
        errorInfo: message
      });
    }
  } catch (err) {
    throw ERROR_FACTORY.create("token-unsubscribe-failed"
    /* TOKEN_UNSUBSCRIBE_FAILED */
    , {
      errorInfo: err
    });
  }
}

function getEndpoint({
  projectId
}) {
  return `${ENDPOINT}/projects/${projectId}/registrations`;
}

async function getHeaders({
  appConfig,
  installations
}) {
  const authToken = await installations.getToken();
  return new Headers({
    'Content-Type': 'application/json',
    Accept: 'application/json',
    'x-goog-api-key': appConfig.apiKey,
    'x-goog-firebase-installations-auth': `FIS ${authToken}`
  });
}

function getBody({
  p256dh,
  auth,
  endpoint,
  vapidKey
}) {
  const body = {
    web: {
      endpoint,
      auth,
      p256dh
    }
  };

  if (vapidKey !== DEFAULT_VAPID_KEY) {
    body.web.applicationPubKey = vapidKey;
  }

  return body;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// UpdateRegistration will be called once every week.


const TOKEN_EXPIRATION_MS = 7 * 24 * 60 * 60 * 1000; // 7 days

async function getTokenInternal(messaging) {
  const pushSubscription = await getPushSubscription(messaging.swRegistration, messaging.vapidKey);
  const subscriptionOptions = {
    vapidKey: messaging.vapidKey,
    swScope: messaging.swRegistration.scope,
    endpoint: pushSubscription.endpoint,
    auth: arrayToBase64(pushSubscription.getKey('auth')),
    p256dh: arrayToBase64(pushSubscription.getKey('p256dh'))
  };
  const tokenDetails = await dbGet(messaging.firebaseDependencies);

  if (!tokenDetails) {
    // No token, get a new one.
    return getNewToken(messaging.firebaseDependencies, subscriptionOptions);
  } else if (!isTokenValid(tokenDetails.subscriptionOptions, subscriptionOptions)) {
    // Invalid token, get a new one.
    try {
      await requestDeleteToken(messaging.firebaseDependencies, tokenDetails.token);
    } catch (e) {
      // Suppress errors because of #2364
      console.warn(e);
    }

    return getNewToken(messaging.firebaseDependencies, subscriptionOptions);
  } else if (Date.now() >= tokenDetails.createTime + TOKEN_EXPIRATION_MS) {
    // Weekly token refresh
    return updateToken(messaging, {
      token: tokenDetails.token,
      createTime: Date.now(),
      subscriptionOptions
    });
  } else {
    // Valid token, nothing to do.
    return tokenDetails.token;
  }
}
/**
 * This method deletes the token from the database, unsubscribes the token from FCM, and unregisters
 * the push subscription if it exists.
 */


async function deleteTokenInternal(messaging) {
  const tokenDetails = await dbGet(messaging.firebaseDependencies);

  if (tokenDetails) {
    await requestDeleteToken(messaging.firebaseDependencies, tokenDetails.token);
    await dbRemove(messaging.firebaseDependencies);
  } // Unsubscribe from the push subscription.


  const pushSubscription = await messaging.swRegistration.pushManager.getSubscription();

  if (pushSubscription) {
    return pushSubscription.unsubscribe();
  } // If there's no SW, consider it a success.


  return true;
}

async function updateToken(messaging, tokenDetails) {
  try {
    const updatedToken = await requestUpdateToken(messaging.firebaseDependencies, tokenDetails);
    const updatedTokenDetails = Object.assign(Object.assign({}, tokenDetails), {
      token: updatedToken,
      createTime: Date.now()
    });
    await dbSet(messaging.firebaseDependencies, updatedTokenDetails);
    return updatedToken;
  } catch (e) {
    await deleteTokenInternal(messaging);
    throw e;
  }
}

async function getNewToken(firebaseDependencies, subscriptionOptions) {
  const token = await requestGetToken(firebaseDependencies, subscriptionOptions);
  const tokenDetails = {
    token,
    createTime: Date.now(),
    subscriptionOptions
  };
  await dbSet(firebaseDependencies, tokenDetails);
  return tokenDetails.token;
}
/**
 * Gets a PushSubscription for the current user.
 */


async function getPushSubscription(swRegistration, vapidKey) {
  const subscription = await swRegistration.pushManager.getSubscription();

  if (subscription) {
    return subscription;
  }

  return swRegistration.pushManager.subscribe({
    userVisibleOnly: true,
    // Chrome <= 75 doesn't support base64-encoded VAPID key. For backward compatibility, VAPID key
    // submitted to pushManager#subscribe must be of type Uint8Array.
    applicationServerKey: base64ToArray(vapidKey)
  });
}
/**
 * Checks if the saved tokenDetails object matches the configuration provided.
 */


function isTokenValid(dbOptions, currentOptions) {
  const isVapidKeyEqual = currentOptions.vapidKey === dbOptions.vapidKey;
  const isEndpointEqual = currentOptions.endpoint === dbOptions.endpoint;
  const isAuthEqual = currentOptions.auth === dbOptions.auth;
  const isP256dhEqual = currentOptions.p256dh === dbOptions.p256dh;
  return isVapidKeyEqual && isEndpointEqual && isAuthEqual && isP256dhEqual;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function externalizePayload(internalPayload) {
  const payload = {
    from: internalPayload.from,
    // eslint-disable-next-line camelcase
    collapseKey: internalPayload.collapse_key,
    // eslint-disable-next-line camelcase
    messageId: internalPayload.fcm_message_id
  };
  propagateNotificationPayload(payload, internalPayload);
  propagateDataPayload(payload, internalPayload);
  propagateFcmOptions(payload, internalPayload);
  return payload;
}

function propagateNotificationPayload(payload, messagePayloadInternal) {
  if (!messagePayloadInternal.notification) {
    return;
  }

  payload.notification = {};
  const title = messagePayloadInternal.notification.title;

  if (!!title) {
    payload.notification.title = title;
  }

  const body = messagePayloadInternal.notification.body;

  if (!!body) {
    payload.notification.body = body;
  }

  const image = messagePayloadInternal.notification.image;

  if (!!image) {
    payload.notification.image = image;
  }
}

function propagateDataPayload(payload, messagePayloadInternal) {
  if (!messagePayloadInternal.data) {
    return;
  }

  payload.data = messagePayloadInternal.data;
}

function propagateFcmOptions(payload, messagePayloadInternal) {
  if (!messagePayloadInternal.fcmOptions) {
    return;
  }

  payload.fcmOptions = {};
  const link = messagePayloadInternal.fcmOptions.link;

  if (!!link) {
    payload.fcmOptions.link = link;
  } // eslint-disable-next-line camelcase


  const analyticsLabel = messagePayloadInternal.fcmOptions.analytics_label;

  if (!!analyticsLabel) {
    payload.fcmOptions.analyticsLabel = analyticsLabel;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function isConsoleMessage(data) {
  // This message has a campaign ID, meaning it was sent using the Firebase Console.
  return typeof data === 'object' && !!data && CONSOLE_CAMPAIGN_ID in data;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Returns a promise that resolves after given time passes. */


function sleep(ms) {
  return new Promise(resolve => {
    setTimeout(resolve, ms);
  });
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


_mergeStrings('hts/frbslgigp.ogepscmv/ieo/eaylg', 'tp:/ieaeogn-agolai.o/1frlglgc/o');

_mergeStrings('AzSCbw63g1R0nCw85jG8', 'Iaya3yLKwmgvh7cF0q4');

async function stageLog(messaging, internalPayload) {
  const fcmEvent = createFcmEvent(internalPayload, await messaging.firebaseDependencies.installations.getId());
  createAndEnqueueLogEvent(messaging, fcmEvent);
}

function createFcmEvent(internalPayload, fid) {
  var _a, _b;

  const fcmEvent = {};
  /* eslint-disable camelcase */
  // some fields should always be non-null. Still check to ensure.

  if (!!internalPayload.from) {
    fcmEvent.project_number = internalPayload.from;
  }

  if (!!internalPayload.fcm_message_id) {
    fcmEvent.message_id = internalPayload.fcm_message_id;
  }

  fcmEvent.instance_id = fid;

  if (!!internalPayload.notification) {
    fcmEvent.message_type = MessageType$1.DISPLAY_NOTIFICATION.toString();
  } else {
    fcmEvent.message_type = MessageType$1.DATA_MESSAGE.toString();
  }

  fcmEvent.sdk_platform = SDK_PLATFORM_WEB.toString();
  fcmEvent.package_name = self.origin.replace(/(^\w+:|^)\/\//, '');

  if (!!internalPayload.collapse_key) {
    fcmEvent.collapse_key = internalPayload.collapse_key;
  }

  fcmEvent.event = EVENT_MESSAGE_DELIVERED.toString();

  if (!!((_a = internalPayload.fcmOptions) === null || _a === void 0 ? void 0 : _a.analytics_label)) {
    fcmEvent.analytics_label = (_b = internalPayload.fcmOptions) === null || _b === void 0 ? void 0 : _b.analytics_label;
  }
  /* eslint-enable camelcase */


  return fcmEvent;
}

function createAndEnqueueLogEvent(messaging, fcmEvent) {
  const logEvent = {};
  /* eslint-disable camelcase */

  logEvent.event_time_ms = Math.floor(Date.now()).toString();
  logEvent.source_extension_json_proto3 = JSON.stringify(fcmEvent); // eslint-disable-next-line camelcase

  messaging.logEvents.push(logEvent);
}

function _mergeStrings(s1, s2) {
  const resultArray = [];

  for (let i = 0; i < s1.length; i++) {
    resultArray.push(s1.charAt(i));

    if (i < s2.length) {
      resultArray.push(s2.charAt(i));
    }
  }

  return resultArray.join('');
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


async function onSubChange(event, messaging) {
  var _a, _b;

  const {
    newSubscription
  } = event;

  if (!newSubscription) {
    // Subscription revoked, delete token
    await deleteTokenInternal(messaging);
    return;
  }

  const tokenDetails = await dbGet(messaging.firebaseDependencies);
  await deleteTokenInternal(messaging);
  messaging.vapidKey = (_b = (_a = tokenDetails === null || tokenDetails === void 0 ? void 0 : tokenDetails.subscriptionOptions) === null || _a === void 0 ? void 0 : _a.vapidKey) !== null && _b !== void 0 ? _b : DEFAULT_VAPID_KEY;
  await getTokenInternal(messaging);
}

async function onPush(event, messaging) {
  const internalPayload = getMessagePayloadInternal(event);

  if (!internalPayload) {
    // Failed to get parsed MessagePayload from the PushEvent. Skip handling the push.
    return;
  } // log to Firelog with user consent


  if (messaging.deliveryMetricsExportedToBigQueryEnabled) {
    await stageLog(messaging, internalPayload);
  } // foreground handling: eventually passed to onMessage hook


  const clientList = await getClientList();

  if (hasVisibleClients(clientList)) {
    return sendMessagePayloadInternalToWindows(clientList, internalPayload);
  } // background handling: display if possible and pass to onBackgroundMessage hook


  if (!!internalPayload.notification) {
    await showNotification(wrapInternalPayload(internalPayload));
  }

  if (!messaging) {
    return;
  }

  if (!!messaging.onBackgroundMessageHandler) {
    const payload = externalizePayload(internalPayload);

    if (typeof messaging.onBackgroundMessageHandler === 'function') {
      messaging.onBackgroundMessageHandler(payload);
    } else {
      messaging.onBackgroundMessageHandler.next(payload);
    }
  }
}

async function onNotificationClick(event) {
  var _a, _b;

  const internalPayload = (_b = (_a = event.notification) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b[FCM_MSG];

  if (!internalPayload) {
    return;
  } else if (event.action) {
    // User clicked on an action button. This will allow developers to act on action button clicks
    // by using a custom onNotificationClick listener that they define.
    return;
  } // Prevent other listeners from receiving the event


  event.stopImmediatePropagation();
  event.notification.close(); // Note clicking on a notification with no link set will focus the Chrome's current tab.

  const link = getLink(internalPayload);

  if (!link) {
    return;
  } // FM should only open/focus links from app's origin.


  const url = new URL(link, self.location.href);
  const originUrl = new URL(self.location.origin);

  if (url.host !== originUrl.host) {
    return;
  }

  let client = await getWindowClient(url);

  if (!client) {
    client = await self.clients.openWindow(link); // Wait three seconds for the client to initialize and set up the message handler so that it
    // can receive the message.

    await sleep(3000);
  } else {
    client = await client.focus();
  }

  if (!client) {
    // Window Client will not be returned if it's for a third party origin.
    return;
  }

  internalPayload.messageType = MessageType.NOTIFICATION_CLICKED;
  internalPayload.isFirebaseMessaging = true;
  return client.postMessage(internalPayload);
}

function wrapInternalPayload(internalPayload) {
  const wrappedInternalPayload = Object.assign({}, internalPayload.notification); // Put the message payload under FCM_MSG name so we can identify the notification as being an FCM
  // notification vs a notification from somewhere else (i.e. normal web push or developer generated
  // notification).

  wrappedInternalPayload.data = {
    [FCM_MSG]: internalPayload
  };
  return wrappedInternalPayload;
}

function getMessagePayloadInternal({
  data
}) {
  if (!data) {
    return null;
  }

  try {
    return data.json();
  } catch (err) {
    // Not JSON so not an FCM message.
    return null;
  }
}
/**
 * @param url The URL to look for when focusing a client.
 * @return Returns an existing window client or a newly opened WindowClient.
 */


async function getWindowClient(url) {
  const clientList = await getClientList();

  for (const client of clientList) {
    const clientUrl = new URL(client.url, self.location.href);

    if (url.host === clientUrl.host) {
      return client;
    }
  }

  return null;
}
/**
 * @returns If there is currently a visible WindowClient, this method will resolve to true,
 * otherwise false.
 */


function hasVisibleClients(clientList) {
  return clientList.some(client => client.visibilityState === 'visible' && // Ignore chrome-extension clients as that matches the background pages of extensions, which
  // are always considered visible for some reason.
  !client.url.startsWith('chrome-extension://'));
}

function sendMessagePayloadInternalToWindows(clientList, internalPayload) {
  internalPayload.isFirebaseMessaging = true;
  internalPayload.messageType = MessageType.PUSH_RECEIVED;

  for (const client of clientList) {
    client.postMessage(internalPayload);
  }
}

function getClientList() {
  return self.clients.matchAll({
    type: 'window',
    includeUncontrolled: true // TS doesn't know that "type: 'window'" means it'll return WindowClient[]

  });
}

function showNotification(notificationPayloadInternal) {
  var _a; // Note: Firefox does not support the maxActions property.
  // https://developer.mozilla.org/en-US/docs/Web/API/notification/maxActions


  const {
    actions
  } = notificationPayloadInternal;
  const {
    maxActions
  } = Notification;

  if (actions && maxActions && actions.length > maxActions) {
    console.warn(`This browser only supports ${maxActions} actions. The remaining actions will not be displayed.`);
  }

  return self.registration.showNotification(
  /* title= */
  (_a = notificationPayloadInternal.title) !== null && _a !== void 0 ? _a : '', notificationPayloadInternal);
}

function getLink(payload) {
  var _a, _b, _c; // eslint-disable-next-line camelcase


  const link = (_b = (_a = payload.fcmOptions) === null || _a === void 0 ? void 0 : _a.link) !== null && _b !== void 0 ? _b : (_c = payload.notification) === null || _c === void 0 ? void 0 : _c.click_action;

  if (link) {
    return link;
  }

  if (isConsoleMessage(payload.data)) {
    // Notification created in the Firebase Console. Redirect to origin.
    return self.location.origin;
  } else {
    return null;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function extractAppConfig(app) {
  if (!app || !app.options) {
    throw getMissingValueError('App Configuration Object');
  }

  if (!app.name) {
    throw getMissingValueError('App Name');
  } // Required app config keys


  const configKeys = ['projectId', 'apiKey', 'appId', 'messagingSenderId'];
  const {
    options
  } = app;

  for (const keyName of configKeys) {
    if (!options[keyName]) {
      throw getMissingValueError(keyName);
    }
  }

  return {
    appName: app.name,
    projectId: options.projectId,
    apiKey: options.apiKey,
    appId: options.appId,
    senderId: options.messagingSenderId
  };
}

function getMissingValueError(valueName) {
  return ERROR_FACTORY.create("missing-app-config-values"
  /* MISSING_APP_CONFIG_VALUES */
  , {
    valueName
  });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


class MessagingService {
  constructor(app, installations, analyticsProvider) {
    // logging is only done with end user consent. Default to false.
    this.deliveryMetricsExportedToBigQueryEnabled = false;
    this.onBackgroundMessageHandler = null;
    this.onMessageHandler = null;
    this.logEvents = [];
    this.isLogServiceStarted = false;
    const appConfig = extractAppConfig(app);
    this.firebaseDependencies = {
      app,
      appConfig,
      installations,
      analyticsProvider
    };
  }

  _delete() {
    return Promise.resolve();
  }

}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const SwMessagingFactory = container => {
  const messaging = new MessagingService(container.getProvider('app').getImmediate(), container.getProvider('installations-internal').getImmediate(), container.getProvider('analytics-internal'));
  self.addEventListener('push', e => {
    e.waitUntil(onPush(e, messaging));
  });
  self.addEventListener('pushsubscriptionchange', e => {
    e.waitUntil(onSubChange(e, messaging));
  });
  self.addEventListener('notificationclick', e => {
    e.waitUntil(onNotificationClick(e));
  });
  return messaging;
};
/**
 * The messaging instance registered in sw is named differently than that of in client. This is
 * because both `registerMessagingInWindow` and `registerMessagingInSw` would be called in
 * `messaging-compat` and component with the same name can only be registered once.
 */


function registerMessagingInSw() {
  (0, _app._registerComponent)(new _component.Component('messaging-sw', SwMessagingFactory, "PUBLIC"
  /* PUBLIC */
  ));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Checks whether all required APIs exist within SW Context
 * @returns a Promise that resolves to a boolean.
 *
 * @public
 */


async function isSwSupported() {
  // firebase-js-sdk/issues/2393 reveals that idb#open in Safari iframe and Firefox private browsing
  // might be prohibited to run. In these contexts, an error would be thrown during the messaging
  // instantiating phase, informing the developers to import/call isSupported for special handling.
  return (await (0, _util.validateIndexedDBOpenable)()) && 'indexedDB' in self && indexedDB !== null && 'PushManager' in self && 'Notification' in self && ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') && PushSubscription.prototype.hasOwnProperty('getKey');
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function onBackgroundMessage$1(messaging, nextOrObserver) {
  if (self.document !== undefined) {
    throw ERROR_FACTORY.create("only-available-in-sw"
    /* AVAILABLE_IN_SW */
    );
  }

  messaging.onBackgroundMessageHandler = nextOrObserver;
  return () => {
    messaging.onBackgroundMessageHandler = null;
  };
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function _setDeliveryMetricsExportedToBigQueryEnabled(messaging, enable) {
  messaging.deliveryMetricsExportedToBigQueryEnabled = enable;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Retrieves a Firebase Cloud Messaging instance.
 *
 * @returns The Firebase Cloud Messaging instance associated with the provided firebase app.
 *
 * @public
 */


function getMessagingInSw(app = (0, _app.getApp)()) {
  // Conscious decision to make this async check non-blocking during the messaging instance
  // initialization phase for performance consideration. An error would be thrown latter for
  // developer's information. Developers can then choose to import and call `isSupported` for
  // special handling.
  isSwSupported().then(isSupported => {
    // If `isSwSupported()` resolved, but returned false.
    if (!isSupported) {
      throw ERROR_FACTORY.create("unsupported-browser"
      /* UNSUPPORTED_BROWSER */
      );
    }
  }, _ => {
    // If `isSwSupported()` rejected.
    throw ERROR_FACTORY.create("indexed-db-unsupported"
    /* INDEXED_DB_UNSUPPORTED */
    );
  });
  return (0, _app._getProvider)((0, _util.getModularInstance)(app), 'messaging-sw').getImmediate();
}
/**
 * Called when a message is received while the app is in the background. An app is considered to be
 * in the background if no active window is displayed.
 *
 * @param messaging - The {@link Messaging} instance.
 * @param nextOrObserver - This function, or observer object with `next` defined, is called when a
 * message is received and the app is currently in the background.
 *
 * @returns To stop listening for messages execute this returned function
 *
 * @public
 */


function onBackgroundMessage(messaging, nextOrObserver) {
  messaging = (0, _util.getModularInstance)(messaging);
  return onBackgroundMessage$1(messaging, nextOrObserver);
}
/**
 * Enables or disables Firebase Cloud Messaging message delivery metrics export to BigQuery. By
 * default, message delivery metrics are not exported to BigQuery. Use this method to enable or
 * disable the export at runtime.
 *
 * @param messaging - The `FirebaseMessaging` instance.
 * @param enable - Whether Firebase Cloud Messaging should export message delivery metrics to
 * BigQuery.
 *
 * @public
 */


function setDeliveryMetricsExportedToBigQueryEnabled(messaging, enable) {
  messaging = (0, _util.getModularInstance)(messaging);
  return _setDeliveryMetricsExportedToBigQueryEnabled(messaging, enable);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


registerMessagingInSw();
},{"@firebase/installations":"node_modules/@firebase/installations/dist/index.esm2017.js","@firebase/component":"node_modules/@firebase/component/dist/index.esm.js","idb":"node_modules/idb/build/idb.js","@firebase/util":"node_modules/@firebase/util/dist/index.esm.js","@firebase/app":"node_modules/@firebase/app/dist/index.esm2017.js"}],"node_modules/@firebase/messaging-compat/dist/index.esm2017.js":[function(require,module,exports) {
"use strict";

var _appCompat = _interopRequireDefault(require("@firebase/app-compat"));

var _component = require("@firebase/component");

var _messaging = require("@firebase/messaging");

var _sw = require("@firebase/messaging/sw");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const name = "@firebase/messaging-compat";
const version = "0.1.0";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function isSupported() {
  if (self && 'ServiceWorkerGlobalScope' in self) {
    // Running in ServiceWorker context
    return isSwSupported();
  } else {
    // Assume we are in the window context.
    return isWindowSupported();
  }
}
/**
 * Checks to see if the required APIs exist.
 */


function isWindowSupported() {
  return 'indexedDB' in window && indexedDB !== null && navigator.cookieEnabled && 'serviceWorker' in navigator && 'PushManager' in window && 'Notification' in window && 'fetch' in window && ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') && PushSubscription.prototype.hasOwnProperty('getKey');
}
/**
 * Checks to see if the required APIs exist within SW Context.
 */


function isSwSupported() {
  return 'indexedDB' in self && indexedDB !== null && 'PushManager' in self && 'Notification' in self && ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') && PushSubscription.prototype.hasOwnProperty('getKey');
}

class MessagingCompatImpl {
  constructor(app, _delegate) {
    this.app = app;
    this._delegate = _delegate;
    this.app = app;
    this._delegate = _delegate;
  }

  async getToken(options) {
    return (0, _messaging.getToken)(this._delegate, options);
  }

  async deleteToken() {
    return (0, _messaging.deleteToken)(this._delegate);
  }

  onMessage(nextOrObserver) {
    return (0, _messaging.onMessage)(this._delegate, nextOrObserver);
  }

  onBackgroundMessage(nextOrObserver) {
    return (0, _sw.onBackgroundMessage)(this._delegate, nextOrObserver);
  }

}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const messagingCompatFactory = container => {
  if (self && 'ServiceWorkerGlobalScope' in self) {
    // in sw
    return new MessagingCompatImpl(container.getProvider('app-compat').getImmediate(), container.getProvider('messaging-sw').getImmediate());
  } else {
    // in window
    return new MessagingCompatImpl(container.getProvider('app-compat').getImmediate(), container.getProvider('messaging').getImmediate());
  }
};

const NAMESPACE_EXPORTS = {
  isSupported
};

function registerMessagingCompat() {
  _appCompat.default.INTERNAL.registerComponent(new _component.Component('messaging-compat', messagingCompatFactory, "PUBLIC"
  /* PUBLIC */
  ).setServiceProps(NAMESPACE_EXPORTS));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


registerMessagingCompat();

_appCompat.default.registerVersion(name, version);
},{"@firebase/app-compat":"node_modules/@firebase/app-compat/dist/index.esm2017.js","@firebase/component":"node_modules/@firebase/component/dist/index.esm.js","@firebase/messaging":"node_modules/@firebase/messaging/dist/index.esm2017.js","@firebase/messaging/sw":"node_modules/@firebase/messaging/dist/index.sw.esm2017.js"}],"node_modules/@firebase/storage/dist/index.esm2017.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._dataFromString = dataFromString;
exports._getChild = _getChild;
exports._invalidArgument = invalidArgument;
exports._invalidRootOperation = invalidRootOperation;
exports.connectStorageEmulator = connectStorageEmulator;
exports.deleteObject = deleteObject;
exports.getDownloadURL = getDownloadURL;
exports.getMetadata = getMetadata;
exports.getStorage = getStorage;
exports.list = list;
exports.listAll = listAll;
exports.ref = ref;
exports.updateMetadata = updateMetadata;
exports.uploadBytes = uploadBytes;
exports.uploadBytesResumable = uploadBytesResumable;
exports.uploadString = uploadString;
exports._UploadTask = exports._TaskState = exports._TaskEvent = exports._Location = exports._FbsBlob = exports.StringFormat = void 0;

var _app = require("@firebase/app");

var _util = require("@firebase/util");

var _component = require("@firebase/component");

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Error codes for requests made by the the XhrIo wrapper.
 */
var ErrorCode;

(function (ErrorCode) {
  ErrorCode[ErrorCode["NO_ERROR"] = 0] = "NO_ERROR";
  ErrorCode[ErrorCode["NETWORK_ERROR"] = 1] = "NETWORK_ERROR";
  ErrorCode[ErrorCode["ABORT"] = 2] = "ABORT";
})(ErrorCode || (ErrorCode = {}));
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @fileoverview Constants used in the Firebase Storage library.
 */

/**
 * Domain name for firebase storage.
 */


const DEFAULT_HOST = 'firebasestorage.googleapis.com';
/**
 * The key in Firebase config json for the storage bucket.
 */

const CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';
/**
 * 2 minutes
 *
 * The timeout for all operations except upload.
 */

const DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;
/**
 * 10 minutes
 *
 * The timeout for upload.
 */

const DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;
/**
 * An error returned by the Firebase Storage SDK.
 * @public
 */

class StorageError extends _util.FirebaseError {
  /**
   * @param code - A StorageErrorCode string to be prefixed with 'storage/' and
   *  added to the end of the message.
   * @param message  - Error message.
   */
  constructor(code, message) {
    super(prependCode(code), `Firebase Storage: ${message} (${prependCode(code)})`);
    /**
     * Stores custom error data unque to StorageError.
     */

    this.customData = {
      serverResponse: null
    };
    this._baseMessage = this.message; // Without this, `instanceof StorageError`, in tests for example,
    // returns false.

    Object.setPrototypeOf(this, StorageError.prototype);
  }
  /**
   * Compares a StorageErrorCode against this error's code, filtering out the prefix.
   */


  _codeEquals(code) {
    return prependCode(code) === this.code;
  }
  /**
   * Optional response message that was added by the server.
   */


  get serverResponse() {
    return this.customData.serverResponse;
  }

  set serverResponse(serverResponse) {
    this.customData.serverResponse = serverResponse;

    if (this.customData.serverResponse) {
      this.message = `${this._baseMessage}\n${this.customData.serverResponse}`;
    } else {
      this.message = this._baseMessage;
    }
  }

}

function prependCode(code) {
  return 'storage/' + code;
}

function unknown() {
  const message = 'An unknown error occurred, please check the error payload for ' + 'server response.';
  return new StorageError("unknown"
  /* UNKNOWN */
  , message);
}

function objectNotFound(path) {
  return new StorageError("object-not-found"
  /* OBJECT_NOT_FOUND */
  , "Object '" + path + "' does not exist.");
}

function quotaExceeded(bucket) {
  return new StorageError("quota-exceeded"
  /* QUOTA_EXCEEDED */
  , "Quota for bucket '" + bucket + "' exceeded, please view quota on " + 'https://firebase.google.com/pricing/.');
}

function unauthenticated() {
  const message = 'User is not authenticated, please authenticate using Firebase ' + 'Authentication and try again.';
  return new StorageError("unauthenticated"
  /* UNAUTHENTICATED */
  , message);
}

function unauthorizedApp() {
  return new StorageError("unauthorized-app"
  /* UNAUTHORIZED_APP */
  , 'This app does not have permission to access Firebase Storage on this project.');
}

function unauthorized(path) {
  return new StorageError("unauthorized"
  /* UNAUTHORIZED */
  , "User does not have permission to access '" + path + "'.");
}

function retryLimitExceeded() {
  return new StorageError("retry-limit-exceeded"
  /* RETRY_LIMIT_EXCEEDED */
  , 'Max retry time for operation exceeded, please try again.');
}

function canceled() {
  return new StorageError("canceled"
  /* CANCELED */
  , 'User canceled the upload/download.');
}

function invalidUrl(url) {
  return new StorageError("invalid-url"
  /* INVALID_URL */
  , "Invalid URL '" + url + "'.");
}

function invalidDefaultBucket(bucket) {
  return new StorageError("invalid-default-bucket"
  /* INVALID_DEFAULT_BUCKET */
  , "Invalid default bucket '" + bucket + "'.");
}

function noDefaultBucket() {
  return new StorageError("no-default-bucket"
  /* NO_DEFAULT_BUCKET */
  , 'No default bucket ' + "found. Did you set the '" + CONFIG_STORAGE_BUCKET_KEY + "' property when initializing the app?");
}

function cannotSliceBlob() {
  return new StorageError("cannot-slice-blob"
  /* CANNOT_SLICE_BLOB */
  , 'Cannot slice blob for upload. Please retry the upload.');
}

function serverFileWrongSize() {
  return new StorageError("server-file-wrong-size"
  /* SERVER_FILE_WRONG_SIZE */
  , 'Server recorded incorrect upload file size, please retry the upload.');
}

function noDownloadURL() {
  return new StorageError("no-download-url"
  /* NO_DOWNLOAD_URL */
  , 'The given file does not have any download URLs.');
}
/**
 * @internal
 */


function invalidArgument(message) {
  return new StorageError("invalid-argument"
  /* INVALID_ARGUMENT */
  , message);
}

function appDeleted() {
  return new StorageError("app-deleted"
  /* APP_DELETED */
  , 'The Firebase app was deleted.');
}
/**
 * @param name - The name of the operation that was invalid.
 *
 * @internal
 */


function invalidRootOperation(name) {
  return new StorageError("invalid-root-operation"
  /* INVALID_ROOT_OPERATION */
  , "The operation '" + name + "' cannot be performed on a root reference, create a non-root " + "reference using child, such as .child('file.png').");
}
/**
 * @param format - The format that was not valid.
 * @param message - A message describing the format violation.
 */


function invalidFormat(format, message) {
  return new StorageError("invalid-format"
  /* INVALID_FORMAT */
  , "String does not match format '" + format + "': " + message);
}
/**
 * @param message - A message describing the internal error.
 */


function internalError(message) {
  throw new StorageError("internal-error"
  /* INTERNAL_ERROR */
  , 'Internal error: ' + message);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Network layer for browsers. We use this instead of goog.net.XhrIo because
 * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.
 */


class XhrConnection {
  constructor() {
    this.sent_ = false;
    this.xhr_ = new XMLHttpRequest();
    this.errorCode_ = ErrorCode.NO_ERROR;
    this.sendPromise_ = new Promise(resolve => {
      this.xhr_.addEventListener('abort', () => {
        this.errorCode_ = ErrorCode.ABORT;
        resolve();
      });
      this.xhr_.addEventListener('error', () => {
        this.errorCode_ = ErrorCode.NETWORK_ERROR;
        resolve();
      });
      this.xhr_.addEventListener('load', () => {
        resolve();
      });
    });
  }
  /**
   * @override
   */


  send(url, method, body, headers) {
    if (this.sent_) {
      throw internalError('cannot .send() more than once');
    }

    this.sent_ = true;
    this.xhr_.open(method, url, true);

    if (headers !== undefined) {
      for (const key in headers) {
        if (headers.hasOwnProperty(key)) {
          this.xhr_.setRequestHeader(key, headers[key].toString());
        }
      }
    }

    if (body !== undefined) {
      this.xhr_.send(body);
    } else {
      this.xhr_.send();
    }

    return this.sendPromise_;
  }
  /**
   * @override
   */


  getErrorCode() {
    if (!this.sent_) {
      throw internalError('cannot .getErrorCode() before sending');
    }

    return this.errorCode_;
  }
  /**
   * @override
   */


  getStatus() {
    if (!this.sent_) {
      throw internalError('cannot .getStatus() before sending');
    }

    try {
      return this.xhr_.status;
    } catch (e) {
      return -1;
    }
  }
  /**
   * @override
   */


  getResponseText() {
    if (!this.sent_) {
      throw internalError('cannot .getResponseText() before sending');
    }

    return this.xhr_.responseText;
  }
  /**
   * Aborts the request.
   * @override
   */


  abort() {
    this.xhr_.abort();
  }
  /**
   * @override
   */


  getResponseHeader(header) {
    return this.xhr_.getResponseHeader(header);
  }
  /**
   * @override
   */


  addUploadProgressListener(listener) {
    if (this.xhr_.upload != null) {
      this.xhr_.upload.addEventListener('progress', listener);
    }
  }
  /**
   * @override
   */


  removeUploadProgressListener(listener) {
    if (this.xhr_.upload != null) {
      this.xhr_.upload.removeEventListener('progress', listener);
    }
  }

}

function newConnection() {
  return new XhrConnection();
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Factory-like class for creating XhrIo instances.
 */


class ConnectionPool {
  createConnection() {
    return newConnection();
  }

}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Firebase Storage location data.
 *
 * @internal
 */


class Location {
  constructor(bucket, path) {
    this.bucket = bucket;
    this.path_ = path;
  }

  get path() {
    return this.path_;
  }

  get isRoot() {
    return this.path.length === 0;
  }

  fullServerUrl() {
    const encode = encodeURIComponent;
    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);
  }

  bucketOnlyServerUrl() {
    const encode = encodeURIComponent;
    return '/b/' + encode(this.bucket) + '/o';
  }

  static makeFromBucketSpec(bucketString, host) {
    let bucketLocation;

    try {
      bucketLocation = Location.makeFromUrl(bucketString, host);
    } catch (e) {
      // Not valid URL, use as-is. This lets you put bare bucket names in
      // config.
      return new Location(bucketString, '');
    }

    if (bucketLocation.path === '') {
      return bucketLocation;
    } else {
      throw invalidDefaultBucket(bucketString);
    }
  }

  static makeFromUrl(url, host) {
    let location = null;
    const bucketDomain = '([A-Za-z0-9.\\-_]+)';

    function gsModify(loc) {
      if (loc.path.charAt(loc.path.length - 1) === '/') {
        loc.path_ = loc.path_.slice(0, -1);
      }
    }

    const gsPath = '(/(.*))?$';
    const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');
    const gsIndices = {
      bucket: 1,
      path: 3
    };

    function httpModify(loc) {
      loc.path_ = decodeURIComponent(loc.path);
    }

    const version = 'v[A-Za-z0-9_]+';
    const firebaseStorageHost = host.replace(/[.]/g, '\\.');
    const firebaseStoragePath = '(/([^?#]*).*)?$';
    const firebaseStorageRegExp = new RegExp(`^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`, 'i');
    const firebaseStorageIndices = {
      bucket: 1,
      path: 3
    };
    const cloudStorageHost = host === DEFAULT_HOST ? '(?:storage.googleapis.com|storage.cloud.google.com)' : host;
    const cloudStoragePath = '([^?#]*)';
    const cloudStorageRegExp = new RegExp(`^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`, 'i');
    const cloudStorageIndices = {
      bucket: 1,
      path: 2
    };
    const groups = [{
      regex: gsRegex,
      indices: gsIndices,
      postModify: gsModify
    }, {
      regex: firebaseStorageRegExp,
      indices: firebaseStorageIndices,
      postModify: httpModify
    }, {
      regex: cloudStorageRegExp,
      indices: cloudStorageIndices,
      postModify: httpModify
    }];

    for (let i = 0; i < groups.length; i++) {
      const group = groups[i];
      const captures = group.regex.exec(url);

      if (captures) {
        const bucketValue = captures[group.indices.bucket];
        let pathValue = captures[group.indices.path];

        if (!pathValue) {
          pathValue = '';
        }

        location = new Location(bucketValue, pathValue);
        group.postModify(location);
        break;
      }
    }

    if (location == null) {
      throw invalidUrl(url);
    }

    return location;
  }

}
/**
 * A request whose promise always fails.
 */


exports._Location = Location;

class FailRequest {
  constructor(error) {
    this.promise_ = Promise.reject(error);
  }
  /** @inheritDoc */


  getPromise() {
    return this.promise_;
  }
  /** @inheritDoc */


  cancel(_appDelete = false) {}

}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @param f May be invoked
 *     before the function returns.
 * @param callback Get all the arguments passed to the function
 *     passed to f, including the initial boolean.
 */


function start(f, // eslint-disable-next-line @typescript-eslint/no-explicit-any
callback, timeout) {
  // TODO(andysoto): make this code cleaner (probably refactor into an actual
  // type instead of a bunch of functions with state shared in the closure)
  let waitSeconds = 1; // Would type this as "number" but that doesn't work for Node so ¯\_(ツ)_/¯
  // TODO: find a way to exclude Node type definition for storage because storage only works in browser
  // eslint-disable-next-line @typescript-eslint/no-explicit-any

  let timeoutId = null;
  let hitTimeout = false;
  let cancelState = 0;

  function canceled() {
    return cancelState === 2;
  }

  let triggeredCallback = false;

  function triggerCallback(...args) {
    if (!triggeredCallback) {
      triggeredCallback = true;
      callback.apply(null, args);
    }
  }

  function callWithDelay(millis) {
    timeoutId = setTimeout(() => {
      timeoutId = null;
      f(handler, canceled());
    }, millis);
  }

  function handler(success, ...args) {
    if (triggeredCallback) {
      return;
    }

    if (success) {
      triggerCallback.call(null, success, ...args);
      return;
    }

    const mustStop = canceled() || hitTimeout;

    if (mustStop) {
      triggerCallback.call(null, success, ...args);
      return;
    }

    if (waitSeconds < 64) {
      /* TODO(andysoto): don't back off so quickly if we know we're offline. */
      waitSeconds *= 2;
    }

    let waitMillis;

    if (cancelState === 1) {
      cancelState = 2;
      waitMillis = 0;
    } else {
      waitMillis = (waitSeconds + Math.random()) * 1000;
    }

    callWithDelay(waitMillis);
  }

  let stopped = false;

  function stop(wasTimeout) {
    if (stopped) {
      return;
    }

    stopped = true;

    if (triggeredCallback) {
      return;
    }

    if (timeoutId !== null) {
      if (!wasTimeout) {
        cancelState = 2;
      }

      clearTimeout(timeoutId);
      callWithDelay(0);
    } else {
      if (!wasTimeout) {
        cancelState = 1;
      }
    }
  }

  callWithDelay(0);
  setTimeout(() => {
    hitTimeout = true;
    stop(true);
  }, timeout);
  return stop;
}
/**
 * Stops the retry loop from repeating.
 * If the function is currently "in between" retries, it is invoked immediately
 * with the second parameter as "true". Otherwise, it will be invoked once more
 * after the current invocation finishes iff the current invocation would have
 * triggered another retry.
 */


function stop(id) {
  id(false);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function isJustDef(p) {
  return p !== void 0;
} // eslint-disable-next-line @typescript-eslint/ban-types


function isFunction(p) {
  return typeof p === 'function';
}

function isNonArrayObject(p) {
  return typeof p === 'object' && !Array.isArray(p);
}

function isString(p) {
  return typeof p === 'string' || p instanceof String;
}

function isNativeBlob(p) {
  return isNativeBlobDefined() && p instanceof Blob;
}

function isNativeBlobDefined() {
  return typeof Blob !== 'undefined';
}

function validateNumber(argument, minValue, maxValue, value) {
  if (value < minValue) {
    throw invalidArgument(`Invalid value for '${argument}'. Expected ${minValue} or greater.`);
  }

  if (value > maxValue) {
    throw invalidArgument(`Invalid value for '${argument}'. Expected ${maxValue} or less.`);
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function makeUrl(urlPart, host, protocol) {
  let origin = host;

  if (protocol == null) {
    origin = `https://${host}`;
  }

  return `${protocol}://${origin}/v0${urlPart}`;
}

function makeQueryString(params) {
  const encode = encodeURIComponent;
  let queryPart = '?';

  for (const key in params) {
    if (params.hasOwnProperty(key)) {
      const nextPart = encode(key) + '=' + encode(params[key]);
      queryPart = queryPart + nextPart + '&';
    }
  } // Chop off the extra '&' or '?' on the end


  queryPart = queryPart.slice(0, -1);
  return queryPart;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


class NetworkRequest {
  constructor(url, method, headers, body, successCodes, additionalRetryCodes, callback, errorCallback, timeout, progressCallback, pool) {
    this.pendingConnection_ = null;
    this.backoffId_ = null;
    this.canceled_ = false;
    this.appDelete_ = false;
    this.url_ = url;
    this.method_ = method;
    this.headers_ = headers;
    this.body_ = body;
    this.successCodes_ = successCodes.slice();
    this.additionalRetryCodes_ = additionalRetryCodes.slice();
    this.callback_ = callback;
    this.errorCallback_ = errorCallback;
    this.progressCallback_ = progressCallback;
    this.timeout_ = timeout;
    this.pool_ = pool;
    this.promise_ = new Promise((resolve, reject) => {
      this.resolve_ = resolve;
      this.reject_ = reject;
      this.start_();
    });
  }
  /**
   * Actually starts the retry loop.
   */


  start_() {
    const self = this;

    function doTheRequest(backoffCallback, canceled) {
      if (canceled) {
        backoffCallback(false, new RequestEndStatus(false, null, true));
        return;
      }

      const connection = self.pool_.createConnection();
      self.pendingConnection_ = connection;

      function progressListener(progressEvent) {
        const loaded = progressEvent.loaded;
        const total = progressEvent.lengthComputable ? progressEvent.total : -1;

        if (self.progressCallback_ !== null) {
          self.progressCallback_(loaded, total);
        }
      }

      if (self.progressCallback_ !== null) {
        connection.addUploadProgressListener(progressListener);
      } // eslint-disable-next-line @typescript-eslint/no-floating-promises


      connection.send(self.url_, self.method_, self.body_, self.headers_).then(() => {
        if (self.progressCallback_ !== null) {
          connection.removeUploadProgressListener(progressListener);
        }

        self.pendingConnection_ = null;
        const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;
        const status = connection.getStatus();

        if (!hitServer || self.isRetryStatusCode_(status)) {
          const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;
          backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));
          return;
        }

        const successCode = self.successCodes_.indexOf(status) !== -1;
        backoffCallback(true, new RequestEndStatus(successCode, connection));
      });
    }
    /**
     * @param requestWentThrough - True if the request eventually went
     *     through, false if it hit the retry limit or was canceled.
     */


    function backoffDone(requestWentThrough, status) {
      const resolve = self.resolve_;
      const reject = self.reject_;
      const connection = status.connection;

      if (status.wasSuccessCode) {
        try {
          const result = self.callback_(connection, connection.getResponseText());

          if (isJustDef(result)) {
            resolve(result);
          } else {
            resolve();
          }
        } catch (e) {
          reject(e);
        }
      } else {
        if (connection !== null) {
          const err = unknown();
          err.serverResponse = connection.getResponseText();

          if (self.errorCallback_) {
            reject(self.errorCallback_(connection, err));
          } else {
            reject(err);
          }
        } else {
          if (status.canceled) {
            const err = self.appDelete_ ? appDeleted() : canceled();
            reject(err);
          } else {
            const err = retryLimitExceeded();
            reject(err);
          }
        }
      }
    }

    if (this.canceled_) {
      backoffDone(false, new RequestEndStatus(false, null, true));
    } else {
      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);
    }
  }
  /** @inheritDoc */


  getPromise() {
    return this.promise_;
  }
  /** @inheritDoc */


  cancel(appDelete) {
    this.canceled_ = true;
    this.appDelete_ = appDelete || false;

    if (this.backoffId_ !== null) {
      stop(this.backoffId_);
    }

    if (this.pendingConnection_ !== null) {
      this.pendingConnection_.abort();
    }
  }

  isRetryStatusCode_(status) {
    // The codes for which to retry came from this page:
    // https://cloud.google.com/storage/docs/exponential-backoff
    const isFiveHundredCode = status >= 500 && status < 600;
    const extraRetryCodes = [// Request Timeout: web server didn't receive full request in time.
    408, // Too Many Requests: you're getting rate-limited, basically.
    429];
    const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;
    const isRequestSpecificRetryCode = this.additionalRetryCodes_.indexOf(status) !== -1;
    return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;
  }

}
/**
 * A collection of information about the result of a network request.
 * @param opt_canceled - Defaults to false.
 */


class RequestEndStatus {
  constructor(wasSuccessCode, connection, canceled) {
    this.wasSuccessCode = wasSuccessCode;
    this.connection = connection;
    this.canceled = !!canceled;
  }

}

function addAuthHeader_(headers, authToken) {
  if (authToken !== null && authToken.length > 0) {
    headers['Authorization'] = 'Firebase ' + authToken;
  }
}

function addVersionHeader_(headers, firebaseVersion) {
  headers['X-Firebase-Storage-Version'] = 'webjs/' + (firebaseVersion !== null && firebaseVersion !== void 0 ? firebaseVersion : 'AppManager');
}

function addGmpidHeader_(headers, appId) {
  if (appId) {
    headers['X-Firebase-GMPID'] = appId;
  }
}

function addAppCheckHeader_(headers, appCheckToken) {
  if (appCheckToken !== null) {
    headers['X-Firebase-AppCheck'] = appCheckToken;
  }
}

function makeRequest(requestInfo, appId, authToken, appCheckToken, pool, firebaseVersion) {
  const queryPart = makeQueryString(requestInfo.urlParams);
  const url = requestInfo.url + queryPart;
  const headers = Object.assign({}, requestInfo.headers);
  addGmpidHeader_(headers, appId);
  addAuthHeader_(headers, authToken);
  addVersionHeader_(headers, firebaseVersion);
  addAppCheckHeader_(headers, appCheckToken);
  return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, pool);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function getBlobBuilder() {
  if (typeof BlobBuilder !== 'undefined') {
    return BlobBuilder;
  } else if (typeof WebKitBlobBuilder !== 'undefined') {
    return WebKitBlobBuilder;
  } else {
    return undefined;
  }
}
/**
 * Concatenates one or more values together and converts them to a Blob.
 *
 * @param args The values that will make up the resulting blob.
 * @return The blob.
 */


function getBlob(...args) {
  const BlobBuilder = getBlobBuilder();

  if (BlobBuilder !== undefined) {
    const bb = new BlobBuilder();

    for (let i = 0; i < args.length; i++) {
      bb.append(args[i]);
    }

    return bb.getBlob();
  } else {
    if (isNativeBlobDefined()) {
      return new Blob(args);
    } else {
      throw new StorageError("unsupported-environment"
      /* UNSUPPORTED_ENVIRONMENT */
      , "This browser doesn't seem to support creating Blobs");
    }
  }
}
/**
 * Slices the blob. The returned blob contains data from the start byte
 * (inclusive) till the end byte (exclusive). Negative indices cannot be used.
 *
 * @param blob The blob to be sliced.
 * @param start Index of the starting byte.
 * @param end Index of the ending byte.
 * @return The blob slice or null if not supported.
 */


function sliceBlob(blob, start, end) {
  if (blob.webkitSlice) {
    return blob.webkitSlice(start, end);
  } else if (blob.mozSlice) {
    return blob.mozSlice(start, end);
  } else if (blob.slice) {
    return blob.slice(start, end);
  }

  return null;
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Converts a Base64 encoded string to a binary string. */


function decodeBase64(encoded) {
  return atob(encoded);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An enumeration of the possible string formats for upload.
 * @public
 */


const StringFormat = {
  /**
   * Indicates the string should be interpreted "raw", that is, as normal text.
   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte
   * sequence.
   * Example: The string 'Hello! \\ud83d\\ude0a' becomes the byte sequence
   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a
   */
  RAW: 'raw',

  /**
   * Indicates the string should be interpreted as base64-encoded data.
   * Padding characters (trailing '='s) are optional.
   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence
   * ad 69 8e fb e1 3a b7 bf eb 97
   */
  BASE64: 'base64',

  /**
   * Indicates the string should be interpreted as base64url-encoded data.
   * Padding characters (trailing '='s) are optional.
   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence
   * ad 69 8e fb e1 3a b7 bf eb 97
   */
  BASE64URL: 'base64url',

  /**
   * Indicates the string is a data URL, such as one obtained from
   * canvas.toDataURL().
   * Example: the string 'data:application/octet-stream;base64,aaaa'
   * becomes the byte sequence
   * 69 a6 9a
   * (the content-type "application/octet-stream" is also applied, but can
   * be overridden in the metadata object).
   */
  DATA_URL: 'data_url'
};
exports.StringFormat = StringFormat;

class StringData {
  constructor(data, contentType) {
    this.data = data;
    this.contentType = contentType || null;
  }

}
/**
 * @internal
 */


function dataFromString(format, stringData) {
  switch (format) {
    case StringFormat.RAW:
      return new StringData(utf8Bytes_(stringData));

    case StringFormat.BASE64:
    case StringFormat.BASE64URL:
      return new StringData(base64Bytes_(format, stringData));

    case StringFormat.DATA_URL:
      return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));
    // do nothing
  } // assert(false);


  throw unknown();
}

function utf8Bytes_(value) {
  const b = [];

  for (let i = 0; i < value.length; i++) {
    let c = value.charCodeAt(i);

    if (c <= 127) {
      b.push(c);
    } else {
      if (c <= 2047) {
        b.push(192 | c >> 6, 128 | c & 63);
      } else {
        if ((c & 64512) === 55296) {
          // The start of a surrogate pair.
          const valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;

          if (!valid) {
            // The second surrogate wasn't there.
            b.push(239, 191, 189);
          } else {
            const hi = c;
            const lo = value.charCodeAt(++i);
            c = 65536 | (hi & 1023) << 10 | lo & 1023;
            b.push(240 | c >> 18, 128 | c >> 12 & 63, 128 | c >> 6 & 63, 128 | c & 63);
          }
        } else {
          if ((c & 64512) === 56320) {
            // Invalid low surrogate.
            b.push(239, 191, 189);
          } else {
            b.push(224 | c >> 12, 128 | c >> 6 & 63, 128 | c & 63);
          }
        }
      }
    }
  }

  return new Uint8Array(b);
}

function percentEncodedBytes_(value) {
  let decoded;

  try {
    decoded = decodeURIComponent(value);
  } catch (e) {
    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');
  }

  return utf8Bytes_(decoded);
}

function base64Bytes_(format, value) {
  switch (format) {
    case StringFormat.BASE64:
      {
        const hasMinus = value.indexOf('-') !== -1;
        const hasUnder = value.indexOf('_') !== -1;

        if (hasMinus || hasUnder) {
          const invalidChar = hasMinus ? '-' : '_';
          throw invalidFormat(format, "Invalid character '" + invalidChar + "' found: is it base64url encoded?");
        }

        break;
      }

    case StringFormat.BASE64URL:
      {
        const hasPlus = value.indexOf('+') !== -1;
        const hasSlash = value.indexOf('/') !== -1;

        if (hasPlus || hasSlash) {
          const invalidChar = hasPlus ? '+' : '/';
          throw invalidFormat(format, "Invalid character '" + invalidChar + "' found: is it base64 encoded?");
        }

        value = value.replace(/-/g, '+').replace(/_/g, '/');
        break;
      }
    // do nothing
  }

  let bytes;

  try {
    bytes = decodeBase64(value);
  } catch (e) {
    throw invalidFormat(format, 'Invalid character found');
  }

  const array = new Uint8Array(bytes.length);

  for (let i = 0; i < bytes.length; i++) {
    array[i] = bytes.charCodeAt(i);
  }

  return array;
}

class DataURLParts {
  constructor(dataURL) {
    this.base64 = false;
    this.contentType = null;
    const matches = dataURL.match(/^data:([^,]+)?,/);

    if (matches === null) {
      throw invalidFormat(StringFormat.DATA_URL, "Must be formatted 'data:[<mediatype>][;base64],<data>");
    }

    const middle = matches[1] || null;

    if (middle != null) {
      this.base64 = endsWith(middle, ';base64');
      this.contentType = this.base64 ? middle.substring(0, middle.length - ';base64'.length) : middle;
    }

    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);
  }

}

function dataURLBytes_(dataUrl) {
  const parts = new DataURLParts(dataUrl);

  if (parts.base64) {
    return base64Bytes_(StringFormat.BASE64, parts.rest);
  } else {
    return percentEncodedBytes_(parts.rest);
  }
}

function dataURLContentType_(dataUrl) {
  const parts = new DataURLParts(dataUrl);
  return parts.contentType;
}

function endsWith(s, end) {
  const longEnough = s.length >= end.length;

  if (!longEnough) {
    return false;
  }

  return s.substring(s.length - end.length) === end;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @param opt_elideCopy - If true, doesn't copy mutable input data
 *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be
 *     modified after this blob's construction.
 *
 * @internal
 */


class FbsBlob {
  constructor(data, elideCopy) {
    let size = 0;
    let blobType = '';

    if (isNativeBlob(data)) {
      this.data_ = data;
      size = data.size;
      blobType = data.type;
    } else if (data instanceof ArrayBuffer) {
      if (elideCopy) {
        this.data_ = new Uint8Array(data);
      } else {
        this.data_ = new Uint8Array(data.byteLength);
        this.data_.set(new Uint8Array(data));
      }

      size = this.data_.length;
    } else if (data instanceof Uint8Array) {
      if (elideCopy) {
        this.data_ = data;
      } else {
        this.data_ = new Uint8Array(data.length);
        this.data_.set(data);
      }

      size = data.length;
    }

    this.size_ = size;
    this.type_ = blobType;
  }

  size() {
    return this.size_;
  }

  type() {
    return this.type_;
  }

  slice(startByte, endByte) {
    if (isNativeBlob(this.data_)) {
      const realBlob = this.data_;
      const sliced = sliceBlob(realBlob, startByte, endByte);

      if (sliced === null) {
        return null;
      }

      return new FbsBlob(sliced);
    } else {
      const slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);
      return new FbsBlob(slice, true);
    }
  }

  static getBlob(...args) {
    if (isNativeBlobDefined()) {
      const blobby = args.map(val => {
        if (val instanceof FbsBlob) {
          return val.data_;
        } else {
          return val;
        }
      });
      return new FbsBlob(getBlob.apply(null, blobby));
    } else {
      const uint8Arrays = args.map(val => {
        if (isString(val)) {
          return dataFromString(StringFormat.RAW, val).data;
        } else {
          // Blobs don't exist, so this has to be a Uint8Array.
          return val.data_;
        }
      });
      let finalLength = 0;
      uint8Arrays.forEach(array => {
        finalLength += array.byteLength;
      });
      const merged = new Uint8Array(finalLength);
      let index = 0;
      uint8Arrays.forEach(array => {
        for (let i = 0; i < array.length; i++) {
          merged[index++] = array[i];
        }
      });
      return new FbsBlob(merged, true);
    }
  }

  uploadData() {
    return this.data_;
  }

}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns the Object resulting from parsing the given JSON, or null if the
 * given string does not represent a JSON object.
 */


exports._FbsBlob = FbsBlob;

function jsonObjectOrNull(s) {
  let obj;

  try {
    obj = JSON.parse(s);
  } catch (e) {
    return null;
  }

  if (isNonArrayObject(obj)) {
    return obj;
  } else {
    return null;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @fileoverview Contains helper methods for manipulating paths.
 */

/**
 * @return Null if the path is already at the root.
 */


function parent(path) {
  if (path.length === 0) {
    return null;
  }

  const index = path.lastIndexOf('/');

  if (index === -1) {
    return '';
  }

  const newPath = path.slice(0, index);
  return newPath;
}

function child(path, childPath) {
  const canonicalChildPath = childPath.split('/').filter(component => component.length > 0).join('/');

  if (path.length === 0) {
    return canonicalChildPath;
  } else {
    return path + '/' + canonicalChildPath;
  }
}
/**
 * Returns the last component of a path.
 * '/foo/bar' -> 'bar'
 * '/foo/bar/baz/' -> 'baz/'
 * '/a' -> 'a'
 */


function lastComponent(path) {
  const index = path.lastIndexOf('/', path.length - 2);

  if (index === -1) {
    return path;
  } else {
    return path.slice(index + 1);
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function noXform_(metadata, value) {
  return value;
}

class Mapping {
  constructor(server, local, writable, xform) {
    this.server = server;
    this.local = local || server;
    this.writable = !!writable;
    this.xform = xform || noXform_;
  }

}

let mappings_ = null;

function xformPath(fullPath) {
  if (!isString(fullPath) || fullPath.length < 2) {
    return fullPath;
  } else {
    return lastComponent(fullPath);
  }
}

function getMappings() {
  if (mappings_) {
    return mappings_;
  }

  const mappings = [];
  mappings.push(new Mapping('bucket'));
  mappings.push(new Mapping('generation'));
  mappings.push(new Mapping('metageneration'));
  mappings.push(new Mapping('name', 'fullPath', true));

  function mappingsXformPath(_metadata, fullPath) {
    return xformPath(fullPath);
  }

  const nameMapping = new Mapping('name');
  nameMapping.xform = mappingsXformPath;
  mappings.push(nameMapping);
  /**
   * Coerces the second param to a number, if it is defined.
   */

  function xformSize(_metadata, size) {
    if (size !== undefined) {
      return Number(size);
    } else {
      return size;
    }
  }

  const sizeMapping = new Mapping('size');
  sizeMapping.xform = xformSize;
  mappings.push(sizeMapping);
  mappings.push(new Mapping('timeCreated'));
  mappings.push(new Mapping('updated'));
  mappings.push(new Mapping('md5Hash', null, true));
  mappings.push(new Mapping('cacheControl', null, true));
  mappings.push(new Mapping('contentDisposition', null, true));
  mappings.push(new Mapping('contentEncoding', null, true));
  mappings.push(new Mapping('contentLanguage', null, true));
  mappings.push(new Mapping('contentType', null, true));
  mappings.push(new Mapping('metadata', 'customMetadata', true));
  mappings_ = mappings;
  return mappings_;
}

function addRef(metadata, service) {
  function generateRef() {
    const bucket = metadata['bucket'];
    const path = metadata['fullPath'];
    const loc = new Location(bucket, path);
    return service._makeStorageReference(loc);
  }

  Object.defineProperty(metadata, 'ref', {
    get: generateRef
  });
}

function fromResource(service, resource, mappings) {
  const metadata = {};
  metadata['type'] = 'file';
  const len = mappings.length;

  for (let i = 0; i < len; i++) {
    const mapping = mappings[i];
    metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);
  }

  addRef(metadata, service);
  return metadata;
}

function fromResourceString(service, resourceString, mappings) {
  const obj = jsonObjectOrNull(resourceString);

  if (obj === null) {
    return null;
  }

  const resource = obj;
  return fromResource(service, resource, mappings);
}

function downloadUrlFromResourceString(metadata, resourceString, host, protocol) {
  const obj = jsonObjectOrNull(resourceString);

  if (obj === null) {
    return null;
  }

  if (!isString(obj['downloadTokens'])) {
    // This can happen if objects are uploaded through GCS and retrieved
    // through list, so we don't want to throw an Error.
    return null;
  }

  const tokens = obj['downloadTokens'];

  if (tokens.length === 0) {
    return null;
  }

  const encode = encodeURIComponent;
  const tokensList = tokens.split(',');
  const urls = tokensList.map(token => {
    const bucket = metadata['bucket'];
    const path = metadata['fullPath'];
    const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);
    const base = makeUrl(urlPart, host, protocol);
    const queryString = makeQueryString({
      alt: 'media',
      token
    });
    return base + queryString;
  });
  return urls[0];
}

function toResourceString(metadata, mappings) {
  const resource = {};
  const len = mappings.length;

  for (let i = 0; i < len; i++) {
    const mapping = mappings[i];

    if (mapping.writable) {
      resource[mapping.server] = metadata[mapping.local];
    }
  }

  return JSON.stringify(resource);
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const PREFIXES_KEY = 'prefixes';
const ITEMS_KEY = 'items';

function fromBackendResponse(service, bucket, resource) {
  const listResult = {
    prefixes: [],
    items: [],
    nextPageToken: resource['nextPageToken']
  };

  if (resource[PREFIXES_KEY]) {
    for (const path of resource[PREFIXES_KEY]) {
      const pathWithoutTrailingSlash = path.replace(/\/$/, '');

      const reference = service._makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));

      listResult.prefixes.push(reference);
    }
  }

  if (resource[ITEMS_KEY]) {
    for (const item of resource[ITEMS_KEY]) {
      const reference = service._makeStorageReference(new Location(bucket, item['name']));

      listResult.items.push(reference);
    }
  }

  return listResult;
}

function fromResponseString(service, bucket, resourceString) {
  const obj = jsonObjectOrNull(resourceString);

  if (obj === null) {
    return null;
  }

  const resource = obj;
  return fromBackendResponse(service, bucket, resource);
}

class RequestInfo {
  constructor(url, method,
  /**
   * Returns the value with which to resolve the request's promise. Only called
   * if the request is successful. Throw from this function to reject the
   * returned Request's promise with the thrown error.
   * Note: The XhrIo passed to this function may be reused after this callback
   * returns. Do not keep a reference to it in any way.
   */
  handler, timeout) {
    this.url = url;
    this.method = method;
    this.handler = handler;
    this.timeout = timeout;
    this.urlParams = {};
    this.headers = {};
    this.body = null;
    this.errorHandler = null;
    /**
     * Called with the current number of bytes uploaded and total size (-1 if not
     * computable) of the request body (i.e. used to report upload progress).
     */

    this.progressCallback = null;
    this.successCodes = [200];
    this.additionalRetryCodes = [];
  }

}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Throws the UNKNOWN StorageError if cndn is false.
 */


function handlerCheck(cndn) {
  if (!cndn) {
    throw unknown();
  }
}

function metadataHandler(service, mappings) {
  function handler(xhr, text) {
    const metadata = fromResourceString(service, text, mappings);
    handlerCheck(metadata !== null);
    return metadata;
  }

  return handler;
}

function listHandler(service, bucket) {
  function handler(xhr, text) {
    const listResult = fromResponseString(service, bucket, text);
    handlerCheck(listResult !== null);
    return listResult;
  }

  return handler;
}

function downloadUrlHandler(service, mappings) {
  function handler(xhr, text) {
    const metadata = fromResourceString(service, text, mappings);
    handlerCheck(metadata !== null);
    return downloadUrlFromResourceString(metadata, text, service.host, service._protocol);
  }

  return handler;
}

function sharedErrorHandler(location) {
  function errorHandler(xhr, err) {
    let newErr;

    if (xhr.getStatus() === 401) {
      if ( // This exact message string is the only consistent part of the
      // server's error response that identifies it as an App Check error.
      xhr.getResponseText().includes('Firebase App Check token is invalid')) {
        newErr = unauthorizedApp();
      } else {
        newErr = unauthenticated();
      }
    } else {
      if (xhr.getStatus() === 402) {
        newErr = quotaExceeded(location.bucket);
      } else {
        if (xhr.getStatus() === 403) {
          newErr = unauthorized(location.path);
        } else {
          newErr = err;
        }
      }
    }

    newErr.serverResponse = err.serverResponse;
    return newErr;
  }

  return errorHandler;
}

function objectErrorHandler(location) {
  const shared = sharedErrorHandler(location);

  function errorHandler(xhr, err) {
    let newErr = shared(xhr, err);

    if (xhr.getStatus() === 404) {
      newErr = objectNotFound(location.path);
    }

    newErr.serverResponse = err.serverResponse;
    return newErr;
  }

  return errorHandler;
}

function getMetadata$2(service, location, mappings) {
  const urlPart = location.fullServerUrl();
  const url = makeUrl(urlPart, service.host, service._protocol);
  const method = 'GET';
  const timeout = service.maxOperationRetryTime;
  const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);
  requestInfo.errorHandler = objectErrorHandler(location);
  return requestInfo;
}

function list$2(service, location, delimiter, pageToken, maxResults) {
  const urlParams = {};

  if (location.isRoot) {
    urlParams['prefix'] = '';
  } else {
    urlParams['prefix'] = location.path + '/';
  }

  if (delimiter && delimiter.length > 0) {
    urlParams['delimiter'] = delimiter;
  }

  if (pageToken) {
    urlParams['pageToken'] = pageToken;
  }

  if (maxResults) {
    urlParams['maxResults'] = maxResults;
  }

  const urlPart = location.bucketOnlyServerUrl();
  const url = makeUrl(urlPart, service.host, service._protocol);
  const method = 'GET';
  const timeout = service.maxOperationRetryTime;
  const requestInfo = new RequestInfo(url, method, listHandler(service, location.bucket), timeout);
  requestInfo.urlParams = urlParams;
  requestInfo.errorHandler = sharedErrorHandler(location);
  return requestInfo;
}

function getDownloadUrl(service, location, mappings) {
  const urlPart = location.fullServerUrl();
  const url = makeUrl(urlPart, service.host, service._protocol);
  const method = 'GET';
  const timeout = service.maxOperationRetryTime;
  const requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);
  requestInfo.errorHandler = objectErrorHandler(location);
  return requestInfo;
}

function updateMetadata$2(service, location, metadata, mappings) {
  const urlPart = location.fullServerUrl();
  const url = makeUrl(urlPart, service.host, service._protocol);
  const method = 'PATCH';
  const body = toResourceString(metadata, mappings);
  const headers = {
    'Content-Type': 'application/json; charset=utf-8'
  };
  const timeout = service.maxOperationRetryTime;
  const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);
  requestInfo.headers = headers;
  requestInfo.body = body;
  requestInfo.errorHandler = objectErrorHandler(location);
  return requestInfo;
}

function deleteObject$2(service, location) {
  const urlPart = location.fullServerUrl();
  const url = makeUrl(urlPart, service.host, service._protocol);
  const method = 'DELETE';
  const timeout = service.maxOperationRetryTime;

  function handler(_xhr, _text) {}

  const requestInfo = new RequestInfo(url, method, handler, timeout);
  requestInfo.successCodes = [200, 204];
  requestInfo.errorHandler = objectErrorHandler(location);
  return requestInfo;
}

function determineContentType_(metadata, blob) {
  return metadata && metadata['contentType'] || blob && blob.type() || 'application/octet-stream';
}

function metadataForUpload_(location, blob, metadata) {
  const metadataClone = Object.assign({}, metadata);
  metadataClone['fullPath'] = location.path;
  metadataClone['size'] = blob.size();

  if (!metadataClone['contentType']) {
    metadataClone['contentType'] = determineContentType_(null, blob);
  }

  return metadataClone;
}
/**
 * Prepare RequestInfo for uploads as Content-Type: multipart.
 */


function multipartUpload(service, location, mappings, blob, metadata) {
  const urlPart = location.bucketOnlyServerUrl();
  const headers = {
    'X-Goog-Upload-Protocol': 'multipart'
  };

  function genBoundary() {
    let str = '';

    for (let i = 0; i < 2; i++) {
      str = str + Math.random().toString().slice(2);
    }

    return str;
  }

  const boundary = genBoundary();
  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;
  const metadata_ = metadataForUpload_(location, blob, metadata);
  const metadataString = toResourceString(metadata_, mappings);
  const preBlobPart = '--' + boundary + '\r\n' + 'Content-Type: application/json; charset=utf-8\r\n\r\n' + metadataString + '\r\n--' + boundary + '\r\n' + 'Content-Type: ' + metadata_['contentType'] + '\r\n\r\n';
  const postBlobPart = '\r\n--' + boundary + '--';
  const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);

  if (body === null) {
    throw cannotSliceBlob();
  }

  const urlParams = {
    name: metadata_['fullPath']
  };
  const url = makeUrl(urlPart, service.host, service._protocol);
  const method = 'POST';
  const timeout = service.maxUploadRetryTime;
  const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);
  requestInfo.urlParams = urlParams;
  requestInfo.headers = headers;
  requestInfo.body = body.uploadData();
  requestInfo.errorHandler = sharedErrorHandler(location);
  return requestInfo;
}
/**
 * @param current The number of bytes that have been uploaded so far.
 * @param total The total number of bytes in the upload.
 * @param opt_finalized True if the server has finished the upload.
 * @param opt_metadata The upload metadata, should
 *     only be passed if opt_finalized is true.
 */


class ResumableUploadStatus {
  constructor(current, total, finalized, metadata) {
    this.current = current;
    this.total = total;
    this.finalized = !!finalized;
    this.metadata = metadata || null;
  }

}

function checkResumeHeader_(xhr, allowed) {
  let status = null;

  try {
    status = xhr.getResponseHeader('X-Goog-Upload-Status');
  } catch (e) {
    handlerCheck(false);
  }

  const allowedStatus = allowed || ['active'];
  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);
  return status;
}

function createResumableUpload(service, location, mappings, blob, metadata) {
  const urlPart = location.bucketOnlyServerUrl();
  const metadataForUpload = metadataForUpload_(location, blob, metadata);
  const urlParams = {
    name: metadataForUpload['fullPath']
  };
  const url = makeUrl(urlPart, service.host, service._protocol);
  const method = 'POST';
  const headers = {
    'X-Goog-Upload-Protocol': 'resumable',
    'X-Goog-Upload-Command': 'start',
    'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,
    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType'],
    'Content-Type': 'application/json; charset=utf-8'
  };
  const body = toResourceString(metadataForUpload, mappings);
  const timeout = service.maxUploadRetryTime;

  function handler(xhr) {
    checkResumeHeader_(xhr);
    let url;

    try {
      url = xhr.getResponseHeader('X-Goog-Upload-URL');
    } catch (e) {
      handlerCheck(false);
    }

    handlerCheck(isString(url));
    return url;
  }

  const requestInfo = new RequestInfo(url, method, handler, timeout);
  requestInfo.urlParams = urlParams;
  requestInfo.headers = headers;
  requestInfo.body = body;
  requestInfo.errorHandler = sharedErrorHandler(location);
  return requestInfo;
}
/**
 * @param url From a call to fbs.requests.createResumableUpload.
 */


function getResumableUploadStatus(service, location, url, blob) {
  const headers = {
    'X-Goog-Upload-Command': 'query'
  };

  function handler(xhr) {
    const status = checkResumeHeader_(xhr, ['active', 'final']);
    let sizeString = null;

    try {
      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');
    } catch (e) {
      handlerCheck(false);
    }

    if (!sizeString) {
      // null or empty string
      handlerCheck(false);
    }

    const size = Number(sizeString);
    handlerCheck(!isNaN(size));
    return new ResumableUploadStatus(size, blob.size(), status === 'final');
  }

  const method = 'POST';
  const timeout = service.maxUploadRetryTime;
  const requestInfo = new RequestInfo(url, method, handler, timeout);
  requestInfo.headers = headers;
  requestInfo.errorHandler = sharedErrorHandler(location);
  return requestInfo;
}
/**
 * Any uploads via the resumable upload API must transfer a number of bytes
 * that is a multiple of this number.
 */


const RESUMABLE_UPLOAD_CHUNK_SIZE = 256 * 1024;
/**
 * @param url From a call to fbs.requests.createResumableUpload.
 * @param chunkSize Number of bytes to upload.
 * @param status The previous status.
 *     If not passed or null, we start from the beginning.
 * @throws fbs.Error If the upload is already complete, the passed in status
 *     has a final size inconsistent with the blob, or the blob cannot be sliced
 *     for upload.
 */

function continueResumableUpload(location, service, url, blob, chunkSize, mappings, status, progressCallback) {
  // TODO(andysoto): standardize on internal asserts
  // assert(!(opt_status && opt_status.finalized));
  const status_ = new ResumableUploadStatus(0, 0);

  if (status) {
    status_.current = status.current;
    status_.total = status.total;
  } else {
    status_.current = 0;
    status_.total = blob.size();
  }

  if (blob.size() !== status_.total) {
    throw serverFileWrongSize();
  }

  const bytesLeft = status_.total - status_.current;
  let bytesToUpload = bytesLeft;

  if (chunkSize > 0) {
    bytesToUpload = Math.min(bytesToUpload, chunkSize);
  }

  const startByte = status_.current;
  const endByte = startByte + bytesToUpload;
  const uploadCommand = bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';
  const headers = {
    'X-Goog-Upload-Command': uploadCommand,
    'X-Goog-Upload-Offset': `${status_.current}`
  };
  const body = blob.slice(startByte, endByte);

  if (body === null) {
    throw cannotSliceBlob();
  }

  function handler(xhr, text) {
    // TODO(andysoto): Verify the MD5 of each uploaded range:
    // the 'x-range-md5' header comes back with status code 308 responses.
    // We'll only be able to bail out though, because you can't re-upload a
    // range that you previously uploaded.
    const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);
    const newCurrent = status_.current + bytesToUpload;
    const size = blob.size();
    let metadata;

    if (uploadStatus === 'final') {
      metadata = metadataHandler(service, mappings)(xhr, text);
    } else {
      metadata = null;
    }

    return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);
  }

  const method = 'POST';
  const timeout = service.maxUploadRetryTime;
  const requestInfo = new RequestInfo(url, method, handler, timeout);
  requestInfo.headers = headers;
  requestInfo.body = body.uploadData();
  requestInfo.progressCallback = progressCallback || null;
  requestInfo.errorHandler = sharedErrorHandler(location);
  return requestInfo;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An event that is triggered on a task.
 * @internal
 */


const TaskEvent = {
  /**
   * For this event,
   * <ul>
   *   <li>The `next` function is triggered on progress updates and when the
   *       task is paused/resumed with an `UploadTaskSnapshot` as the first
   *       argument.</li>
   *   <li>The `error` function is triggered if the upload is canceled or fails
   *       for another reason.</li>
   *   <li>The `complete` function is triggered if the upload completes
   *       successfully.</li>
   * </ul>
   */
  STATE_CHANGED: 'state_changed'
}; // type keys = keyof TaskState

/**
 * Represents the current state of a running upload.
 * @internal
 */

exports._TaskEvent = TaskEvent;
const TaskState = {
  /** The task is currently transferring data. */
  RUNNING: 'running',

  /** The task was paused by the user. */
  PAUSED: 'paused',

  /** The task completed successfully. */
  SUCCESS: 'success',

  /** The task was canceled. */
  CANCELED: 'canceled',

  /** The task failed with an error. */
  ERROR: 'error'
};
exports._TaskState = TaskState;

function taskStateFromInternalTaskState(state) {
  switch (state) {
    case "running"
    /* RUNNING */
    :
    case "pausing"
    /* PAUSING */
    :
    case "canceling"
    /* CANCELING */
    :
      return TaskState.RUNNING;

    case "paused"
    /* PAUSED */
    :
      return TaskState.PAUSED;

    case "success"
    /* SUCCESS */
    :
      return TaskState.SUCCESS;

    case "canceled"
    /* CANCELED */
    :
      return TaskState.CANCELED;

    case "error"
    /* ERROR */
    :
      return TaskState.ERROR;

    default:
      // TODO(andysoto): assert(false);
      return TaskState.ERROR;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


class Observer {
  constructor(nextOrObserver, error, complete) {
    const asFunctions = isFunction(nextOrObserver) || error != null || complete != null;

    if (asFunctions) {
      this.next = nextOrObserver;
      this.error = error !== null && error !== void 0 ? error : undefined;
      this.complete = complete !== null && complete !== void 0 ? complete : undefined;
    } else {
      const observer = nextOrObserver;
      this.next = observer.next;
      this.error = observer.error;
      this.complete = observer.complete;
    }
  }

}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns a function that invokes f with its arguments asynchronously as a
 * microtask, i.e. as soon as possible after the current script returns back
 * into browser code.
 */
// eslint-disable-next-line @typescript-eslint/ban-types


function async(f) {
  return (...argsToForward) => {
    // eslint-disable-next-line @typescript-eslint/no-floating-promises
    Promise.resolve().then(() => f(...argsToForward));
  };
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Represents a blob being uploaded. Can be used to pause/resume/cancel the
 * upload and manage callbacks for various events.
 * @internal
 */


class UploadTask {
  /**
   * @param ref - The firebaseStorage.Reference object this task came
   *     from, untyped to avoid cyclic dependencies.
   * @param blob - The blob to upload.
   */
  constructor(ref, blob, metadata = null) {
    /**
     * Number of bytes transferred so far.
     */
    this._transferred = 0;
    this._needToFetchStatus = false;
    this._needToFetchMetadata = false;
    this._observers = [];
    this._error = undefined;
    this._uploadUrl = undefined;
    this._request = undefined;
    this._chunkMultiplier = 1;
    this._resolve = undefined;
    this._reject = undefined;
    this._ref = ref;
    this._blob = blob;
    this._metadata = metadata;
    this._mappings = getMappings();
    this._resumable = this._shouldDoResumable(this._blob);
    this._state = "running"
    /* RUNNING */
    ;

    this._errorHandler = error => {
      this._request = undefined;
      this._chunkMultiplier = 1;

      if (error._codeEquals("canceled"
      /* CANCELED */
      )) {
        this._needToFetchStatus = true;
        this.completeTransitions_();
      } else {
        this._error = error;

        this._transition("error"
        /* ERROR */
        );
      }
    };

    this._metadataErrorHandler = error => {
      this._request = undefined;

      if (error._codeEquals("canceled"
      /* CANCELED */
      )) {
        this.completeTransitions_();
      } else {
        this._error = error;

        this._transition("error"
        /* ERROR */
        );
      }
    };

    this._promise = new Promise((resolve, reject) => {
      this._resolve = resolve;
      this._reject = reject;

      this._start();
    }); // Prevent uncaught rejections on the internal promise from bubbling out
    // to the top level with a dummy handler.

    this._promise.then(null, () => {});
  }

  _makeProgressCallback() {
    const sizeBefore = this._transferred;
    return loaded => this._updateProgress(sizeBefore + loaded);
  }

  _shouldDoResumable(blob) {
    return blob.size() > 256 * 1024;
  }

  _start() {
    if (this._state !== "running"
    /* RUNNING */
    ) {
      // This can happen if someone pauses us in a resume callback, for example.
      return;
    }

    if (this._request !== undefined) {
      return;
    }

    if (this._resumable) {
      if (this._uploadUrl === undefined) {
        this._createResumable();
      } else {
        if (this._needToFetchStatus) {
          this._fetchStatus();
        } else {
          if (this._needToFetchMetadata) {
            // Happens if we miss the metadata on upload completion.
            this._fetchMetadata();
          } else {
            this._continueUpload();
          }
        }
      }
    } else {
      this._oneShotUpload();
    }
  }

  _resolveToken(callback) {
    // eslint-disable-next-line @typescript-eslint/no-floating-promises
    Promise.all([this._ref.storage._getAuthToken(), this._ref.storage._getAppCheckToken()]).then(([authToken, appCheckToken]) => {
      switch (this._state) {
        case "running"
        /* RUNNING */
        :
          callback(authToken, appCheckToken);
          break;

        case "canceling"
        /* CANCELING */
        :
          this._transition("canceled"
          /* CANCELED */
          );

          break;

        case "pausing"
        /* PAUSING */
        :
          this._transition("paused"
          /* PAUSED */
          );

          break;
      }
    });
  } // TODO(andysoto): assert false


  _createResumable() {
    this._resolveToken((authToken, appCheckToken) => {
      const requestInfo = createResumableUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);

      const createRequest = this._ref.storage._makeRequest(requestInfo, authToken, appCheckToken);

      this._request = createRequest;
      createRequest.getPromise().then(url => {
        this._request = undefined;
        this._uploadUrl = url;
        this._needToFetchStatus = false;
        this.completeTransitions_();
      }, this._errorHandler);
    });
  }

  _fetchStatus() {
    // TODO(andysoto): assert(this.uploadUrl_ !== null);
    const url = this._uploadUrl;

    this._resolveToken((authToken, appCheckToken) => {
      const requestInfo = getResumableUploadStatus(this._ref.storage, this._ref._location, url, this._blob);

      const statusRequest = this._ref.storage._makeRequest(requestInfo, authToken, appCheckToken);

      this._request = statusRequest;
      statusRequest.getPromise().then(status => {
        status = status;
        this._request = undefined;

        this._updateProgress(status.current);

        this._needToFetchStatus = false;

        if (status.finalized) {
          this._needToFetchMetadata = true;
        }

        this.completeTransitions_();
      }, this._errorHandler);
    });
  }

  _continueUpload() {
    const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;
    const status = new ResumableUploadStatus(this._transferred, this._blob.size()); // TODO(andysoto): assert(this.uploadUrl_ !== null);

    const url = this._uploadUrl;

    this._resolveToken((authToken, appCheckToken) => {
      let requestInfo;

      try {
        requestInfo = continueResumableUpload(this._ref._location, this._ref.storage, url, this._blob, chunkSize, this._mappings, status, this._makeProgressCallback());
      } catch (e) {
        this._error = e;

        this._transition("error"
        /* ERROR */
        );

        return;
      }

      const uploadRequest = this._ref.storage._makeRequest(requestInfo, authToken, appCheckToken);

      this._request = uploadRequest;
      uploadRequest.getPromise().then(newStatus => {
        this._increaseMultiplier();

        this._request = undefined;

        this._updateProgress(newStatus.current);

        if (newStatus.finalized) {
          this._metadata = newStatus.metadata;

          this._transition("success"
          /* SUCCESS */
          );
        } else {
          this.completeTransitions_();
        }
      }, this._errorHandler);
    });
  }

  _increaseMultiplier() {
    const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier; // Max chunk size is 32M.

    if (currentSize < 32 * 1024 * 1024) {
      this._chunkMultiplier *= 2;
    }
  }

  _fetchMetadata() {
    this._resolveToken((authToken, appCheckToken) => {
      const requestInfo = getMetadata$2(this._ref.storage, this._ref._location, this._mappings);

      const metadataRequest = this._ref.storage._makeRequest(requestInfo, authToken, appCheckToken);

      this._request = metadataRequest;
      metadataRequest.getPromise().then(metadata => {
        this._request = undefined;
        this._metadata = metadata;

        this._transition("success"
        /* SUCCESS */
        );
      }, this._metadataErrorHandler);
    });
  }

  _oneShotUpload() {
    this._resolveToken((authToken, appCheckToken) => {
      const requestInfo = multipartUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);

      const multipartRequest = this._ref.storage._makeRequest(requestInfo, authToken, appCheckToken);

      this._request = multipartRequest;
      multipartRequest.getPromise().then(metadata => {
        this._request = undefined;
        this._metadata = metadata;

        this._updateProgress(this._blob.size());

        this._transition("success"
        /* SUCCESS */
        );
      }, this._errorHandler);
    });
  }

  _updateProgress(transferred) {
    const old = this._transferred;
    this._transferred = transferred; // A progress update can make the "transferred" value smaller (e.g. a
    // partial upload not completed by server, after which the "transferred"
    // value may reset to the value at the beginning of the request).

    if (this._transferred !== old) {
      this._notifyObservers();
    }
  }

  _transition(state) {
    if (this._state === state) {
      return;
    }

    switch (state) {
      case "canceling"
      /* CANCELING */
      :
        // TODO(andysoto):
        // assert(this.state_ === InternalTaskState.RUNNING ||
        //        this.state_ === InternalTaskState.PAUSING);
        this._state = state;

        if (this._request !== undefined) {
          this._request.cancel();
        }

        break;

      case "pausing"
      /* PAUSING */
      :
        // TODO(andysoto):
        // assert(this.state_ === InternalTaskState.RUNNING);
        this._state = state;

        if (this._request !== undefined) {
          this._request.cancel();
        }

        break;

      case "running"
      /* RUNNING */
      :
        // TODO(andysoto):
        // assert(this.state_ === InternalTaskState.PAUSED ||
        //        this.state_ === InternalTaskState.PAUSING);
        const wasPaused = this._state === "paused"
        /* PAUSED */
        ;
        this._state = state;

        if (wasPaused) {
          this._notifyObservers();

          this._start();
        }

        break;

      case "paused"
      /* PAUSED */
      :
        // TODO(andysoto):
        // assert(this.state_ === InternalTaskState.PAUSING);
        this._state = state;

        this._notifyObservers();

        break;

      case "canceled"
      /* CANCELED */
      :
        // TODO(andysoto):
        // assert(this.state_ === InternalTaskState.PAUSED ||
        //        this.state_ === InternalTaskState.CANCELING);
        this._error = canceled();
        this._state = state;

        this._notifyObservers();

        break;

      case "error"
      /* ERROR */
      :
        // TODO(andysoto):
        // assert(this.state_ === InternalTaskState.RUNNING ||
        //        this.state_ === InternalTaskState.PAUSING ||
        //        this.state_ === InternalTaskState.CANCELING);
        this._state = state;

        this._notifyObservers();

        break;

      case "success"
      /* SUCCESS */
      :
        // TODO(andysoto):
        // assert(this.state_ === InternalTaskState.RUNNING ||
        //        this.state_ === InternalTaskState.PAUSING ||
        //        this.state_ === InternalTaskState.CANCELING);
        this._state = state;

        this._notifyObservers();

        break;
    }
  }

  completeTransitions_() {
    switch (this._state) {
      case "pausing"
      /* PAUSING */
      :
        this._transition("paused"
        /* PAUSED */
        );

        break;

      case "canceling"
      /* CANCELING */
      :
        this._transition("canceled"
        /* CANCELED */
        );

        break;

      case "running"
      /* RUNNING */
      :
        this._start();

        break;
    }
  }
  /**
   * A snapshot of the current task state.
   */


  get snapshot() {
    const externalState = taskStateFromInternalTaskState(this._state);
    return {
      bytesTransferred: this._transferred,
      totalBytes: this._blob.size(),
      state: externalState,
      metadata: this._metadata,
      task: this,
      ref: this._ref
    };
  }
  /**
   * Adds a callback for an event.
   * @param type - The type of event to listen for.
   * @param nextOrObserver -
   *     The `next` function, which gets called for each item in
   *     the event stream, or an observer object with some or all of these three
   *     properties (`next`, `error`, `complete`).
   * @param error - A function that gets called with a `StorageError`
   *     if the event stream ends due to an error.
   * @param completed - A function that gets called if the
   *     event stream ends normally.
   * @returns
   *     If only the event argument is passed, returns a function you can use to
   *     add callbacks (see the examples above). If more than just the event
   *     argument is passed, returns a function you can call to unregister the
   *     callbacks.
   */


  on(type, nextOrObserver, error, completed) {
    const observer = new Observer(nextOrObserver || undefined, error || undefined, completed || undefined);

    this._addObserver(observer);

    return () => {
      this._removeObserver(observer);
    };
  }
  /**
   * This object behaves like a Promise, and resolves with its snapshot data
   * when the upload completes.
   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.
   * @param onRejected - The rejection callback.
   */


  then(onFulfilled, onRejected) {
    // These casts are needed so that TypeScript can infer the types of the
    // resulting Promise.
    return this._promise.then(onFulfilled, onRejected);
  }
  /**
   * Equivalent to calling `then(null, onRejected)`.
   */


  catch(onRejected) {
    return this.then(null, onRejected);
  }
  /**
   * Adds the given observer.
   */


  _addObserver(observer) {
    this._observers.push(observer);

    this._notifyObserver(observer);
  }
  /**
   * Removes the given observer.
   */


  _removeObserver(observer) {
    const i = this._observers.indexOf(observer);

    if (i !== -1) {
      this._observers.splice(i, 1);
    }
  }

  _notifyObservers() {
    this._finishPromise();

    const observers = this._observers.slice();

    observers.forEach(observer => {
      this._notifyObserver(observer);
    });
  }

  _finishPromise() {
    if (this._resolve !== undefined) {
      let triggered = true;

      switch (taskStateFromInternalTaskState(this._state)) {
        case TaskState.SUCCESS:
          async(this._resolve.bind(null, this.snapshot))();
          break;

        case TaskState.CANCELED:
        case TaskState.ERROR:
          const toCall = this._reject;
          async(toCall.bind(null, this._error))();
          break;

        default:
          triggered = false;
          break;
      }

      if (triggered) {
        this._resolve = undefined;
        this._reject = undefined;
      }
    }
  }

  _notifyObserver(observer) {
    const externalState = taskStateFromInternalTaskState(this._state);

    switch (externalState) {
      case TaskState.RUNNING:
      case TaskState.PAUSED:
        if (observer.next) {
          async(observer.next.bind(observer, this.snapshot))();
        }

        break;

      case TaskState.SUCCESS:
        if (observer.complete) {
          async(observer.complete.bind(observer))();
        }

        break;

      case TaskState.CANCELED:
      case TaskState.ERROR:
        if (observer.error) {
          async(observer.error.bind(observer, this._error))();
        }

        break;

      default:
        // TODO(andysoto): assert(false);
        if (observer.error) {
          async(observer.error.bind(observer, this._error))();
        }

    }
  }
  /**
   * Resumes a paused task. Has no effect on a currently running or failed task.
   * @returns True if the operation took effect, false if ignored.
   */


  resume() {
    const valid = this._state === "paused"
    /* PAUSED */
    || this._state === "pausing"
    /* PAUSING */
    ;

    if (valid) {
      this._transition("running"
      /* RUNNING */
      );
    }

    return valid;
  }
  /**
   * Pauses a currently running task. Has no effect on a paused or failed task.
   * @returns True if the operation took effect, false if ignored.
   */


  pause() {
    const valid = this._state === "running"
    /* RUNNING */
    ;

    if (valid) {
      this._transition("pausing"
      /* PAUSING */
      );
    }

    return valid;
  }
  /**
   * Cancels a currently running or paused task. Has no effect on a complete or
   * failed task.
   * @returns True if the operation took effect, false if ignored.
   */


  cancel() {
    const valid = this._state === "running"
    /* RUNNING */
    || this._state === "pausing"
    /* PAUSING */
    ;

    if (valid) {
      this._transition("canceling"
      /* CANCELING */
      );
    }

    return valid;
  }

}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Provides methods to interact with a bucket in the Firebase Storage service.
 * @internal
 * @param _location - An fbs.location, or the URL at
 *     which to base this object, in one of the following forms:
 *         gs://<bucket>/<object-path>
 *         http[s]://firebasestorage.googleapis.com/
 *                     <api-version>/b/<bucket>/o/<object-path>
 *     Any query or fragment strings will be ignored in the http[s]
 *     format. If no value is passed, the storage object will use a URL based on
 *     the project ID of the base firebase.App instance.
 */


exports._UploadTask = UploadTask;

class Reference {
  constructor(_service, location) {
    this._service = _service;

    if (location instanceof Location) {
      this._location = location;
    } else {
      this._location = Location.makeFromUrl(location, _service.host);
    }
  }
  /**
   * Returns the URL for the bucket and path this object references,
   *     in the form gs://<bucket>/<object-path>
   * @override
   */


  toString() {
    return 'gs://' + this._location.bucket + '/' + this._location.path;
  }

  _newRef(service, location) {
    return new Reference(service, location);
  }
  /**
   * A reference to the root of this object's bucket.
   */


  get root() {
    const location = new Location(this._location.bucket, '');
    return this._newRef(this._service, location);
  }
  /**
   * The name of the bucket containing this reference's object.
   */


  get bucket() {
    return this._location.bucket;
  }
  /**
   * The full path of this object.
   */


  get fullPath() {
    return this._location.path;
  }
  /**
   * The short name of this object, which is the last component of the full path.
   * For example, if fullPath is 'full/path/image.png', name is 'image.png'.
   */


  get name() {
    return lastComponent(this._location.path);
  }
  /**
   * The `StorageService` instance this `StorageReference` is associated with.
   */


  get storage() {
    return this._service;
  }
  /**
   * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if
   * this reference is the root.
   */


  get parent() {
    const newPath = parent(this._location.path);

    if (newPath === null) {
      return null;
    }

    const location = new Location(this._location.bucket, newPath);
    return new Reference(this._service, location);
  }
  /**
   * Utility function to throw an error in methods that do not accept a root reference.
   */


  _throwIfRoot(name) {
    if (this._location.path === '') {
      throw invalidRootOperation(name);
    }
  }

}
/**
 * Uploads data to this object's location.
 * The upload is not resumable.
 *
 * @param ref - StorageReference where data should be uploaded.
 * @param data - The data to upload.
 * @param metadata - Metadata for the newly uploaded data.
 * @returns A Promise containing an UploadResult
 */


function uploadBytes$1(ref, data, metadata) {
  ref._throwIfRoot('uploadBytes');

  const requestInfo = multipartUpload(ref.storage, ref._location, getMappings(), new FbsBlob(data, true), metadata);
  return ref.storage.makeRequestWithTokens(requestInfo).then(request => request.getPromise()).then(finalMetadata => {
    return {
      metadata: finalMetadata,
      ref
    };
  });
}
/**
 * Uploads data to this object's location.
 * The upload can be paused and resumed, and exposes progress updates.
 * @public
 * @param ref - StorageReference where data should be uploaded.
 * @param data - The data to upload.
 * @param metadata - Metadata for the newly uploaded data.
 * @returns An UploadTask
 */


function uploadBytesResumable$1(ref, data, metadata) {
  ref._throwIfRoot('uploadBytesResumable');

  return new UploadTask(ref, new FbsBlob(data), metadata);
}
/**
 * Uploads a string to this object's location.
 * The upload is not resumable.
 * @public
 * @param ref - StorageReference where string should be uploaded.
 * @param value - The string to upload.
 * @param format - The format of the string to upload.
 * @param metadata - Metadata for the newly uploaded string.
 * @returns A Promise containing an UploadResult
 */


function uploadString$1(ref, value, format = StringFormat.RAW, metadata) {
  ref._throwIfRoot('uploadString');

  const data = dataFromString(format, value);
  const metadataClone = Object.assign({}, metadata);

  if (metadataClone['contentType'] == null && data.contentType != null) {
    metadataClone['contentType'] = data.contentType;
  }

  return uploadBytes$1(ref, data.data, metadataClone);
}
/**
 * List all items (files) and prefixes (folders) under this storage reference.
 *
 * This is a helper method for calling list() repeatedly until there are
 * no more results. The default pagination size is 1000.
 *
 * Note: The results may not be consistent if objects are changed while this
 * operation is running.
 *
 * Warning: listAll may potentially consume too many resources if there are
 * too many results.
 * @public
 * @param ref - StorageReference to get list from.
 *
 * @returns A Promise that resolves with all the items and prefixes under
 *      the current storage reference. `prefixes` contains references to
 *      sub-directories and `items` contains references to objects in this
 *      folder. `nextPageToken` is never returned.
 */


function listAll$1(ref) {
  const accumulator = {
    prefixes: [],
    items: []
  };
  return listAllHelper(ref, accumulator).then(() => accumulator);
}
/**
 * Separated from listAll because async functions can't use "arguments".
 * @param ref
 * @param accumulator
 * @param pageToken
 */


async function listAllHelper(ref, accumulator, pageToken) {
  const opt = {
    // maxResults is 1000 by default.
    pageToken
  };
  const nextPage = await list$1(ref, opt);
  accumulator.prefixes.push(...nextPage.prefixes);
  accumulator.items.push(...nextPage.items);

  if (nextPage.nextPageToken != null) {
    await listAllHelper(ref, accumulator, nextPage.nextPageToken);
  }
}
/**
 * List items (files) and prefixes (folders) under this storage reference.
 *
 * List API is only available for Firebase Rules Version 2.
 *
 * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'
 * delimited folder structure.
 * Refer to GCS's List API if you want to learn more.
 *
 * To adhere to Firebase Rules's Semantics, Firebase Storage does not
 * support objects whose paths end with "/" or contain two consecutive
 * "/"s. Firebase Storage List API will filter these unsupported objects.
 * list() may fail if there are too many unsupported objects in the bucket.
 * @public
 *
 * @param ref - StorageReference to get list from.
 * @param options - See ListOptions for details.
 * @returns A Promise that resolves with the items and prefixes.
 *      `prefixes` contains references to sub-folders and `items`
 *      contains references to objects in this folder. `nextPageToken`
 *      can be used to get the rest of the results.
 */


async function list$1(ref, options) {
  if (options != null) {
    if (typeof options.maxResults === 'number') {
      validateNumber('options.maxResults',
      /* minValue= */
      1,
      /* maxValue= */
      1000, options.maxResults);
    }
  }

  const op = options || {};
  const requestInfo = list$2(ref.storage, ref._location,
  /*delimiter= */
  '/', op.pageToken, op.maxResults);
  return (await ref.storage.makeRequestWithTokens(requestInfo)).getPromise();
}
/**
 * A `Promise` that resolves with the metadata for this object. If this
 * object doesn't exist or metadata cannot be retreived, the promise is
 * rejected.
 * @public
 * @param ref - StorageReference to get metadata from.
 */


async function getMetadata$1(ref) {
  ref._throwIfRoot('getMetadata');

  const requestInfo = getMetadata$2(ref.storage, ref._location, getMappings());
  return (await ref.storage.makeRequestWithTokens(requestInfo)).getPromise();
}
/**
 * Updates the metadata for this object.
 * @public
 * @param ref - StorageReference to update metadata for.
 * @param metadata - The new metadata for the object.
 *     Only values that have been explicitly set will be changed. Explicitly
 *     setting a value to null will remove the metadata.
 * @returns A `Promise` that resolves
 *     with the new metadata for this object.
 *     See `firebaseStorage.Reference.prototype.getMetadata`
 */


async function updateMetadata$1(ref, metadata) {
  ref._throwIfRoot('updateMetadata');

  const requestInfo = updateMetadata$2(ref.storage, ref._location, metadata, getMappings());
  return (await ref.storage.makeRequestWithTokens(requestInfo)).getPromise();
}
/**
 * Returns the download URL for the given Reference.
 * @public
 * @returns A `Promise` that resolves with the download
 *     URL for this object.
 */


async function getDownloadURL$1(ref) {
  ref._throwIfRoot('getDownloadURL');

  const requestInfo = getDownloadUrl(ref.storage, ref._location, getMappings());
  return (await ref.storage.makeRequestWithTokens(requestInfo)).getPromise().then(url => {
    if (url === null) {
      throw noDownloadURL();
    }

    return url;
  });
}
/**
 * Deletes the object at this location.
 * @public
 * @param ref - StorageReference for object to delete.
 * @returns A `Promise` that resolves if the deletion succeeds.
 */


async function deleteObject$1(ref) {
  ref._throwIfRoot('deleteObject');

  const requestInfo = deleteObject$2(ref.storage, ref._location);
  return (await ref.storage.makeRequestWithTokens(requestInfo)).getPromise();
}
/**
 * Returns reference for object obtained by appending `childPath` to `ref`.
 *
 * @param ref - StorageReference to get child of.
 * @param childPath - Child path from provided ref.
 * @returns A reference to the object obtained by
 * appending childPath, removing any duplicate, beginning, or trailing
 * slashes.
 *
 */


function _getChild$1(ref, childPath) {
  const newPath = child(ref._location.path, childPath);
  const location = new Location(ref._location.bucket, newPath);
  return new Reference(ref.storage, location);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function isUrl(path) {
  return /^[A-Za-z]+:\/\//.test(path);
}
/**
 * Returns a firebaseStorage.Reference for the given url.
 */


function refFromURL(service, url) {
  return new Reference(service, url);
}
/**
 * Returns a firebaseStorage.Reference for the given path in the default
 * bucket.
 */


function refFromPath(ref, path) {
  if (ref instanceof FirebaseStorageImpl) {
    const service = ref;

    if (service._bucket == null) {
      throw noDefaultBucket();
    }

    const reference = new Reference(service, service._bucket);

    if (path != null) {
      return refFromPath(reference, path);
    } else {
      return reference;
    }
  } else {
    // ref is a Reference
    if (path !== undefined) {
      return _getChild$1(ref, path);
    } else {
      return ref;
    }
  }
}

function ref$1(serviceOrRef, pathOrUrl) {
  if (pathOrUrl && isUrl(pathOrUrl)) {
    if (serviceOrRef instanceof FirebaseStorageImpl) {
      return refFromURL(serviceOrRef, pathOrUrl);
    } else {
      throw invalidArgument('To use ref(service, url), the first argument must be a Storage instance.');
    }
  } else {
    return refFromPath(serviceOrRef, pathOrUrl);
  }
}

function extractBucket(host, config) {
  const bucketString = config === null || config === void 0 ? void 0 : config[CONFIG_STORAGE_BUCKET_KEY];

  if (bucketString == null) {
    return null;
  }

  return Location.makeFromBucketSpec(bucketString, host);
}

function connectStorageEmulator$1(storage, host, port, options = {}) {
  storage.host = `${host}:${port}`;
  storage._protocol = 'http';
  const {
    mockUserToken
  } = options;

  if (mockUserToken) {
    storage._overrideAuthToken = typeof mockUserToken === 'string' ? mockUserToken : (0, _util.createMockUserToken)(mockUserToken, storage.app.options.projectId);
  }
}
/**
 * A service that provides Firebase Storage Reference instances.
 * @param opt_url - gs:// url to a custom Storage Bucket
 *
 * @internal
 */


class FirebaseStorageImpl {
  constructor(
  /**
   * FirebaseApp associated with this StorageService instance.
   */
  app, _authProvider,
  /**
   * @internal
   */
  _appCheckProvider,
  /**
   * @internal
   */
  _pool, _url, _firebaseVersion) {
    this.app = app;
    this._authProvider = _authProvider;
    this._appCheckProvider = _appCheckProvider;
    this._pool = _pool;
    this._url = _url;
    this._firebaseVersion = _firebaseVersion;
    this._bucket = null;
    /**
     * This string can be in the formats:
     * - host
     * - host:port
     */

    this._host = DEFAULT_HOST;
    this._protocol = 'https';
    this._appId = null;
    this._deleted = false;
    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;
    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;
    this._requests = new Set();

    if (_url != null) {
      this._bucket = Location.makeFromBucketSpec(_url, this._host);
    } else {
      this._bucket = extractBucket(this._host, this.app.options);
    }
  }
  /**
   * The host string for this service, in the form of `host` or
   * `host:port`.
   */


  get host() {
    return this._host;
  }

  set host(host) {
    this._host = host;

    if (this._url != null) {
      this._bucket = Location.makeFromBucketSpec(this._url, host);
    } else {
      this._bucket = extractBucket(host, this.app.options);
    }
  }
  /**
   * The maximum time to retry uploads in milliseconds.
   */


  get maxUploadRetryTime() {
    return this._maxUploadRetryTime;
  }

  set maxUploadRetryTime(time) {
    validateNumber('time',
    /* minValue=*/
    0,
    /* maxValue= */
    Number.POSITIVE_INFINITY, time);
    this._maxUploadRetryTime = time;
  }
  /**
   * The maximum time to retry operations other than uploads or downloads in
   * milliseconds.
   */


  get maxOperationRetryTime() {
    return this._maxOperationRetryTime;
  }

  set maxOperationRetryTime(time) {
    validateNumber('time',
    /* minValue=*/
    0,
    /* maxValue= */
    Number.POSITIVE_INFINITY, time);
    this._maxOperationRetryTime = time;
  }

  async _getAuthToken() {
    if (this._overrideAuthToken) {
      return this._overrideAuthToken;
    }

    const auth = this._authProvider.getImmediate({
      optional: true
    });

    if (auth) {
      const tokenData = await auth.getToken();

      if (tokenData !== null) {
        return tokenData.accessToken;
      }
    }

    return null;
  }

  async _getAppCheckToken() {
    const appCheck = this._appCheckProvider.getImmediate({
      optional: true
    });

    if (appCheck) {
      const result = await appCheck.getToken(); // TODO: What do we want to do if there is an error getting the token?
      // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be
      // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use
      // the token (actual or dummy) to send requests.

      return result.token;
    }

    return null;
  }
  /**
   * Stop running requests and prevent more from being created.
   */


  _delete() {
    if (!this._deleted) {
      this._deleted = true;

      this._requests.forEach(request => request.cancel());

      this._requests.clear();
    }

    return Promise.resolve();
  }
  /**
   * Returns a new firebaseStorage.Reference object referencing this StorageService
   * at the given Location.
   */


  _makeStorageReference(loc) {
    return new Reference(this, loc);
  }
  /**
   * @param requestInfo - HTTP RequestInfo object
   * @param authToken - Firebase auth token
   */


  _makeRequest(requestInfo, authToken, appCheckToken) {
    if (!this._deleted) {
      const request = makeRequest(requestInfo, this._appId, authToken, appCheckToken, this._pool, this._firebaseVersion);

      this._requests.add(request); // Request removes itself from set when complete.


      request.getPromise().then(() => this._requests.delete(request), () => this._requests.delete(request));
      return request;
    } else {
      return new FailRequest(appDeleted());
    }
  }

  async makeRequestWithTokens(requestInfo) {
    const [authToken, appCheckToken] = await Promise.all([this._getAuthToken(), this._getAppCheckToken()]);
    return this._makeRequest(requestInfo, authToken, appCheckToken);
  }

}

const name = "@firebase/storage";
const version = "0.8.2";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Type constant for Firebase Storage.
 */

const STORAGE_TYPE = 'storage';
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Uploads data to this object's location.
 * The upload is not resumable.
 * @public
 * @param ref - {@link StorageReference} where data should be uploaded.
 * @param data - The data to upload.
 * @param metadata - Metadata for the data to upload.
 * @returns A Promise containing an UploadResult
 */

function uploadBytes(ref, data, metadata) {
  ref = (0, _util.getModularInstance)(ref);
  return uploadBytes$1(ref, data, metadata);
}
/**
 * Uploads a string to this object's location.
 * The upload is not resumable.
 * @public
 * @param ref - {@link StorageReference} where string should be uploaded.
 * @param value - The string to upload.
 * @param format - The format of the string to upload.
 * @param metadata - Metadata for the string to upload.
 * @returns A Promise containing an UploadResult
 */


function uploadString(ref, value, format, metadata) {
  ref = (0, _util.getModularInstance)(ref);
  return uploadString$1(ref, value, format, metadata);
}
/**
 * Uploads data to this object's location.
 * The upload can be paused and resumed, and exposes progress updates.
 * @public
 * @param ref - {@link StorageReference} where data should be uploaded.
 * @param data - The data to upload.
 * @param metadata - Metadata for the data to upload.
 * @returns An UploadTask
 */


function uploadBytesResumable(ref, data, metadata) {
  ref = (0, _util.getModularInstance)(ref);
  return uploadBytesResumable$1(ref, data, metadata);
}
/**
 * A `Promise` that resolves with the metadata for this object. If this
 * object doesn't exist or metadata cannot be retreived, the promise is
 * rejected.
 * @public
 * @param ref - {@link StorageReference} to get metadata from.
 */


function getMetadata(ref) {
  ref = (0, _util.getModularInstance)(ref);
  return getMetadata$1(ref);
}
/**
 * Updates the metadata for this object.
 * @public
 * @param ref - {@link StorageReference} to update metadata for.
 * @param metadata - The new metadata for the object.
 *     Only values that have been explicitly set will be changed. Explicitly
 *     setting a value to null will remove the metadata.
 * @returns A `Promise` that resolves with the new metadata for this object.
 */


function updateMetadata(ref, metadata) {
  ref = (0, _util.getModularInstance)(ref);
  return updateMetadata$1(ref, metadata);
}
/**
 * List items (files) and prefixes (folders) under this storage reference.
 *
 * List API is only available for Firebase Rules Version 2.
 *
 * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'
 * delimited folder structure.
 * Refer to GCS's List API if you want to learn more.
 *
 * To adhere to Firebase Rules's Semantics, Firebase Storage does not
 * support objects whose paths end with "/" or contain two consecutive
 * "/"s. Firebase Storage List API will filter these unsupported objects.
 * list() may fail if there are too many unsupported objects in the bucket.
 * @public
 *
 * @param ref - {@link StorageReference} to get list from.
 * @param options - See {@link ListOptions} for details.
 * @returns A `Promise` that resolves with the items and prefixes.
 *      `prefixes` contains references to sub-folders and `items`
 *      contains references to objects in this folder. `nextPageToken`
 *      can be used to get the rest of the results.
 */


function list(ref, options) {
  ref = (0, _util.getModularInstance)(ref);
  return list$1(ref, options);
}
/**
 * List all items (files) and prefixes (folders) under this storage reference.
 *
 * This is a helper method for calling list() repeatedly until there are
 * no more results. The default pagination size is 1000.
 *
 * Note: The results may not be consistent if objects are changed while this
 * operation is running.
 *
 * Warning: `listAll` may potentially consume too many resources if there are
 * too many results.
 * @public
 * @param ref - {@link StorageReference} to get list from.
 *
 * @returns A `Promise` that resolves with all the items and prefixes under
 *      the current storage reference. `prefixes` contains references to
 *      sub-directories and `items` contains references to objects in this
 *      folder. `nextPageToken` is never returned.
 */


function listAll(ref) {
  ref = (0, _util.getModularInstance)(ref);
  return listAll$1(ref);
}
/**
 * Returns the download URL for the given {@link StorageReference}.
 * @public
 * @param ref - {@link StorageReference} to get the download URL for.
 * @returns A `Promise` that resolves with the download
 *     URL for this object.
 */


function getDownloadURL(ref) {
  ref = (0, _util.getModularInstance)(ref);
  return getDownloadURL$1(ref);
}
/**
 * Deletes the object at this location.
 * @public
 * @param ref - {@link StorageReference} for object to delete.
 * @returns A `Promise` that resolves if the deletion succeeds.
 */


function deleteObject(ref) {
  ref = (0, _util.getModularInstance)(ref);
  return deleteObject$1(ref);
}

function ref(serviceOrRef, pathOrUrl) {
  serviceOrRef = (0, _util.getModularInstance)(serviceOrRef);
  return ref$1(serviceOrRef, pathOrUrl);
}
/**
 * @internal
 */


function _getChild(ref, childPath) {
  return _getChild$1(ref, childPath);
}
/**
 * Gets a {@link FirebaseStorage} instance for the given Firebase app.
 * @public
 * @param app - Firebase app to get {@link FirebaseStorage} instance for.
 * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.
 * If not passed, uses the app's default Storage Bucket.
 * @returns A {@link FirebaseStorage} instance.
 */


function getStorage(app = (0, _app.getApp)(), bucketUrl) {
  app = (0, _util.getModularInstance)(app);
  const storageProvider = (0, _app._getProvider)(app, STORAGE_TYPE);
  const storageInstance = storageProvider.getImmediate({
    identifier: bucketUrl
  });
  return storageInstance;
}
/**
 * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.
 *
 * @param storage - The {@link FirebaseStorage} instance
 * @param host - The emulator host (ex: localhost)
 * @param port - The emulator port (ex: 5001)
 * @param options - Emulator options. `options.mockUserToken` is the mock auth
 * token to use for unit testing Security Rules.
 * @public
 */


function connectStorageEmulator(storage, host, port, options = {}) {
  connectStorageEmulator$1(storage, host, port, options);
}
/**
 * Cloud Storage for Firebase
 *
 * @packageDocumentation
 */


function factory(container, {
  instanceIdentifier: url
}) {
  const app = container.getProvider('app').getImmediate();
  const authProvider = container.getProvider('auth-internal');
  const appCheckProvider = container.getProvider('app-check-internal');
  return new FirebaseStorageImpl(app, authProvider, appCheckProvider, new ConnectionPool(), url, _app.SDK_VERSION);
}

function registerStorage() {
  (0, _app._registerComponent)(new _component.Component(STORAGE_TYPE, factory, "PUBLIC"
  /* PUBLIC */
  ).setMultipleInstances(true));
  (0, _app.registerVersion)(name, version);
}

registerStorage();
},{"@firebase/app":"node_modules/@firebase/app/dist/index.esm2017.js","@firebase/util":"node_modules/@firebase/util/dist/index.esm.js","@firebase/component":"node_modules/@firebase/component/dist/index.esm.js"}],"node_modules/@firebase/storage-compat/dist/index.esm2017.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.registerStorage = registerStorage;

var _appCompat = _interopRequireDefault(require("@firebase/app-compat"));

var _storage = require("@firebase/storage");

var _component = require("@firebase/component");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class UploadTaskSnapshotCompat {
  constructor(_delegate, task, ref) {
    this._delegate = _delegate;
    this.task = task;
    this.ref = ref;
  }

  get bytesTransferred() {
    return this._delegate.bytesTransferred;
  }

  get metadata() {
    return this._delegate.metadata;
  }

  get state() {
    return this._delegate.state;
  }

  get totalBytes() {
    return this._delegate.totalBytes;
  }

}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


class UploadTaskCompat {
  constructor(_delegate, _ref) {
    this._delegate = _delegate;
    this._ref = _ref;
    this.cancel = this._delegate.cancel.bind(this._delegate);
    this.catch = this._delegate.catch.bind(this._delegate);
    this.pause = this._delegate.pause.bind(this._delegate);
    this.resume = this._delegate.resume.bind(this._delegate);
  }

  get snapshot() {
    return new UploadTaskSnapshotCompat(this._delegate.snapshot, this, this._ref);
  }

  then(onFulfilled, onRejected) {
    return this._delegate.then(snapshot => {
      if (onFulfilled) {
        return onFulfilled(new UploadTaskSnapshotCompat(snapshot, this, this._ref));
      }
    }, onRejected);
  }

  on(type, nextOrObserver, error, completed) {
    let wrappedNextOrObserver = undefined;

    if (!!nextOrObserver) {
      if (typeof nextOrObserver === 'function') {
        wrappedNextOrObserver = taskSnapshot => nextOrObserver(new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref));
      } else {
        wrappedNextOrObserver = {
          next: !!nextOrObserver.next ? taskSnapshot => nextOrObserver.next(new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)) : undefined,
          complete: nextOrObserver.complete || undefined,
          error: nextOrObserver.error || undefined
        };
      }
    }

    return this._delegate.on(type, wrappedNextOrObserver, error || undefined, completed || undefined);
  }

}

class ListResultCompat {
  constructor(_delegate, _service) {
    this._delegate = _delegate;
    this._service = _service;
  }

  get prefixes() {
    return this._delegate.prefixes.map(ref => new ReferenceCompat(ref, this._service));
  }

  get items() {
    return this._delegate.items.map(ref => new ReferenceCompat(ref, this._service));
  }

  get nextPageToken() {
    return this._delegate.nextPageToken || null;
  }

}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


class ReferenceCompat {
  constructor(_delegate, storage) {
    this._delegate = _delegate;
    this.storage = storage;
  }

  get name() {
    return this._delegate.name;
  }

  get bucket() {
    return this._delegate.bucket;
  }

  get fullPath() {
    return this._delegate.fullPath;
  }

  toString() {
    return this._delegate.toString();
  }
  /**
   * @returns A reference to the object obtained by
   * appending childPath, removing any duplicate, beginning, or trailing
   * slashes.
   */


  child(childPath) {
    const reference = (0, _storage._getChild)(this._delegate, childPath);
    return new ReferenceCompat(reference, this.storage);
  }

  get root() {
    return new ReferenceCompat(this._delegate.root, this.storage);
  }
  /**
   * @returns A reference to the parent of the
   * current object, or null if the current object is the root.
   */


  get parent() {
    const reference = this._delegate.parent;

    if (reference == null) {
      return null;
    }

    return new ReferenceCompat(reference, this.storage);
  }
  /**
   * Uploads a blob to this object's location.
   * @param data - The blob to upload.
   * @returns An UploadTask that lets you control and
   * observe the upload.
   */


  put(data, metadata) {
    this._throwIfRoot('put');

    return new UploadTaskCompat((0, _storage.uploadBytesResumable)(this._delegate, data, metadata), this);
  }
  /**
   * Uploads a string to this object's location.
   * @param value - The string to upload.
   * @param format - The format of the string to upload.
   * @returns An UploadTask that lets you control and
   * observe the upload.
   */


  putString(value, format = _storage.StringFormat.RAW, metadata) {
    this._throwIfRoot('putString');

    const data = (0, _storage._dataFromString)(format, value);
    const metadataClone = Object.assign({}, metadata);

    if (metadataClone['contentType'] == null && data.contentType != null) {
      metadataClone['contentType'] = data.contentType;
    }

    return new UploadTaskCompat(new _storage._UploadTask(this._delegate, new _storage._FbsBlob(data.data, true), metadataClone), this);
  }
  /**
   * List all items (files) and prefixes (folders) under this storage reference.
   *
   * This is a helper method for calling list() repeatedly until there are
   * no more results. The default pagination size is 1000.
   *
   * Note: The results may not be consistent if objects are changed while this
   * operation is running.
   *
   * Warning: listAll may potentially consume too many resources if there are
   * too many results.
   *
   * @returns A Promise that resolves with all the items and prefixes under
   *  the current storage reference. `prefixes` contains references to
   *  sub-directories and `items` contains references to objects in this
   *  folder. `nextPageToken` is never returned.
   */


  listAll() {
    return (0, _storage.listAll)(this._delegate).then(r => new ListResultCompat(r, this.storage));
  }
  /**
   * List items (files) and prefixes (folders) under this storage reference.
   *
   * List API is only available for Firebase Rules Version 2.
   *
   * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'
   * delimited folder structure. Refer to GCS's List API if you want to learn more.
   *
   * To adhere to Firebase Rules's Semantics, Firebase Storage does not
   * support objects whose paths end with "/" or contain two consecutive
   * "/"s. Firebase Storage List API will filter these unsupported objects.
   * list() may fail if there are too many unsupported objects in the bucket.
   *
   * @param options - See ListOptions for details.
   * @returns A Promise that resolves with the items and prefixes.
   * `prefixes` contains references to sub-folders and `items`
   * contains references to objects in this folder. `nextPageToken`
   * can be used to get the rest of the results.
   */


  list(options) {
    return (0, _storage.list)(this._delegate, options || undefined).then(r => new ListResultCompat(r, this.storage));
  }
  /**
   * A `Promise` that resolves with the metadata for this object. If this
   * object doesn't exist or metadata cannot be retreived, the promise is
   * rejected.
   */


  getMetadata() {
    return (0, _storage.getMetadata)(this._delegate);
  }
  /**
   * Updates the metadata for this object.
   * @param metadata - The new metadata for the object.
   * Only values that have been explicitly set will be changed. Explicitly
   * setting a value to null will remove the metadata.
   * @returns A `Promise` that resolves
   * with the new metadata for this object.
   * @see firebaseStorage.Reference.prototype.getMetadata
   */


  updateMetadata(metadata) {
    return (0, _storage.updateMetadata)(this._delegate, metadata);
  }
  /**
   * @returns A `Promise` that resolves with the download
   * URL for this object.
   */


  getDownloadURL() {
    return (0, _storage.getDownloadURL)(this._delegate);
  }
  /**
   * Deletes the object at this location.
   * @returns A `Promise` that resolves if the deletion succeeds.
   */


  delete() {
    this._throwIfRoot('delete');

    return (0, _storage.deleteObject)(this._delegate);
  }

  _throwIfRoot(name) {
    if (this._delegate._location.path === '') {
      throw (0, _storage._invalidRootOperation)(name);
    }
  }

}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A service that provides firebaseStorage.Reference instances.
 * @param opt_url gs:// url to a custom Storage Bucket
 */


class StorageServiceCompat {
  constructor(app, _delegate) {
    this.app = app;
    this._delegate = _delegate;
  }

  get maxOperationRetryTime() {
    return this._delegate.maxOperationRetryTime;
  }

  get maxUploadRetryTime() {
    return this._delegate.maxUploadRetryTime;
  }
  /**
   * Returns a firebaseStorage.Reference for the given path in the default
   * bucket.
   */


  ref(path) {
    if (isUrl(path)) {
      throw (0, _storage._invalidArgument)('ref() expected a child path but got a URL, use refFromURL instead.');
    }

    return new ReferenceCompat((0, _storage.ref)(this._delegate, path), this);
  }
  /**
   * Returns a firebaseStorage.Reference object for the given absolute URL,
   * which must be a gs:// or http[s]:// URL.
   */


  refFromURL(url) {
    if (!isUrl(url)) {
      throw (0, _storage._invalidArgument)('refFromURL() expected a full URL but got a child path, use ref() instead.');
    }

    try {
      _storage._Location.makeFromUrl(url, this._delegate.host);
    } catch (e) {
      throw (0, _storage._invalidArgument)('refFromUrl() expected a valid full URL but got an invalid one.');
    }

    return new ReferenceCompat((0, _storage.ref)(this._delegate, url), this);
  }

  setMaxUploadRetryTime(time) {
    this._delegate.maxUploadRetryTime = time;
  }

  setMaxOperationRetryTime(time) {
    this._delegate.maxOperationRetryTime = time;
  }

  useEmulator(host, port, options = {}) {
    (0, _storage.connectStorageEmulator)(this._delegate, host, port, options);
  }

}

function isUrl(path) {
  return /^[A-Za-z]+:\/\//.test(path);
}

const name = "@firebase/storage-compat";
const version = "0.1.2";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Type constant for Firebase Storage.
 */

const STORAGE_TYPE = 'storage-compat';

function factory(container, {
  instanceIdentifier: url
}) {
  // Dependencies
  const app = container.getProvider('app-compat').getImmediate();
  const storageExp = container.getProvider('storage').getImmediate({
    identifier: url
  });
  const storageServiceCompat = new StorageServiceCompat(app, storageExp);
  return storageServiceCompat;
}

function registerStorage(instance) {
  const namespaceExports = {
    // no-inline
    TaskState: _storage._TaskState,
    TaskEvent: _storage._TaskEvent,
    StringFormat: _storage.StringFormat,
    Storage: StorageServiceCompat,
    Reference: ReferenceCompat
  };
  instance.INTERNAL.registerComponent(new _component.Component(STORAGE_TYPE, factory, "PUBLIC"
  /* PUBLIC */
  ).setServiceProps(namespaceExports).setMultipleInstances(true));
  instance.registerVersion(name, version);
}

registerStorage(_appCompat.default);
},{"@firebase/app-compat":"node_modules/@firebase/app-compat/dist/index.esm2017.js","@firebase/storage":"node_modules/@firebase/storage/dist/index.esm2017.js","@firebase/component":"node_modules/@firebase/component/dist/index.esm.js"}],"node_modules/@firebase/performance/dist/index.esm2017.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPerformance = getPerformance;
exports.initializePerformance = initializePerformance;
exports.trace = trace;

var _util = require("@firebase/util");

var _logger = require("@firebase/logger");

var _app = require("@firebase/app");

var _component = require("@firebase/component");

require("@firebase/installations");

const name = "@firebase/performance";
const version = "0.5.0";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const SDK_VERSION = version;
/** The prefix for start User Timing marks used for creating Traces. */

const TRACE_START_MARK_PREFIX = 'FB-PERF-TRACE-START';
/** The prefix for stop User Timing marks used for creating Traces. */

const TRACE_STOP_MARK_PREFIX = 'FB-PERF-TRACE-STOP';
/** The prefix for User Timing measure used for creating Traces. */

const TRACE_MEASURE_PREFIX = 'FB-PERF-TRACE-MEASURE';
/** The prefix for out of the box page load Trace name. */

const OOB_TRACE_PAGE_LOAD_PREFIX = '_wt_';
const FIRST_PAINT_COUNTER_NAME = '_fp';
const FIRST_CONTENTFUL_PAINT_COUNTER_NAME = '_fcp';
const FIRST_INPUT_DELAY_COUNTER_NAME = '_fid';
const CONFIG_LOCAL_STORAGE_KEY = '@firebase/performance/config';
const CONFIG_EXPIRY_LOCAL_STORAGE_KEY = '@firebase/performance/configexpire';
const SERVICE = 'performance';
const SERVICE_NAME = 'Performance';
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const ERROR_DESCRIPTION_MAP = {
  ["trace started"
  /* TRACE_STARTED_BEFORE */
  ]: 'Trace {$traceName} was started before.',
  ["trace stopped"
  /* TRACE_STOPPED_BEFORE */
  ]: 'Trace {$traceName} is not running.',
  ["nonpositive trace startTime"
  /* NONPOSITIVE_TRACE_START_TIME */
  ]: 'Trace {$traceName} startTime should be positive.',
  ["nonpositive trace duration"
  /* NONPOSITIVE_TRACE_DURATION */
  ]: 'Trace {$traceName} duration should be positive.',
  ["no window"
  /* NO_WINDOW */
  ]: 'Window is not available.',
  ["no app id"
  /* NO_APP_ID */
  ]: 'App id is not available.',
  ["no project id"
  /* NO_PROJECT_ID */
  ]: 'Project id is not available.',
  ["no api key"
  /* NO_API_KEY */
  ]: 'Api key is not available.',
  ["invalid cc log"
  /* INVALID_CC_LOG */
  ]: 'Attempted to queue invalid cc event',
  ["FB not default"
  /* FB_NOT_DEFAULT */
  ]: 'Performance can only start when Firebase app instance is the default one.',
  ["RC response not ok"
  /* RC_NOT_OK */
  ]: 'RC response is not ok',
  ["invalid attribute name"
  /* INVALID_ATTRIBUTE_NAME */
  ]: 'Attribute name {$attributeName} is invalid.',
  ["invalid attribute value"
  /* INVALID_ATTRIBUTE_VALUE */
  ]: 'Attribute value {$attributeValue} is invalid.',
  ["invalid custom metric name"
  /* INVALID_CUSTOM_METRIC_NAME */
  ]: 'Custom metric name {$customMetricName} is invalid',
  ["invalid String merger input"
  /* INVALID_STRING_MERGER_PARAMETER */
  ]: 'Input for String merger is invalid, contact support team to resolve.',
  ["already initialized"
  /* ALREADY_INITIALIZED */
  ]: 'initializePerformance() has already been called with ' + 'different options. To avoid this error, call initializePerformance() with the ' + 'same options as when it was originally called, or call getPerformance() to return the' + ' already initialized instance.'
};
const ERROR_FACTORY = new _util.ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const consoleLogger = new _logger.Logger(SERVICE_NAME);
consoleLogger.logLevel = _logger.LogLevel.INFO;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

let apiInstance;
let windowInstance;
/**
 * This class holds a reference to various browser related objects injected by
 * set methods.
 */

class Api {
  constructor(window) {
    this.window = window;

    if (!window) {
      throw ERROR_FACTORY.create("no window"
      /* NO_WINDOW */
      );
    }

    this.performance = window.performance;
    this.PerformanceObserver = window.PerformanceObserver;
    this.windowLocation = window.location;
    this.navigator = window.navigator;
    this.document = window.document;

    if (this.navigator && this.navigator.cookieEnabled) {
      // If user blocks cookies on the browser, accessing localStorage will
      // throw an exception.
      this.localStorage = window.localStorage;
    }

    if (window.perfMetrics && window.perfMetrics.onFirstInputDelay) {
      this.onFirstInputDelay = window.perfMetrics.onFirstInputDelay;
    }
  }

  getUrl() {
    // Do not capture the string query part of url.
    return this.windowLocation.href.split('?')[0];
  }

  mark(name) {
    if (!this.performance || !this.performance.mark) {
      return;
    }

    this.performance.mark(name);
  }

  measure(measureName, mark1, mark2) {
    if (!this.performance || !this.performance.measure) {
      return;
    }

    this.performance.measure(measureName, mark1, mark2);
  }

  getEntriesByType(type) {
    if (!this.performance || !this.performance.getEntriesByType) {
      return [];
    }

    return this.performance.getEntriesByType(type);
  }

  getEntriesByName(name) {
    if (!this.performance || !this.performance.getEntriesByName) {
      return [];
    }

    return this.performance.getEntriesByName(name);
  }

  getTimeOrigin() {
    // Polyfill the time origin with performance.timing.navigationStart.
    return this.performance && (this.performance.timeOrigin || this.performance.timing.navigationStart);
  }

  requiredApisAvailable() {
    if (!fetch || !Promise || !this.navigator || !this.navigator.cookieEnabled) {
      consoleLogger.info('Firebase Performance cannot start if browser does not support fetch and Promise or cookie is disabled.');
      return false;
    }

    if (!(0, _util.isIndexedDBAvailable)()) {
      consoleLogger.info('IndexedDB is not supported by current browswer');
      return false;
    }

    return true;
  }

  setupObserver(entryType, callback) {
    if (!this.PerformanceObserver) {
      return;
    }

    const observer = new this.PerformanceObserver(list => {
      for (const entry of list.getEntries()) {
        // `entry` is a PerformanceEntry instance.
        callback(entry);
      }
    }); // Start observing the entry types you care about.

    observer.observe({
      entryTypes: [entryType]
    });
  }

  static getInstance() {
    if (apiInstance === undefined) {
      apiInstance = new Api(windowInstance);
    }

    return apiInstance;
  }

}

function setupApi(window) {
  windowInstance = window;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


let iid;

function getIidPromise(installationsService) {
  const iidPromise = installationsService.getId(); // eslint-disable-next-line @typescript-eslint/no-floating-promises

  iidPromise.then(iidVal => {
    iid = iidVal;
  });
  return iidPromise;
} // This method should be used after the iid is retrieved by getIidPromise method.


function getIid() {
  return iid;
}

function getAuthTokenPromise(installationsService) {
  const authTokenPromise = installationsService.getToken(); // eslint-disable-next-line @typescript-eslint/no-floating-promises

  authTokenPromise.then(authTokenVal => {});
  return authTokenPromise;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function mergeStrings(part1, part2) {
  const sizeDiff = part1.length - part2.length;

  if (sizeDiff < 0 || sizeDiff > 1) {
    throw ERROR_FACTORY.create("invalid String merger input"
    /* INVALID_STRING_MERGER_PARAMETER */
    );
  }

  const resultArray = [];

  for (let i = 0; i < part1.length; i++) {
    resultArray.push(part1.charAt(i));

    if (part2.length > i) {
      resultArray.push(part2.charAt(i));
    }
  }

  return resultArray.join('');
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


let settingsServiceInstance;

class SettingsService {
  constructor() {
    // The variable which controls logging of automatic traces and HTTP/S network monitoring.
    this.instrumentationEnabled = true; // The variable which controls logging of custom traces.

    this.dataCollectionEnabled = true; // Configuration flags set through remote config.

    this.loggingEnabled = false; // Sampling rate between 0 and 1.

    this.tracesSamplingRate = 1;
    this.networkRequestsSamplingRate = 1; // Address of logging service.

    this.logEndPointUrl = 'https://firebaselogging.googleapis.com/v0cc/log?format=json_proto'; // Performance event transport endpoint URL which should be compatible with proto3.
    // New Address for transport service, not configurable via Remote Config.

    this.flTransportEndpointUrl = mergeStrings('hts/frbslgigp.ogepscmv/ieo/eaylg', 'tp:/ieaeogn-agolai.o/1frlglgc/o');
    this.transportKey = mergeStrings('AzSC8r6ReiGqFMyfvgow', 'Iayx0u-XT3vksVM-pIV'); // Source type for performance event logs.

    this.logSource = 462; // Flags which control per session logging of traces and network requests.

    this.logTraceAfterSampling = false;
    this.logNetworkAfterSampling = false; // TTL of config retrieved from remote config in hours.

    this.configTimeToLive = 12;
  }

  getFlTransportFullUrl() {
    return this.flTransportEndpointUrl.concat('?key=', this.transportKey);
  }

  static getInstance() {
    if (settingsServiceInstance === undefined) {
      settingsServiceInstance = new SettingsService();
    }

    return settingsServiceInstance;
  }

}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var VisibilityState;

(function (VisibilityState) {
  VisibilityState[VisibilityState["UNKNOWN"] = 0] = "UNKNOWN";
  VisibilityState[VisibilityState["VISIBLE"] = 1] = "VISIBLE";
  VisibilityState[VisibilityState["HIDDEN"] = 2] = "HIDDEN";
})(VisibilityState || (VisibilityState = {}));

const RESERVED_ATTRIBUTE_PREFIXES = ['firebase_', 'google_', 'ga_'];
const ATTRIBUTE_FORMAT_REGEX = new RegExp('^[a-zA-Z]\\w*$');
const MAX_ATTRIBUTE_NAME_LENGTH = 40;
const MAX_ATTRIBUTE_VALUE_LENGTH = 100;

function getServiceWorkerStatus() {
  const navigator = Api.getInstance().navigator;

  if ('serviceWorker' in navigator) {
    if (navigator.serviceWorker.controller) {
      return 2
      /* CONTROLLED */
      ;
    } else {
      return 3
      /* UNCONTROLLED */
      ;
    }
  } else {
    return 1
    /* UNSUPPORTED */
    ;
  }
}

function getVisibilityState() {
  const document = Api.getInstance().document;
  const visibilityState = document.visibilityState;

  switch (visibilityState) {
    case 'visible':
      return VisibilityState.VISIBLE;

    case 'hidden':
      return VisibilityState.HIDDEN;

    default:
      return VisibilityState.UNKNOWN;
  }
}

function getEffectiveConnectionType() {
  const navigator = Api.getInstance().navigator;
  const navigatorConnection = navigator.connection;
  const effectiveType = navigatorConnection && navigatorConnection.effectiveType;

  switch (effectiveType) {
    case 'slow-2g':
      return 1
      /* CONNECTION_SLOW_2G */
      ;

    case '2g':
      return 2
      /* CONNECTION_2G */
      ;

    case '3g':
      return 3
      /* CONNECTION_3G */
      ;

    case '4g':
      return 4
      /* CONNECTION_4G */
      ;

    default:
      return 0
      /* UNKNOWN */
      ;
  }
}

function isValidCustomAttributeName(name) {
  if (name.length === 0 || name.length > MAX_ATTRIBUTE_NAME_LENGTH) {
    return false;
  }

  const matchesReservedPrefix = RESERVED_ATTRIBUTE_PREFIXES.some(prefix => name.startsWith(prefix));
  return !matchesReservedPrefix && !!name.match(ATTRIBUTE_FORMAT_REGEX);
}

function isValidCustomAttributeValue(value) {
  return value.length !== 0 && value.length <= MAX_ATTRIBUTE_VALUE_LENGTH;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function getAppId(firebaseApp) {
  var _a;

  const appId = (_a = firebaseApp.options) === null || _a === void 0 ? void 0 : _a.appId;

  if (!appId) {
    throw ERROR_FACTORY.create("no app id"
    /* NO_APP_ID */
    );
  }

  return appId;
}

function getProjectId(firebaseApp) {
  var _a;

  const projectId = (_a = firebaseApp.options) === null || _a === void 0 ? void 0 : _a.projectId;

  if (!projectId) {
    throw ERROR_FACTORY.create("no project id"
    /* NO_PROJECT_ID */
    );
  }

  return projectId;
}

function getApiKey(firebaseApp) {
  var _a;

  const apiKey = (_a = firebaseApp.options) === null || _a === void 0 ? void 0 : _a.apiKey;

  if (!apiKey) {
    throw ERROR_FACTORY.create("no api key"
    /* NO_API_KEY */
    );
  }

  return apiKey;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const REMOTE_CONFIG_SDK_VERSION = '0.0.1'; // These values will be used if the remote config object is successfully
// retrieved, but the template does not have these fields.

const DEFAULT_CONFIGS = {
  loggingEnabled: true
};
const FIS_AUTH_PREFIX = 'FIREBASE_INSTALLATIONS_AUTH';

function getConfig(performanceController, iid) {
  const config = getStoredConfig();

  if (config) {
    processConfig(config);
    return Promise.resolve();
  }

  return getRemoteConfig(performanceController, iid).then(processConfig).then(config => storeConfig(config),
  /** Do nothing for error, use defaults set in settings service. */
  () => {});
}

function getStoredConfig() {
  const localStorage = Api.getInstance().localStorage;

  if (!localStorage) {
    return;
  }

  const expiryString = localStorage.getItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY);

  if (!expiryString || !configValid(expiryString)) {
    return;
  }

  const configStringified = localStorage.getItem(CONFIG_LOCAL_STORAGE_KEY);

  if (!configStringified) {
    return;
  }

  try {
    const configResponse = JSON.parse(configStringified);
    return configResponse;
  } catch (_a) {
    return;
  }
}

function storeConfig(config) {
  const localStorage = Api.getInstance().localStorage;

  if (!config || !localStorage) {
    return;
  }

  localStorage.setItem(CONFIG_LOCAL_STORAGE_KEY, JSON.stringify(config));
  localStorage.setItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY, String(Date.now() + SettingsService.getInstance().configTimeToLive * 60 * 60 * 1000));
}

const COULD_NOT_GET_CONFIG_MSG = 'Could not fetch config, will use default configs';

function getRemoteConfig(performanceController, iid) {
  // Perf needs auth token only to retrieve remote config.
  return getAuthTokenPromise(performanceController.installations).then(authToken => {
    const projectId = getProjectId(performanceController.app);
    const apiKey = getApiKey(performanceController.app);
    const configEndPoint = `https://firebaseremoteconfig.googleapis.com/v1/projects/${projectId}/namespaces/fireperf:fetch?key=${apiKey}`;
    const request = new Request(configEndPoint, {
      method: 'POST',
      headers: {
        Authorization: `${FIS_AUTH_PREFIX} ${authToken}`
      },

      /* eslint-disable camelcase */
      body: JSON.stringify({
        app_instance_id: iid,
        app_instance_id_token: authToken,
        app_id: getAppId(performanceController.app),
        app_version: SDK_VERSION,
        sdk_version: REMOTE_CONFIG_SDK_VERSION
      })
      /* eslint-enable camelcase */

    });
    return fetch(request).then(response => {
      if (response.ok) {
        return response.json();
      } // In case response is not ok. This will be caught by catch.


      throw ERROR_FACTORY.create("RC response not ok"
      /* RC_NOT_OK */
      );
    });
  }).catch(() => {
    consoleLogger.info(COULD_NOT_GET_CONFIG_MSG);
    return undefined;
  });
}
/**
 * Processes config coming either from calling RC or from local storage.
 * This method only runs if call is successful or config in storage
 * is valid.
 */


function processConfig(config) {
  if (!config) {
    return config;
  }

  const settingsServiceInstance = SettingsService.getInstance();
  const entries = config.entries || {};

  if (entries.fpr_enabled !== undefined) {
    // TODO: Change the assignment of loggingEnabled once the received type is
    // known.
    settingsServiceInstance.loggingEnabled = String(entries.fpr_enabled) === 'true';
  } else {
    // Config retrieved successfully, but there is no fpr_enabled in template.
    // Use secondary configs value.
    settingsServiceInstance.loggingEnabled = DEFAULT_CONFIGS.loggingEnabled;
  }

  if (entries.fpr_log_source) {
    settingsServiceInstance.logSource = Number(entries.fpr_log_source);
  }

  if (entries.fpr_log_endpoint_url) {
    settingsServiceInstance.logEndPointUrl = entries.fpr_log_endpoint_url;
  } // Key from Remote Config has to be non-empty string, otherwsie use local value.


  if (entries.fpr_log_transport_key) {
    settingsServiceInstance.transportKey = entries.fpr_log_transport_key;
  }

  if (entries.fpr_vc_network_request_sampling_rate !== undefined) {
    settingsServiceInstance.networkRequestsSamplingRate = Number(entries.fpr_vc_network_request_sampling_rate);
  }

  if (entries.fpr_vc_trace_sampling_rate !== undefined) {
    settingsServiceInstance.tracesSamplingRate = Number(entries.fpr_vc_trace_sampling_rate);
  } // Set the per session trace and network logging flags.


  settingsServiceInstance.logTraceAfterSampling = shouldLogAfterSampling(settingsServiceInstance.tracesSamplingRate);
  settingsServiceInstance.logNetworkAfterSampling = shouldLogAfterSampling(settingsServiceInstance.networkRequestsSamplingRate);
  return config;
}

function configValid(expiry) {
  return Number(expiry) > Date.now();
}

function shouldLogAfterSampling(samplingRate) {
  return Math.random() <= samplingRate;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


let initializationStatus = 1
/* notInitialized */
;
let initializationPromise;

function getInitializationPromise(performanceController) {
  initializationStatus = 2
  /* initializationPending */
  ;
  initializationPromise = initializationPromise || initializePerf(performanceController);
  return initializationPromise;
}

function isPerfInitialized() {
  return initializationStatus === 3
  /* initialized */
  ;
}

function initializePerf(performanceController) {
  return getDocumentReadyComplete().then(() => getIidPromise(performanceController.installations)).then(iid => getConfig(performanceController, iid)).then(() => changeInitializationStatus(), () => changeInitializationStatus());
}
/**
 * Returns a promise which resolves whenever the document readystate is complete or
 * immediately if it is called after page load complete.
 */


function getDocumentReadyComplete() {
  const document = Api.getInstance().document;
  return new Promise(resolve => {
    if (document && document.readyState !== 'complete') {
      const handler = () => {
        if (document.readyState === 'complete') {
          document.removeEventListener('readystatechange', handler);
          resolve();
        }
      };

      document.addEventListener('readystatechange', handler);
    } else {
      resolve();
    }
  });
}

function changeInitializationStatus() {
  initializationStatus = 3
  /* initialized */
  ;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const DEFAULT_SEND_INTERVAL_MS = 10 * 1000;
const INITIAL_SEND_TIME_DELAY_MS = 5.5 * 1000; // If end point does not work, the call will be tried for these many times.

const DEFAULT_REMAINING_TRIES = 3;
const MAX_EVENT_COUNT_PER_REQUEST = 1000;
let remainingTries = DEFAULT_REMAINING_TRIES;
/* eslint-enable camelcase */

let queue = [];
let isTransportSetup = false;

function setupTransportService() {
  if (!isTransportSetup) {
    processQueue(INITIAL_SEND_TIME_DELAY_MS);
    isTransportSetup = true;
  }
}

function processQueue(timeOffset) {
  setTimeout(() => {
    // If there is no remainingTries left, stop retrying.
    if (remainingTries === 0) {
      return;
    } // If there are no events to process, wait for DEFAULT_SEND_INTERVAL_MS and try again.


    if (!queue.length) {
      return processQueue(DEFAULT_SEND_INTERVAL_MS);
    }

    dispatchQueueEvents();
  }, timeOffset);
}

function dispatchQueueEvents() {
  // Extract events up to the maximum cap of single logRequest from top of "official queue".
  // The staged events will be used for current logRequest attempt, remaining events will be kept
  // for next attempt.
  const staged = queue.splice(0, MAX_EVENT_COUNT_PER_REQUEST);
  /* eslint-disable camelcase */
  // We will pass the JSON serialized event to the backend.

  const log_event = staged.map(evt => ({
    source_extension_json_proto3: evt.message,
    event_time_ms: String(evt.eventTime)
  }));
  const data = {
    request_time_ms: String(Date.now()),
    client_info: {
      client_type: 1,
      js_client_info: {}
    },
    log_source: SettingsService.getInstance().logSource,
    log_event
  };
  /* eslint-enable camelcase */

  sendEventsToFl(data, staged).catch(() => {
    // If the request fails for some reason, add the events that were attempted
    // back to the primary queue to retry later.
    queue = [...staged, ...queue];
    remainingTries--;
    consoleLogger.info(`Tries left: ${remainingTries}.`);
    processQueue(DEFAULT_SEND_INTERVAL_MS);
  });
}

function sendEventsToFl(data, staged) {
  return postToFlEndpoint(data).then(res => {
    if (!res.ok) {
      consoleLogger.info('Call to Firebase backend failed.');
    }

    return res.json();
  }).then(res => {
    // Find the next call wait time from the response.
    const transportWait = Number(res.nextRequestWaitMillis);
    let requestOffset = DEFAULT_SEND_INTERVAL_MS;

    if (!isNaN(transportWait)) {
      requestOffset = Math.max(transportWait, requestOffset);
    } // Delete request if response include RESPONSE_ACTION_UNKNOWN or DELETE_REQUEST action.
    // Otherwise, retry request using normal scheduling if response include RETRY_REQUEST_LATER.


    const logResponseDetails = res.logResponseDetails;

    if (Array.isArray(logResponseDetails) && logResponseDetails.length > 0 && logResponseDetails[0].responseAction === 'RETRY_REQUEST_LATER') {
      queue = [...staged, ...queue];
      consoleLogger.info(`Retry transport request later.`);
    }

    remainingTries = DEFAULT_REMAINING_TRIES; // Schedule the next process.

    processQueue(requestOffset);
  });
}

function postToFlEndpoint(data) {
  const flTransportFullUrl = SettingsService.getInstance().getFlTransportFullUrl();
  return fetch(flTransportFullUrl, {
    method: 'POST',
    body: JSON.stringify(data)
  });
}

function addToQueue(evt) {
  if (!evt.eventTime || !evt.message) {
    throw ERROR_FACTORY.create("invalid cc log"
    /* INVALID_CC_LOG */
    );
  } // Add the new event to the queue.


  queue = [...queue, evt];
}
/** Log handler for cc service to send the performance logs to the server. */


function transportHandler( // eslint-disable-next-line @typescript-eslint/no-explicit-any
serializer) {
  return (...args) => {
    const message = serializer(...args);
    addToQueue({
      message,
      eventTime: Date.now()
    });
  };
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint-enble camelcase */


let logger; // This method is not called before initialization.

function sendLog(resource, resourceType) {
  if (!logger) {
    logger = transportHandler(serializer);
  }

  logger(resource, resourceType);
}

function logTrace(trace) {
  const settingsService = SettingsService.getInstance(); // Do not log if trace is auto generated and instrumentation is disabled.

  if (!settingsService.instrumentationEnabled && trace.isAuto) {
    return;
  } // Do not log if trace is custom and data collection is disabled.


  if (!settingsService.dataCollectionEnabled && !trace.isAuto) {
    return;
  } // Do not log if required apis are not available.


  if (!Api.getInstance().requiredApisAvailable()) {
    return;
  } // Only log the page load auto traces if page is visible.


  if (trace.isAuto && getVisibilityState() !== VisibilityState.VISIBLE) {
    return;
  }

  if (isPerfInitialized()) {
    sendTraceLog(trace);
  } else {
    // Custom traces can be used before the initialization but logging
    // should wait until after.
    getInitializationPromise(trace.performanceController).then(() => sendTraceLog(trace), () => sendTraceLog(trace));
  }
}

function sendTraceLog(trace) {
  if (!getIid()) {
    return;
  }

  const settingsService = SettingsService.getInstance();

  if (!settingsService.loggingEnabled || !settingsService.logTraceAfterSampling) {
    return;
  }

  setTimeout(() => sendLog(trace, 1
  /* Trace */
  ), 0);
}

function logNetworkRequest(networkRequest) {
  const settingsService = SettingsService.getInstance(); // Do not log network requests if instrumentation is disabled.

  if (!settingsService.instrumentationEnabled) {
    return;
  } // Do not log the js sdk's call to transport service domain to avoid unnecessary cycle.
  // Need to blacklist both old and new endpoints to avoid migration gap.


  const networkRequestUrl = networkRequest.url; // Blacklist old log endpoint and new transport endpoint.
  // Because Performance SDK doesn't instrument requests sent from SDK itself.

  const logEndpointUrl = settingsService.logEndPointUrl.split('?')[0];
  const flEndpointUrl = settingsService.flTransportEndpointUrl.split('?')[0];

  if (networkRequestUrl === logEndpointUrl || networkRequestUrl === flEndpointUrl) {
    return;
  }

  if (!settingsService.loggingEnabled || !settingsService.logNetworkAfterSampling) {
    return;
  }

  setTimeout(() => sendLog(networkRequest, 0
  /* NetworkRequest */
  ), 0);
}

function serializer(resource, resourceType) {
  if (resourceType === 0
  /* NetworkRequest */
  ) {
    return serializeNetworkRequest(resource);
  }

  return serializeTrace(resource);
}

function serializeNetworkRequest(networkRequest) {
  const networkRequestMetric = {
    url: networkRequest.url,
    http_method: networkRequest.httpMethod || 0,
    http_response_code: 200,
    response_payload_bytes: networkRequest.responsePayloadBytes,
    client_start_time_us: networkRequest.startTimeUs,
    time_to_response_initiated_us: networkRequest.timeToResponseInitiatedUs,
    time_to_response_completed_us: networkRequest.timeToResponseCompletedUs
  };
  const perfMetric = {
    application_info: getApplicationInfo(networkRequest.performanceController.app),
    network_request_metric: networkRequestMetric
  };
  return JSON.stringify(perfMetric);
}

function serializeTrace(trace) {
  const traceMetric = {
    name: trace.name,
    is_auto: trace.isAuto,
    client_start_time_us: trace.startTimeUs,
    duration_us: trace.durationUs
  };

  if (Object.keys(trace.counters).length !== 0) {
    traceMetric.counters = trace.counters;
  }

  const customAttributes = trace.getAttributes();

  if (Object.keys(customAttributes).length !== 0) {
    traceMetric.custom_attributes = customAttributes;
  }

  const perfMetric = {
    application_info: getApplicationInfo(trace.performanceController.app),
    trace_metric: traceMetric
  };
  return JSON.stringify(perfMetric);
}

function getApplicationInfo(firebaseApp) {
  return {
    google_app_id: getAppId(firebaseApp),
    app_instance_id: getIid(),
    web_app_info: {
      sdk_version: SDK_VERSION,
      page_url: Api.getInstance().getUrl(),
      service_worker_status: getServiceWorkerStatus(),
      visibility_state: getVisibilityState(),
      effective_connection_type: getEffectiveConnectionType()
    },
    application_process_state: 0
  };
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const MAX_METRIC_NAME_LENGTH = 100;
const RESERVED_AUTO_PREFIX = '_';
const oobMetrics = [FIRST_PAINT_COUNTER_NAME, FIRST_CONTENTFUL_PAINT_COUNTER_NAME, FIRST_INPUT_DELAY_COUNTER_NAME];
/**
 * Returns true if the metric is custom and does not start with reserved prefix, or if
 * the metric is one of out of the box page load trace metrics.
 */

function isValidMetricName(name, traceName) {
  if (name.length === 0 || name.length > MAX_METRIC_NAME_LENGTH) {
    return false;
  }

  return traceName && traceName.startsWith(OOB_TRACE_PAGE_LOAD_PREFIX) && oobMetrics.indexOf(name) > -1 || !name.startsWith(RESERVED_AUTO_PREFIX);
}
/**
 * Converts the provided value to an integer value to be used in case of a metric.
 * @param providedValue Provided number value of the metric that needs to be converted to an integer.
 *
 * @returns Converted integer number to be set for the metric.
 */


function convertMetricValueToInteger(providedValue) {
  const valueAsInteger = Math.floor(providedValue);

  if (valueAsInteger < providedValue) {
    consoleLogger.info(`Metric value should be an Integer, setting the value as : ${valueAsInteger}.`);
  }

  return valueAsInteger;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


class Trace {
  /**
   * @param performanceController The performance controller running.
   * @param name The name of the trace.
   * @param isAuto If the trace is auto-instrumented.
   * @param traceMeasureName The name of the measure marker in user timing specification. This field
   * is only set when the trace is built for logging when the user directly uses the user timing
   * api (performance.mark and performance.measure).
   */
  constructor(performanceController, name, isAuto = false, traceMeasureName) {
    this.performanceController = performanceController;
    this.name = name;
    this.isAuto = isAuto;
    this.state = 1
    /* UNINITIALIZED */
    ;
    this.customAttributes = {};
    this.counters = {};
    this.api = Api.getInstance();
    this.randomId = Math.floor(Math.random() * 1000000);

    if (!this.isAuto) {
      this.traceStartMark = `${TRACE_START_MARK_PREFIX}-${this.randomId}-${this.name}`;
      this.traceStopMark = `${TRACE_STOP_MARK_PREFIX}-${this.randomId}-${this.name}`;
      this.traceMeasure = traceMeasureName || `${TRACE_MEASURE_PREFIX}-${this.randomId}-${this.name}`;

      if (traceMeasureName) {
        // For the case of direct user timing traces, no start stop will happen. The measure object
        // is already available.
        this.calculateTraceMetrics();
      }
    }
  }
  /**
   * Starts a trace. The measurement of the duration starts at this point.
   */


  start() {
    if (this.state !== 1
    /* UNINITIALIZED */
    ) {
      throw ERROR_FACTORY.create("trace started"
      /* TRACE_STARTED_BEFORE */
      , {
        traceName: this.name
      });
    }

    this.api.mark(this.traceStartMark);
    this.state = 2
    /* RUNNING */
    ;
  }
  /**
   * Stops the trace. The measurement of the duration of the trace stops at this point and trace
   * is logged.
   */


  stop() {
    if (this.state !== 2
    /* RUNNING */
    ) {
      throw ERROR_FACTORY.create("trace stopped"
      /* TRACE_STOPPED_BEFORE */
      , {
        traceName: this.name
      });
    }

    this.state = 3
    /* TERMINATED */
    ;
    this.api.mark(this.traceStopMark);
    this.api.measure(this.traceMeasure, this.traceStartMark, this.traceStopMark);
    this.calculateTraceMetrics();
    logTrace(this);
  }
  /**
   * Records a trace with predetermined values. If this method is used a trace is created and logged
   * directly. No need to use start and stop methods.
   * @param startTime Trace start time since epoch in millisec
   * @param duration The duraction of the trace in millisec
   * @param options An object which can optionally hold maps of custom metrics and custom attributes
   */


  record(startTime, duration, options) {
    if (startTime <= 0) {
      throw ERROR_FACTORY.create("nonpositive trace startTime"
      /* NONPOSITIVE_TRACE_START_TIME */
      , {
        traceName: this.name
      });
    }

    if (duration <= 0) {
      throw ERROR_FACTORY.create("nonpositive trace duration"
      /* NONPOSITIVE_TRACE_DURATION */
      , {
        traceName: this.name
      });
    }

    this.durationUs = Math.floor(duration * 1000);
    this.startTimeUs = Math.floor(startTime * 1000);

    if (options && options.attributes) {
      this.customAttributes = Object.assign({}, options.attributes);
    }

    if (options && options.metrics) {
      for (const metric of Object.keys(options.metrics)) {
        if (!isNaN(Number(options.metrics[metric]))) {
          this.counters[metric] = Number(Math.floor(options.metrics[metric]));
        }
      }
    }

    logTrace(this);
  }
  /**
   * Increments a custom metric by a certain number or 1 if number not specified. Will create a new
   * custom metric if one with the given name does not exist. The value will be floored down to an
   * integer.
   * @param counter Name of the custom metric
   * @param numAsInteger Increment by value
   */


  incrementMetric(counter, numAsInteger = 1) {
    if (this.counters[counter] === undefined) {
      this.putMetric(counter, numAsInteger);
    } else {
      this.putMetric(counter, this.counters[counter] + numAsInteger);
    }
  }
  /**
   * Sets a custom metric to a specified value. Will create a new custom metric if one with the
   * given name does not exist. The value will be floored down to an integer.
   * @param counter Name of the custom metric
   * @param numAsInteger Set custom metric to this value
   */


  putMetric(counter, numAsInteger) {
    if (isValidMetricName(counter, this.name)) {
      this.counters[counter] = convertMetricValueToInteger(numAsInteger);
    } else {
      throw ERROR_FACTORY.create("invalid custom metric name"
      /* INVALID_CUSTOM_METRIC_NAME */
      , {
        customMetricName: counter
      });
    }
  }
  /**
   * Returns the value of the custom metric by that name. If a custom metric with that name does
   * not exist will return zero.
   * @param counter
   */


  getMetric(counter) {
    return this.counters[counter] || 0;
  }
  /**
   * Sets a custom attribute of a trace to a certain value.
   * @param attr
   * @param value
   */


  putAttribute(attr, value) {
    const isValidName = isValidCustomAttributeName(attr);
    const isValidValue = isValidCustomAttributeValue(value);

    if (isValidName && isValidValue) {
      this.customAttributes[attr] = value;
      return;
    } // Throw appropriate error when the attribute name or value is invalid.


    if (!isValidName) {
      throw ERROR_FACTORY.create("invalid attribute name"
      /* INVALID_ATTRIBUTE_NAME */
      , {
        attributeName: attr
      });
    }

    if (!isValidValue) {
      throw ERROR_FACTORY.create("invalid attribute value"
      /* INVALID_ATTRIBUTE_VALUE */
      , {
        attributeValue: value
      });
    }
  }
  /**
   * Retrieves the value a custom attribute of a trace is set to.
   * @param attr
   */


  getAttribute(attr) {
    return this.customAttributes[attr];
  }

  removeAttribute(attr) {
    if (this.customAttributes[attr] === undefined) {
      return;
    }

    delete this.customAttributes[attr];
  }

  getAttributes() {
    return Object.assign({}, this.customAttributes);
  }

  setStartTime(startTime) {
    this.startTimeUs = startTime;
  }

  setDuration(duration) {
    this.durationUs = duration;
  }
  /**
   * Calculates and assigns the duration and start time of the trace using the measure performance
   * entry.
   */


  calculateTraceMetrics() {
    const perfMeasureEntries = this.api.getEntriesByName(this.traceMeasure);
    const perfMeasureEntry = perfMeasureEntries && perfMeasureEntries[0];

    if (perfMeasureEntry) {
      this.durationUs = Math.floor(perfMeasureEntry.duration * 1000);
      this.startTimeUs = Math.floor((perfMeasureEntry.startTime + this.api.getTimeOrigin()) * 1000);
    }
  }
  /**
   * @param navigationTimings A single element array which contains the navigationTIming object of
   * the page load
   * @param paintTimings A array which contains paintTiming object of the page load
   * @param firstInputDelay First input delay in millisec
   */


  static createOobTrace(performanceController, navigationTimings, paintTimings, firstInputDelay) {
    const route = Api.getInstance().getUrl();

    if (!route) {
      return;
    }

    const trace = new Trace(performanceController, OOB_TRACE_PAGE_LOAD_PREFIX + route, true);
    const timeOriginUs = Math.floor(Api.getInstance().getTimeOrigin() * 1000);
    trace.setStartTime(timeOriginUs); // navigationTimings includes only one element.

    if (navigationTimings && navigationTimings[0]) {
      trace.setDuration(Math.floor(navigationTimings[0].duration * 1000));
      trace.putMetric('domInteractive', Math.floor(navigationTimings[0].domInteractive * 1000));
      trace.putMetric('domContentLoadedEventEnd', Math.floor(navigationTimings[0].domContentLoadedEventEnd * 1000));
      trace.putMetric('loadEventEnd', Math.floor(navigationTimings[0].loadEventEnd * 1000));
    }

    const FIRST_PAINT = 'first-paint';
    const FIRST_CONTENTFUL_PAINT = 'first-contentful-paint';

    if (paintTimings) {
      const firstPaint = paintTimings.find(paintObject => paintObject.name === FIRST_PAINT);

      if (firstPaint && firstPaint.startTime) {
        trace.putMetric(FIRST_PAINT_COUNTER_NAME, Math.floor(firstPaint.startTime * 1000));
      }

      const firstContentfulPaint = paintTimings.find(paintObject => paintObject.name === FIRST_CONTENTFUL_PAINT);

      if (firstContentfulPaint && firstContentfulPaint.startTime) {
        trace.putMetric(FIRST_CONTENTFUL_PAINT_COUNTER_NAME, Math.floor(firstContentfulPaint.startTime * 1000));
      }

      if (firstInputDelay) {
        trace.putMetric(FIRST_INPUT_DELAY_COUNTER_NAME, Math.floor(firstInputDelay * 1000));
      }
    }

    logTrace(trace);
  }

  static createUserTimingTrace(performanceController, measureName) {
    const trace = new Trace(performanceController, measureName, false, measureName);
    logTrace(trace);
  }

}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function createNetworkRequestEntry(performanceController, entry) {
  const performanceEntry = entry;

  if (!performanceEntry || performanceEntry.responseStart === undefined) {
    return;
  }

  const timeOrigin = Api.getInstance().getTimeOrigin();
  const startTimeUs = Math.floor((performanceEntry.startTime + timeOrigin) * 1000);
  const timeToResponseInitiatedUs = performanceEntry.responseStart ? Math.floor((performanceEntry.responseStart - performanceEntry.startTime) * 1000) : undefined;
  const timeToResponseCompletedUs = Math.floor((performanceEntry.responseEnd - performanceEntry.startTime) * 1000); // Remove the query params from logged network request url.

  const url = performanceEntry.name && performanceEntry.name.split('?')[0];
  const networkRequest = {
    performanceController,
    url,
    responsePayloadBytes: performanceEntry.transferSize,
    startTimeUs,
    timeToResponseInitiatedUs,
    timeToResponseCompletedUs
  };
  logNetworkRequest(networkRequest);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const FID_WAIT_TIME_MS = 5000;

function setupOobResources(performanceController) {
  // Do not initialize unless iid is available.
  if (!getIid()) {
    return;
  } // The load event might not have fired yet, and that means performance navigation timing
  // object has a duration of 0. The setup should run after all current tasks in js queue.


  setTimeout(() => setupOobTraces(performanceController), 0);
  setTimeout(() => setupNetworkRequests(performanceController), 0);
  setTimeout(() => setupUserTimingTraces(performanceController), 0);
}

function setupNetworkRequests(performanceController) {
  const api = Api.getInstance();
  const resources = api.getEntriesByType('resource');

  for (const resource of resources) {
    createNetworkRequestEntry(performanceController, resource);
  }

  api.setupObserver('resource', entry => createNetworkRequestEntry(performanceController, entry));
}

function setupOobTraces(performanceController) {
  const api = Api.getInstance();
  const navigationTimings = api.getEntriesByType('navigation');
  const paintTimings = api.getEntriesByType('paint'); // If First Input Desly polyfill is added to the page, report the fid value.
  // https://github.com/GoogleChromeLabs/first-input-delay

  if (api.onFirstInputDelay) {
    // If the fid call back is not called for certain time, continue without it.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    let timeoutId = setTimeout(() => {
      Trace.createOobTrace(performanceController, navigationTimings, paintTimings);
      timeoutId = undefined;
    }, FID_WAIT_TIME_MS);
    api.onFirstInputDelay(fid => {
      if (timeoutId) {
        clearTimeout(timeoutId);
        Trace.createOobTrace(performanceController, navigationTimings, paintTimings, fid);
      }
    });
  } else {
    Trace.createOobTrace(performanceController, navigationTimings, paintTimings);
  }
}

function setupUserTimingTraces(performanceController) {
  const api = Api.getInstance(); // Run through the measure performance entries collected up to this point.

  const measures = api.getEntriesByType('measure');

  for (const measure of measures) {
    createUserTimingTrace(performanceController, measure);
  } // Setup an observer to capture the measures from this point on.


  api.setupObserver('measure', entry => createUserTimingTrace(performanceController, entry));
}

function createUserTimingTrace(performanceController, measure) {
  const measureName = measure.name; // Do not create a trace, if the user timing marks and measures are created by the sdk itself.

  if (measureName.substring(0, TRACE_MEASURE_PREFIX.length) === TRACE_MEASURE_PREFIX) {
    return;
  }

  Trace.createUserTimingTrace(performanceController, measureName);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


class PerformanceController {
  constructor(app, installations) {
    this.app = app;
    this.installations = installations;
    this.initialized = false;
  }
  /**
   * This method *must* be called internally as part of creating a
   * PerformanceController instance.
   *
   * Currently it's not possible to pass the settings object through the
   * constructor using Components, so this method exists to be called with the
   * desired settings, to ensure nothing is collected without the user's
   * consent.
   */


  _init(settings) {
    if (this.initialized) {
      return;
    }

    if ((settings === null || settings === void 0 ? void 0 : settings.dataCollectionEnabled) !== undefined) {
      this.dataCollectionEnabled = settings.dataCollectionEnabled;
    }

    if ((settings === null || settings === void 0 ? void 0 : settings.instrumentationEnabled) !== undefined) {
      this.instrumentationEnabled = settings.instrumentationEnabled;
    }

    if (Api.getInstance().requiredApisAvailable()) {
      (0, _util.validateIndexedDBOpenable)().then(isAvailable => {
        if (isAvailable) {
          setupTransportService();
          getInitializationPromise(this).then(() => setupOobResources(this), () => setupOobResources(this));
          this.initialized = true;
        }
      }).catch(error => {
        consoleLogger.info(`Environment doesn't support IndexedDB: ${error}`);
      });
    } else {
      consoleLogger.info('Firebase Performance cannot start if the browser does not support ' + '"Fetch" and "Promise", or cookies are disabled.');
    }
  }

  set instrumentationEnabled(val) {
    SettingsService.getInstance().instrumentationEnabled = val;
  }

  get instrumentationEnabled() {
    return SettingsService.getInstance().instrumentationEnabled;
  }

  set dataCollectionEnabled(val) {
    SettingsService.getInstance().dataCollectionEnabled = val;
  }

  get dataCollectionEnabled() {
    return SettingsService.getInstance().dataCollectionEnabled;
  }

}
/**
 * Firebase Performance Monitoring
 *
 * @packageDocumentation
 */


const DEFAULT_ENTRY_NAME = '[DEFAULT]';
/**
 * Returns a {@link FirebasePerformance} instance for the given app.
 * @param app - The {@link @firebase/app#FirebaseApp} to use.
 * @public
 */

function getPerformance(app = (0, _app.getApp)()) {
  app = (0, _util.getModularInstance)(app);
  const provider = (0, _app._getProvider)(app, 'performance');
  const perfInstance = provider.getImmediate();
  return perfInstance;
}
/**
 * Returns a {@link FirebasePerformance} instance for the given app. Can only be called once.
 * @param app - The {@link @firebase/app#FirebaseApp} to use.
 * @param settings - Optional settings for the {@link FirebasePerformance} instance.
 * @public
 */


function initializePerformance(app, settings) {
  app = (0, _util.getModularInstance)(app);
  const provider = (0, _app._getProvider)(app, 'performance'); // throw if an instance was already created.
  // It could happen if initializePerformance() is called more than once, or getPerformance() is called first.

  if (provider.isInitialized()) {
    const existingInstance = provider.getImmediate();
    const initialSettings = provider.getOptions();

    if ((0, _util.deepEqual)(initialSettings, settings !== null && settings !== void 0 ? settings : {})) {
      return existingInstance;
    } else {
      throw ERROR_FACTORY.create("already initialized"
      /* ALREADY_INITIALIZED */
      );
    }
  }

  const perfInstance = provider.initialize({
    options: settings
  });
  return perfInstance;
}
/**
 * Returns a new `PerformanceTrace` instance.
 * @param performance - The {@link FirebasePerformance} instance to use.
 * @param name - The name of the trace.
 * @public
 */


function trace(performance, name) {
  performance = (0, _util.getModularInstance)(performance);
  return new Trace(performance, name);
}

const factory = (container, {
  options: settings
}) => {
  // Dependencies
  const app = container.getProvider('app').getImmediate();
  const installations = container.getProvider('installations-internal').getImmediate();

  if (app.name !== DEFAULT_ENTRY_NAME) {
    throw ERROR_FACTORY.create("FB not default"
    /* FB_NOT_DEFAULT */
    );
  }

  if (typeof window === 'undefined') {
    throw ERROR_FACTORY.create("no window"
    /* NO_WINDOW */
    );
  }

  setupApi(window);
  const perfInstance = new PerformanceController(app, installations);

  perfInstance._init(settings);

  return perfInstance;
};

function registerPerformance() {
  (0, _app._registerComponent)(new _component.Component('performance', factory, "PUBLIC"
  /* PUBLIC */
  ));
}

registerPerformance();
(0, _app.registerVersion)(name, version);
},{"@firebase/util":"node_modules/@firebase/util/dist/index.esm.js","@firebase/logger":"node_modules/@firebase/logger/dist/index.esm.js","@firebase/app":"node_modules/@firebase/app/dist/index.esm2017.js","@firebase/component":"node_modules/@firebase/component/dist/index.esm.js","@firebase/installations":"node_modules/@firebase/installations/dist/index.esm2017.js"}],"node_modules/@firebase/performance-compat/dist/index.esm2017.js":[function(require,module,exports) {
"use strict";

var _appCompat = _interopRequireDefault(require("@firebase/app-compat"));

var _component = require("@firebase/component");

var _performance = require("@firebase/performance");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class PerformanceCompatImpl {
  constructor(app, _delegate) {
    this.app = app;
    this._delegate = _delegate;
  }

  get instrumentationEnabled() {
    return this._delegate.instrumentationEnabled;
  }

  set instrumentationEnabled(val) {
    this._delegate.instrumentationEnabled = val;
  }

  get dataCollectionEnabled() {
    return this._delegate.dataCollectionEnabled;
  }

  set dataCollectionEnabled(val) {
    this._delegate.dataCollectionEnabled = val;
  }

  trace(traceName) {
    return (0, _performance.trace)(this._delegate, traceName);
  }

}

const name = "@firebase/performance-compat";
const version = "0.1.0";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function registerPerformanceCompat(firebaseInstance) {
  firebaseInstance.INTERNAL.registerComponent(new _component.Component('performance-compat', performanceFactory, "PUBLIC"
  /* PUBLIC */
  ));
  firebaseInstance.registerVersion(name, version);
}

function performanceFactory(container) {
  const app = container.getProvider('app-compat').getImmediate(); // The following call will always succeed.

  const performance = container.getProvider('performance').getImmediate();
  return new PerformanceCompatImpl(app, performance);
}

registerPerformanceCompat(_appCompat.default);
},{"@firebase/app-compat":"node_modules/@firebase/app-compat/dist/index.esm2017.js","@firebase/component":"node_modules/@firebase/component/dist/index.esm.js","@firebase/performance":"node_modules/@firebase/performance/dist/index.esm2017.js"}],"node_modules/@firebase/remote-config/dist/index.esm2017.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.activate = activate;
exports.ensureInitialized = ensureInitialized;
exports.fetchAndActivate = fetchAndActivate;
exports.fetchConfig = fetchConfig;
exports.getAll = getAll;
exports.getBoolean = getBoolean;
exports.getNumber = getNumber;
exports.getRemoteConfig = getRemoteConfig;
exports.getString = getString;
exports.getValue = getValue;
exports.setLogLevel = setLogLevel;

var _app = require("@firebase/app");

var _component = require("@firebase/component");

var _logger2 = require("@firebase/logger");

var _util = require("@firebase/util");

require("@firebase/installations");

const name = "@firebase/remote-config";
const version = "0.2.0";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Shims a minimal AbortSignal.
 *
 * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects
 * of networking, such as retries. Firebase doesn't use AbortController enough to justify a
 * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be
 * swapped out if/when we do.
 */

class RemoteConfigAbortSignal {
  constructor() {
    this.listeners = [];
  }

  addEventListener(listener) {
    this.listeners.push(listener);
  }

  abort() {
    this.listeners.forEach(listener => listener());
  }

}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const RC_COMPONENT_NAME = 'remote-config';
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const ERROR_DESCRIPTION_MAP = {
  ["registration-window"
  /* REGISTRATION_WINDOW */
  ]: 'Undefined window object. This SDK only supports usage in a browser environment.',
  ["registration-project-id"
  /* REGISTRATION_PROJECT_ID */
  ]: 'Undefined project identifier. Check Firebase app initialization.',
  ["registration-api-key"
  /* REGISTRATION_API_KEY */
  ]: 'Undefined API key. Check Firebase app initialization.',
  ["registration-app-id"
  /* REGISTRATION_APP_ID */
  ]: 'Undefined app identifier. Check Firebase app initialization.',
  ["storage-open"
  /* STORAGE_OPEN */
  ]: 'Error thrown when opening storage. Original error: {$originalErrorMessage}.',
  ["storage-get"
  /* STORAGE_GET */
  ]: 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',
  ["storage-set"
  /* STORAGE_SET */
  ]: 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',
  ["storage-delete"
  /* STORAGE_DELETE */
  ]: 'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.',
  ["fetch-client-network"
  /* FETCH_NETWORK */
  ]: 'Fetch client failed to connect to a network. Check Internet connection.' + ' Original error: {$originalErrorMessage}.',
  ["fetch-timeout"
  /* FETCH_TIMEOUT */
  ]: 'The config fetch request timed out. ' + ' Configure timeout using "fetchTimeoutMillis" SDK setting.',
  ["fetch-throttle"
  /* FETCH_THROTTLE */
  ]: 'The config fetch request timed out while in an exponential backoff state.' + ' Configure timeout using "fetchTimeoutMillis" SDK setting.' + ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',
  ["fetch-client-parse"
  /* FETCH_PARSE */
  ]: 'Fetch client could not parse response.' + ' Original error: {$originalErrorMessage}.',
  ["fetch-status"
  /* FETCH_STATUS */
  ]: 'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.'
};
const ERROR_FACTORY = new _util.ErrorFactory('remoteconfig'
/* service */
, 'Remote Config'
/* service name */
, ERROR_DESCRIPTION_MAP); // Note how this is like typeof/instanceof, but for ErrorCode.

function hasErrorCode(e, errorCode) {
  return e instanceof _util.FirebaseError && e.code.indexOf(errorCode) !== -1;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const DEFAULT_VALUE_FOR_BOOLEAN = false;
const DEFAULT_VALUE_FOR_STRING = '';
const DEFAULT_VALUE_FOR_NUMBER = 0;
const BOOLEAN_TRUTHY_VALUES = ['1', 'true', 't', 'yes', 'y', 'on'];

class Value {
  constructor(_source, _value = DEFAULT_VALUE_FOR_STRING) {
    this._source = _source;
    this._value = _value;
  }

  asString() {
    return this._value;
  }

  asBoolean() {
    if (this._source === 'static') {
      return DEFAULT_VALUE_FOR_BOOLEAN;
    }

    return BOOLEAN_TRUTHY_VALUES.indexOf(this._value.toLowerCase()) >= 0;
  }

  asNumber() {
    if (this._source === 'static') {
      return DEFAULT_VALUE_FOR_NUMBER;
    }

    let num = Number(this._value);

    if (isNaN(num)) {
      num = DEFAULT_VALUE_FOR_NUMBER;
    }

    return num;
  }

  getSource() {
    return this._source;
  }

}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 *
 * @param app - The {@link @firebase/app#FirebaseApp} instance.
 * @returns A {@link RemoteConfig} instance.
 *
 * @public
 */


function getRemoteConfig(app = (0, _app.getApp)()) {
  app = (0, _util.getModularInstance)(app);
  const rcProvider = (0, _app._getProvider)(app, RC_COMPONENT_NAME);
  return rcProvider.getImmediate();
}
/**
 * Makes the last fetched config available to the getters.
 * @param remoteConfig - The {@link RemoteConfig} instance.
 * @returns A `Promise` which resolves to true if the current call activated the fetched configs.
 * If the fetched configs were already activated, the `Promise` will resolve to false.
 *
 * @public
 */


async function activate(remoteConfig) {
  const rc = (0, _util.getModularInstance)(remoteConfig);
  const [lastSuccessfulFetchResponse, activeConfigEtag] = await Promise.all([rc._storage.getLastSuccessfulFetchResponse(), rc._storage.getActiveConfigEtag()]);

  if (!lastSuccessfulFetchResponse || !lastSuccessfulFetchResponse.config || !lastSuccessfulFetchResponse.eTag || lastSuccessfulFetchResponse.eTag === activeConfigEtag) {
    // Either there is no successful fetched config, or is the same as current active
    // config.
    return false;
  }

  await Promise.all([rc._storageCache.setActiveConfig(lastSuccessfulFetchResponse.config), rc._storage.setActiveConfigEtag(lastSuccessfulFetchResponse.eTag)]);
  return true;
}
/**
 * Ensures the last activated config are available to the getters.
 * @param remoteConfig - The {@link RemoteConfig} instance.
 *
 * @returns A `Promise` that resolves when the last activated config is available to the getters.
 * @public
 */


function ensureInitialized(remoteConfig) {
  const rc = (0, _util.getModularInstance)(remoteConfig);

  if (!rc._initializePromise) {
    rc._initializePromise = rc._storageCache.loadFromStorage().then(() => {
      rc._isInitializationComplete = true;
    });
  }

  return rc._initializePromise;
}
/**
 * Fetches and caches configuration from the Remote Config service.
 * @param remoteConfig - The {@link RemoteConfig} instance.
 * @public
 */


async function fetchConfig(remoteConfig) {
  const rc = (0, _util.getModularInstance)(remoteConfig); // Aborts the request after the given timeout, causing the fetch call to
  // reject with an `AbortError`.
  //
  // <p>Aborting after the request completes is a no-op, so we don't need a
  // corresponding `clearTimeout`.
  //
  // Locating abort logic here because:
  // * it uses a developer setting (timeout)
  // * it applies to all retries (like curl's max-time arg)
  // * it is consistent with the Fetch API's signal input

  const abortSignal = new RemoteConfigAbortSignal();
  setTimeout(async () => {
    // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.
    abortSignal.abort();
  }, rc.settings.fetchTimeoutMillis); // Catches *all* errors thrown by client so status can be set consistently.

  try {
    await rc._client.fetch({
      cacheMaxAgeMillis: rc.settings.minimumFetchIntervalMillis,
      signal: abortSignal
    });
    await rc._storageCache.setLastFetchStatus('success');
  } catch (e) {
    const lastFetchStatus = hasErrorCode(e, "fetch-throttle"
    /* FETCH_THROTTLE */
    ) ? 'throttle' : 'failure';
    await rc._storageCache.setLastFetchStatus(lastFetchStatus);
    throw e;
  }
}
/**
 * Gets all config.
 *
 * @param remoteConfig - The {@link RemoteConfig} instance.
 * @returns All config.
 *
 * @public
 */


function getAll(remoteConfig) {
  const rc = (0, _util.getModularInstance)(remoteConfig);
  return getAllKeys(rc._storageCache.getActiveConfig(), rc.defaultConfig).reduce((allConfigs, key) => {
    allConfigs[key] = getValue(remoteConfig, key);
    return allConfigs;
  }, {});
}
/**
 * Gets the value for the given key as a boolean.
 *
 * Convenience method for calling <code>remoteConfig.getValue(key).asBoolean()</code>.
 *
 * @param remoteConfig - The {@link RemoteConfig} instance.
 * @param key - The name of the parameter.
 *
 * @returns The value for the given key as a boolean.
 * @public
 */


function getBoolean(remoteConfig, key) {
  return getValue((0, _util.getModularInstance)(remoteConfig), key).asBoolean();
}
/**
 * Gets the value for the given key as a number.
 *
 * Convenience method for calling <code>remoteConfig.getValue(key).asNumber()</code>.
 *
 * @param remoteConfig - The {@link RemoteConfig} instance.
 * @param key - The name of the parameter.
 *
 * @returns The value for the given key as a number.
 *
 * @public
 */


function getNumber(remoteConfig, key) {
  return getValue((0, _util.getModularInstance)(remoteConfig), key).asNumber();
}
/**
 * Gets the value for the given key as a string.
 * Convenience method for calling <code>remoteConfig.getValue(key).asString()</code>.
 *
 * @param remoteConfig - The {@link RemoteConfig} instance.
 * @param key - The name of the parameter.
 *
 * @returns The value for the given key as a string.
 *
 * @public
 */


function getString(remoteConfig, key) {
  return getValue((0, _util.getModularInstance)(remoteConfig), key).asString();
}
/**
 * Gets the {@link Value} for the given key.
 *
 * @param remoteConfig - The {@link RemoteConfig} instance.
 * @param key - The name of the parameter.
 *
 * @returns The value for the given key.
 *
 * @public
 */


function getValue(remoteConfig, key) {
  const rc = (0, _util.getModularInstance)(remoteConfig);

  if (!rc._isInitializationComplete) {
    rc._logger.debug(`A value was requested for key "${key}" before SDK initialization completed.` + ' Await on ensureInitialized if the intent was to get a previously activated value.');
  }

  const activeConfig = rc._storageCache.getActiveConfig();

  if (activeConfig && activeConfig[key] !== undefined) {
    return new Value('remote', activeConfig[key]);
  } else if (rc.defaultConfig && rc.defaultConfig[key] !== undefined) {
    return new Value('default', String(rc.defaultConfig[key]));
  }

  rc._logger.debug(`Returning static value for key "${key}".` + ' Define a default or remote value if this is unintentional.');

  return new Value('static');
}
/**
 * Defines the log level to use.
 *
 * @param remoteConfig - The {@link RemoteConfig} instance.
 * @param logLevel - The log level to set.
 *
 * @public
 */


function setLogLevel(remoteConfig, logLevel) {
  const rc = (0, _util.getModularInstance)(remoteConfig);

  switch (logLevel) {
    case 'debug':
      rc._logger.logLevel = _logger2.LogLevel.DEBUG;
      break;

    case 'silent':
      rc._logger.logLevel = _logger2.LogLevel.SILENT;
      break;

    default:
      rc._logger.logLevel = _logger2.LogLevel.ERROR;
  }
}
/**
 * Dedupes and returns an array of all the keys of the received objects.
 */


function getAllKeys(obj1 = {}, obj2 = {}) {
  return Object.keys(Object.assign(Object.assign({}, obj1), obj2));
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Implements the {@link RemoteConfigClient} abstraction with success response caching.
 *
 * <p>Comparable to the browser's Cache API for responses, but the Cache API requires a Service
 * Worker, which requires HTTPS, which would significantly complicate SDK installation. Also, the
 * Cache API doesn't support matching entries by time.
 */


class CachingClient {
  constructor(client, storage, storageCache, logger) {
    this.client = client;
    this.storage = storage;
    this.storageCache = storageCache;
    this.logger = logger;
  }
  /**
   * Returns true if the age of the cached fetched configs is less than or equal to
   * {@link Settings#minimumFetchIntervalInSeconds}.
   *
   * <p>This is comparable to passing `headers = { 'Cache-Control': max-age <maxAge> }` to the
   * native Fetch API.
   *
   * <p>Visible for testing.
   */


  isCachedDataFresh(cacheMaxAgeMillis, lastSuccessfulFetchTimestampMillis) {
    // Cache can only be fresh if it's populated.
    if (!lastSuccessfulFetchTimestampMillis) {
      this.logger.debug('Config fetch cache check. Cache unpopulated.');
      return false;
    } // Calculates age of cache entry.


    const cacheAgeMillis = Date.now() - lastSuccessfulFetchTimestampMillis;
    const isCachedDataFresh = cacheAgeMillis <= cacheMaxAgeMillis;
    this.logger.debug('Config fetch cache check.' + ` Cache age millis: ${cacheAgeMillis}.` + ` Cache max age millis (minimumFetchIntervalMillis setting): ${cacheMaxAgeMillis}.` + ` Is cache hit: ${isCachedDataFresh}.`);
    return isCachedDataFresh;
  }

  async fetch(request) {
    // Reads from persisted storage to avoid cache miss if callers don't wait on initialization.
    const [lastSuccessfulFetchTimestampMillis, lastSuccessfulFetchResponse] = await Promise.all([this.storage.getLastSuccessfulFetchTimestampMillis(), this.storage.getLastSuccessfulFetchResponse()]); // Exits early on cache hit.

    if (lastSuccessfulFetchResponse && this.isCachedDataFresh(request.cacheMaxAgeMillis, lastSuccessfulFetchTimestampMillis)) {
      return lastSuccessfulFetchResponse;
    } // Deviates from pure decorator by not honoring a passed ETag since we don't have a public API
    // that allows the caller to pass an ETag.


    request.eTag = lastSuccessfulFetchResponse && lastSuccessfulFetchResponse.eTag; // Falls back to service on cache miss.

    const response = await this.client.fetch(request); // Fetch throws for non-success responses, so success is guaranteed here.

    const storageOperations = [// Uses write-through cache for consistency with synchronous public API.
    this.storageCache.setLastSuccessfulFetchTimestampMillis(Date.now())];

    if (response.status === 200) {
      // Caches response only if it has changed, ie non-304 responses.
      storageOperations.push(this.storage.setLastSuccessfulFetchResponse(response));
    }

    await Promise.all(storageOperations);
    return response;
  }

}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Attempts to get the most accurate browser language setting.
 *
 * <p>Adapted from getUserLanguage in packages/auth/src/utils.js for TypeScript.
 *
 * <p>Defers default language specification to server logic for consistency.
 *
 * @param navigatorLanguage Enables tests to override read-only {@link NavigatorLanguage}.
 */


function getUserLanguage(navigatorLanguage = navigator) {
  return (// Most reliable, but only supported in Chrome/Firefox.
    navigatorLanguage.languages && navigatorLanguage.languages[0] || // Supported in most browsers, but returns the language of the browser
    // UI, not the language set in browser settings.
    navigatorLanguage.language // Polyfill otherwise.

  );
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Implements the Client abstraction for the Remote Config REST API.
 */


class RestClient {
  constructor(firebaseInstallations, sdkVersion, namespace, projectId, apiKey, appId) {
    this.firebaseInstallations = firebaseInstallations;
    this.sdkVersion = sdkVersion;
    this.namespace = namespace;
    this.projectId = projectId;
    this.apiKey = apiKey;
    this.appId = appId;
  }
  /**
   * Fetches from the Remote Config REST API.
   *
   * @throws a {@link ErrorCode.FETCH_NETWORK} error if {@link GlobalFetch#fetch} can't
   * connect to the network.
   * @throws a {@link ErrorCode.FETCH_PARSE} error if {@link Response#json} can't parse the
   * fetch response.
   * @throws a {@link ErrorCode.FETCH_STATUS} error if the service returns an HTTP error status.
   */


  async fetch(request) {
    const [installationId, installationToken] = await Promise.all([this.firebaseInstallations.getId(), this.firebaseInstallations.getToken()]);
    const urlBase = window.FIREBASE_REMOTE_CONFIG_URL_BASE || 'https://firebaseremoteconfig.googleapis.com';
    const url = `${urlBase}/v1/projects/${this.projectId}/namespaces/${this.namespace}:fetch?key=${this.apiKey}`;
    const headers = {
      'Content-Type': 'application/json',
      'Content-Encoding': 'gzip',
      // Deviates from pure decorator by not passing max-age header since we don't currently have
      // service behavior using that header.
      'If-None-Match': request.eTag || '*'
    };
    const requestBody = {
      /* eslint-disable camelcase */
      sdk_version: this.sdkVersion,
      app_instance_id: installationId,
      app_instance_id_token: installationToken,
      app_id: this.appId,
      language_code: getUserLanguage()
      /* eslint-enable camelcase */

    };
    const options = {
      method: 'POST',
      headers,
      body: JSON.stringify(requestBody)
    }; // This logic isn't REST-specific, but shimming abort logic isn't worth another decorator.

    const fetchPromise = fetch(url, options);
    const timeoutPromise = new Promise((_resolve, reject) => {
      // Maps async event listener to Promise API.
      request.signal.addEventListener(() => {
        // Emulates https://heycam.github.io/webidl/#aborterror
        const error = new Error('The operation was aborted.');
        error.name = 'AbortError';
        reject(error);
      });
    });
    let response;

    try {
      await Promise.race([fetchPromise, timeoutPromise]);
      response = await fetchPromise;
    } catch (originalError) {
      let errorCode = "fetch-client-network"
      /* FETCH_NETWORK */
      ;

      if (originalError.name === 'AbortError') {
        errorCode = "fetch-timeout"
        /* FETCH_TIMEOUT */
        ;
      }

      throw ERROR_FACTORY.create(errorCode, {
        originalErrorMessage: originalError.message
      });
    }

    let status = response.status; // Normalizes nullable header to optional.

    const responseEtag = response.headers.get('ETag') || undefined;
    let config;
    let state; // JSON parsing throws SyntaxError if the response body isn't a JSON string.
    // Requesting application/json and checking for a 200 ensures there's JSON data.

    if (response.status === 200) {
      let responseBody;

      try {
        responseBody = await response.json();
      } catch (originalError) {
        throw ERROR_FACTORY.create("fetch-client-parse"
        /* FETCH_PARSE */
        , {
          originalErrorMessage: originalError.message
        });
      }

      config = responseBody['entries'];
      state = responseBody['state'];
    } // Normalizes based on legacy state.


    if (state === 'INSTANCE_STATE_UNSPECIFIED') {
      status = 500;
    } else if (state === 'NO_CHANGE') {
      status = 304;
    } else if (state === 'NO_TEMPLATE' || state === 'EMPTY_CONFIG') {
      // These cases can be fixed remotely, so normalize to safe value.
      config = {};
    } // Normalize to exception-based control flow for non-success cases.
    // Encapsulates HTTP specifics in this class as much as possible. Status is still the best for
    // differentiating success states (200 from 304; the state body param is undefined in a
    // standard 304).


    if (status !== 304 && status !== 200) {
      throw ERROR_FACTORY.create("fetch-status"
      /* FETCH_STATUS */
      , {
        httpStatus: status
      });
    }

    return {
      status,
      eTag: responseEtag,
      config
    };
  }

}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Supports waiting on a backoff by:
 *
 * <ul>
 *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>
 *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>
 *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled
 *       request appear the same.</li>
 * </ul>
 *
 * <p>Visible for testing.
 */


function setAbortableTimeout(signal, throttleEndTimeMillis) {
  return new Promise((resolve, reject) => {
    // Derives backoff from given end time, normalizing negative numbers to zero.
    const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);
    const timeout = setTimeout(resolve, backoffMillis); // Adds listener, rather than sets onabort, because signal is a shared object.

    signal.addEventListener(() => {
      clearTimeout(timeout); // If the request completes before this timeout, the rejection has no effect.

      reject(ERROR_FACTORY.create("fetch-throttle"
      /* FETCH_THROTTLE */
      , {
        throttleEndTimeMillis
      }));
    });
  });
}
/**
 * Returns true if the {@link Error} indicates a fetch request may succeed later.
 */


function isRetriableError(e) {
  if (!(e instanceof _util.FirebaseError) || !e.customData) {
    return false;
  } // Uses string index defined by ErrorData, which FirebaseError implements.


  const httpStatus = Number(e.customData['httpStatus']);
  return httpStatus === 429 || httpStatus === 500 || httpStatus === 503 || httpStatus === 504;
}
/**
 * Decorates a Client with retry logic.
 *
 * <p>Comparable to CachingClient, but uses backoff logic instead of cache max age and doesn't cache
 * responses (because the SDK has no use for error responses).
 */


class RetryingClient {
  constructor(client, storage) {
    this.client = client;
    this.storage = storage;
  }

  async fetch(request) {
    const throttleMetadata = (await this.storage.getThrottleMetadata()) || {
      backoffCount: 0,
      throttleEndTimeMillis: Date.now()
    };
    return this.attemptFetch(request, throttleMetadata);
  }
  /**
   * A recursive helper for attempting a fetch request repeatedly.
   *
   * @throws any non-retriable errors.
   */


  async attemptFetch(request, {
    throttleEndTimeMillis,
    backoffCount
  }) {
    // Starts with a (potentially zero) timeout to support resumption from stored state.
    // Ensures the throttle end time is honored if the last attempt timed out.
    // Note the SDK will never make a request if the fetch timeout expires at this point.
    await setAbortableTimeout(request.signal, throttleEndTimeMillis);

    try {
      const response = await this.client.fetch(request); // Note the SDK only clears throttle state if response is success or non-retriable.

      await this.storage.deleteThrottleMetadata();
      return response;
    } catch (e) {
      if (!isRetriableError(e)) {
        throw e;
      } // Increments backoff state.


      const throttleMetadata = {
        throttleEndTimeMillis: Date.now() + (0, _util.calculateBackoffMillis)(backoffCount),
        backoffCount: backoffCount + 1
      }; // Persists state.

      await this.storage.setThrottleMetadata(throttleMetadata);
      return this.attemptFetch(request, throttleMetadata);
    }
  }

}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const DEFAULT_FETCH_TIMEOUT_MILLIS = 60 * 1000; // One minute

const DEFAULT_CACHE_MAX_AGE_MILLIS = 12 * 60 * 60 * 1000; // Twelve hours.

/**
 * Encapsulates business logic mapping network and storage dependencies to the public SDK API.
 *
 * See {@link https://github.com/FirebasePrivate/firebase-js-sdk/blob/master/packages/firebase/index.d.ts|interface documentation} for method descriptions.
 */

class RemoteConfig {
  constructor( // Required by FirebaseServiceFactory interface.
  app, // JS doesn't support private yet
  // (https://github.com/tc39/proposal-class-fields#private-fields), so we hint using an
  // underscore prefix.

  /**
   * @internal
   */
  _client,
  /**
   * @internal
   */
  _storageCache,
  /**
   * @internal
   */
  _storage,
  /**
   * @internal
   */
  _logger) {
    this.app = app;
    this._client = _client;
    this._storageCache = _storageCache;
    this._storage = _storage;
    this._logger = _logger;
    /**
     * Tracks completion of initialization promise.
     * @internal
     */

    this._isInitializationComplete = false;
    this.settings = {
      fetchTimeoutMillis: DEFAULT_FETCH_TIMEOUT_MILLIS,
      minimumFetchIntervalMillis: DEFAULT_CACHE_MAX_AGE_MILLIS
    };
    this.defaultConfig = {};
  }

  get fetchTimeMillis() {
    return this._storageCache.getLastSuccessfulFetchTimestampMillis() || -1;
  }

  get lastFetchStatus() {
    return this._storageCache.getLastFetchStatus() || 'no-fetch-yet';
  }

}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Converts an error event associated with a {@link IDBRequest} to a {@link FirebaseError}.
 */


function toFirebaseError(event, errorCode) {
  const originalError = event.target.error || undefined;
  return ERROR_FACTORY.create(errorCode, {
    originalErrorMessage: originalError && originalError.message
  });
}
/**
 * A general-purpose store keyed by app + namespace + {@link
 * ProjectNamespaceKeyFieldValue}.
 *
 * <p>The Remote Config SDK can be used with multiple app installations, and each app can interact
 * with multiple namespaces, so this store uses app (ID + name) and namespace as common parent keys
 * for a set of key-value pairs. See {@link Storage#createCompositeKey}.
 *
 * <p>Visible for testing.
 */


const APP_NAMESPACE_STORE = 'app_namespace_store';
const DB_NAME = 'firebase_remote_config';
const DB_VERSION = 1; // Visible for testing.

function openDatabase() {
  return new Promise((resolve, reject) => {
    const request = indexedDB.open(DB_NAME, DB_VERSION);

    request.onerror = event => {
      reject(toFirebaseError(event, "storage-open"
      /* STORAGE_OPEN */
      ));
    };

    request.onsuccess = event => {
      resolve(event.target.result);
    };

    request.onupgradeneeded = event => {
      const db = event.target.result; // We don't use 'break' in this switch statement, the fall-through
      // behavior is what we want, because if there are multiple versions between
      // the old version and the current version, we want ALL the migrations
      // that correspond to those versions to run, not only the last one.
      // eslint-disable-next-line default-case

      switch (event.oldVersion) {
        case 0:
          db.createObjectStore(APP_NAMESPACE_STORE, {
            keyPath: 'compositeKey'
          });
      }
    };
  });
}
/**
 * Abstracts data persistence.
 */


class Storage {
  /**
   * @param appId enables storage segmentation by app (ID + name).
   * @param appName enables storage segmentation by app (ID + name).
   * @param namespace enables storage segmentation by namespace.
   */
  constructor(appId, appName, namespace, openDbPromise = openDatabase()) {
    this.appId = appId;
    this.appName = appName;
    this.namespace = namespace;
    this.openDbPromise = openDbPromise;
  }

  getLastFetchStatus() {
    return this.get('last_fetch_status');
  }

  setLastFetchStatus(status) {
    return this.set('last_fetch_status', status);
  } // This is comparable to a cache entry timestamp. If we need to expire other data, we could
  // consider adding timestamp to all storage records and an optional max age arg to getters.


  getLastSuccessfulFetchTimestampMillis() {
    return this.get('last_successful_fetch_timestamp_millis');
  }

  setLastSuccessfulFetchTimestampMillis(timestamp) {
    return this.set('last_successful_fetch_timestamp_millis', timestamp);
  }

  getLastSuccessfulFetchResponse() {
    return this.get('last_successful_fetch_response');
  }

  setLastSuccessfulFetchResponse(response) {
    return this.set('last_successful_fetch_response', response);
  }

  getActiveConfig() {
    return this.get('active_config');
  }

  setActiveConfig(config) {
    return this.set('active_config', config);
  }

  getActiveConfigEtag() {
    return this.get('active_config_etag');
  }

  setActiveConfigEtag(etag) {
    return this.set('active_config_etag', etag);
  }

  getThrottleMetadata() {
    return this.get('throttle_metadata');
  }

  setThrottleMetadata(metadata) {
    return this.set('throttle_metadata', metadata);
  }

  deleteThrottleMetadata() {
    return this.delete('throttle_metadata');
  }

  async get(key) {
    const db = await this.openDbPromise;
    return new Promise((resolve, reject) => {
      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readonly');
      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);
      const compositeKey = this.createCompositeKey(key);

      try {
        const request = objectStore.get(compositeKey);

        request.onerror = event => {
          reject(toFirebaseError(event, "storage-get"
          /* STORAGE_GET */
          ));
        };

        request.onsuccess = event => {
          const result = event.target.result;

          if (result) {
            resolve(result.value);
          } else {
            resolve(undefined);
          }
        };
      } catch (e) {
        reject(ERROR_FACTORY.create("storage-get"
        /* STORAGE_GET */
        , {
          originalErrorMessage: e && e.message
        }));
      }
    });
  }

  async set(key, value) {
    const db = await this.openDbPromise;
    return new Promise((resolve, reject) => {
      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');
      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);
      const compositeKey = this.createCompositeKey(key);

      try {
        const request = objectStore.put({
          compositeKey,
          value
        });

        request.onerror = event => {
          reject(toFirebaseError(event, "storage-set"
          /* STORAGE_SET */
          ));
        };

        request.onsuccess = () => {
          resolve();
        };
      } catch (e) {
        reject(ERROR_FACTORY.create("storage-set"
        /* STORAGE_SET */
        , {
          originalErrorMessage: e && e.message
        }));
      }
    });
  }

  async delete(key) {
    const db = await this.openDbPromise;
    return new Promise((resolve, reject) => {
      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');
      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);
      const compositeKey = this.createCompositeKey(key);

      try {
        const request = objectStore.delete(compositeKey);

        request.onerror = event => {
          reject(toFirebaseError(event, "storage-delete"
          /* STORAGE_DELETE */
          ));
        };

        request.onsuccess = () => {
          resolve();
        };
      } catch (e) {
        reject(ERROR_FACTORY.create("storage-delete"
        /* STORAGE_DELETE */
        , {
          originalErrorMessage: e && e.message
        }));
      }
    });
  } // Facilitates composite key functionality (which is unsupported in IE).


  createCompositeKey(key) {
    return [this.appId, this.appName, this.namespace, key].join();
  }

}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A memory cache layer over storage to support the SDK's synchronous read requirements.
 */


class StorageCache {
  constructor(storage) {
    this.storage = storage;
  }
  /**
   * Memory-only getters
   */


  getLastFetchStatus() {
    return this.lastFetchStatus;
  }

  getLastSuccessfulFetchTimestampMillis() {
    return this.lastSuccessfulFetchTimestampMillis;
  }

  getActiveConfig() {
    return this.activeConfig;
  }
  /**
   * Read-ahead getter
   */


  async loadFromStorage() {
    const lastFetchStatusPromise = this.storage.getLastFetchStatus();
    const lastSuccessfulFetchTimestampMillisPromise = this.storage.getLastSuccessfulFetchTimestampMillis();
    const activeConfigPromise = this.storage.getActiveConfig(); // Note:
    // 1. we consistently check for undefined to avoid clobbering defined values
    //   in memory
    // 2. we defer awaiting to improve readability, as opposed to destructuring
    //   a Promise.all result, for example

    const lastFetchStatus = await lastFetchStatusPromise;

    if (lastFetchStatus) {
      this.lastFetchStatus = lastFetchStatus;
    }

    const lastSuccessfulFetchTimestampMillis = await lastSuccessfulFetchTimestampMillisPromise;

    if (lastSuccessfulFetchTimestampMillis) {
      this.lastSuccessfulFetchTimestampMillis = lastSuccessfulFetchTimestampMillis;
    }

    const activeConfig = await activeConfigPromise;

    if (activeConfig) {
      this.activeConfig = activeConfig;
    }
  }
  /**
   * Write-through setters
   */


  setLastFetchStatus(status) {
    this.lastFetchStatus = status;
    return this.storage.setLastFetchStatus(status);
  }

  setLastSuccessfulFetchTimestampMillis(timestampMillis) {
    this.lastSuccessfulFetchTimestampMillis = timestampMillis;
    return this.storage.setLastSuccessfulFetchTimestampMillis(timestampMillis);
  }

  setActiveConfig(activeConfig) {
    this.activeConfig = activeConfig;
    return this.storage.setActiveConfig(activeConfig);
  }

}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function registerRemoteConfig() {
  (0, _app._registerComponent)(new _component.Component(RC_COMPONENT_NAME, remoteConfigFactory, "PUBLIC"
  /* PUBLIC */
  ).setMultipleInstances(true));
  (0, _app.registerVersion)(name, version);

  function remoteConfigFactory(container, {
    instanceIdentifier: namespace
  }) {
    /* Dependencies */
    // getImmediate for FirebaseApp will always succeed
    const app = container.getProvider('app').getImmediate(); // The following call will always succeed because rc has `import '@firebase/installations'`

    const installations = container.getProvider('installations-internal').getImmediate(); // Guards against the SDK being used in non-browser environments.

    if (typeof window === 'undefined') {
      throw ERROR_FACTORY.create("registration-window"
      /* REGISTRATION_WINDOW */
      );
    } // Normalizes optional inputs.


    const {
      projectId,
      apiKey,
      appId
    } = app.options;

    if (!projectId) {
      throw ERROR_FACTORY.create("registration-project-id"
      /* REGISTRATION_PROJECT_ID */
      );
    }

    if (!apiKey) {
      throw ERROR_FACTORY.create("registration-api-key"
      /* REGISTRATION_API_KEY */
      );
    }

    if (!appId) {
      throw ERROR_FACTORY.create("registration-app-id"
      /* REGISTRATION_APP_ID */
      );
    }

    namespace = namespace || 'firebase';
    const storage = new Storage(appId, app.name, namespace);
    const storageCache = new StorageCache(storage);
    const logger = new _logger2.Logger(name); // Sets ERROR as the default log level.
    // See RemoteConfig#setLogLevel for corresponding normalization to ERROR log level.

    logger.logLevel = _logger2.LogLevel.ERROR;
    const restClient = new RestClient(installations, // Uses the JS SDK version, by which the RC package version can be deduced, if necessary.
    _app.SDK_VERSION, namespace, projectId, apiKey, appId);
    const retryingClient = new RetryingClient(restClient, storage);
    const cachingClient = new CachingClient(retryingClient, storage, storageCache, logger);
    const remoteConfigInstance = new RemoteConfig(app, cachingClient, storageCache, storage, logger); // Starts warming cache.
    // eslint-disable-next-line @typescript-eslint/no-floating-promises

    ensureInitialized(remoteConfigInstance);
    return remoteConfigInstance;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// This API is put in a separate file, so we can stub fetchConfig and activate in tests.
// It's not possible to stub standalone functions from the same module.

/**
 *
 * Performs fetch and activate operations, as a convenience.
 *
 * @param remoteConfig - The {@link RemoteConfig} instance.
 *
 * @returns A `Promise` which resolves to true if the current call activated the fetched configs.
 * If the fetched configs were already activated, the `Promise` will resolve to false.
 *
 * @public
 */


async function fetchAndActivate(remoteConfig) {
  remoteConfig = (0, _util.getModularInstance)(remoteConfig);
  await fetchConfig(remoteConfig);
  return activate(remoteConfig);
}
/**
 * Firebase Remote Config
 *
 * @packageDocumentation
 */

/** register component and version */


registerRemoteConfig();
},{"@firebase/app":"node_modules/@firebase/app/dist/index.esm2017.js","@firebase/component":"node_modules/@firebase/component/dist/index.esm.js","@firebase/logger":"node_modules/@firebase/logger/dist/index.esm.js","@firebase/util":"node_modules/@firebase/util/dist/index.esm.js","@firebase/installations":"node_modules/@firebase/installations/dist/index.esm2017.js"}],"node_modules/@firebase/remote-config-compat/dist/index.esm2017.js":[function(require,module,exports) {
"use strict";

var _appCompat = _interopRequireDefault(require("@firebase/app-compat"));

var _component = require("@firebase/component");

var _remoteConfig = require("@firebase/remote-config");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class RemoteConfigCompatImpl {
  constructor(app, _delegate) {
    this.app = app;
    this._delegate = _delegate;
  }

  get defaultConfig() {
    return this._delegate.defaultConfig;
  }

  set defaultConfig(value) {
    this._delegate.defaultConfig = value;
  }

  get fetchTimeMillis() {
    return this._delegate.fetchTimeMillis;
  }

  get lastFetchStatus() {
    return this._delegate.lastFetchStatus;
  }

  get settings() {
    return this._delegate.settings;
  }

  set settings(value) {
    this._delegate.settings = value;
  }

  activate() {
    return (0, _remoteConfig.activate)(this._delegate);
  }

  ensureInitialized() {
    return (0, _remoteConfig.ensureInitialized)(this._delegate);
  }
  /**
   * @throws a {@link ErrorCode.FETCH_CLIENT_TIMEOUT} if the request takes longer than
   * {@link Settings.fetchTimeoutInSeconds} or
   * {@link DEFAULT_FETCH_TIMEOUT_SECONDS}.
   */


  fetch() {
    return (0, _remoteConfig.fetchConfig)(this._delegate);
  }

  fetchAndActivate() {
    return (0, _remoteConfig.fetchAndActivate)(this._delegate);
  }

  getAll() {
    return (0, _remoteConfig.getAll)(this._delegate);
  }

  getBoolean(key) {
    return (0, _remoteConfig.getBoolean)(this._delegate, key);
  }

  getNumber(key) {
    return (0, _remoteConfig.getNumber)(this._delegate, key);
  }

  getString(key) {
    return (0, _remoteConfig.getString)(this._delegate, key);
  }

  getValue(key) {
    return (0, _remoteConfig.getValue)(this._delegate, key);
  } // Based on packages/firestore/src/util/log.ts but not static because we need per-instance levels
  // to differentiate 2p and 3p use-cases.


  setLogLevel(logLevel) {
    (0, _remoteConfig.setLogLevel)(this._delegate, logLevel);
  }

}

const name = "@firebase/remote-config-compat";
const version = "0.1.0";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function registerRemoteConfigCompat(firebaseInstance) {
  firebaseInstance.INTERNAL.registerComponent(new _component.Component('remoteConfig-compat', remoteConfigFactory, "PUBLIC"
  /* PUBLIC */
  ).setMultipleInstances(true));
  firebaseInstance.registerVersion(name, version);
}

function remoteConfigFactory(container, {
  instanceIdentifier: namespace
}) {
  const app = container.getProvider('app-compat').getImmediate(); // The following call will always succeed because rc `import {...} from '@firebase/remote-config'`

  const remoteConfig = container.getProvider('remote-config').getImmediate({
    identifier: namespace
  });
  return new RemoteConfigCompatImpl(app, remoteConfig);
}

registerRemoteConfigCompat(_appCompat.default);
},{"@firebase/app-compat":"node_modules/@firebase/app-compat/dist/index.esm2017.js","@firebase/component":"node_modules/@firebase/component/dist/index.esm.js","@firebase/remote-config":"node_modules/@firebase/remote-config/dist/index.esm2017.js"}],"node_modules/firebase/compat/dist/index.esm.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _appCompat.default;
  }
});

var _appCompat = _interopRequireDefault(require("@firebase/app-compat"));

require("@firebase/analytics-compat");

require("@firebase/app-check-compat");

require("@firebase/auth-compat");

require("@firebase/database-compat");

require("@firebase/firestore-compat");

require("@firebase/functions-compat");

require("@firebase/messaging-compat");

require("@firebase/storage-compat");

require("@firebase/performance-compat");

require("@firebase/remote-config-compat");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var name$1 = "firebase";
var version$1 = "9.0.2";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

_appCompat.default.registerVersion(name$1, version$1, 'app-compat');

var name = "firebase";
var version = "9.0.2";
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

console.warn("\nIt looks like you're using the development build of the Firebase JS SDK.\nWhen deploying Firebase apps to production, it is advisable to only import\nthe individual SDK components you intend to use.\n\nFor the module builds, these are available in the following manner\n(replace <PACKAGE> with the name of a component - i.e. auth, database, etc):\n\nCommonJS Modules:\nconst firebase = require('firebase/app');\nrequire('firebase/<PACKAGE>');\n\nES Modules:\nimport firebase from 'firebase/app';\nimport 'firebase/<PACKAGE>';\n\nTypescript:\nimport firebase from 'firebase/app';\nimport 'firebase/<PACKAGE>';\n");

_appCompat.default.registerVersion(name, version, 'compat');
},{"@firebase/app-compat":"node_modules/@firebase/app-compat/dist/index.esm2017.js","@firebase/analytics-compat":"node_modules/@firebase/analytics-compat/dist/index.esm2017.js","@firebase/app-check-compat":"node_modules/@firebase/app-check-compat/dist/index.esm2017.js","@firebase/auth-compat":"node_modules/@firebase/auth-compat/dist/index.esm2017.js","@firebase/database-compat":"node_modules/@firebase/database-compat/dist/index.esm2017.js","@firebase/firestore-compat":"node_modules/@firebase/firestore-compat/dist/index.esm2017.js","@firebase/functions-compat":"node_modules/@firebase/functions-compat/dist/index.esm2017.js","@firebase/messaging-compat":"node_modules/@firebase/messaging-compat/dist/index.esm2017.js","@firebase/storage-compat":"node_modules/@firebase/storage-compat/dist/index.esm2017.js","@firebase/performance-compat":"node_modules/@firebase/performance-compat/dist/index.esm2017.js","@firebase/remote-config-compat":"node_modules/@firebase/remote-config-compat/dist/index.esm2017.js"}],"node_modules/firebase/storage/dist/index.esm.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _storage = require("@firebase/storage");

Object.keys(_storage).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _storage[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _storage[key];
    }
  });
});
},{"@firebase/storage":"node_modules/@firebase/storage/dist/index.esm2017.js"}],"upload.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.upload = upload;

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function bytesToSize(bytes) {
  var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];

  if (!bytes) {
    return '0 Byte';
  }

  var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));
  return Math.round(bytes / Math.pow(1024, i)) + ' ' + sizes[i];
}

var element = function element(tag) {
  var classes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var content = arguments.length > 2 ? arguments[2] : undefined;
  var node = document.createElement(tag);

  if (classes.length) {
    var _node$classList;

    (_node$classList = node.classList).add.apply(_node$classList, _toConsumableArray(classes));
  }

  if (content) {
    node.textContent = content;
  }

  return node;
};

function noop() {}

function upload(selector) {
  var _options$onUpload;

  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var files = [];
  var onUpload = (_options$onUpload = options.onUpload) !== null && _options$onUpload !== void 0 ? _options$onUpload : noop;
  var input = document.querySelector(selector);
  var preview = element('div', ['preview']);
  preview.classList.add('preview');
  var open = element('button', ['btn'], 'Open');
  var upload = element('button', ['btn', 'primary'], 'Upload');
  upload.style.display = 'none';

  if (options.multi) {
    input.setAttribute('multiple', true);
  }

  if (options.accept && Array.isArray(options.accept)) {
    input.setAttribute('accept', options.accept.join(','));
  }

  var openFile = function openFile() {
    return input.click();
  };

  var removeHandler = function removeHandler(event) {
    if (!event.target.dataset.name) {
      return;
    }

    var name = event.target.dataset.name;
    files = files.filter(function (file) {
      return file.name !== name;
    });

    if (!files.length) {
      upload.style.display = 'none';
    }

    var block = preview.querySelector("[data-name=\"".concat(name, "\"]")).closest('.preview-image');
    block.classList.add('removing');
    setTimeout(function () {
      return block.remove();
    }, 300); // block.remove()
  };

  var clearPreview = function clearPreview(el) {
    el.style.bottom = '4px';
    el.innerHTML = "<div class=\"preview-info-progress\"></div>";
  };

  var uploadHandler = function uploadHandler() {
    preview.querySelectorAll('.preview-remove').forEach(function (e) {
      e.remove();
    });
    var previewInfo = preview.querySelectorAll('.preview-info');
    previewInfo.forEach(clearPreview);
    onUpload(files);
  };

  open.addEventListener('click', openFile);
  input.insertAdjacentElement('afterend', preview);
  input.insertAdjacentElement('afterend', upload);
  input.insertAdjacentElement('afterend', open);
  preview.addEventListener('click', removeHandler);
  upload.addEventListener('click', uploadHandler);

  var changeHandler = function changeHandler(event) {
    if (!event.target.files.length) {
      return;
    }

    files = Array.from(event.target.files);
    preview.innerHTML = '';
    upload.style.display = 'inline';
    files.forEach(function (file) {
      if (!file.type.match('image')) {
        return;
      }

      var reader = new FileReader();

      reader.onload = function (ev) {
        var src = ev.target.result;
        preview.insertAdjacentHTML('afterbegin', "\n                <div class=\"preview-image\">\n                <div class=\"preview-remove\" data-name=\"".concat(file.name, "\">&times;</div>\n                  <img src=\"").concat(src, "\" alt=\"").concat(file.name, "\" />\n                  <div class=\"preview-info\">\n                        <span>").concat(file.name, "</span>\n                        ").concat(bytesToSize(file.size), "\n                   </div>\n                </div>\n                "));
      };

      reader.readAsDataURL(file);
    });
  };

  input.addEventListener('change', changeHandler);
}
},{}],"app.js":[function(require,module,exports) {
"use strict";

var _compat = _interopRequireDefault(require("firebase/compat"));

require("firebase/storage");

var _upload = require("./upload");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var firebaseConfig = {
  apiKey: "AIzaSyDni54burtpgZfDJ3yHRnZ5w93yju-F5pU",
  authDomain: "fe-upload-d96b6.firebaseapp.com",
  projectId: "fe-upload-d96b6",
  storageBucket: "fe-upload-d96b6.appspot.com",
  messagingSenderId: "24854954994",
  appId: "1:24854954994:web:d9a1fcf3079141e464216b"
}; // Initialize Firebase

_compat.default.initializeApp(firebaseConfig);

var storage = _compat.default.storage();

(0, _upload.upload)('#file', {
  multi: true,
  accept: ['.png', '.jpg', '.jpeg', '.gif'],
  onUpload: function onUpload(files) {
    files.forEach(function (file) {
      var ref = storage.ref("images/".concat(file.name));
      var task = ref.put(file);
      task.on('state_changed', function (snapshot) {
        var percentage = snapshot.bytesTransferred / snapshot.totalBytes;
        console.log(percentage);
      }, function (error) {
        console.log(error);
      }, function () {
        console.log('Complete');
      });
    });
  }
});
console.log('app.js');
},{"firebase/compat":"node_modules/firebase/compat/dist/index.esm.js","firebase/storage":"node_modules/firebase/storage/dist/index.esm.js","./upload":"upload.js"}],"node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "62844" + '/');

  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);

          if (didAccept) {
            handled = true;
          }
        }
      }); // Enable HMR for CSS by default.

      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });

      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else if (location.reload) {
        // `location` global exists in a web worker context but lacks `.reload()` function.
        location.reload();
      }
    }

    if (data.type === 'reload') {
      ws.close();

      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID; // html encode message and stack trace

  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }

  if (checkedAssets[id]) {
    return;
  }

  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}

function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });

    return true;
  }
}
},{}]},{},["node_modules/parcel-bundler/src/builtins/hmr-runtime.js","app.js"], null)
//# sourceMappingURL=/app.c328ef1a.js.map